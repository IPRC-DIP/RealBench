{"task": "aes_rcon", "codeid": 1, "code": "module aes_rcon (\n   input          clk,\n   input          kld,\n   output reg [31:0] out\n);\n   reg [3:0] rcnt; // 4-bit counter (0-15)\n   \n   always @(posedge clk) begin\n       if (kld)\n           rcnt <= 4'd0;\n       else\n           rcnt <= rcnt + 1'b1;\n   end\n\n   always @(posedge clk) begin\n       if (kld) begin\n           out <= 32'h01_00_00_00;\n       end else begin\n           case (rcnt)\n               4'd0: out <= 32'h01_00_00_00;\n               4'd1: out <= 32'h02_00_00_00;\n               4'd2: out <= 32'h04_00_00_00;\n               4'd3: out <= 32'h08_00_00_00;\n               4'd4: out <= 32'h10_00_00_00;\n               4'd5: out <= 32'h20_00_00_00;\n               4'd6: out <= 32'h40_00_00_00;\n               4'd7: out <= 32'h80_00_00_00;\n               4'd8: out <= 32'h1B_00_00_00;\n               4'd9: out <= 32'h36_00_00_00;\n               default: out <= 32'h00_00_00_00;\n           endcase\n       end\n   end\nendmodule", "syntax": -2, "function": -2, "formal": 0, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 1, "code": "module aes_key_expand_128 (\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n    reg [31:0] w0_reg, w1_reg, w2_reg, w3_reg;\n\n    wire [31:0] temp;\n    wire [31:0] subword;\n    wire [31:0] rcon;\n\n    wire [7:0] sbox_in0, sbox_in1, sbox_in2, sbox_in3;\n    wire [7:0] sbox_out0, sbox_out1, sbox_out2, sbox_out3;\n\n    wire [31:0] rot_word;\n\n    wire [31:0] w0_new, w1_new, w2_new, w3_new;\n\n    // Rotate word\n    assign rot_word = {w3_reg[23:16], w3_reg[15:8], w3_reg[7:0], w3_reg[31:24]};\n\n    // S-box inputs\n    assign sbox_in0 = rot_word[31:24];\n    assign sbox_in1 = rot_word[23:16];\n    assign sbox_in2 = rot_word[15:8];\n    assign sbox_in3 = rot_word[7:0];\n\n    // Instantiate S-boxes\n    aes_sbox sbox0 (.a(sbox_in0), .b(sbox_out0));\n    aes_sbox sbox1 (.a(sbox_in1), .b(sbox_out1));\n    aes_sbox sbox2 (.a(sbox_in2), .b(sbox_out2));\n    aes_sbox sbox3 (.a(sbox_in3), .b(sbox_out3));\n\n    // Substitute word\n    assign subword = {sbox_out0, sbox_out1, sbox_out2, sbox_out3};\n\n    // Instantiate round constant module\n    aes_rcon rcon_inst (\n        .clk(clk),\n        .kld(kld),\n        .out(rcon)\n    );\n\n    // Calculate temp\n    assign temp = subword ^ rcon;\n\n    // Calculate new words\n    assign w0_new = w0_reg ^ temp;\n    assign w1_new = w1_reg ^ w0_new;\n    assign w2_new = w2_reg ^ w1_new;\n    assign w3_new = w3_reg ^ w2_new;\n\n    // Key expansion process\n    always @(posedge clk) begin\n        if (kld) begin\n            w0_reg <= key[127:96];\n            w1_reg <= key[95:64];\n            w2_reg <= key[63:32];\n            w3_reg <= key[31:0];\n        end else begin\n            w0_reg <= w0_new;\n            w1_reg <= w1_new;\n            w2_reg <= w2_new;\n            w3_reg <= w3_new;\n        end\n    end\n\n    // Output round key words\n    assign wo_0 = w0_reg;\n    assign wo_1 = w1_reg;\n    assign wo_2 = w2_reg;\n    assign wo_3 = w3_reg;\n\nendmodule\n\nmodule aes_rcon (\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\n    reg [7:0] rcon_reg;\n\n    always @(posedge clk) begin\n        if (kld) begin\n            rcon_reg <= 8'h8d;\n        end else begin\n            if (rcon_reg[7] == 1'b1)\n                rcon_reg <= (rcon_reg << 1) ^ 8'h1b;\n            else\n                rcon_reg <= rcon_reg << 1;\n        end\n    end\n\n    assign out = {rcon_reg, 24'h000000};\n\nendmodule\n\nmodule aes_sbox (\n    input [7:0] a,\n    output reg [7:0] b\n);\n\n    always @(*) begin\n        case (a)\n            8'h00: b = 8'h63;\n            8'h01: b = 8'h7c;\n            8'h02: b = 8'h77;\n            8'h03: b = 8'h7b;\n            8'h04: b = 8'hf2;\n            8'h05: b = 8'h6b;\n            8'h06: b = 8'h6f;\n            8'h07: b = 8'hc5;\n            8'h08: b = 8'h30;\n            8'h09: b = 8'h01;\n            8'h0a: b = 8'h67;\n            8'h0b: b = 8'h2b;\n            8'h0c: b = 8'hfe;\n            8'h0d: b = 8'hd7;\n            8'h0e: b = 8'hab;\n            8'h0f: b = 8'h76;\n            8'h10: b = 8'hca;\n            8'h11: b = 8'h82;\n            8'h12: b = 8'hc9;\n            8'h13: b = 8'h7d;\n            8'h14: b = 8'hfa;\n            8'h15: b = 8'h59;\n            8'h16: b = 8'h47;\n            8'h17: b = 8'hf0;\n            8'h18: b = 8'had;\n            8'h19: b = 8'hd4;\n            8'h1a: b = 8'ha2;\n            8'h1b: b = 8'haf;\n            8'h1c: b = 8'h9c;\n            8'h1d: b = 8'ha4;\n            8'h1e: b = 8'h72;\n            8'h1f: b = 8'hc0;\n            8'h20: b = 8'hb7;\n            8'h21: b = 8'hfd;\n            8'h22: b = 8'h93;\n            8'h23: b = 8'h26;\n            8'h24: b = 8'h36;\n            8'h25: b = 8'h3f;\n            8'h26: b = 8'hf7;\n            8'h27: b = 8'hcc;\n            8'h28: b = 8'h34;\n            8'h29: b = 8'ha5;\n            8'h2a: b = 8'he5;\n            8'h2b: b = 8'hf1;\n            8'h2c: b = 8'h71;\n            8'h2d: b = 8'hd8;\n            8'h2e: b = 8'h31;\n            8'h2f: b = 8'h15;\n            8'h30: b = 8'h04;\n            8'h31: b = 8'hc7;\n            8'h32: b = 8'h23;\n            8'h33: b = 8'hc3;\n            8'h34: b = 8'h18;\n            8'h35: b = 8'h96;\n            8'h36: b = 8'h05;\n            8'h37: b = 8'h9a;\n            8'h38: b = 8'h07;\n            8'h39: b = 8'h12;\n            8'h3a: b = 8'h80;\n            8'h3b: b = 8'he2;\n            8'h3c: b = 8'heb;\n            8'h3d: b = 8'h27;\n            8'h3e: b = 8'hb2;\n            8'h3f: b = 8'h75;\n            8'h40: b = 8'h09;\n            8'h41: b = 8'h83;\n            8'h42: b = 8'h2c;\n            8'h43: b = 8'h1a;\n            8'h44: b = 8'h1b;\n            8'h45: b = 8'h6e;\n            8'h46: b = 8'h5a;\n            8'h47: b = 8'ha0;\n            8'h48: b = 8'h52;\n            8'h49: b = 8'h3b;\n            8'h4a: b = 8'hd6;\n            8'h4b: b = 8'hb3;\n            8'h4c: b = 8'h29;\n            8'h4d: b = 8'he3;\n            8'h4e: b = 8'h2f;\n            8'h4f: b = 8'h84;\n            8'h50: b = 8'h53;\n            8'h51: b = 8'hd1;\n            8'h52: b = 8'h00;\n            8'h53: b = 8'hed;\n            8'h54: b = 8'h20;\n            8'h55: b = 8'hfc;\n            8'h56: b = 8'hb1;\n            8'h57: b = 8'h5b;\n            8'h58: b = 8'h6a;\n            8'h59: b = 8'hcb;\n            8'h5a: b = 8'hbe;\n            8'h5b: b = 8'h39;\n            8'h5c: b = 8'h4a;\n            8'h5d: b = 8'h4c;\n            8'h5e: b = 8'h58;\n            8'h5f: b = 8'hcf;\n            8'h60: b = 8'hd0;\n            8'h61: b = 8'hef;\n            8'h62: b = 8'haa;\n            8'h63: b = 8'hfb;\n            8'h64: b = 8'h43;\n            8'h65: b = 8'h4d;\n            8'h66: b = 8'h33;\n            8'h67: b = 8'h85;\n            8'h68: b = 8'h45;\n            8'h69: b = 8'hf9;\n            8'h6a: b = 8'h02;\n            8'h6b: b = 8'h7f;\n            8'h6c: b = 8'h50;\n            8'h6d: b = 8'h3c;\n            8'h6e: b = 8'h9f;\n            8'h6f: b = 8'ha8;\n            8'h70: b = 8'h51;\n            8'h71: b = 8'ha3;\n            8'h72: b = 8'h40;\n            8'h73: b = 8'h8f;\n            8'h74: b = 8'h92;\n            8'h75: b = 8'h9d;\n            8'h76: b = 8'h38;\n            8'h77: b = 8'hf5;\n            8'h78: b = 8'hbc;\n            8'h79: b = 8'hb6;\n            8'h7a: b = 8'hda;\n            8'h7b: b = 8'h21;\n            8'h7c: b = 8'h10;\n            8'h7d: b = 8'hff;\n            8'h7e: b = 8'hf3;\n            8'h7f: b = 8'hd2;\n            8'h80: b = 8'hcd;\n            8'h81: b = 8'h0c;\n            8'h82: b = 8'h13;\n            8'h83: b = 8'hec;\n            8'h84: b = 8'h5f;\n            8'h85: b = 8'h97;\n            8'h86: b = 8'h44;\n            8'h87: b = 8'h17;\n            8'h88: b = 8'hc4;\n            8'h89: b = 8'ha7;\n            8'h8a: b = 8'h7e;\n            8'h8b: b = 8'h3d;\n            8'h8c: b = 8'h64;\n            8'h8d: b = 8'h5d;\n            8'h8e: b = 8'h19;\n            8'h8f: b = 8'h73;\n            8'h90: b = 8'h60;\n            8'h91: b = 8'h81;\n            8'h92: b = 8'h4f;\n            8'h93: b = 8'hdc;\n            8'h94: b = 8'h22;\n            8'h95: b = 8'h2a;\n            8'h96: b = 8'h90;\n            8'h97: b = 8'h88;\n            8'h98: b = 8'h46;\n            8'h99: b = 8'hee;\n            8'h9a: b = 8'hb8;\n            8'h9b: b = 8'h14;\n            8'h9c: b = 8'hde;\n            8'h9d: b = 8'h5e;\n            8'h9e: b = 8'h0b;\n            8'h9f: b = 8'hdb;\n            8'ha0: b = 8'he0;\n            8'ha1: b = 8'h32;\n            8'ha2: b = 8'h3a;\n            8'ha3: b = 8'h0a;\n            8'ha4: b = 8'h49;\n            8'ha5: b = 8'h06;\n            8'ha6: b = 8'h24;\n            8'ha7: b = 8'h5c;\n            8'ha8: b = 8 hc2;\n            8'ha9: b = 8'hd3;\n            8'haa: b = 8'hac;\n            8'hab: b = 8'h62;\n            8'hac: b = 8'h91;\n            8'had: b = 8'h95;\n            8'hae: b = 8'he4;\n            8'haf: b = 8'h79;\n            8'hb0: b = 8'he7;\n            8'hb1: b = 8'hc8;\n            8'hb2: b = 8'h37;\n            8'hb3: b = 8'h6d;\n            8'hb4: b = 8'h8d;\n            8'hb5: b = 8'hd5;\n            8'hb6: b = 8'h4e;\n            8'hb7: b = 8'ha9;\n            8'hb8: b = 8'h6c;\n            8'hb9: b = 8'h56;\n            8'hba: b = 8'hf4;\n            8'hbb: b = 8'hea;\n            8'hbc: b = 8'h65;\n            8'hbd: b = 8'h7a;\n            8'hbe: b = 8'hae;\n            8'hbf: b = 8'h08;\n            8'hc0: b = 8'hba;\n            8'hc1: b = 8'h78;\n            8'hc2: b = 8'h25;\n            8'hc3: b = 8'h2e;\n            8'hc4: b = 8'h1c;\n            8'hc5: b = 8'ha6;\n            8'hc6: b = 8'hb4;\n            8'hc7: b = 8'hc6;\n            8'hc8: b = 8'he8;\n            8'hc9: b = 8'hdd;\n            8'hca: b = 8'h74;\n            8'hcb: b = 8'h1f;\n            8'hcc: b = 8'h4b;\n            8'hcd: b = 8'hbd;\n            8'hce: b = 8'h8b;\n            8'hcf: b = 8'h8a;\n            8'hd0: b = 8'h70;\n            8'hd1: b = 8'h3e;\n            8'hd2: b = 8'hb5;\n            8'hd3: b = 8'h66;\n            8'hd4: b = 8'h48;\n            8'hd5: b = 8'h03;\n            8'hd6: b = 8'hf6;\n            8'hd7: b = 8'h0e;\n            8'hd8: b = 8'h61;\n            8'hd9: b = 8'h35;\n            8'hda: b = 8'h57;\n            8'hdb: b = 8'hb9;\n            8'hdc: b = 8'h86;\n            8'hdd: b = 8'hc1;\n            8'hde: b = 8'h1d;\n            8'hdf: b = 8'h9e;\n            8'he0: b = 8'he1;\n            8'he1: b = 8'hf8;\n            8'he2: b = 8'h98;\n            8'he3: b = 8'h11;\n            8'he4: b = 8'h69;\n            8'he5: b = 8'hd9;\n            8'he6: b = 8'h8e;\n            8'he7: b = 8'h94;\n            8'he8: b = 8'h9b;\n            8'he9: b = 8'h1e;\n            8'hea: b = 8'h87;\n            8'heb: b = 8'he9;\n            8'hec: b = 8'hce;\n            8'hed: b = 8'h55;\n            8'hee: b = 8'h28;\n            8'hef: b = 8'hdf;\n            8'hf0: b = 8'h8c;\n            8'hf1: b = 8'ha1;\n            8'hf2: b = 8'h89;\n            8'hf3: b = 8'h0d;\n            8'hf4: b = 8'hbf;\n            8'hf5: b = 8'he6;\n            8'hf6: b = 8'h42;\n            8'hf7: b = 8'h68;\n            8'hf8: b = 8'h41;\n            8'hf9: b = 8'h99;\n            8'hfa: b = 8'h2d;\n            8'hfb: b = 8'h0f;\n            8'hfc: b = 8'hb0;\n            8'hfd: b = 8'h54;\n            8'hfe: b = 8'hbb;\n            8'hff: b = 8'h16;\n        endcase\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": 0, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 1, "code": "module aes_sbox(\n    input  [7:0] a,\n    output reg [7:0] b\n);\n    always @(*) begin\n        case (a)\n            8'h00: b = 8'h63;\n            8'h01: b = 8'h7c;\n            8'h02: b = 8'h77;\n            8'h03: b = 8'h7b;\n            8'h04: b = 8'hf2;\n            8'h05: b = 8'h6b;\n            8'h06: b = 8'h6f;\n            8'h07: b = 8'hc5;\n            8'h08: b = 8'h30;\n            8'h09: b = 8'h01;\n            8'h0a: b = 8'h67;\n            8'h0b: b = 8'h2b;\n            8'h0c: b = 8'hfe;\n            8'h0d: b = 8'hd7;\n            8'h0e: b = 8'hab;\n            8'h0f: b = 8'h76;\n            8'h10: b = 8'hca;\n            8'h11: b = 8'h82;\n            8'h12: b = 8'hc9;\n            8'h13: b = 8'h7d;\n            8'h14: b = 8'hfa;\n            8'h15: b = 8'h59;\n            8'h16: b = 8'h47;\n            8'h17: b = 8'hf0;\n            8'h18: b = 8'had;\n            8'h19: b = 8'hd4;\n            8'h1a: b = 8'ha2;\n            8'h1b: b = 8'haf;\n            8'h1c: b = 8'h9c;\n            8'h1d: b = 8'ha4;\n            8'h1e: b = 8'h72;\n            8'h1f: b = 8'hc0;\n            8'h20: b = 8'hb7;\n            8'h21: b = 8'hfd;\n            8'h22: b = 8'h93;\n            8'h23: b = 8'h26;\n            8'h24: b = 8'h36;\n            8'h25: b = 8'h3f;\n            8'h26: b = 8'hf7;\n            8'h27: b = 8'hcc;\n            8'h28: b = 8'h34;\n            8'h29: b = 8'ha5;\n            8'h2a: b = 8'he5;\n            8'h2b: b = 8'hf1;\n            8'h2c: b = 8'h71;\n            8'h2d: b = 8'hd8;\n            8'h2e: b = 8'h31;\n            8'h2f: b = 8'h15;\n            8'h30: b = 8'h04;\n            8'h31: b = 8'hc7;\n            8'h32: b = 8'h23;\n            8'h33: b = 8'hc3;\n            8'h34: b = 8'h18;\n            8'h35: b = 8'h96;\n            8'h36: b = 8'h05;\n            8'h37: b = 8'h9a;\n            8'h38: b = 8'h07;\n            8'h39: b = 8'h12;\n            8'h3a: b = 8'h80;\n            8'h3b: b = 8'he2;\n            8'h3c: b = 8'heb;\n            8'h3d: b = 8'h27;\n            8'h3e: b = 8'hb2;\n            8'h3f: b = 8'h75;\n            8'h40: b = 8'h09;\n            8'h41: b = 8'h83;\n            8'h42: b = 8'h2c;\n            8'h43: b = 8'h1a;\n            8'h44: b = 8'h1b;\n            8'h45: b = 8'h6e;\n            8'h46: b = 8'h5a;\n            8'h47: b = 8'ha0;\n            8'h48: b = 8'h52;\n            8'h49: b = 8'h3b;\n            8'h4a: b = 8'hd6;\n            8'h4b: b = 8'hb3;\n            8'h4c: b = 8'h29;\n            8'h4d: b = 8'he3;\n            8'h4e: b = 8'h2f;\n            8'h4f: b = 8'h84;\n            8'h50: b = 8'h53;\n            8'h51: b = 8'hd1;\n            8'h52: b = 8'h00;\n            8'h53: b = 8'hed;\n            8'h54: b = 8'h20;\n            8'h55: b = 8'hfc;\n            8'h56: b = 8'hb1;\n            8'h57: b = 8'h5b;\n            8'h58: b = 8'h6a;\n            8'h59: b = 8'hcb;\n            8'h5a: b = 8'hbe;\n            8'h5b: b = 8'h39;\n            8'h5c: b = 8'h4a;\n            8'h5d: b = 8'h4c;\n            8'h5e: b = 8'h58;\n            8'h5f: b = 8'hcf;\n            8'h60: b = 8'hd0;\n            8'h61: b = 8'hef;\n            8'h62: b = 8'haa;\n            8'h63: b = 8'hfb;\n            8'h64: b = 8'h43;\n            8'h65: b = 8'h4d;\n            8'h66: b = 8'h33;\n            8'h67: b = 8'h85;\n            8'h68: b = 8'h45;\n            8'h69: b = 8'hf9;\n            8'h6a: b = 8'h02;\n            8'h6b: b = 8'h7f;\n            8'h6c: b = 8'h50;\n            8'h6d: b = 8'h3c;\n            8'h6e: b = 8'h9f;\n            8'h6f: b = 8'ha8;\n            8'h70: b = 8'h51;\n            8'h71: b = 8'ha3;\n            8'h72: b = 8'h40;\n            8'h73: b = 8'h8f;\n            8'h74: b = 8'h92;\n            8'h75: b = 8'h9d;\n            8'h76: b = 8'h38;\n            8'h77: b = 8'hf5;\n            8'h78: b = 8'hbc;\n            8'h79: b = 8'hb6;\n            8'h7a: b = 8'hda;\n            8'h7b: b = 8'h21;\n            8'h7c: b = 8'h10;\n            8'h7d: b = 8'hff;\n            8'h7e: b = 8'hf3;\n            8'h7f: b = 8'hd2;\n            8'h80: b = 8'hcd;\n            8'h81: b = 8'h0c;\n            8'h82: b = 8'h13;\n            8'h83: b = 8'hec;\n            8'h84: b = 8'h5f;\n            8'h85: b = 8'h97;\n            8'h86: b = 8'h44;\n            8'h87: b = 8'h17;\n            8'h88: b = 8'hc4;\n            8'h89: b = 8'ha7;\n            8'h8a: b = 8'h7e;\n            8'h8b: b = 8'h3d;\n            8'h8c: b = 8'h64;\n            8'h8d: b = 8'h5d;\n            8'h8e: b = 8'h19;\n            8'h8f: b = 8'h73;\n            8'h90: b = 8'h60;\n            8'h91: b = 8'h81;\n            8'h92: b = 8'h4f;\n            8'h93: b = 8'hdc;\n            8'h94: b = 8'h22;\n            8'h95: b = 8'h2a;\n            8'h96: b = 8'h90;\n            8'h97: b = 8'h88;\n            8'h98: b = 8'h46;\n            8'h99: b = 8'hee;\n            8'h9a: b = 8'hb8;\n            8'h9b: b = 8'h14;\n            8'h9c: b = 8'hde;\n            8'h9d: b = 8'h5e;\n            8'h9e: b = 8'h0b;\n            8'h9f: b = 8'hdb;\n            8'ha0: b = 8'he0;\n            8'ha1: b = 8'h32;\n            8'ha2: b = 8'h3a;\n            8'ha3: b = 8'h0a;\n            8'ha4: b = 8'h49;\n            8'ha5: b = 8'h06;\n            8'ha6: b = 8'h24;\n            8'ha7: b = 8'h5c;\n            8'ha8: b = 8'hc2;\n            8'ha9: b = 8'hd3;\n            8'haa: b = 8'hac;\n            8'hab: b = 8'h62;\n            8'hac: b = 8'h91;\n            8'had: b = 8'h95;\n            8'hae: b = 8'he4;\n            8'haf: b = 8'h79;\n            8'hb0: b = 8'he7;\n            8'hb1: b = 8'hc8;\n            8'hb2: b = 8'h37;\n            8'hb3: b = 8'h6d;\n            8'hb4: b = 8'h8d;\n            8'hb5: b = 8'hd5;\n            8'hb6: b = 8'h4e;\n            8'hb7: b = 8'ha9;\n            8'hb8: b = 8'h6c;\n            8'hb9: b = 8'h56;\n            8'hba: b = 8'hf4;\n            8'hbb: b = 8'hea;\n            8'hbc: b = 8'h65;\n            8'hbd: b = 8'h7a;\n            8'hbe: b = 8'hae;\n            8'hbf: b = 8'h08;\n            8'hc0: b = 8'hba;\n            8'hc1: b = 8'h78;\n            8'hc2: b = 8'h25;\n            8'hc3: b = 8'h2e;\n            8'hc4: b = 8'h1c;\n            8'hc5: b = 8'ha6;\n            8'hc6: b = 8'hb4;\n            8'hc7: b = 8'hc6;\n            8'hc8: b = 8'he8;\n            8'hc9: b = 8'hdd;\n            8'hca: b = 8'h74;\n            8'hcb: b = 8'h1f;\n            8'hcc: b = 8'h4b;\n            8'hcd: b = 8'hbd;\n            8'hce: b = 8'h8b;\n            8'hcf: b = 8'h8a;\n            8'hd0: b = 8'h70;\n            8'hd1: b = 8'h3e;\n            8'hd2: b = 8'hb5;\n            8'hd3: b = 8'h66;\n            8'hd4: b = 8'h48;\n            8'hd5: b = 8'h03;\n            8'hd6: b = 8'hf6;\n            8'hd7: b = 8'h0e;\n            8'hd8: b = 8'h61;\n            8'hd9: b = 8'h35;\n            8'hda: b = 8'h57;\n            8'hdb: b = 8'hb9;\n            8'hdc: b = 8'h86;\n            8'hdd: b = 8'hc1;\n            8'hde: b = 8'h1d;\n            8'hdf: b = 8'h9e;\n            8'he0: b = 8'he1;\n            8'he1: b = 8'hf8;\n            8'he2: b = 8'h98;\n            8'he3: b = 8'h11;\n            8'he4: b = 8'h69;\n            8'he5: b = 8'hd9;\n            8'he6: b = 8'h8e;\n            8'he7: b = 8'h94;\n            8'he8: b = 8'h9b;\n            8'he9: b = 8'h1e;\n            8'hea: b = 8'h87;\n            8'heb: b = 8'he9;\n            8'hec: b = 8'hce;\n            8'hed: b = 8'h55;\n            8'hee: b = 8'h28;\n            8'hef: b = 8'hdf;\n            8'hf0: b = 8'h8c;\n            8'hf1: b = 8'ha1;\n            8'hf2: b = 8'h89;\n            8'hf3: b = 8'h0d;\n            8'hf4: b = 8'hbf;\n            8'hf5: b = 8'he6;\n            8'hf6: b = 8'h42;\n            8'hf7: b = 8'h68;\n            8'hf8: b = 8'h41;\n            8'hf9: b = 8'h99;\n            8'hfa: b = 8'h2d;\n            8'hfb: b = 8'h0f;\n            8'hfc: b = 8'hb0;\n            8'hfd: b = 8'h54;\n            8'hfe: b = 8'hbb;\n            8'hff: b = 8'h16;\n            default: b = 8'h00;\n        endcase\n    end\nendmodule", "syntax": -2, "function": -2, "formal": 0, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 1, "code": "module aes_cipher_top(\n    input          clk,\n    input          rst,\n    input          ld,\n    output reg     done,\n    input  [127:0] key,\n    input  [127:0] text_in,\n    output [127:0] text_out\n);\n    // Internal registers and wires\n    reg [127:0] text_in_r;              // Input text register\n    reg [7:0]   sa      [0:3][0:3];     // State array\n    reg [3:0]   dcnt;                   // Round counter\n    reg         ld_r;                   // Load register\n    reg [127:0] text_out_reg;           // Output register\n\n    wire [31:0] round_key [0:3];        // Round key words\n    wire [7:0]  subbytes_out   [0:3][0:3]; // Output of SubBytes\n    wire [7:0]  shiftrows_out  [0:3][0:3]; // Output of ShiftRows\n    wire [7:0]  mixcolumns_out [0:3][0:3]; // Output of MixColumns\n    wire [7:0]  rk             [0:3][0:3]; // Round key bytes\n\n    assign text_out = text_out_reg;     // Connect internal register to output port\n\n    // Function to multiply by 2 in GF(2^8)\n    function [7:0] xtime;\n        input [7:0] b;\n        begin\n            xtime = {b[6:0],1'b0} ^ (8'h1B & {8{b[7]}});\n        end\n    endfunction\n\n    // Function to multiply by 2\n    function [7:0] mul_by_02;\n        input [7:0] b;\n        begin\n            mul_by_02 = xtime(b);\n        end\n    endfunction\n\n    // Function to multiply by 3\n    function [7:0] mul_by_03;\n        input [7:0] b;\n        begin\n            mul_by_03 = xtime(b) ^ b;\n        end\n    endfunction\n\n    // Instantiate key expansion module\n    aes_key_expand_128 u_key_expand (\n        .clk (clk),\n        .kld (ld),\n        .key (key),\n        .wo_0(round_key[0]),\n        .wo_1(round_key[1]),\n        .wo_2(round_key[2]),\n        .wo_3(round_key[3])\n    );\n\n    // Instantiate 16 S-boxes for SubBytes transformation\n    genvar i, j;\n    generate\n        for (i = 0; i < 4; i = i + 1) begin: subbytes_row\n            for (j = 0; j < 4; j = j + 1) begin: subbytes_col\n                aes_sbox u_sbox (\n                    .a(sa[i][j]),\n                    .b(subbytes_out[i][j])\n                );\n            end\n        end\n    endgenerate\n\n    // ShiftRows transformation\n    // Row 0 - No shift\n    assign shiftrows_out[0][0] = subbytes_out[0][0];\n    assign shiftrows_out[0][1] = subbytes_out[0][1];\n    assign shiftrows_out[0][2] = subbytes_out[0][2];\n    assign shiftrows_out[0][3] = subbytes_out[0][3];\n    // Row 1 - Shift left by 1\n    assign shiftrows_out[1][0] = subbytes_out[1][1];\n    assign shiftrows_out[1][1] = subbytes_out[1][2];\n    assign shiftrows_out[1][2] = subbytes_out[1][3];\n    assign shiftrows_out[1][3] = subbytes_out[1][0];\n    // Row 2 - Shift left by 2\n    assign shiftrows_out[2][0] = subbytes_out[2][2];\n    assign shiftrows_out[2][1] = subbytes_out[2][3];\n    assign shiftrows_out[2][2] = subbytes_out[2][0];\n    assign shiftrows_out[2][3] = subbytes_out[2][1];\n    // Row 3 - Shift left by 3\n    assign shiftrows_out[3][0] = subbytes_out[3][3];\n    assign shiftrows_out[3][1] = subbytes_out[3][0];\n    assign shiftrows_out[3][2] = subbytes_out[3][1];\n    assign shiftrows_out[3][3] = subbytes_out[3][2];\n\n    // MixColumns transformation\n    genvar c;\n    generate\n        for (c = 0; c < 4; c = c + 1) begin: mix_columns\n            wire [7:0] s0, s1, s2, s3;\n            assign s0 = shiftrows_out[0][c];\n            assign s1 = shiftrows_out[1][c];\n            assign s2 = shiftrows_out[2][c];\n            assign s3 = shiftrows_out[3][c];\n\n            assign mixcolumns_out[0][c] = mul_by_02(s0) ^ mul_by_03(s1) ^ s2 ^ s3;\n            assign mixcolumns_out[1][c] = s0 ^ mul_by_02(s1) ^ mul_by_03(s2) ^ s3;\n            assign mixcolumns_out[2][c] = s0 ^ s1 ^ mul_by_02(s2) ^ mul_by_03(s3);\n            assign mixcolumns_out[3][c] = mul_by_03(s0) ^ s1 ^ s2 ^ mul_by_02(s3);\n        end\n    endgenerate\n\n    // Extract round key bytes\n    assign rk[0][0] = round_key[0][31:24];\n    assign rk[1][0] = round_key[0][23:16];\n    assign rk[2][0] = round_key[0][15:8];\n    assign rk[3][0] = round_key[0][7:0];\n\n    assign rk[0][1] = round_key[1][31:24];\n    assign rk[1][1] = round_key[1][23:16];\n    assign rk[2][1] = round_key[1][15:8];\n    assign rk[3][1] = round_key[1][7:0];\n\n    assign rk[0][2] = round_key[2][31:24];\n    assign rk[1][2] = round_key[2][23:16];\n    assign rk[2][2] = round_key[2][15:8];\n    assign rk[3][2] = round_key[2][7:0];\n\n    assign rk[0][3] = round_key[3][31:24];\n    assign rk[1][3] = round_key[3][23:16];\n    assign rk[2][3] = round_key[3][15:8];\n    assign rk[3][3] = round_key[3][7:0];\n\n    // State encoding\n    parameter IDLE        = 3'b000,\n              INIT_ROUND  = 3'b001,\n              ROUND_OP    = 3'b010,\n              FINAL_ROUND = 3'b011,\n              DONE        = 3'b100;\n\n    reg [2:0] state, next_state;\n\n    // State register\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            state <= IDLE;\n        else\n            state <= next_state;\n    end\n\n    // Next state logic\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (ld)\n                    next_state = INIT_ROUND;\n                else\n                    next_state = IDLE;\n            end\n            INIT_ROUND: begin\n                next_state = ROUND_OP;\n            end\n            ROUND_OP: begin\n                if (dcnt == 4'h2)\n                    next_state = FINAL_ROUND;\n                else\n                    next_state = ROUND_OP;\n            end\n            FINAL_ROUND: begin\n                next_state = DONE;\n            end\n            DONE: begin\n                if (ld)\n                    next_state = INIT_ROUND;\n                else\n                    next_state = IDLE;\n            end\n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Round counter\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            dcnt <= 4'h0;\n        else if (state == INIT_ROUND)\n            dcnt <= 4'hB;\n        else if ((state == ROUND_OP || state == FINAL_ROUND) && dcnt != 4'h0)\n            dcnt <= dcnt - 1;\n    end\n\n    // Load register\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            ld_r <= 1'b0;\n        else\n            ld_r <= ld;\n    end\n\n    // Input text register\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            text_in_r <= 128'h0;\n        else if (state == INIT_ROUND)\n            text_in_r <= text_in;\n    end\n\n    // Main operation\n    integer r, c;\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            done <= 1'b0;\n            text_out_reg <= 128'h0;\n            for (r = 0; r < 4; r = r + 1)\n                for (c = 0; c < 4; c = c + 1)\n                    sa[r][c] <= 8'h00;\n        end else begin\n            case (state)\n                INIT_ROUND: begin\n                    // Initial AddRoundKey with input key\n                    sa[0][0] <= text_in_r[127:120] ^ key[127:120];\n                    sa[1][0] <= text_in_r[119:112] ^ key[119:112];\n                    sa[2][0] <= text_in_r[111:104] ^ key[111:104];\n                    sa[3][0] <= text_in_r[103:96 ] ^ key[103:96 ];\n\n                    sa[0][1] <= text_in_r[95 :88 ] ^ key[95 :88 ];\n                    sa[1][1] <= text_in_r[87 :80 ] ^ key[87 :80 ];\n                    sa[2][1] <= text_in_r[79 :72 ] ^ key[79 :72 ];\n                    sa[3][1] <= text_in_r[71 :64 ] ^ key[71 :64 ];\n\n                    sa[0][2] <= text_in_r[63 :56 ] ^ key[63 :56 ];\n                    sa[1][2] <= text_in_r[55 :48 ] ^ key[55 :48 ];\n                    sa[2][2] <= text_in_r[47 :40 ] ^ key[47 :40 ];\n                    sa[3][2] <= text_in_r[39 :32 ] ^ key[39 :32 ];\n\n                    sa[0][3] <= text_in_r[31 :24 ] ^ key[31 :24 ];\n                    sa[1][3] <= text_in_r[23 :16 ] ^ key[23 :16 ];\n                    sa[2][3] <= text_in_r[15 :8  ] ^ key[15 :8  ];\n                    sa[3][3] <= text_in_r[7  :0  ] ^ key[7  :0  ];\n                end\n                ROUND_OP: begin\n                    // Perform SubBytes, ShiftRows, MixColumns, and AddRoundKey\n                    for (r = 0; r < 4; r = r + 1) begin\n                        for (c = 0; c < 4; c = c + 1) begin\n                            sa[r][c] <= mixcolumns_out[r][c] ^ rk[r][c];\n                        end\n                    end\n                end\n                FINAL_ROUND: begin\n                    // Perform SubBytes, ShiftRows, and AddRoundKey (no MixColumns)\n                    for (r = 0; r < 4; r = r + 1) begin\n                        for (c = 0; c < 4; c = c + 1) begin\n                            sa[r][c] <= shiftrows_out[r][c] ^ rk[r][c];\n                        end\n                    end\n                end\n                DONE: begin\n                    // Output the final ciphertext\n                    text_out_reg <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                                     sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                                     sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                                     sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n                    done <= 1'b1;\n                end\n                default: begin\n                    done <= 1'b0;\n                end\n            endcase\n        end\n    end\n\nendmodule\n\n// Submodule: AES Key Expansion for 128-bit key\nmodule aes_key_expand_128 (\n    input           clk,\n    input           kld,\n    input  [127:0]  key,\n    output [31:0]   wo_0,\n    output [31:0]   wo_1,\n    output [31:0]   wo_2,\n    output [31:0]   wo_3\n);\n    // Key expansion logic to be implemented\n    // For demonstration, pass the key directly as round key\n    assign wo_0 = key[127:96];\n    assign wo_1 = key[95:64];\n    assign wo_2 = key[63:32];\n    assign wo_3 = key[31:0];\nendmodule\n\n// Submodule: AES S-box\nmodule aes_sbox (\n    input  [7:0] a,\n    output [7:0] b\n);\n    // S-box lookup table\n    reg [7:0] sbox [0:255];\n    initial begin\n        // Initialize S-box values (partial list for brevity)\n        sbox[0]   = 8'h63; sbox[1]   = 8'h7c; sbox[2]   = 8'h77; sbox[3]   = 8'h7b;\n        // ...\n        sbox[254] = 8'h16; sbox[255] = 8'hc5;\n    end\n    assign b = sbox[a];\nendmodule", "syntax": -2, "function": -2, "formal": 0, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 1, "code": "module aes_inv_cipher_top(\n    input wire clk,\n    input wire rst,\n    input wire kld,\n    input wire ld,\n    input wire [127:0] key,\n    input wire [127:0] text_in,\n    output reg done,\n    output reg [127:0] text_out\n);\n\n// Internal registers and wires\nreg [127:0] text_in_r;\nreg [7:0] sa00, sa01, sa02, sa03;\nreg [7:0] sa10, sa11, sa12, sa13;\nreg [7:0] sa20, sa21, sa22, sa23;\nreg [7:0] sa30, sa31, sa32, sa33;\nreg [3:0] dcnt;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] kb [0:10];\n\nwire [31:0] wk0, wk1, wk2, wk3;\nwire [31:0] w0, w1, w2, w3;\nwire [127:0] current_key;\nwire [3:0] rd_cnt;\n\n// Submodule instantiation\naes_key_expand_128 u0 (\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(wk0),\n    .wo_1(wk1),\n    .wo_2(wk2),\n    .wo_3(wk3)\n);\n\n// Key buffer loading\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        kcnt <= 4'hA;\n    end else if (kld) begin\n        kcnt <= 4'hA;\n    end else if (kcnt != 4'h0) begin\n        kcnt <= kcnt - 1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (kld || (kcnt != 4'h0)) begin\n        kb[kcnt] <= {wk3, wk2, wk1, wk0};\n    end\nend\n\n// Data load flag\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        ld_r <= 1'b0;\n    end else if (ld) begin\n        ld_r <= 1'b1;\n    end else if (dcnt != 4'h0) begin\n        ld_r <= 1'b0;\n    end\nend\n\n// Decryption round counter\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'h0;\n    end else if (ld_r) begin\n        dcnt <= 4'h1;\n    end else if (dcnt != 4'h0) begin\n        dcnt <= dcnt + 1;\n    end\nend\n\n// Decryption done signal\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        done <= 1'b0;\n    end else if (dcnt == 4'hB) begin\n        done <= 1'b1;\n    end else if (ld) begin\n        done <= 1'b0;\n    end\nend\n\n// Input data buffering\nalways @(posedge clk) begin\n    if (ld) begin\n        text_in_r <= text_in;\n    end\nend\n\n// Current round key\nassign rd_cnt = 4'hB - dcnt; // rd_cnt = 11 - dcnt\nassign current_key = kb[rd_cnt];\nassign w0 = current_key[127:96];\nassign w1 = current_key[95:64];\nassign w2 = current_key[63:32];\nassign w3 = current_key[31:0];\n\n// State matrix update\nalways @(posedge clk) begin\n    if (ld_r) begin\n        // Initial AddRoundKey operation and state matrix loading\n        sa00 <= text_in_r[127:120] ^ w0[31:24];\n        sa01 <= text_in_r[119:112] ^ w0[23:16];\n        sa02 <= text_in_r[111:104] ^ w0[15:8];\n        sa03 <= text_in_r[103:96]  ^ w0[7:0];\n        \n        sa10 <= text_in_r[95:88]   ^ w1[31:24];\n        sa11 <= text_in_r[87:80]   ^ w1[23:16];\n        sa12 <= text_in_r[79:72]   ^ w1[15:8];\n        sa13 <= text_in_r[71:64]   ^ w1[7:0];\n        \n        sa20 <= text_in_r[63:56]   ^ w2[31:24];\n        sa21 <= text_in_r[55:48]   ^ w2[23:16];\n        sa22 <= text_in_r[47:40]   ^ w2[15:8];\n        sa23 <= text_in_r[39:32]   ^ w2[7:0];\n        \n        sa30 <= text_in_r[31:24]   ^ w3[31:24];\n        sa31 <= text_in_r[23:16]   ^ w3[23:16];\n        sa32 <= text_in_r[15:8]    ^ w3[15:8];\n        sa33 <= text_in_r[7:0]     ^ w3[7:0];\n    end else begin\n        // Update state matrix with next round values\n        sa00 <= sa00_next;\n        sa01 <= sa01_next;\n        sa02 <= sa02_next;\n        sa03 <= sa03_next;\n\n        sa10 <= sa10_next;\n        sa11 <= sa11_next;\n        sa12 <= sa12_next;\n        sa13 <= sa13_next;\n\n        sa20 <= sa20_next;\n        sa21 <= sa21_next;\n        sa22 <= sa22_next;\n        sa23 <= sa23_next;\n\n        sa30 <= sa30_next;\n        sa31 <= sa31_next;\n        sa32 <= sa32_next;\n        sa33 <= sa33_next;\n    end\nend\n\n// InvShiftRows\nwire [7:0] sa00_sr, sa01_sr, sa02_sr, sa03_sr;\nwire [7:0] sa10_sr, sa11_sr, sa12_sr, sa13_sr;\nwire [7:0] sa20_sr, sa21_sr, sa22_sr, sa23_sr;\nwire [7:0] sa30_sr, sa31_sr, sa32_sr, sa33_sr;\n\nassign sa00_sr = sa00;\nassign sa01_sr = sa01;\nassign sa02_sr = sa02;\nassign sa03_sr = sa03;\n\nassign sa10_sr = sa13;\nassign sa11_sr = sa10;\nassign sa12_sr = sa11;\nassign sa13_sr = sa12;\n\nassign sa20_sr = sa22;\nassign sa21_sr = sa23;\nassign sa22_sr = sa20;\nassign sa23_sr = sa21;\n\nassign sa30_sr = sa31;\nassign sa31_sr = sa32;\nassign sa32_sr = sa33;\nassign sa33_sr = sa30;\n\n// InvSubBytes\nwire [7:0] sa00_sub, sa01_sub, sa02_sub, sa03_sub;\nwire [7:0] sa10_sub, sa11_sub, sa12_sub, sa13_sub;\nwire [7:0] sa20_sub, sa21_sub, sa22_sub, sa23_sub;\nwire [7:0] sa30_sub, sa31_sub, sa32_sub, sa33_sub;\n\naes_inv_sbox us00 (.a(sa00_sr), .d(sa00_sub));\naes_inv_sbox us01 (.a(sa01_sr), .d(sa01_sub));\naes_inv_sbox us02 (.a(sa02_sr), .d(sa02_sub));\naes_inv_sbox us03 (.a(sa03_sr), .d(sa03_sub));\n\naes_inv_sbox us10 (.a(sa10_sr), .d(sa10_sub));\naes_inv_sbox us11 (.a(sa11_sr), .d(sa11_sub));\naes_inv_sbox us12 (.a(sa12_sr), .d(sa12_sub));\naes_inv_sbox us13 (.a(sa13_sr), .d(sa13_sub));\n\naes_inv_sbox us20 (.a(sa20_sr), .d(sa20_sub));\naes_inv_sbox us21 (.a(sa21_sr), .d(sa21_sub));\naes_inv_sbox us22 (.a(sa22_sr), .d(sa22_sub));\naes_inv_sbox us23 (.a(sa23_sr), .d(sa23_sub));\n\naes_inv_sbox us30 (.a(sa30_sr), .d(sa30_sub));\naes_inv_sbox us31 (.a(sa31_sr), .d(sa31_sub));\naes_inv_sbox us32 (.a(sa32_sr), .d(sa32_sub));\naes_inv_sbox us33 (.a(sa33_sr), .d(sa33_sub));\n\n// AddRoundKey\nwire [7:0] sa00_ark, sa01_ark, sa02_ark, sa03_ark;\nwire [7:0] sa10_ark, sa11_ark, sa12_ark, sa13_ark;\nwire [7:0] sa20_ark, sa21_ark, sa22_ark, sa23_ark;\nwire [7:0] sa30_ark, sa31_ark, sa32_ark, sa33_ark;\n\nassign sa00_ark = sa00_sub ^ w0[31:24];\nassign sa01_ark = sa01_sub ^ w0[23:16];\nassign sa02_ark = sa02_sub ^ w0[15:8];\nassign sa03_ark = sa03_sub ^ w0[7:0];\n\nassign sa10_ark = sa10_sub ^ w1[31:24];\nassign sa11_ark = sa11_sub ^ w1[23:16];\nassign sa12_ark = sa12_sub ^ w1[15:8];\nassign sa13_ark = sa13_sub ^ w1[7:0];\n\nassign sa20_ark = sa20_sub ^ w2[31:24];\nassign sa21_ark = sa21_sub ^ w2[23:16];\nassign sa22_ark = sa22_sub ^ w2[15:8];\nassign sa23_ark = sa23_sub ^ w2[7:0];\n\nassign sa30_ark = sa30_sub ^ w3[31:24];\nassign sa31_ark = sa31_sub ^ w3[23:16];\nassign sa32_ark = sa32_sub ^ w3[15:8];\nassign sa33_ark = sa33_sub ^ w3[7:0];\n\n// Multiply functions in GF(2^8)\nfunction [7:0] xtime(input [7:0] b);\n    xtime = {b[6:0],1'b0} ^ (8'h1B & {8{b[7]}});\nendfunction\n\nfunction [7:0] multiply_by_9(input [7:0] b);\n    begin\n        multiply_by_9 = xtime(xtime(xtime(b))) ^ b;\n    end\nendfunction\n\nfunction [7:0] multiply_by_11(input [7:0] b);\n    begin\n        multiply_by_11 = xtime(xtime(xtime(b))) ^ xtime(b) ^ b;\n    end\nendfunction\n\nfunction [7:0] multiply_by_13(input [7:0] b);\n    begin\n        multiply_by_13 = xtime(xtime(xtime(b))) ^ xtime(xtime(b)) ^ b;\n    end\nendfunction\n\nfunction [7:0] multiply_by_14(input [7:0] b);\n    begin\n        multiply_by_14 = xtime(xtime(xtime(b))) ^ xtime(xtime(b)) ^ xtime(b);\n    end\nendfunction\n\n// InvMixColumns (conditional)\nwire [7:0] sa00_next, sa01_next, sa02_next, sa03_next;\nwire [7:0] sa10_next, sa11_next, sa12_next, sa13_next;\nwire [7:0] sa20_next, sa21_next, sa22_next, sa23_next;\nwire [7:0] sa30_next, sa31_next, sa32_next, sa33_next;\n\n// Column 0\nassign sa00_next = (dcnt == 4'hA) ? sa00_ark :\n    multiply_by_14(sa00_ark) ^ multiply_by_11(sa10_ark) ^ multiply_by_13(sa20_ark) ^ multiply_by_9(sa30_ark);\nassign sa10_next = (dcnt == 4'hA) ? sa10_ark :\n    multiply_by_9(sa00_ark) ^ multiply_by_14(sa10_ark) ^ multiply_by_11(sa20_ark) ^ multiply_by_13(sa30_ark);\nassign sa20_next = (dcnt == 4'hA) ? sa20_ark :\n    multiply_by_13(sa00_ark) ^ multiply_by_9(sa10_ark) ^ multiply_by_14(sa20_ark) ^ multiply_by_11(sa30_ark);\nassign sa30_next = (dcnt == 4'hA) ? sa30_ark :\n    multiply_by_11(sa00_ark) ^ multiply_by_13(sa10_ark) ^ multiply_by_9(sa20_ark) ^ multiply_by_14(sa30_ark);\n\n// Column 1\nassign sa01_next = (dcnt == 4'hA) ? sa01_ark :\n    multiply_by_14(sa01_ark) ^ multiply_by_11(sa11_ark) ^ multiply_by_13(sa21_ark) ^ multiply_by_9(sa31_ark);\nassign sa11_next = (dcnt == 4'hA) ? sa11_ark :\n    multiply_by_9(sa01_ark) ^ multiply_by_14(sa11_ark) ^ multiply_by_11(sa21_ark) ^ multiply_by_13(sa31_ark);\nassign sa21_next = (dcnt == 4'hA) ? sa21_ark :\n    multiply_by_13(sa01_ark) ^ multiply_by_9(sa11_ark) ^ multiply_by_14(sa21_ark) ^ multiply_by_11(sa31_ark);\nassign sa31_next = (dcnt == 4'hA) ? sa31_ark :\n    multiply_by_11(sa01_ark) ^ multiply_by_13(sa11_ark) ^ multiply_by_9(sa21_ark) ^ multiply_by_14(sa31_ark);\n\n// Column 2\nassign sa02_next = (dcnt == 4'hA) ? sa02_ark :\n    multiply_by_14(sa02_ark) ^ multiply_by_11(sa12_ark) ^ multiply_by_13(sa22_ark) ^ multiply_by_9(sa32_ark);\nassign sa12_next = (dcnt == 4'hA) ? sa12_ark :\n    multiply_by_9(sa02_ark) ^ multiply_by_14(sa12_ark) ^ multiply_by_11(sa22_ark) ^ multiply_by_13(sa32_ark);\nassign sa22_next = (dcnt == 4'hA) ? sa22_ark :\n    multiply_by_13(sa02_ark) ^ multiply_by_9(sa12_ark) ^ multiply_by_14(sa22_ark) ^ multiply_by_11(sa32_ark);\nassign sa32_next = (dcnt == 4'hA) ? sa32_ark :\n    multiply_by_11(sa02_ark) ^ multiply_by_13(sa12_ark) ^ multiply_by_9(sa22_ark) ^ multiply_by_14(sa32_ark);\n\n// Column 3\nassign sa03_next = (dcnt == 4'hA) ? sa03_ark :\n    multiply_by_14(sa03_ark) ^ multiply_by_11(sa13_ark) ^ multiply_by_13(sa23_ark) ^ multiply_by_9(sa33_ark);\nassign sa13_next = (dcnt == 4'hA) ? sa13_ark :\n    multiply_by_9(sa03_ark) ^ multiply_by_14(sa13_ark) ^ multiply_by_11(sa23_ark) ^ multiply_by_13(sa33_ark);\nassign sa23_next = (dcnt == 4'hA) ? sa23_ark :\n    multiply_by_13(sa03_ark) ^ multiply_by_9(sa13_ark) ^ multiply_by_14(sa23_ark) ^ multiply_by_11(sa33_ark);\nassign sa33_next = (dcnt == 4'hA) ? sa33_ark :\n    multiply_by_11(sa03_ark) ^ multiply_by_13(sa13_ark) ^ multiply_by_9(sa23_ark) ^ multiply_by_14(sa33_ark);\n\n// Output plaintext generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out <= {\n            sa00_ark, sa10_ark, sa20_ark, sa30_ark,\n            sa01_ark, sa11_ark, sa21_ark, sa31_ark,\n            sa02_ark, sa12_ark, sa22_ark, sa32_ark,\n            sa03_ark, sa13_ark, sa23_ark, sa33_ark\n        };\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": 0, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 1, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n    reg [7:0] inv_sbox [0:255];\n\n    // Initialize the inverse S-box ROM\n    initial begin\n        inv_sbox[8'h00] = 8'h52; inv_sbox[8'h01] = 8'h09; inv_sbox[8'h02] = 8'h6a; inv_sbox[8'h03] = 8'hd5;\n        inv_sbox[8'h04] = 8'h30; inv_sbox[8'h05] = 8'h36; inv_sbox[8'h06] = 8'ha5; inv_sbox[8'h07] = 8'h38;\n        inv_sbox[8'h08] = 8'hbf; inv_sbox[8'h09] = 8'h40; inv_sbox[8'h0a] = 8'ha3; inv_sbox[8'h0b] = 8'h9e;\n        inv_sbox[8'h0c] = 8'h81; inv_sbox[8'h0d] = 8'hf3; inv_sbox[8'h0e] = 8'hd7; inv_sbox[8'h0f] = 8'hfb;\n        inv_sbox[8'h10] = 8'h7c; inv_sbox[8'h11] = 8'he3; inv_sbox[8'h12] = 8'h39; inv_sbox[8'h13] = 8'h82;\n        inv_sbox[8'h14] = 8'h9b; inv_sbox[8'h15] = 8'h2f; inv_sbox[8'h16] = 8'hff; inv_sbox[8'h17] = 8'h87;\n        inv_sbox[8'h18] = 8'h34; inv_sbox[8'h19] = 8'h8e; inv_sbox[8'h1a] = 8'h43; inv_sbox[8'h1b] = 8'h44;\n        inv_sbox[8'h1c] = 8'hc4; inv_sbox[8'h1d] = 8'hde; inv_sbox[8'h1e] = 8'he9; inv_sbox[8'h1f] = 8'hcb;\n        inv_sbox[8'h20] = 8'h54; inv_sbox[8'h21] = 8'h7b; inv_sbox[8'h22] = 8'h94; inv_sbox[8'h23] = 8'h32;\n        inv_sbox[8'h24] = 8'ha6; inv_sbox[8'h25] = 8'hc2; inv_sbox[8'h26] = 8'h23; inv_sbox[8'h27] = 8'h3d;\n        inv_sbox[8'h28] = 8'hee; inv_sbox[8'h29] = 8'h4c; inv_sbox[8'h2a] = 8'h95; inv_sbox[8'h2b] = 8'h0b;\n        inv_sbox[8'h2c] = 8'h42; inv_sbox[8'h2d] = 8'hfa; inv_sbox[8'h2e] = 8'hc3; inv_sbox[8'h2f] = 8'h4e;\n        inv_sbox[8'h30] = 8'h08; inv_sbox[8'h31] = 8'h2e; inv_sbox[8'h32] = 8'ha1; inv_sbox[8'h33] = 8'h66;\n        inv_sbox[8'h34] = 8'h28; inv_sbox[8'h35] = 8'hd9; inv_sbox[8'h36] = 8'h24; inv_sbox[8'h37] = 8'hb2;\n        inv_sbox[8'h38] = 8'h76; inv_sbox[8'h39] = 8'h5b; inv_sbox[8'h3a] = 8'ha2; inv_sbox[8'h3b] = 8'h49;\n        inv_sbox[8'h3c] = 8'h6d; inv_sbox[8'h3d] = 8'h8b; inv_sbox[8'h3e] = 8'hd1; inv_sbox[8'h3f] = 8'h25;\n        inv_sbox[8'h40] = 8'h72; inv_sbox[8'h41] = 8'hf8; inv_sbox[8'h42] = 8'hf6; inv_sbox[8'h43] = 8'h64;\n        inv_sbox[8'h44] = 8'h86; inv_sbox[8'h45] = 8'h68; inv_sbox[8'h46] = 8'h98; inv_sbox[8'h47] = 8'h16;\n        inv_sbox[8'h48] = 8'hd4; inv_sbox[8'h49] = 8'ha4; inv_sbox[8'h4a] = 8'h5c; inv_sbox[8'h4b] = 8'hcc;\n        inv_sbox[8'h4c] = 8'h5d; inv_sbox[8'h4d] = 8'h65; inv_sbox[8'h4e] = 8'hb6; inv_sbox[8'h4f] = 8'h92;\n        inv_sbox[8'h50] = 8'h6c; inv_sbox[8'h51] = 8'h70; inv_sbox[8'h52] = 8'h48; inv_sbox[8'h53] = 8'h50;\n        inv_sbox[8'h54] = 8'hfd; inv_sbox[8'h55] = 8'hed; inv_sbox[8'h56] = 8'hb9; inv_sbox[8'h57] = 8'hda;\n        inv_sbox[8'h58] = 8'h5e; inv_sbox[8'h59] = 8'h15; inv_sbox[8'h5a] = 8'h46; inv_sbox[8'h5b] = 8'h57;\n        inv_sbox[8'h5c] = 8'ha7; inv_sbox[8'h5d] = 8'h8d; inv_sbox[8'h5e] = 8'h9d; inv_sbox[8'h5f] = 8'h84;\n        inv_sbox[8'h60] = 8'h90; inv_sbox[8'h61] = 8'hd8; inv_sbox[8'h62] = 8'hab; inv_sbox[8'h63] = 8'h00;\n        inv_sbox[8'h64] = 8'h8c; inv_sbox[8'h65] = 8'hbc; inv_sbox[8'h66] = 8'hd3; inv_sbox[8'h67] = 8'h0a;\n        inv_sbox[8'h68] = 8'hf7; inv_sbox[8'h69] = 8'he4; inv_sbox[8'h6a] = 8'h58; inv_sbox[8'h6b] = 8'h05;\n        inv_sbox[8'h6c] = 8'hb8; inv_sbox[8'h6d] = 8'hb3; inv_sbox[8'h6e] = 8'h45; inv_sbox[8'h6f] = 8'h06;\n        inv_sbox[8'h70] = 8'hd0; inv_sbox[8'h71] = 8'h2c; inv_sbox[8'h72] = 8'h1e; inv_sbox[8'h73] = 8'h8f;\n        inv_sbox[8'h74] = 8'hca; inv_sbox[8'h75] = 8'h3f; inv_sbox[8'h76] = 8'h0f; inv_sbox[8'h77] = 8'h02;\n        inv_sbox[8'h78] = 8'hc1; inv_sbox[8'h79] = 8'haf; inv_sbox[8'h7a] = 8'hbd; inv_sbox[8'h7b] = 8'h03;\n        inv_sbox[8'h7c] = 8'h01; inv_sbox[8'h7d] = 8'h13; inv_sbox[8'h7e] = 8'h8a; inv_sbox[8'h7f] = 8'h6b;\n        inv_sbox[8'h80] = 8'h3a; inv_sbox[8'h81] = 8'h91; inv_sbox[8'h82] = 8'h11; inv_sbox[8'h83] = 8'h41;\n        inv_sbox[8'h84] = 8'h4f; inv_sbox[8'h85] = 8'h67; inv_sbox[8'h86] = 8'hdc; inv_sbox[8'h87] = 8'hea;\n        inv_sbox[8'h88] = 8'h97; inv_sbox[8'h89] = 8'hf2; inv_sbox[8'h8a] = 8'hcf; inv_sbox[8'h8b] = 8'hce;\n        inv_sbox[8'h8c] = 8'hf0; inv_sbox[8'h8d] = 8'hb4; inv_sbox[8'h8e] = 8'he6; inv_sbox[8'h8f] = 8'h73;\n        inv_sbox[8'h90] = 8'h96; inv_sbox[8'h91] = 8'hac; inv_sbox[8'h92] = 8'h74; inv_sbox[8'h93] = 8'h22;\n        inv_sbox[8'h94] = 8'he7; inv_sbox[8'h95] = 8'had; inv_sbox[8'h96] = 8'h35; inv_sbox[8'h97] = 8'h85;\n        inv_sbox[8'h98] = 8'he2; inv_sbox[8'h99] = 8'hf9; inv_sbox[8'h9a] = 8'h37; inv_sbox[8'h9b] = 8'he8;\n        inv_sbox[8'h9c] = 8'h1c; inv_sbox[8'h9d] = 8'h75; inv_sbox[8'h9e] = 8'hdf; inv_sbox[8'h9f] = 8'h6e;\n        inv_sbox[8'ha0] = 8'h47; inv_sbox[8'ha1] = 8'hf1; inv_sbox[8'ha2] = 8'h1a; inv_sbox[8'ha3] = 8'h71;\n        inv_sbox[8'ha4] = 8'h1d; inv_sbox[8'ha5] = 8'h29; inv_sbox[8'ha6] = 8'hc5; inv_sbox[8'ha7] = 8'h89;\n        inv_sbox[8'ha8] = 8'h6f; inv_sbox[8'ha9] = 8'hb7; inv_sbox[8'haa] = 8'h62; inv_sbox[8'hab] = 8'h0e;\n        inv_sbox[8'hac] = 8'haa; inv_sbox[8'had] = 8'h18; inv_sbox[8'hae] = 8'hbe; inv_sbox[8'haf] = 8'h1b;\n        inv_sbox[8'hb0] = 8'hfc; inv_sbox[8'hb1] = 8'h56; inv_sbox[8'hb2] = 8'h3e; inv_sbox[8'hb3] = 8'h4b;\n        inv_sbox[8'hb4] = 8'hc6; inv_sbox[8'hb5] = 8'hd2; inv_sbox[8'hb6] = 8'h79; inv_sbox[8'hb7] = 8'h20;\n        inv_sbox[8'hb8] = 8'h9a; inv_sbox[8'hb9] = 8'hdb; inv_sbox[8'hba] = 8'hc0; inv_sbox[8'hbb] = 8'hfe;\n        inv_sbox[8'hbc] = 8'h78; inv_sbox[8'hbd] = 8'hcd; inv_sbox[8'hbe] = 8'h5a; inv_sbox[8'hbf] = 8'hf4;\n        inv_sbox[8'hc0] = 8'h1f; inv_sbox[8'hc1] = 8'hdd; inv_sbox[8'hc2] = 8'ha8; inv_sbox[8'hc3] = 8'h33;\n        inv_sbox[8'hc4] = 8'h88; inv_sbox[8'hc5] = 8'h07; inv_sbox[8'hc6] = 8'hc7; inv_sbox[8'hc7] = 8'h31;\n        inv_sbox[8'hc8] = 8'hb1; inv_sbox[8'hc9] = 8'h12; inv_sbox[8'hca] = 8'h10; inv_sbox[8'hcb] = 8'h59;\n        inv_sbox[8'hcc] = 8'h27; inv_sbox[8'hcd] = 8'h80; inv_sbox[8'hce] = 8'hec; inv_sbox[8'hcf] = 8'h5f;\n        inv_sbox[8'hd0] = 8'h60; inv_sbox[8'hd1] = 8'h51; inv_sbox[8'hd2] = 8'h7f; inv_sbox[8'hd3] = 8'ha9;\n        inv_sbox[8'hd4] = 8'h19; inv_sbox[8'hd5] = 8'hb5; inv_sbox[8'hd6] = 8'h4a; inv_sbox[8'hd7] = 8'h0d;\n        inv_sbox[8'hd8] = 8'h2d; inv_sbox[8'hd9] = 8'he5; inv_sbox[8'hda] = 8'h7a; inv_sbox[8'hdb] = 8'h9f;\n        inv_sbox[8'hdc] = 8'h93; inv_sbox[8'hdd] = 8'hc9; inv_sbox[8'hde] = 8'h9c; inv_sbox[8'hdf] = 8'hef;\n        inv_sbox[8'he0] = 8'ha0; inv_sbox[8'he1] = 8'he0; inv_sbox[8'he2] = 8'h3b; inv_sbox[8'he3] = 8'h4d;\n        inv_sbox[8'he4] = 8'hae; inv_sbox[8'he5] = 8'h2a; inv_sbox[8'he6] = 8'hf5; inv_sbox[8'he7] = 8'hb0;\n        inv_sbox[8'he8] = 8'hc8; inv_sbox[8'he9] = 8'heb; inv_sbox[8'hea] = 8'hbb; inv_sbox[8'heb] = 8'h3c;\n        inv_sbox[8'hec] = 8'h83; inv_sbox[8'hed] = 8'h53; inv_sbox[8'hee] = 8'h99; inv_sbox[8'hef] = 8'h61;\n        inv_sbox[8'hf0] = 8'h17; inv_sbox[8'hf1] = 8'h2b; inv_sbox[8'hf2] = 8'h04; inv_sbox[8'hf3] = 8'h7e;\n        inv_sbox[8'hf4] = 8'hba; inv_sbox[8'hf5] = 8'h77; inv_sbox[8'hf6] = 8'hd6; inv_sbox[8'hf7] = 8'h26;\n        inv_sbox[8'hf8] = 8'he1; inv_sbox[8'hf9] = 8'h69; inv_sbox[8'hfa] = 8'h14; inv_sbox[8'hfb] = 8'h63;\n        inv_sbox[8'hfc] = 8'h55; inv_sbox[8'hfd] = 8'h21; inv_sbox[8'hfe] = 8'h0c; inv_sbox[8'hff] = 8'h7d;\n    end\n\n    assign b = inv_sbox[a];\nendmodule", "syntax": -2, "function": -2, "formal": 0, "syntax_info": null, "function_info": null, "formal_info": null}
