{"task": "sd_bd", "codeid": 1, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 32;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n\n    reg [RAM_MEM_WIDTH-1:0] bd_mem [BD_SIZE-1:0];\n\n    always @(posedge clk) begin\n        if (rst) begin\n            free_bd_reg <= BD_SIZE >> 1;\n            m_wr_pnt <= 0;\n            s_rd_pnt <= 0;\n            m_wr_cnt <= 0;\n            s_rd_cnt <= 0;\n            new_bw <= 0;\n            last_a_cmp <= 0;\n        end else begin\n            if (we_m) begin\n                if (free_bd_reg > 0) begin\n                    bd_mem[m_wr_pnt] <= dat_in_m;\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    m_wr_cnt <= m_wr_cnt + 1;\n                    if (m_wr_cnt == RAM_MEM_WIDTH >> 1) begin\n                        m_wr_cnt <= 0;\n                        new_bw <= 1;\n                    end\n                end\n            end\n            if (re_s) begin\n                if (s_rd_cnt < RAM_MEM_WIDTH >> 2) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= s_rd_cnt + 1;\n                    ack_o_s <= 1;\n                end\n            end\n            if (a_cmp) begin\n                if (last_a_cmp == 0) begin\n                    free_bd_reg <= free_bd_reg + 1;\n                end\n                last_a_cmp <= a_cmp;\n            end\n            if (new_bw) begin\n                free_bd_reg <= free_bd_reg - 1;\n                new_bw <= 0;\n            end\n        end\n    end\n\n    assign free_bd = free_bd_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 2, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    // Define constants\n    localparam BD_SIZE_LOG2 = $clog2(BD_SIZE);\n    localparam BD_SIZE_M1 = BD_SIZE - 1;\n    localparam RAM_MEM_WIDTH_16_M1 = RAM_MEM_WIDTH_16 - 1;\n    localparam RAM_MEM_WIDTH_M1 = RAM_MEM_WIDTH - 1;\n    localparam BD_WIDTH_M1 = BD_WIDTH - 1;\n    localparam BD_WIDTH_LOG2 = $clog2(BD_WIDTH);\n    localparam BD_WIDTH_M1_LOG2 = BD_WIDTH_LOG2 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1 = BD_WIDTH_M1_LOG2 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1 = BD_WIDTH_M1_LOG2_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 = BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1 - 1;\n    localparam BD_WIDTH_M1_LOG2_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1_M1", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 3, "code": "\nmodule sd_bd(\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    // Define constants\n    parameter BD_SIZE = 256;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    // Define internal signals\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] new_br;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] ack_o_s_reg;\n    reg [BD_WIDTH-1:0] ack_o_s_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 4, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output reg [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output reg ack_o_s,\n    input a_cmp,\n    output reg [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 128;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n    parameter RAM_MEM_WIDTH_16 = 16;\n\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [RAM_MEM_WIDTH-1:0] bd_mem [BD_SIZE-1:0];\n\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wr_pnt <= 0;\n            s_rd_pnt <= 0;\n            m_wr_cnt <= 0;\n            s_rd_cnt <= 0;\n            new_bw <= 0;\n            last_a_cmp <= 0;\n            free_bd_reg <= BD_SIZE / 2;\n        end else begin\n            if (we_m) begin\n                if (free_bd_reg > 0) begin\n                    bd_mem[m_wr_pnt] <= dat_in_m;\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    m_wr_cnt <= m_wr_cnt + 1;\n                    if (m_wr_cnt == RAM_MEM_WIDTH_16) begin\n                        m_wr_cnt <= 0;\n                        new_bw <= 1;\n                    end\n                end\n            end\n            if (re_s) begin\n                if (s_rd_cnt < RAM_MEM_WIDTH_16) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= s_rd_cnt + 1;\n                    ack_o_s <= 1;\n                end else begin\n                    ack_o_s <= 0;\n                end\n            end\n            if (a_cmp) begin\n                if (last_a_cmp == 0) begin\n                    free_bd_reg <= free_bd_reg + 1;\n                end\n                last_a_cmp <= a_cmp;\n            end\n            if (new_bw) begin\n                free_bd_reg <= free_bd_reg - 1;\n                new_bw <= 0;\n            end\n        end\n    end\n\n    assign free_bd = free_bd_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 5, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 256;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n\n    reg [RAM_MEM_WIDTH-1:0] bd_mem [BD_SIZE-1:0];\n\n    assign free_bd = free_bd_reg;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wr_pnt <= 0;\n            s_rd_pnt <= 0;\n            m_wr_cnt <= 0;\n            s_rd_cnt <= 0;\n            new_bw <= 0;\n            last_a_cmp <= 0;\n            free_bd_reg <= BD_SIZE >> 1;\n        end else begin\n            if (we_m) begin\n                if (free_bd_reg > 0) begin\n                    bd_mem[m_wr_pnt] <= dat_in_m;\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    m_wr_cnt <= m_wr_cnt + 1;\n                    if (m_wr_cnt == 1) begin\n                        new_bw <= 1;\n                        free_bd_reg <= free_bd_reg - 1;\n                    end else if (m_wr_cnt == 2) begin\n                        new_bw <= 0;\n                        m_wr_cnt <= 0;\n                    end\n                end\n            end\n            if (re_s) begin\n                if (s_rd_cnt == 0) begin\n                    ack_o_s <= 1;\n                end\n                if (s_rd_cnt == 1) begin\n                    ack_o_s <= 0;\n                end\n                if (s_rd_cnt < 3) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= s_rd_cnt + 1;\n                end else begin\n                    s_rd_cnt <= 0;\n                end\n            end\n            if (a_cmp) begin\n                if (last_a_cmp == 0) begin\n                    free_bd_reg <= free_bd_reg + 1;\n                end\n                last_a_cmp <= a_cmp;\n            end\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 6, "code": "\nmodule sd_bd(\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 128;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] s_rd_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] m_wr_cnt_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 8, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 64;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n    parameter BIG_ENDIAN = 1;\n    parameter LITTLE_ENDIAN = 0;\n    parameter SIM = 0;\n    parameter SYN = 1;\n    parameter SDC_IRQ_ENABLE = 1;\n    parameter ACTEL = 0;\n    parameter RAM_MEM_WIDTH_16 = 1;\n    parameter RESEND_MAX_CNT = 3;\n    parameter MEM_OFFSET = 0;\n    parameter RESET_CLK_DIV = 1;\n    parameter SD_CLK_BUS_CLK = 0;\n    parameter SD_CLK_SEP = 0;\n    parameter SD_CLK_STATIC = 0;\n    parameter SD_CLK_DYNAMIC = 1;\n    parameter BLOCK_SIZE = 512;\n    parameter SD_BUS_WIDTH_4 = 1;\n    parameter SD_BUS_W = 4;\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n    parameter FIFO_TX_MEM_DEPTH = 1024;\n    parameter FIFO_TX_MEM_ADR_SIZE = $clog2(FIFO_TX_MEM_DEPTH) + 1;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    reg [BD_WIDTH-1:0] free_bd_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 9, "code": "\nmodule sd_bd(\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    // Define constants\n    parameter BD_SIZE = 64;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n    parameter MEM_OFFSET = 0;\n    parameter BIG_ENDIAN = 1;\n    parameter LITTLE_ENDIAN = 0;\n    parameter SIM = 0;\n    parameter SYN = 1;\n    parameter SDC_IRQ_ENABLE = 1;\n    parameter ACTEL = 0;\n    parameter SD_CLK_BUS_CLK = 0;\n    parameter SD_CLK_SEP = 0;\n    parameter SD_CLK_STATIC = 0;\n    parameter SD_CLK_DYNAMIC = 1;\n    parameter BLOCK_SIZE = 512;\n    parameter SD_BUS_WIDTH_4 = 1;\n    parameter SD_BUS_W = 4;\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n    parameter FIFO_TX_MEM_DEPTH = 1024;\n    parameter FIFO_TX_MEM_ADR_SIZE = $clog2(FIFO_TX_MEM_DEPTH) + 1;\n\n    // Define signals\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] ack_o_s_reg;\n    reg [BD_WIDTH-1:0] ack_o_s_next;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_1;\n    reg [BD_WIDTH-1:0] ack_o_s_next_1;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_2;\n    reg [BD_WIDTH-1:0] ack_o_s_next_2;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_3;\n    reg [BD_WIDTH-1:0] ack_o_s_next_3;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_4;\n    reg [BD_WIDTH-1:0] ack_o_s_next_4;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_5;\n    reg [BD_WIDTH-1:0] ack_o_s_next_5;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_6;\n    reg [BD_WIDTH-1:0] ack_o_s_next_6;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_7;\n    reg [BD_WIDTH-1:0] ack_o_s_next_7;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_8;\n    reg [BD_WIDTH-1:0] ack_o_s_next_8;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_9;\n    reg [BD_WIDTH-1:0] ack_o_s_next_9;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_10;\n    reg [BD_WIDTH-1:0] ack_o_s_next_10;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_11;\n    reg [BD_WIDTH-1:0] ack_o_s_next_11;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_12;\n    reg [BD_WIDTH-1:0] ack_o_s_next_12;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_13;\n    reg [BD_WIDTH-1:0] ack_o_s_next_13;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_14;\n    reg [BD_WIDTH-1:0] ack_o_s_next_14;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_15;\n    reg [BD_WIDTH-1:0] ack_o_s_next_15;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_16;\n    reg [BD_WIDTH-1:0] ack_o_s_next_16;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_17;\n    reg [BD_WIDTH-1:0] ack_o_s_next_17;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_18;\n    reg [BD_WIDTH-1:0] ack_o_s_next_18;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_19;\n    reg [BD_WIDTH-1:0] ack_o_s_next_19;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_20;\n    reg [BD_WIDTH-1:0] ack_o_s_next_20;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_21;\n    reg [BD_WIDTH-1:0] ack_o_s_next_21;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_22;\n    reg [BD_WIDTH-1:0] ack_o_s_next_22;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_23;\n    reg [BD_WIDTH-1:0] ack_o_s_next_23;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_24;\n    reg [BD_WIDTH-1:0] ack_o_s_next_24;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_25;\n    reg [BD_WIDTH-1:0] ack_o_s_next_25;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_26;\n    reg [BD_WIDTH-1:0] ack_o_s_next_26;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_27;\n    reg [BD_WIDTH-1:0] ack_o_s_next_27;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_28;\n    reg [BD_WIDTH-1:0] ack_o_s_next_28;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_29;\n    reg [BD_WIDTH-1:0] ack_o_s_next_29;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_30;\n    reg [BD_WIDTH-1:0] ack_o_s_next_30;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_31;\n    reg [BD_WIDTH-1:0] ack_o_s_next_31;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_32;\n    reg [BD_WIDTH-1:0] ack_o_s_next_32;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_33;\n    reg [BD_WIDTH-1:0] ack_o_s_next_33;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_34;\n    reg [BD_WIDTH-1:0] ack_o_s_next_34;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_35;\n    reg [BD_WIDTH-1:0] ack_o_s_next_35;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_36;\n    reg [BD_WIDTH-1:0] ack_o_s_next_36;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_37;\n    reg [BD_WIDTH-1:0] ack_o_s_next_37;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_38;\n    reg [BD_WIDTH-1:0] ack_o_s_next_38;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_39;\n    reg [BD_WIDTH-1:0] ack_o_s_next_39;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_40;\n    reg [BD_WIDTH-1:0] ack_o_s_next_40;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_41;\n    reg [BD_WIDTH-1:0] ack_o_s_next_41;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_42;\n    reg [BD_WIDTH-1:0] ack_o_s_next_42;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_43;\n    reg [BD_WIDTH-1:0] ack_o_s_next_43;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_44;\n    reg [BD_WIDTH-1:0] ack_o_s_next_44;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_45;\n    reg [BD_WIDTH-1:0] ack_o_s_next_45;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_46;\n    reg [BD_WIDTH-1:0] ack_o_s_next_46;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_47;\n    reg [BD_WIDTH-1:0] ack_o_s_next_47;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_48;\n    reg [BD_WIDTH-1:0] ack_o_s_next_48;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_49;\n    reg [BD_WIDTH-1:0] ack_o_s_next_49;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_50;\n    reg [BD_WIDTH-1:0] ack_o_s_next_50;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_51;\n    reg [BD_WIDTH-1:0] ack_o_s_next_51;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_52;\n    reg [BD_WIDTH-1:0] ack_o_s_next_52;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_53;\n    reg [BD_WIDTH-1:0] ack_o_s_next_53;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_54;\n    reg [BD_WIDTH-1:0] ack_o_s_next_54;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_55;\n    reg [BD_WIDTH-1:0] ack_o_s_next_55;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_56;\n    reg [BD_WIDTH-1:0] ack_o_s_next_56;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_57;\n    reg [BD_WIDTH-1:0] ack_o_s_next_57;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_58;\n    reg [BD_WIDTH-1:0] ack_o_s_next_58;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_59;\n    reg [BD_WIDTH-1:0] ack_o_s_next_59;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_60;\n    reg [BD_WIDTH-1:0] ack_o_s_next_60;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_61;\n    reg [BD_WIDTH-1:0] ack_o_s_next_61;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_62;\n    reg [BD_WIDTH-1:0] ack_o_s_next_62;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_63;\n    reg [BD_WIDTH-1:0] ack_o_s_next_63;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_64;\n    reg [BD_WIDTH-1:0] ack_o_s_next_64;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_65;\n    reg [BD_WIDTH-1:0] ack_o_s_next_65;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_66;\n    reg [BD_WIDTH-1:0] ack_o_s_next_66;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_67;\n    reg [BD_WIDTH-1:0] ack_o_s_next_67;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_68;\n    reg [BD_WIDTH-1:0] ack_o_s_next_68;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_69;\n    reg [BD_WIDTH-1:0] ack_o_s_next_69;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_70;\n    reg [BD_WIDTH-1:0] ack_o_s_next_70;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_71;\n    reg [BD_WIDTH-1:0] ack_o_s_next_71;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_72;\n    reg [BD_WIDTH-1:0] ack_o_s_next_72;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_73;\n    reg [BD_WIDTH-1:0] ack_o_s_next_73;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_74;\n    reg [BD_WIDTH-1:0] ack_o_s_next_74;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_75;\n    reg [BD_WIDTH-1:0] ack_o_s_next_75;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_76;\n    reg [BD_WIDTH-1:0] ack_o_s_next_76;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_77;\n    reg [BD_WIDTH-1:0] ack_o_s_next_77;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_78;\n    reg [BD_WIDTH-1:0] ack_o_s_next_78;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_79;\n    reg [BD_WIDTH-1:0] ack_o_s_next_79;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_80;\n    reg [BD_WIDTH-1:0] ack_o_s_next_80;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_81;\n    reg [BD_WIDTH-1:0] ack_o_s_next_81;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_82;\n    reg [BD_WIDTH-1:0] ack_o_s_next_82;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_83;\n    reg [BD_WIDTH-1:0] ack_o_s_next_83;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_84;\n    reg [BD_WIDTH-1:0] ack_o_s_next_84;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_85;\n    reg [BD_WIDTH-1:0] ack_o_s_next_85;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_86;\n    reg [BD_WIDTH-1:0] ack_o_s_next_86;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_87;\n    reg [BD_WIDTH-1:0] ack_o_s_next_87;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_88;\n    reg [BD_WIDTH-1:0] ack_o_s_next_88;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_89;\n    reg [BD_WIDTH-1:0] ack_o_s_next_89;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_90;\n    reg [BD_WIDTH-1:0] ack_o_s_next_90;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_91;\n    reg [BD_WIDTH-1:0] ack_o_s_next_91;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_92;\n    reg [BD_WIDTH-1:0] ack_o_s_next_92;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_93;\n    reg [BD_WIDTH-1:0] ack_o_s_next_93;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_94;\n    reg [BD_WIDTH-1:0] ack_o_s_next_94;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_95;\n    reg [BD_WIDTH-1:0] ack_o_s_next_95;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_96;\n    reg [BD_WIDTH-1:0] ack_o_s_next_96;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_97;\n    reg [BD_WIDTH-1:0] ack_o_s_next_97;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_98;\n    reg [BD_WIDTH-1:0] ack_o_s_next_98;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_99;\n    reg [BD_WIDTH-1:0] ack_o_s_next_99;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_100;\n    reg [BD_WIDTH-1:0] ack_o_s_next_100;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_101;\n    reg [BD_WIDTH-1:0] ack_o_s_next_101;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_102;\n    reg [BD_WIDTH-1:0] ack_o_s_next_102;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_103;\n    reg [BD_WIDTH-1:0] ack_o_s_next_103;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_104;\n    reg [BD_WIDTH-1:0] ack_o_s_next_104;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_105;\n    reg [BD_WIDTH-1:0] ack_o_s_next_105;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_106;\n    reg [BD_WIDTH-1:0] ack_o_s_next_106;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_107;\n    reg [BD_WIDTH-1:0] ack_o_s_next_107;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_108;\n    reg [BD_WIDTH-1:0] ack_o_s_next_108;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_109;\n    reg [BD_WIDTH-1:0] ack_o_s_next_109;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_110;\n    reg [BD_WIDTH-1:0] ack_o_s_next_110;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_111;\n    reg [BD_WIDTH-1:0] ack_o_s_next_111;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_112;\n    reg [BD_WIDTH-1:0] ack_o_s_next_112;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_113;\n    reg [BD_WIDTH-1:0] ack_o_s_next_113;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_114;\n    reg [BD_WIDTH-1:0] ack_o_s_next_114;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_115;\n    reg [BD_WIDTH-1:0] ack_o_s_next_115;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_116;\n    reg [BD_WIDTH-1:0] ack_o_s_next_116;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_117;\n    reg [BD_WIDTH-1:0] ack_o_s_next_117;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_118;\n    reg [BD_WIDTH-1:0] ack_o_s_next_118;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_119;\n    reg [BD_WIDTH-1:0] ack_o_s_next_119;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_120;\n    reg [BD_WIDTH-1:0] ack_o_s_next_120;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_121;\n    reg [BD_WIDTH-1:0] ack_o_s_next_121;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_122;\n    reg [BD_WIDTH-1:0] ack_o_s_next_122;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_123;\n    reg [BD_WIDTH-1:0] ack_o_s_next_123;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_124;\n    reg [BD_WIDTH-1:0] ack_o_s_next_124;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_125;\n    reg [BD_WIDTH-1:0] ack_o_s_next_125;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_126;\n    reg [BD_WIDTH-1:0] ack_o_s_next_126;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_127;\n    reg [BD_WIDTH-1:0] ack_o_s_next_127;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_128;\n    reg [BD_WIDTH-1:0] ack_o_s_next_128;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_129;\n    reg [BD_WIDTH-1:0] ack_o_s_next_129;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_130;\n    reg [BD_WIDTH-1:0] ack_o_s_next_130;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_131;\n    reg [BD_WIDTH-1:0] ack_o_s_next_131;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_132;\n    reg [BD_WIDTH-1:0] ack_o_s_next_132;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_133;\n    reg [BD_WIDTH-1:0] ack_o_s_next_133;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_134;\n    reg [BD_WIDTH-1:0] ack_o_s_next_134;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_135;\n    reg [BD_WIDTH-1:0] ack_o_s_next_135;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_136;\n    reg [BD_WIDTH-1:0] ack_o_s_next_136;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_137;\n    reg [BD_WIDTH-1:0] ack_o_s_next_137;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_138;\n    reg [BD_WIDTH-1:0] ack_o_s_next_138;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_139;\n    reg [BD_WIDTH-1:0] ack_o_s_next_139;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_140;\n    reg [BD_WIDTH-1:0] ack_o_s_next_140;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_141;\n    reg [BD_WIDTH-1:0] ack_o_s_next_141;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_142;\n    reg [BD_WIDTH-1:0] ack_o_s_next_142;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_143;\n    reg [BD_WIDTH-1:0] ack_o_s_next_143;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_144;\n    reg [BD_WIDTH-1:0] ack_o_s_next_144;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_145;\n    reg [BD_WIDTH-1:0] ack_o_s_next_145;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_146;\n    reg [BD_WIDTH-1:0] ack_o_s_next_146;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_147;\n    reg [BD_WIDTH-1:0] ack_o_s_next_147;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_148;\n    reg [BD_WIDTH-1:0] ack_o_s_next_148;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_149;\n    reg [BD_WIDTH-1:0] ack_o_s_next_149;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_150;\n    reg [BD_WIDTH-1:0] ack_o_s_next_150;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_151;\n    reg [BD_WIDTH-1:0] ack_o_s_next_151;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_152;\n    reg [BD_WIDTH-1:0] ack_o_s_next_152;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_153;\n    reg [BD_WIDTH-1:0] ack_o_s_next_153;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_154;\n    reg [BD_WIDTH-1:0] ack_o_s_next_154;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_155;\n    reg [BD_WIDTH-1:0] ack_o_s_next_155;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_156;\n    reg [BD_WIDTH-1:0] ack_o_s_next_156;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_157;\n    reg [BD_WIDTH-1:0] ack_o_s_next_157;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_158;\n    reg [BD_WIDTH-1:0] ack_o_s_next_158;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_159;\n    reg [BD_WIDTH-1:0] ack_o_s_next_159;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_160;\n    reg [BD_WIDTH-1:0] ack_o_s_next_160;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_161;\n    reg [BD_WIDTH-1:0] ack_o_s_next_161;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_162;\n    reg [BD_WIDTH-1:0] ack_o_s_next_162;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_163;\n    reg [BD_WIDTH-1:0] ack_o_s_next_163;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_164;\n    reg [BD_WIDTH-1:0] ack_o_s_next_164;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_165;\n    reg [BD_WIDTH-1:0] ack_o_s_next_165;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_166;\n    reg [BD_WIDTH-1:0] ack_o_s_next_166;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_167;\n    reg [BD_WIDTH-1:0] ack_o_s_next_167;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_168;\n    reg [BD_WIDTH-1:0] ack_o_s_next_168;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_169;\n    reg [BD_WIDTH-1:0] ack_o_s_next_169;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_170;\n    reg [BD_WIDTH-1:0] ack_o_s_next_170;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_171;\n    reg [BD_WIDTH-1:0] ack_o_s_next_171;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_172;\n    reg [BD_WIDTH-1:0] ack_o_s_next_172;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_173;\n    reg [BD_WIDTH-1:0] ack_o_s_next_173;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_174;\n    reg [BD_WIDTH-1:0] ack_o_s_next_174;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_175;\n    reg [BD_WIDTH-1:0] ack_o_s_next_175;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_176;\n    reg [BD_WIDTH-1:0] ack_o_s_next_176;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_177;\n    reg [BD_WIDTH-1:0] ack_o_s_next_177;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_178;\n    reg [BD_WIDTH-1:0] ack_o_s_next_178;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_179;\n    reg [BD_WIDTH-1:0] ack_o_s_next_179;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_180;\n    reg [BD_WIDTH-1:0] ack_o_s_next_180;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_181;\n    reg [BD_WIDTH-1:0] ack_o_s_next_181;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_182;\n    reg [BD_WIDTH-1:0] ack_o_s_next_182;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_183;\n    reg [BD_WIDTH-1:0] ack_o_s_next_183;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_184;\n    reg [BD_WIDTH-1:0] ack_o_s_next_184;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_185;\n    reg [BD_WIDTH-1:0] ack_o_s_next_185;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_186;\n    reg [BD_WIDTH-1:0] ack_o_s_next_186;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_187;\n    reg [BD_WIDTH-1:0] ack_o_s_next_187;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_188;\n    reg [BD_WIDTH-1:0] ack_o_s_next_188;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_189;\n    reg [BD_WIDTH-1:0] ack_o_s_next_189;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_190;\n    reg [BD_WIDTH-1:0] ack_o_s_next_190;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_191;\n    reg [BD_WIDTH-1:0] ack_o_s_next_191;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_192;\n    reg [BD_WIDTH-1:0] ack_o_s_next_192;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_193;\n    reg [BD_WIDTH-1:0] ack_o_s_next_193;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_194;\n    reg [BD_WIDTH-1:0] ack_o_s_next_194;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_195;\n    reg [BD_WIDTH-1:0] ack_o_s_next_195;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_196;\n    reg [BD_WIDTH-1:0] ack_o_s_next_196;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_197;\n    reg [BD_WIDTH-1:0] ack_o_s_next_197;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_198;\n    reg [BD_WIDTH-1:0] ack_o_s_next_198;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_199;\n    reg [BD_WIDTH-1:0] ack_o_s_next_199;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_200;\n    reg [BD_WIDTH-1:0] ack_o_s_next_200;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_201;\n    reg [BD_WIDTH-1:0] ack_o_s_next_201;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_202;\n    reg [BD_WIDTH-1:0] ack_o_s_next_202;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_203;\n    reg [BD_WIDTH-1:0] ack_o_s_next_203;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_204;\n    reg [BD_WIDTH-1:0] ack_o_s_next_204;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_205;\n    reg [BD_WIDTH-1:0] ack_o_s_next_205;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_206;\n    reg [BD_WIDTH-1:0] ack_o_s_next_206;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_207;\n    reg [BD_WIDTH-1:0] ack_o_s_next_207;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_208;\n    reg [BD_WIDTH-1:0] ack_o_s_next_208;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_209;\n    reg [BD_WIDTH-1:0] ack_o_s_next_209;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_210;\n    reg [BD_WIDTH-1:0] ack_o_s_next_210;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_211;\n    reg [BD_WIDTH-1:0] ack_o_s_next_211;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_212;\n    reg [BD_WIDTH-1:0] ack_o_s_next_212;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_213;\n    reg [BD_WIDTH-1:0] ack_o_s_next_213;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_214;\n    reg [BD_WIDTH-1:0] ack_o_s_next_214;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_215;\n    reg [BD_WIDTH-1:0] ack_o_s_next_215;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_216;\n    reg [BD_WIDTH-1:0] ack_o_s_next_216;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_217;\n    reg [BD_WIDTH-1:0] ack_o_s_next_217;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_218;\n    reg [BD_WIDTH-1:0] ack_o_s_next_218;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_219;\n    reg [BD_WIDTH-1:0] ack_o_s_next_219;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_220;\n    reg [BD_WIDTH-1:0] ack_o_s_next_220;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_221;\n    reg [BD_WIDTH-1:0] ack_o_s_next_221;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_222;\n    reg [BD_WIDTH-1:0] ack_o_s_next_222;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_223;\n    reg [BD_WIDTH-1:0] ack_o_s_next_223;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_224;\n    reg [BD_WIDTH-1:0] ack_o_s_next_224;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_225;\n    reg [BD_WIDTH-1:0] ack_o_s_next_225;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_226;\n    reg [BD_WIDTH-1:0] ack_o_s_next_226;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_227;\n    reg [BD_WIDTH-1:0] ack_o_s_next_227;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_228;\n    reg [BD_WIDTH-1:0] ack_o_s_next_228;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_229;\n    reg [BD_WIDTH-1:0] ack_o_s_next_229;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_230;\n    reg [BD_WIDTH-1:0] ack_o_s_next_230;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_231;\n    reg [BD_WIDTH-1:0] ack_o_s_next_231;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_232;\n    reg [BD_WIDTH-1:0] ack_o_s_next_232;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_233;\n    reg [BD_WIDTH-1:0] ack_o_s_next_233;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_234;\n    reg [BD_WIDTH-1:0] ack_o_s_next_234;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_235;\n    reg [BD_WIDTH-1:0] ack_o_s_next_235;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_236;\n    reg [BD_WIDTH-1:0] ack_o_s_next_236;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_237;\n    reg [BD_WIDTH-1:0] ack_o_s_next_237;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_238;\n    reg [BD_WIDTH-1:0] ack_o_s_next_238;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_239;\n    reg [BD_WIDTH-1:0] ack_o_s_next_239;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_240;\n    reg [BD_WIDTH-1:0] ack_o_s_next_240;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_241;\n    reg [BD_WIDTH-1:0] ack_o_s_next_241;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_242;\n    reg [BD_WIDTH-1:0] ack_o_s_next_242;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_243;\n    reg [BD_WIDTH-1:0] ack_o_s_next_243;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_244;\n    reg [BD_WIDTH-1:0] ack_o_s_next_244;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_245;\n    reg [BD_WIDTH-1:0] ack_o_s_next_245;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_246;\n    reg [BD_WIDTH-1:0] ack_o_s_next_246;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_247;\n    reg [BD_WIDTH-1:0] ack_o_s_next_247;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_248;\n    reg [BD_WIDTH-1:0] ack_o_s_next_248;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_249;\n    reg [BD_WIDTH-1:0] ack_o_s_next_249;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_250;\n    reg [BD_WIDTH-1:0] ack_o_s_next_250;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_251;\n    reg [BD_WIDTH-1:0] ack_o_s_next_251;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_252;\n    reg [BD_WIDTH-1:0] ack_o_s_next_252;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_253;\n    reg [BD_WIDTH-1:0] ack_o_s_next_253;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_254;\n    reg [BD_WIDTH-1:0] ack_o_s_next_254;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_255;\n    reg [BD_WIDTH-1:0] ack_o_s_next_255;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_256;\n    reg [BD_WIDTH-1:0] ack_o_s_next_256;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_257;\n    reg [BD_WIDTH-1:0] ack_o_s_next_257;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_258;\n    reg [BD_WIDTH-1:0] ack_o_s_next_258;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_259;\n    reg [BD_WIDTH-1:0] ack_o_s_next_259;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_260;\n    reg [BD_WIDTH-1:0] ack_o_s_next_260;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_261;\n    reg [BD_WIDTH-1:0] ack_o_s_next_261;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_262;\n    reg [BD_WIDTH-1:0] ack_o_s_next_262;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_263;\n    reg [BD_WIDTH-1:0] ack_o_s_next_263;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_264;\n    reg [BD_WIDTH-1:0] ack_o_s_next_264;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_265;\n    reg [BD_WIDTH-1:0] ack_o_s_next_265;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_266;\n    reg [BD_WIDTH-1:0] ack_o_s_next_266;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_267;\n    reg [BD_WIDTH-1:0] ack_o_s_next_267;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_268;\n    reg [BD_WIDTH-1:0] ack_o_s_next_268;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_269;\n    reg [BD_WIDTH-1:0] ack_o_s_next_269;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_270;\n    reg [BD_WIDTH-1:0] ack_o_s_next_270;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_271;\n    reg [BD_WIDTH-1:0] ack_o_s_next_271;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_272;\n    reg [BD_WIDTH-1:0] ack_o_s_next_272;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_273;\n    reg [BD_WIDTH-1:0] ack_o_s_next_273;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_274;\n    reg [BD_WIDTH-1:0] ack_o_s_next_274;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_275;\n    reg [BD_WIDTH-1:0] ack_o_s_next_275;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_276;\n    reg [BD_WIDTH-1:0] ack_o_s_next_276;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_277;\n    reg [BD_WIDTH-1:0] ack_o_s_next_277;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_278;\n    reg [BD_WIDTH-1:0] ack_o_s_next_278;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_279;\n    reg [BD_WIDTH-1:0] ack_o_s_next_279;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_280;\n    reg [BD_WIDTH-1:0] ack_o_s_next_280;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_281;\n    reg [BD_WIDTH-1:0] ack_o_s_next_281;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_282;\n    reg [BD_WIDTH-1:0] ack_o_s_next_282;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_283;\n    reg [BD_WIDTH-1:0] ack_o_s_next_283;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_284;\n    reg [BD_WIDTH-1:0] ack_o_s_next_284;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_285;\n    reg [BD_WIDTH-1:0] ack_o_s_next_285;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_286;\n    reg [BD_WIDTH-1:0] ack_o_s_next_286;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_287;\n    reg [BD_WIDTH-1:0] ack_o_s_next_287;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_288;\n    reg [BD_WIDTH-1:0] ack_o_s_next_288;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_289;\n    reg [BD_WIDTH-1:0] ack_o_s_next_289;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_290;\n    reg [BD_WIDTH-1:0] ack_o_s_next_290;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_291;\n    reg [BD_WIDTH-1:0] ack_o_s_next_291;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_292;\n    reg [BD_WIDTH-1:0] ack_o_s_next_292;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_293;\n    reg [BD_WIDTH-1:0] ack_o_s_next_293;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_294;\n    reg [BD_WIDTH-1:0] ack_o_s_next_294;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_295;\n    reg [BD_WIDTH-1:0] ack_o_s_next_295;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_296;\n    reg [BD_WIDTH-1:0] ack_o_s_next_296;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_297;\n    reg [BD_WIDTH-1:0] ack_o_s_next_297;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_298;\n    reg [BD_WIDTH-1:0] ack_o_s_next_298;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_299;\n    reg [BD_WIDTH-1:0] ack_o_s_next_299;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_300;\n    reg [BD_WIDTH-1:0] ack_o_s_next_300;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_301;\n    reg [BD_WIDTH-1:0] ack_o_s_next_301;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_302;\n    reg [BD_WIDTH-1:0] ack_o_s_next_302;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_303;\n    reg [BD_WIDTH-1:0] ack_o_s_next_303;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_304;\n    reg [BD_WIDTH-1:0] ack_o_s_next_304;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_305;\n    reg [BD_WIDTH-1:0] ack_o_s_next_305;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_306;\n    reg [BD_WIDTH-1:0] ack_o_s_next_306;\n    reg [BD_WIDTH-1:0] ack_o_s_reg_307;\n    reg [BD_WIDTH-1:0] ack_", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_TX_MEM_DEPTH 512\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 11, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 32;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] a_cmp_diff;\n    reg [BD_WIDTH-1:0] a_cmp_diff_1;\n    reg [BD_WIDTH-1:0] a_cmp_diff_2;\n    reg [BD_WIDTH-1:0] a_cmp_diff_3;\n    reg [BD_WIDTH-1:0] a_cmp_diff_4;\n    reg [BD_WIDTH-1:0] a_cmp_diff_5;\n    reg [BD_WIDTH-1:0] a_cmp_diff_6;\n    reg [BD_WIDTH-1:0] a_cmp_diff_7;\n    reg [BD_WIDTH-1:0] a_cmp_diff_8;\n    reg [BD_WIDTH-1:0] a_cmp_diff_9;\n    reg [BD_WIDTH-1:0] a_cmp_diff_10;\n    reg [BD_WIDTH-1:0] a_cmp_diff_11;\n    reg [BD_WIDTH-1:0] a_cmp_diff_12;\n    reg [BD_WIDTH-1:0] a_cmp_diff_13;\n    reg [BD_WIDTH-1:0] a_cmp_diff_14;\n    reg [BD_WIDTH-1:0] a_cmp_diff_15;\n    reg [BD_WIDTH-1:0] a_cmp_diff_16;\n    reg [BD_WIDTH-1:0] a_cmp_diff_17;\n    reg [BD_WIDTH-1:0] a_cmp_diff_18;\n    reg [BD_WIDTH-1:0] a_cmp_diff_19;\n    reg [BD_WIDTH-1:0] a_cmp_diff_20;\n    reg [BD_WIDTH-1:0] a_cmp_diff_21;\n    reg [BD_WIDTH-1:0] a_cmp_diff_22;\n    reg [BD_WIDTH-1:0] a_cmp_diff_23;\n    reg [BD_WIDTH-1:0] a_cmp_diff_24;\n    reg [BD_WIDTH-1:0] a_cmp_diff_25;\n    reg [BD_WIDTH-1:0] a_cmp_diff_26;\n    reg [BD_WIDTH-1:0] a_cmp_diff_27;\n    reg [BD_WIDTH-1:0] a_cmp_diff_28;\n    reg [BD_WIDTH-1:0] a_cmp_diff_29;\n    reg [BD_WIDTH-1:0] a_cmp_diff_30;\n    reg [BD_WIDTH-1:0] a_cmp_diff_31;\n    reg [BD_WIDTH-1:0] a_cmp_diff_32;\n    reg [BD_WIDTH-1:0] a_cmp_diff_33;\n    reg [BD_WIDTH-1:0] a_cmp_diff_34;\n    reg [BD_WIDTH-1:0] a_cmp_diff_35;\n    reg [BD_WIDTH-1:0] a_cmp_diff_36;\n    reg [BD_WIDTH-1:0] a_cmp_diff_37;\n    reg [BD_WIDTH-1:0] a_cmp_diff_38;\n    reg [BD_WIDTH-1:0] a_cmp_diff_39;\n    reg [BD_WIDTH-1:0] a_cmp_diff_40;\n    reg [BD_WIDTH-1:0] a_cmp_diff_41;\n    reg [BD_WIDTH-1:0] a_cmp_diff_42;\n    reg [BD_WIDTH-1:0] a_cmp_diff_43;\n    reg [BD_WIDTH-1:0] a_cmp_diff_44;\n    reg [BD_WIDTH-1:0] a_cmp_diff_45;\n    reg [BD_WIDTH-1:0] a_cmp_diff_46;\n    reg [BD_WIDTH-1:0] a_cmp_diff_47;\n    reg [BD_WIDTH-1:0] a_cmp_diff_48;\n    reg [BD_WIDTH-1:0] a_cmp_diff_49;\n    reg [BD_WIDTH-1:0] a_cmp_diff_50;\n    reg [BD_WIDTH-1:0] a_cmp_diff_51;\n    reg [BD_WIDTH-1:0] a_cmp_diff_52;\n    reg [BD_WIDTH-1:0] a_cmp_diff_53;\n    reg [BD_WIDTH-1:0] a_cmp_diff_54;\n    reg [BD_WIDTH-1:0] a_cmp_diff_55;\n    reg [BD_WIDTH-1:0] a_cmp_diff_56;\n    reg [BD_WIDTH-1:0] a_cmp_diff_57;\n    reg [BD_WIDTH-1:0] a_cmp_diff_58;\n    reg [BD_WIDTH-1:0] a_cmp_diff_59;\n    reg [BD_WIDTH-1:0] a_cmp_diff_60;\n    reg [BD_WIDTH-1:0] a_cmp_diff_61;\n    reg [BD_WIDTH-1:0] a_cmp_diff_62;\n    reg [BD_WIDTH-1:0] a_cmp_diff_63;\n    reg [BD_WIDTH-1:0] a_cmp_diff_64;\n    reg [BD_WIDTH-1:0] a_cmp_diff_65;\n    reg [BD_WIDTH-1:0] a_cmp_diff_66;\n    reg [BD_WIDTH-1:0] a_cmp_diff_67;\n    reg [BD_WIDTH-1:0] a_cmp_diff_68;\n    reg [BD_WIDTH-1:0] a_cmp_diff_69;\n    reg [BD_WIDTH-1:0] a_cmp_diff_70;\n    reg [BD_WIDTH-1:0] a_cmp_diff_71;\n    reg [BD_WIDTH-1:0] a_cmp_diff_72;\n    reg [BD_WIDTH-1:0] a_cmp_diff_73;\n    reg [BD_WIDTH-1:0] a_cmp_diff_74;\n    reg [BD_WIDTH-1:0] a_cmp_diff_75;\n    reg [BD_WIDTH-1:0] a_cmp_diff_76;\n    reg [BD_WIDTH-1:0] a_cmp_diff_77;\n    reg [BD_WIDTH-1:0] a_cmp_diff_78;\n    reg [BD_WIDTH-1:0] a_cmp_diff_79;\n    reg [BD_WIDTH-1:0] a_cmp_diff_80;\n    reg [BD_WIDTH-1:0] a_cmp_diff_81;\n    reg [BD_WIDTH-1:0] a_cmp_diff_82;\n    reg [BD_WIDTH-1:0] a_cmp_diff_83;\n    reg [BD_WIDTH-1:0] a_cmp_diff_84;\n    reg [BD_WIDTH-1:0] a_cmp_diff_85;\n    reg [BD_WIDTH-1:0] a_cmp_diff_86;\n    reg [BD_WIDTH-1:0] a_cmp_diff_87;\n    reg [BD_WIDTH-1:0] a_cmp_diff_88;\n    reg [BD_WIDTH-1:0] a_cmp_diff_89;\n    reg [BD_WIDTH-1:0] a_cmp_diff_90;\n    reg [BD_WIDTH-1:0] a_cmp_diff_91;\n    reg [BD_WIDTH-1:0] a_cmp_diff_92;\n    reg [BD_WIDTH-1:0] a_cmp_diff_93;\n    reg [BD_WIDTH-1:0] a_cmp_diff_94;\n    reg [BD_WIDTH-1:0] a_cmp_diff_95;\n    reg [BD_WIDTH-1:0] a_cmp_diff_96;\n    reg [BD_WIDTH-1:0] a_cmp_diff_97;\n    reg [BD_WIDTH-1:0] a_cmp_diff_98;\n    reg [BD_WIDTH-1:0] a_cmp_diff_99;\n    reg [BD_WIDTH-1:0] a_cmp_diff_100;\n    reg [BD_WIDTH-1:0] a_cmp_diff_101;\n    reg [BD_WIDTH-1:0] a_cmp_diff_102;\n    reg [BD_WIDTH-1:0] a_cmp_diff_103;\n    reg [BD_WIDTH-1:0] a_cmp_diff_104;\n    reg [BD_WIDTH-1:0] a_cmp_diff_105;\n    reg [BD_WIDTH-1:0] a_cmp_diff_106;\n    reg [BD_WIDTH-1:0] a_cmp_diff_107;\n    reg [BD_WIDTH-1:0] a_cmp_diff_108;\n    reg [BD_WIDTH-1:0] a_cmp_diff_109;\n    reg [BD_WIDTH-1:0] a_cmp_diff_110;\n    reg [BD_WIDTH-1:0] a_cmp_diff_111;\n    reg [BD_WIDTH-1:0] a_cmp_diff_112;\n    reg [BD_WIDTH-1:0] a_cmp_diff_113;\n    reg [BD_WIDTH-1:0] a_cmp_diff_114;\n    reg [BD_WIDTH-1:0] a_cmp_diff_115;\n    reg [BD_WIDTH-1:0] a_cmp_diff_116;\n    reg [BD_WIDTH-1:0] a_cmp_diff_117;\n    reg [BD_WIDTH-1:0] a_cmp_diff_118;\n    reg [BD_WIDTH-1:0] a_cmp_diff_119;\n    reg [BD_WIDTH-1:0] a_cmp_diff_120;\n    reg [BD_WIDTH-1:0] a_cmp_diff_121;\n    reg [BD_WIDTH-1:0] a_cmp_diff_122;\n    reg [BD_WIDTH-1:0] a_cmp_diff_123;\n    reg [BD_WIDTH-1:0] a_cmp_diff_124;\n    reg [BD_WIDTH-1:0] a_cmp_diff_125;\n    reg [BD_WIDTH-1:0] a_cmp_diff_126;\n    reg [BD_WIDTH-1:0] a_cmp_diff_127;\n    reg [BD_WIDTH-1:0] a_cmp_diff_128;\n    reg [BD_WIDTH-1:0] a_cmp_diff_129;\n    reg [BD_WIDTH-1:0] a_cmp_diff_130;\n    reg [BD_WIDTH-1:0] a_cmp_diff_131;\n    reg [BD_WIDTH-1:0] a_cmp_diff_132;\n    reg [BD_WIDTH-1:0] a_cmp_diff_133;\n    reg [BD_WIDTH-1:0] a_cmp_diff_134;\n    reg [BD_WIDTH-1:0] a_cmp_diff_135;\n    reg [BD_WIDTH-1:0] a_cmp_diff_136;\n    reg [BD_WIDTH-1:0] a_cmp_diff_137;\n    reg [BD_WIDTH-1:0] a_cmp_diff_138;\n    reg [BD_WIDTH-1:0] a_cmp_diff_139;\n    reg [BD_WIDTH-1:0] a_cmp_diff_140;\n    reg [BD_WIDTH-1:0] a_cmp_diff_141;\n    reg [BD_WIDTH-1:0] a_cmp_diff_142;\n    reg [BD_WIDTH-1:0] a_cmp_diff_143;\n    reg [BD_WIDTH-1:0] a_cmp_diff_144;\n    reg [BD_WIDTH-1:0] a_cmp_diff_145;\n    reg [BD_WIDTH-1:0] a_cmp_diff_146;\n    reg [BD_WIDTH-1:0] a_cmp_diff_147;\n    reg [BD_WIDTH-1:0] a_cmp_diff_148;\n    reg [BD_WIDTH-1:0] a_cmp_diff_149;\n    reg [BD_WIDTH-1:0] a_cmp_diff_150;\n    reg [BD_WIDTH-1:0] a_cmp_diff_151;\n    reg [BD_WIDTH-1:0] a_cmp_diff_152;\n    reg [BD_WIDTH-1:0] a_cmp_diff_153;\n    reg [BD_WIDTH-1:0] a_cmp_diff_154;\n    reg [BD_WIDTH-1:0] a_cmp_diff_155;\n    reg [BD_WIDTH-1:0] a_cmp_diff_156;\n    reg [BD_WIDTH-1:0] a_cmp_diff_157;\n    reg [BD_WIDTH-1:0] a_cmp_diff_158;\n    reg [BD_WIDTH-1:0] a_cmp_diff_159;\n    reg [BD_WIDTH-1:0] a_cmp_diff_160;\n    reg [BD_WIDTH-1:0] a_cmp_diff_161;\n    reg [BD_WIDTH-1:0] a_cmp_diff_162;\n    reg [BD_WIDTH-1:0] a_cmp_diff_163;\n    reg [BD_WIDTH-1:0] a_cmp_diff_164;\n    reg [BD_WIDTH-1:0] a_cmp_diff_165;\n    reg [BD_WIDTH-1:0] a_cmp_diff_166;\n    reg [BD_WIDTH-1:0] a_cmp_diff_167;\n    reg [BD_WIDTH-1:0] a_cmp_diff_168;\n    reg [BD_WIDTH-1:0] a_cmp_diff_169;\n    reg [BD_WIDTH-1:0] a_cmp_diff_170;\n    reg [BD_WIDTH-1:0] a_cmp_diff_171;\n    reg [BD_WIDTH-1:0] a_cmp_diff_172;\n    reg [BD_WIDTH-1:0] a_cmp_diff_173;\n    reg [BD_WIDTH-1:0] a_cmp_diff_174;\n    reg [BD_WIDTH-1:0] a_cmp_diff_175;\n    reg [BD_WIDTH-1:0] a_cmp_diff_176;\n    reg [BD_WIDTH-1:0] a_cmp_diff_177;\n    reg [BD_WIDTH-1:0] a_cmp_diff_178;\n    reg [BD_WIDTH-1:0] a_cmp_diff_179;\n    reg [BD_WIDTH-1:0] a_cmp_diff_180;\n    reg [BD_WIDTH-1:0] a_cmp_diff_181;\n    reg [BD_WIDTH-1:0] a_cmp_diff_182;\n    reg [BD_WIDTH-1:0] a_cmp_diff_183;\n    reg [BD_WIDTH-1:0] a_cmp_diff_184;\n    reg [BD_WIDTH-1:0] a_cmp_diff_185;\n    reg [BD_WIDTH-1:0] a_cmp_diff_186;\n    reg [BD_WIDTH-1:0] a_cmp_diff_187;\n    reg [BD_WIDTH-1:0] a_cmp_diff_188;\n    reg [BD_WIDTH-1:0] a_cmp_diff_189;\n    reg [BD_WIDTH-1:0] a_cmp_diff_190;\n    reg [BD_WIDTH-1:0] a_cmp_diff_191;\n    reg [BD_WIDTH-1:0] a_cmp_diff_192;\n    reg [BD_WIDTH-1:0] a_cmp_diff_193;\n    reg [BD_WIDTH-1:0] a_cmp_diff_194;\n    reg [BD_WIDTH-1:0] a_cmp_diff_195;\n    reg [BD_WIDTH-1:0] a_cmp_diff_196;\n    reg [BD_WIDTH-1:0] a_cmp_diff_197;\n    reg [BD_WIDTH-1:0] a_cmp_diff_198;\n    reg [BD_WIDTH-1:0] a_cmp_diff_199;\n    reg [BD_WIDTH-1:0] a_cmp_diff_200;\n    reg [BD_WIDTH-1:0] a_cmp_diff_201;\n    reg [BD_WIDTH-1:0] a_cmp_diff_202;\n    reg [BD_WIDTH-1:0] a_cmp_diff_203;\n    reg [BD_WIDTH-1:0] a_cmp_diff_204;\n    reg [BD_WIDTH-1:0] a_cmp_diff_205;\n    reg [BD_WIDTH-1:0] a_cmp_diff_206;\n    reg [BD_WIDTH-1:0] a_cmp_diff_207;\n    reg [BD_WIDTH-1:0] a_cmp_diff_208;\n    reg [BD_WIDTH-1:0] a_cmp_diff_209;\n    reg [BD_WIDTH-1:0] a_cmp_diff_210;\n    reg [BD_WIDTH-1:0] a_cmp_diff_211;\n    reg [BD_WIDTH-1:0] a_cmp_diff_212;\n    reg [BD_WIDTH-1:0] a_cmp_diff_213;\n    reg [BD_WIDTH-1:0] a_cmp_diff_214;\n    reg [BD_WIDTH-1:0] a_cmp_diff_215;\n    reg [BD_WIDTH-1:0] a_cmp_diff_216;\n    reg [BD_WIDTH-1:0] a_cmp_diff_217;\n    reg [BD_WIDTH-1:0] a_cmp_diff_218;\n    reg [BD_WIDTH-1:0] a_cmp_diff_219;\n    reg [BD_WIDTH-1:0] a_cmp_diff_220;\n    reg [BD_WIDTH-1:0] a_cmp_diff_221;\n    reg [BD_WIDTH-1:0] a_cmp_diff_222;\n    reg [BD_WIDTH-1:0] a_cmp_diff_223;\n    reg [BD_WIDTH-1:0] a_cmp_diff_224;\n    reg [BD_WIDTH-1:0] a_cmp_diff_225;\n    reg [BD_WIDTH-1:0] a_cmp_diff_226;\n    reg [BD_WIDTH-1:0] a_cmp_diff_227;\n    reg [BD_WIDTH-1:0] a_cmp_diff_228;\n    reg [BD_WIDTH-1:0] a_cmp_diff_229;\n    reg [BD_WIDTH-1:0] a_cmp_diff_230;\n    reg [BD_WIDTH-1:0] a_cmp_diff_231;\n    reg [BD_WIDTH-1:0] a_cmp_diff_232;\n    reg [BD_WIDTH-1:0] a_cmp_diff_233;\n    reg [BD_WIDTH-1:0] a_cmp_diff_234;\n    reg [BD_WIDTH-1:0] a_cmp_diff_235;\n    reg [BD_WIDTH-1:0] a_cmp_diff_236;\n    reg [BD_WIDTH-1:0] a_cmp_diff_237;\n    reg [BD_WIDTH-1:0] a_cmp_diff_238;\n    reg [BD_WIDTH-1:0] a_cmp_diff_239;\n    reg [BD_WIDTH-1:0] a_cmp_diff_240;\n    reg [BD_WIDTH-1:0] a_cmp_diff_241;\n    reg [BD_WIDTH-1:0] a_cmp_diff_242;\n    reg [BD_WIDTH-1:0] a_cmp_diff_243;\n    reg [BD_WIDTH-1:0] a_cmp_diff_244;\n    reg [BD_WIDTH-1:0] a_cmp_diff_245;\n    reg [BD_WIDTH-1:0] a_cmp_diff_246;\n    reg [BD_WIDTH-1:0] a_cmp_diff_247;\n    reg [BD_WIDTH-1:0] a_cmp_diff_248;\n    reg [BD_WIDTH-1:0] a_cmp_diff_249;\n    reg [BD_WIDTH-1:0] a_cmp_diff_250;\n    reg [BD_WIDTH-1:0] a_cmp_diff_251;\n    reg [BD_WIDTH-1:0] a_cmp_diff_252;\n    reg [BD_WIDTH-1:0] a_cmp_diff_253;\n    reg [BD_WIDTH-1:0] a_cmp_diff_254;\n    reg [BD_WIDTH-1:0] a_cmp_diff_255;\n    reg [BD_WIDTH-1:0] a_cmp_diff_256;\n    reg [BD_WIDTH-1:0] a_cmp_diff_257;\n    reg [BD_WIDTH-1:0] a_cmp_diff_258;\n    reg [BD_WIDTH-1:0] a_cmp_diff_259;\n    reg [BD_WIDTH-1:0] a_cmp_diff_260;\n    reg [BD_WIDTH-1:0] a_cmp_diff_261;\n    reg [BD_WIDTH-1:0] a_cmp_diff_262;\n    reg [BD_WIDTH-1:0] a_cmp_diff_263;\n    reg [BD_WIDTH-1:0] a_cmp_diff_264;\n    reg [BD_WIDTH-1:0] a_cmp_diff_265;\n    reg [BD_WIDTH-1:0] a_cmp_diff_266;\n    reg [BD_WIDTH-1:0] a_cmp_diff_267;\n    reg [BD_WIDTH-1:0] a_cmp_diff_268;\n    reg [BD_WIDTH-1:0] a_cmp_diff_269;\n    reg [BD_WIDTH-1:0] a_cmp_diff_270;\n    reg [BD_WIDTH-1:0] a_cmp_diff_271;\n    reg [BD_WIDTH-1:0] a_cmp_diff_272;\n    reg [BD_WIDTH-1:0] a_cmp_diff_273;\n    reg [BD_WIDTH-1:0] a_cmp_diff_274;\n    reg [BD_WIDTH-1:0] a_cmp_diff_275;\n    reg [BD_WIDTH-1:0] a_cmp_diff_276;\n    reg [BD_WIDTH-1:0] a_cmp_diff_277;\n    reg [BD_WIDTH-1:0] a_cmp_diff_278;\n    reg [BD_WIDTH-1:0] a_cmp_diff_279;\n    reg [BD_WIDTH-1:0] a_cmp_diff_280;\n    reg [BD_WIDTH-1:0] a_cmp_diff_281;\n    reg [BD_WIDTH-1:0] a_cmp_diff_282;\n    reg [BD_WIDTH-1:0] a_cmp_diff_283;\n    reg [BD_WIDTH-1:0] a_cmp_diff_284;\n    reg [BD_WIDTH-1:0] a_cmp_diff_285;\n    reg [BD_WIDTH-1:0] a_cmp_diff_286;\n    reg [BD_WIDTH-1:0] a_cmp_diff_287;\n    reg [BD_WIDTH-1:0] a_cmp_diff_288;\n    reg [BD_WIDTH-1:0] a_cmp_diff_289;\n    reg [BD_WIDTH-1:0] a_cmp_diff_290;\n    reg [BD_WIDTH-1:0] a_cmp_diff_291;\n    reg [BD_WIDTH-1:0] a_cmp_diff_292;\n    reg [BD_WIDTH-1:0] a_cmp_diff_293;\n    reg [BD_WIDTH-1:0] a_cmp_diff_294;\n    reg [BD_WIDTH-1:0] a_cmp_diff_295;\n    reg [BD_WIDTH-1:0] a_cmp_diff_296;\n    reg [BD_WIDTH-1:0] a_cmp_diff_297;\n    reg [BD_WIDTH-1:0] a_cmp_diff_298;\n    reg [BD_WIDTH-1:0] a_cmp_diff_299;\n    reg [BD_WIDTH-1:0] a_cmp_diff_300;\n    reg [BD_WIDTH-1:0] a_cmp_diff_301;\n    reg [BD_WIDTH-1:0] a_cmp_diff_302;\n    reg [BD_WIDTH-1:0] a_cmp_diff_303;\n    reg [BD_WIDTH-1:0] a_cmp_diff_304;\n    reg [BD_WIDTH-1:0] a_cmp_diff_305;\n    reg [BD_WIDTH-1:0] a_cmp_diff_306;\n    reg [BD_WIDTH-1:0] a_cmp_diff_307;\n    reg [BD_WIDTH-1:0] a_cmp_diff_308;\n    reg [BD_WIDTH-1:0] a_cmp_diff_309;\n    reg [BD_WIDTH-1:0] a_cmp_diff_310;\n    reg [BD_WIDTH-1:0] a_cmp_diff_311;\n    reg [BD_WIDTH-1:0] a_cmp_diff_312;\n    reg [BD_WIDTH-1:0] a_cmp_diff_313;\n    reg [BD_WIDTH-1:0] a_cmp_diff_314;\n    reg [BD_WIDTH-1:0] a_cmp_diff_315;\n    reg [BD_WIDTH-1:0] a_cmp_diff_316;\n    reg [BD_WIDTH-1:0] a_cmp_diff_317;\n    reg [BD_WIDTH-1:0] a_cmp_diff_318;\n    reg [BD_WIDTH-1:0] a_cmp_diff_319;\n    reg [BD_WIDTH-1:0] a_cmp_diff_320;\n    reg [BD_WIDTH-1:0] a_cmp_diff_321;\n    reg [BD_WIDTH-1:0] a_cmp_diff_322;\n    reg [BD_WIDTH-1:0] a_cmp_diff_323;\n    reg [BD_WIDTH-1:0] a_cmp_diff_324;\n    reg [BD_WIDTH-1:0] a_cmp_diff_325;\n    reg [BD_WIDTH-1:0] a_cmp_diff_326;\n    reg [BD_WIDTH-1:0] a_cmp_diff_327;\n    reg [BD_WIDTH-1:0] a_cmp_diff_328;\n    reg [BD_WIDTH-1:0] a_cmp_diff_329;\n    reg [BD_WIDTH-1:0] a_cmp_diff_330;\n    reg [BD_WIDTH-1:0] a_cmp_diff_331;\n    reg [BD_WIDTH-1:0] a_cmp_diff_332;\n    reg [BD_WIDTH-1:0] a_cmp_diff_333;\n    reg [BD_WIDTH-1:0] a_cmp_diff_334;\n    reg [BD_WIDTH-1:0] a_cmp_diff_335;\n    reg [BD_WIDTH-1:0] a_cmp_diff_336;\n    reg [BD_WIDTH-1:0] a_cmp_diff_337;\n    reg [BD_WIDTH-1:0] a_cmp_diff_338;\n    reg [BD_WIDTH-1:0] a_cmp_diff_339;\n    reg [BD_WIDTH-1:0] a_cmp_diff_340;\n    reg [BD_WIDTH-1:0] a_cmp_diff_341;\n    reg [BD_WIDTH-1:0] a_cmp_diff_342;\n    reg [BD_WIDTH-1:0] a_cmp_diff_343;\n    reg [BD_WIDTH-1:0] a_cmp_diff_344;\n    reg [BD_WIDTH-1:0] a_cmp_diff_345;\n    reg [BD_WIDTH-1:0] a_cmp_diff_346;\n    reg [BD_WIDTH-1:0] a_cmp_diff_347;\n    reg [BD_WIDTH-1:0] a_cmp_diff_348;\n    reg [BD_WIDTH-1:0] a_cmp_diff_349;\n    reg [BD_WIDTH-1:0] a_cmp_diff_350;\n    reg [BD_WIDTH-1:0] a_cmp_diff_351;\n    reg [BD_WIDTH-1:0] a_cmp_diff_352;\n    reg [BD_WIDTH-1:0] a_cmp_diff_353;\n    reg [BD_WIDTH-1:0] a_cmp_diff_354;\n    reg [BD_WIDTH-1:0] a_cmp_diff_355;\n    reg [BD_WIDTH-1:0] a_cmp_diff_356;\n    reg [BD_WIDTH-1:0] a_cmp_diff_357;\n    reg [BD_WIDTH-1:0] a_cmp_diff_358;\n    reg [BD_WIDTH-1:0] a_cmp_diff_359;\n    reg [BD_WIDTH-1:0] a_cmp_diff_360;\n    reg [BD_WIDTH-1:0] a_cmp_diff_361;\n    reg [BD_WIDTH-1:0] a_cmp_diff_362;\n    reg [BD_WIDTH-1:0] a_cmp_diff_363;\n    reg [BD_WIDTH-1:0] a_cmp_diff_364;\n    reg [BD_WIDTH-1:0] a_cmp_diff_365;\n    reg [BD_WIDTH-1:0] a_cmp_diff_366;\n    reg [BD_WIDTH-1:0] a_cmp_diff_367;\n    reg [BD_WIDTH-1:0] a_cmp_diff_368;\n    reg [BD_WIDTH-1:0] a_cmp_diff_369;\n    reg [BD_WIDTH-1:0] a_cmp_diff_370;\n    reg [BD_WIDTH-1:0] a_cmp_diff_371;\n    reg [BD_WIDTH-1:0] a_cmp_diff_372;\n    reg [BD_WIDTH-1:0] a_cmp_diff_373;\n    reg [BD_WIDTH-1:0] a_cmp_diff_374;\n    reg [BD_WIDTH-1:0] a_cmp_diff_375;\n    reg [BD_WIDTH-1:0] a_cmp_diff_376;\n    reg [BD_WIDTH-1:0] a_cmp_diff_377;\n    reg [BD_WIDTH-1:0] a_cmp_diff_378;\n    reg [BD_WIDTH-1:0] a_cmp_diff_379;\n    reg [BD_WIDTH-1:0] a_cmp_diff_380;\n    reg [BD_WIDTH-1:0] a_cmp_diff_381;\n    reg [BD_WIDTH-1:0] a_cmp_diff_382;\n    reg [BD_WIDTH-1:0] a_cmp_diff_383;\n    reg [BD_WIDTH-1:0] a_cmp_diff_384;\n    reg [BD_WIDTH-1:0] a_cmp_diff_385;\n    reg [BD_WIDTH-1:0] a_cmp_diff_386;\n    reg [BD_WIDTH-1:0] a_cmp_diff_387;\n    reg [BD_WIDTH-1:0] a_cmp_diff_388;\n    reg [BD_WIDTH-1:0] a_cmp_diff_389;\n    reg [BD_WIDTH-1:0] a_cmp_diff_390;\n    reg [BD_WIDTH-1:0] a_cmp_diff_391;\n    reg [BD_WIDTH-1:0] a_cmp_diff_392;\n    reg [BD_WIDTH-1:0] a_cmp_diff_393;\n    reg [BD_WIDTH-1:0] a_cmp_diff_394;\n    reg [BD_WIDTH-1:0] a_cmp_diff_395;\n    reg [BD_WIDTH-1:0] a_cmp_diff_396;\n    reg [BD_WIDTH-1:0] a_cmp_diff_397;\n    reg [BD_WIDTH-1:0] a_cmp_diff_398;\n    reg [BD_WIDTH-1:0] a_cmp_diff_399;\n    reg [BD_WIDTH-1:0] a_cmp_diff_400;\n    reg [BD_WIDTH-1:0] a_cmp_diff_401;\n    reg [BD_WIDTH-1:0] a_cmp_diff_402;\n    reg [BD_WIDTH-1:0] a_cmp_diff_403;\n    reg [BD_WIDTH-1:0] a_cmp_diff_404;\n    reg [BD_WIDTH-1:0] a_cmp_diff_405;\n    reg [BD_WIDTH-1:0] a_cmp_diff_406;\n    reg [BD_WIDTH-1:0] a_cmp_diff_407;\n    reg [BD_WIDTH-1:0] a_cmp_diff_408;\n    reg [BD_WIDTH-1:0] a_cmp_diff_409;\n    reg [BD_WIDTH-1:0] a_cmp_diff_410;\n    reg [BD_WIDTH-1:0] a_cmp_diff_411;\n    reg [BD_WIDTH-1:0] a_cmp_diff_412;\n    reg [BD_WIDTH-1:0] a_cmp_diff_413;\n    reg [BD_WIDTH-1:0] a_cmp_diff_414;\n    reg [BD_WIDTH-1:0] a_cmp_diff_415;\n    reg [BD_WIDTH-1:0] a_cmp_diff_416;\n    reg [BD_WIDTH-1:0] a_cmp_diff_417;\n    reg [BD_WIDTH-1:0] a_cmp_diff_418;\n    reg [BD_WIDTH-1:0] a_cmp_diff_419;\n    reg [BD_WIDTH-1:0] a_cmp_diff_420;\n    reg [BD_WIDTH-1:0] a_cmp_diff_421;\n    reg [BD_WIDTH-1:0] a_cmp_diff_422;\n    reg [BD_WIDTH-1:0] a_cmp_diff_423;\n    reg [BD_WIDTH-1:0] a_cmp_diff_424;\n    reg [BD_WIDTH-1:0] a_cmp_diff_425;\n    reg [BD_WIDTH-1:0] a_cmp_diff_426;\n    reg [BD_WIDTH-1:0] a_cmp_diff_427;\n    reg [BD_WIDTH-1:0] a_cmp_diff_428;\n    reg [BD_WIDTH-1:0] a_cmp_diff_429;\n    reg [BD_WIDTH-1:0] a_cmp_diff_430;\n    reg [BD_WIDTH-1:0] a_cmp_diff_431;\n    reg [BD_WIDTH-1:0] a_cmp_diff_432;\n    reg [BD_WIDTH-1:0] a_cmp_diff_433;\n    reg [BD_WIDTH-1:0] a_cmp_diff_434;\n    reg [BD_WIDTH-1:0] a_cmp_diff_435;\n    reg [BD_WIDTH-1:0] a_cmp_diff_436;\n    reg [BD_WIDTH-1:0] a_cmp_diff_437;\n    reg [BD_WIDTH-1:0] a_cmp_diff_438;\n    reg [BD_WIDTH-1:0] a_cmp_diff_439;\n    reg [BD_WIDTH-1:0] a_cmp_diff_440;\n    reg [BD_WIDTH-1:0] a_cmp_diff_441;\n    reg [BD_WIDTH-1:0] a_cmp_diff_442;\n    reg [BD_WIDTH-1:0] a_cmp_diff_443;\n    reg [BD_WIDTH-1:0] a_cmp_diff_444;\n    reg [BD_WIDTH-1:0] a_cmp_diff_445;\n    reg [BD_WIDTH-1:0] a_cmp_diff_446;\n    reg [BD_WIDTH-1:0] a_cmp_diff_447;\n    reg [BD_WIDTH-1:0] a_cmp_diff_448;\n    reg [BD_WIDTH-1:0] a_cmp_diff_449;\n    reg [BD_WIDTH-1:0] a_cmp_diff_450;\n    reg [BD_WIDTH-1:0] a_cmp_diff_451;\n    reg [BD_WIDTH-1:0] a_cmp_diff_452;\n    reg [BD_WIDTH-1:0] a_cmp_diff_453;\n    reg [BD_WIDTH-1:0] a_cmp_diff_454;\n    reg [BD_WIDTH-1:0] a_cmp_diff_455;\n    reg [BD_WIDTH-1:0] a_cmp_diff_456;\n    reg [BD_WIDTH-1:0] a_cmp_diff_457;\n    reg [BD_WIDTH-1:0] a_cmp_diff_458;\n    reg [BD_WIDTH-1:0] a_cmp_diff_459;\n    reg [BD_WIDTH-1:0] a_cmp_diff_460;\n    reg [BD_WIDTH-1:0] a_cmp_diff_461;\n    reg [BD_WIDTH-1:0] a_cmp_diff_462;\n    reg [BD_WIDTH-1:0] a_cmp_diff_463;\n    reg [BD_WIDTH-1:0] a_cmp_diff_464;\n    reg [BD_WIDTH-1:0] a_cmp_diff_465;\n    reg [BD_WIDTH-1:0] a_cmp_diff_466;\n    reg [BD_WIDTH-1:0] a_cmp_diff_467;\n    reg [BD_WIDTH-1:0] a_cmp_diff_468;\n    reg [BD_WIDTH-1:0] a_cmp_diff_469;\n    reg [BD_WIDTH-1:0] a_cmp_diff_470;\n    reg [BD_WIDTH-1:0] a_cmp_diff_471;\n    reg [BD_WIDTH-1:0] a_cmp_diff_472;\n    reg [BD_WIDTH-1:0] a_cmp_diff_473;\n    reg [BD_WIDTH-1:0] a_cmp_diff_474;\n    reg [BD_WIDTH-1:0] a_cmp_diff_475;\n    reg [BD_WIDTH-1:0] a_cmp_diff_476;\n    reg [BD_WIDTH-1:0] a_cmp_diff_477;\n    reg [BD_WIDTH-1:0] a_cmp_diff_478;\n    reg [BD_WIDTH-1:0] a_cmp_diff_479;\n    reg [BD_WIDTH-1:0] a_cmp_diff_480;\n    reg [BD_WIDTH-1:0] a_cmp_diff_481;\n    reg [BD_WIDTH-1:0] a_cmp_diff_482;\n    reg [BD_WIDTH-1:0] a_cmp_diff_483;\n    reg [BD_WIDTH-1:0] a_cmp_diff_484;\n    reg [BD_WIDTH-1:0] a_cmp_diff_485;\n    reg [BD_WIDTH-1:0] a_cmp_diff_486;\n    reg [BD_WIDTH-1:0] a_cmp_diff_487;\n    reg [BD_WIDTH-1:0] a_cmp_diff_488;\n    reg [BD_WIDTH-1:0] a_cmp_diff_489;\n    reg [BD_WIDTH-1:0] a_cmp_diff_490;\n    reg [BD_WIDTH-1:0] a_cmp_diff_491;\n    reg [BD_WIDTH-1:0] a_cmp_diff_492;\n    reg [BD_WIDTH-1:0] a_cmp_diff_493;\n    reg [BD_WIDTH-1:0] a_cmp_diff_494;\n    reg [BD_WIDTH-1:0] a_cmp_diff_495;\n    reg [BD_WIDTH-1:0] a_cmp_diff_496;\n    reg [BD_WIDTH-1:0] a_cmp_diff_497;\n    reg [BD_WIDTH-1:0] a_cmp_diff_498;\n    reg [BD_WIDTH-1:0] a_cmp_diff_499;\n    reg [BD_WIDTH-1:0] a_cmp_diff_500;\n    reg [BD_WIDTH-1:0] a_cmp_diff_501;\n    reg [BD_WIDTH-1:0] a_cmp_diff_502;\n    reg [BD_WIDTH-1:0] a_cmp_diff_503;\n    reg [BD_WIDTH-1:0] a_cmp_diff_504;\n    reg [BD_WIDTH-1:0] a_cmp_diff_505;\n    reg [BD_WIDTH-1:0] a_cmp_diff_506;\n    reg [BD_WIDTH-1:0] a_cmp_diff_507;\n    reg [BD_WIDTH-1:0] a_cmp_diff_508;\n    reg [BD_WIDTH-1:0] a_cmp_diff_509;\n    reg [BD_WIDTH-1:0] a_cmp_diff_510;\n    reg [BD_WIDTH-1:0] a_cmp_diff_511;\n    reg [BD_WIDTH-1:0] a_cmp_diff_512;\n    reg [BD_WIDTH-1:0] a_cmp_diff_513;\n    reg [BD_WIDTH-1:0] a_cmp_diff_514;\n    reg [BD_WIDTH-1:0] a_cmp_diff_515;\n    reg [BD_WIDTH-1:0] a_cmp_diff_516;\n    reg [BD_WIDTH-1:0] a_cmp_diff_517;\n    reg [BD_WIDTH-1:0] a_cmp_diff_518;\n    reg [BD_WIDTH-1:0] a_cmp_diff_519;\n    reg [BD_WIDTH-1:0] a_cmp_diff_520;\n    reg [BD_WIDTH-1:0] a_cmp_diff_521;\n    reg [BD_WIDTH-1:0] a_cmp_diff_522;\n    reg [BD_WIDTH-1:0] a_cmp_diff_523;\n    reg [BD_WIDTH-1:0] a_cmp_diff_524;\n    reg [BD_WIDTH-1:0] a_cmp_diff_525;\n    reg [BD_WIDTH-1:0] a_cmp_diff_526;\n    reg [BD_WIDTH-1:0] a_cmp_diff_527;\n    reg [BD_WIDTH-1:0] a_cmp_diff_528;\n    reg [BD_WIDTH-1:0] a_cmp_diff_529;\n    reg [BD_WIDTH-1:0] a_cmp_diff_530;\n    reg [BD_WIDTH-1:0] a_cmp_diff_531;\n    reg [BD_WIDTH-1:0] a_cmp_diff_532;\n    reg [BD_WIDTH-1:0] a_cmp_diff_533;\n    reg [BD_WIDTH-1:0] a_cmp_diff_534;\n    reg [BD_WIDTH-1:0] a_cmp_diff_535;\n    reg [BD_WIDTH-1:0] a_cmp_diff_536;\n    reg [BD_WIDTH-1:0] a_cmp_diff_537;\n    reg [BD_WIDTH-1:0] a_cmp_diff_538;\n    reg [BD_WIDTH-1:0] a_cmp_diff_539;\n    reg [BD_WIDTH-1:0] a_cmp_diff_540;\n    reg [BD_WIDTH-1:0] a_cmp_diff_541;\n    reg [BD_WIDTH-1:0] a_cmp_diff_542;\n    reg [BD_WIDTH-1:0] a_cmp_diff_543;\n    reg [BD_WIDTH-1:0] a_cmp_diff_544;\n    reg [BD_WIDTH-1:0] a_cmp_diff_545;\n    reg [BD_WIDTH-1:0] a_cmp_diff_546;\n    reg [BD_WIDTH-1:0] a_cmp_diff_547;\n    reg [BD_WIDTH-1:0] a_cmp_diff_548;\n    reg [BD_WIDTH-1:0] a_cmp_diff_549;\n    reg [BD_WIDTH-1:0] a_cmp_diff_550;\n    reg [BD_WIDTH-1:0] a_cmp_diff_551;\n    reg [BD_WIDTH-1:0] a_cmp_diff_552;\n    reg [BD_WIDTH-1:0] a_cmp_diff_553;\n    reg [BD_WIDTH-1:0] a_cmp_diff_554;\n    reg [BD_WIDTH-1:0] a_cmp_diff_555;\n    reg [BD_WIDTH-1:0] a_cmp_diff_556;\n    reg [BD_WIDTH-1:0] a_cmp_diff_557;\n    reg [BD_WIDTH-1:0] a_cmp_diff_558;\n    reg [BD_WIDTH-1:0] a_cmp_diff_559;\n    reg [BD_WIDTH-1:0] a_cmp_diff_560;\n    reg [BD_WIDTH-1:0] a_cmp_diff_561;\n    reg [BD_WIDTH-1:0] a_cmp_diff_562;\n    reg [BD_WIDTH-1:0] a_cmp_diff_563;\n    reg [BD_WIDTH-1:0] a_cmp_diff_564;\n    reg [BD_WIDTH-1:0] a_cmp_diff_565;\n    reg [BD_WIDTH-1:0] a_cmp_diff_566;\n    reg [BD_WIDTH-1:0] a_cmp_diff_567;\n    reg [BD_WIDTH-1:0] a_cmp_diff_568;\n    reg [BD_WIDTH-1:0] a_cmp_diff_569;\n    reg [BD_WIDTH-1:0] a_cmp_diff_570;\n    reg [BD_WIDTH-1:0] a_cmp_diff_571;\n    reg [BD_WIDTH-1:0] a_cmp_diff_572;\n    reg [BD_WIDTH-1:0] a_cmp_diff_573;\n    reg [BD_WIDTH-1:0] a_cmp_diff_574;\n    reg [BD_WIDTH-1:0] a_cmp_diff_575;\n    reg [BD_WIDTH-1:0] a_cmp_diff_576;\n    reg [BD_WIDTH-1:0] a_cmp_diff_577;\n    reg [BD_WIDTH-1:0] a_cmp_diff_578;\n    reg [BD_WIDTH-1:0] a_cmp_diff_579;\n    reg [BD_WIDTH-1:0] a_cmp_diff_580;\n    reg [BD_WIDTH-1:0] a_cmp_diff_581;\n    reg [BD_WIDTH-1:0] a_cmp_diff_582;\n    reg [BD_WIDTH-1:0] a_cmp_diff_583;\n    reg [BD_WIDTH-1:0] a_cmp_diff_584;\n    reg [BD_WIDTH-1:0] a_cmp_diff_585;\n    reg [BD_WIDTH-1:0] a_cmp_diff_586;\n    reg [BD_WIDTH-1:0] a_cmp_diff_587;\n    reg [BD_WIDTH-1:0] a_cmp_diff_588;\n    reg [BD_WIDTH-1:0] a_cmp_diff_589;\n    reg [BD_WIDTH-1:0] a_cmp_diff_590;\n    reg [BD_WIDTH-1:0] a_cmp_diff_591;\n    reg [BD_WIDTH-1:0] a_cmp_diff_592;\n    reg [BD_WIDTH-1:0] a_cmp_diff_593;\n    reg [BD_WIDTH-1:0] a_cmp_diff_594;\n    reg [BD_WIDTH-1:0] a_cmp_diff_595;\n    reg [BD_WIDTH-1:0] a_cmp_diff_596;\n    reg [BD_WIDTH-1:0] a_cmp_diff_597;\n    reg [BD_WIDTH-1:0] a_cmp_diff_598;\n    reg [BD_WIDTH-1:0] a_cmp_diff_599;\n    reg [BD_WIDTH-1:0] a_cmp_diff_600;\n    reg [BD_WIDTH-1:0] a_cmp_diff_601;\n    reg [BD_WIDTH-1:0] a_cmp_diff_602;\n    reg [BD_WIDTH-1:0] a_cmp_diff_603;\n    reg [BD_WIDTH-1:0] a_cmp_diff_604;\n    reg [BD_WIDTH-1:0] a_cmp_diff_605;\n    reg [BD_WIDTH-1:0] a_cmp_diff_606;\n    reg [BD_WIDTH-1:0] a_cmp_diff_607;\n    reg [BD_WIDTH-1:0] a_cmp_diff_608;\n    reg [BD_WIDTH-1:0] a_cmp_diff_609;\n    reg [BD_WIDTH-1:0] a_cmp_diff_610;\n    reg [BD_WIDTH-1:0] a_cmp_diff_611;\n    reg [BD_WIDTH-1:0] a_cmp_diff_612;\n    reg [BD_WIDTH-1:0] a_cmp_diff_613;\n    reg [BD_WIDTH-1:0] a_cmp_diff_614;\n    reg [BD_WIDTH-1:0] a_cmp_diff_615;\n    reg [BD_WIDTH-1:0] a_cmp_diff_616;\n    reg [BD_WIDTH-1:0] a_cmp_diff_617;\n    reg [BD_WIDTH-1:0] a_cmp_diff_618;\n    reg [BD_WIDTH-1:0] a_cmp_diff_619;\n    reg [BD_WIDTH-1:0] a_cmp_diff_620;\n    reg [BD_WIDTH-1:0] a_cmp_diff_621;\n    reg [BD_WIDTH-1:0] a_cmp_diff_622;\n    reg [BD_WIDTH-1:0] a_cmp_diff_623;\n    reg [BD_WIDTH-1:0] a_cmp_diff_624;\n    reg [BD_WIDTH-1:0] a_cmp_diff_625;\n    reg [BD_WIDTH-1:0] a_cmp_diff_626;\n    reg [BD_WIDTH-1:0] a_cmp_diff_627;\n    reg [BD_WIDTH-1:0] a_cmp_diff_628;\n    reg [BD_WIDTH-1:0] a_cmp_diff_629;\n    reg [BD_WIDTH-1:0] a_cmp_diff_630;\n    reg [BD_WIDTH-1:0] a_cmp_diff_631;\n    reg [BD_WIDTH-1:0] a_cmp_diff_632;\n    reg [BD_WIDTH-1:0] a_cmp_diff_633;\n    reg [BD_WIDTH-1:0] a_cmp_diff_634;\n    reg [BD_WIDTH-1:0] a_cmp_diff_635;\n    reg [BD_WIDTH-1:0] a_cmp_diff_636;\n    reg [BD_WIDTH-1:0] a_cmp_diff_637;\n    reg [BD_WIDTH-1:0] a_cmp_diff_638;\n    reg [BD_WIDTH-1:0] a_cmp_diff_639;\n    reg [BD_WIDTH-1:0] a_cmp_diff_640;\n    reg [BD_WIDTH-1:0] a_cmp_diff_641;\n    reg [BD_WIDTH-1:0] a_cmp_diff_642;\n    reg [BD_WIDTH-1:0] a_cmp_diff_643;\n    reg [BD_WIDTH-1:0] a_cmp_diff_644;\n    reg [BD_WIDTH-1:0] a_cmp_diff_645;\n    reg [BD_WIDTH-1:0] a_cmp_diff_646;\n    reg [BD_WIDTH-1:0] a_cmp_diff_647;\n    reg [BD_WIDTH-1:0] a_cmp_diff_648;\n    reg [BD_WIDTH-1:0] a_cmp_diff_649;\n    reg [BD_WIDTH-1:0] a_cmp_diff_650;\n    reg [BD_WIDTH-1:0] a_cmp_diff_651;\n    reg [BD_WIDTH-1:0] a_cmp_diff_652;\n    reg [BD_WIDTH-1:0] a_cmp_diff_653;\n    reg [BD_WIDTH-1:0] a_cmp_diff_654;\n    reg [BD_WIDTH-1:0] a_cmp_diff_655;\n    reg [BD_WIDTH-1:0] a_cmp_diff_656;\n    reg [BD_WIDTH-1:0] a_cmp_diff_657;\n    reg [BD_WIDTH-1:0] a_cmp_diff_658;\n    reg [BD_WIDTH-1:0] a_cmp_diff_659;\n    reg [BD_WIDTH-1:0] a_cmp_diff_660;\n    reg [BD_WIDTH-1:0] a_cmp_diff_661;\n    reg [BD_WIDTH-1:0] a_cmp_diff_662;\n    reg [BD_WIDTH-1:0] a_cmp_diff_663;\n    reg [BD_WIDTH-1:0] a_cmp_diff_664;\n    reg [BD_WIDTH-1:0] a_cmp_diff_665;\n    reg [BD_WIDTH-1:0] a_cmp_diff_666;\n    reg [BD_WIDTH-1:0] a_cmp_diff_667;\n    reg [BD_WIDTH-1:0] a_cmp_diff_668;\n    reg [BD_WIDTH-1:0] a_cmp_diff_669;\n    reg [BD_WIDTH-1:0] a_cmp_diff_670;\n    reg [BD_WIDTH-1:0] a_cmp_diff_671;\n    reg [BD_WIDTH-1:0] a_cmp_diff_672;\n    reg [BD_WIDTH-1:0] a_cmp_diff_673;\n    reg [BD_WIDTH", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 12, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 128;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n    parameter BIG_ENDIAN = 1;\n    parameter LITTLE_ENDIAN = 0;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg new_bw;\n    reg last_a_cmp;\n\n    reg [RAM_MEM_WIDTH-1:0] bd_mem [BD_SIZE-1:0];\n\n    assign free_bd = free_bd_reg;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            free_bd_reg <= BD_SIZE / 2;\n            m_wr_pnt <= 0;\n            s_rd_pnt <= 0;\n            m_wr_cnt <= 0;\n            s_rd_cnt <= 0;\n            new_bw <= 0;\n            last_a_cmp <= 0;\n        end else begin\n            if (we_m) begin\n                if (free_bd_reg > 0) begin\n                    bd_mem[m_wr_pnt] <= dat_in_m;\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    m_wr_cnt <= m_wr_cnt + 1;\n                    if (m_wr_cnt == 1) begin\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 2) begin\n                        new_bw <= 0;\n                        free_bd_reg <= free_bd_reg - 1;\n                    end\n                end\n            end\n            if (re_s) begin\n                if (s_rd_cnt == 0) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= s_rd_cnt + 1;\n                end else if (s_rd_cnt == 1) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= s_rd_cnt + 1;\n                end else if (s_rd_cnt == 2) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= s_rd_cnt + 1;\n                end else if (s_rd_cnt == 3) begin\n                    dat_out_s <= bd_mem[s_rd_pnt];\n                    s_rd_pnt <= s_rd_pnt + 1;\n                    s_rd_cnt <= 0;\n                    ack_o_s <= 1;\n                end\n            end\n            if (a_cmp) begin\n                if (!last_a_cmp) begin\n                    free_bd_reg <= free_bd_reg + 1;\n                end\n                last_a_cmp <= 1;\n            end else begin\n                last_a_cmp <= 0;\n            end\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 13, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    // Define constants\n    parameter BD_SIZE = 64;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n    parameter RAM_MEM_WIDTH_16 = 16;\n\n    // Define internal signals\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [RAM_MEM_WIDTH-1:0] bd_mem [BD_SIZE-1:0];\n    reg [RAM_MEM_WIDTH-1:0] dat_out_s_reg;\n    reg ack_o_s_reg;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] last_a_cmp_reg;\n    reg [BD_WIDTH-1:0] last_a_cmp_next;\n\n    // Define internal variables\n    integer i;\n\n    // Initialize internal signals\n    initial begin\n        free_bd_reg = 0;\n        m_wr_pnt = 0;\n        s_rd_pnt = 0;\n        m_wr_cnt = 0;\n        s_rd_cnt = 0;\n        dat_out_s_reg = 0;\n        ack_o_s_reg = 0;\n        new_bw = 0;\n        last_a_cmp = 0;\n        last_a_cmp_reg = 0;\n        last_a_cmp_next = 0;\n    end\n\n    // Update internal signals\n    always @(posedge clk) begin\n        if (rst) begin\n            free_bd_reg <= 0;\n            m_wr_pnt <= 0;\n            s_rd_pnt <= 0;\n            m_wr_cnt <= 0;\n            s_rd_cnt <= 0;\n            dat_out_s_reg <= 0;\n            ack_o_s_reg <= 0;\n            new_bw <= 0;\n            last_a_cmp <= 0;\n            last_a_cmp_reg <= 0;\n            last_a_cmp_next <= 0;\n        end else begin\n            free_bd_reg <= free_bd_next;\n            dat_out_s_reg <= bd_mem[s_rd_pnt];\n            ack_o_s_reg <= (s_rd_cnt == 0) ? 0 : 1;\n            last_a_cmp_reg <= last_a_cmp;\n            last_a_cmp_next <= (a_cmp) ? 0 : (last_a_cmp_reg + 1);\n        end\n    end\n\n    // Update free_bd\n    always @(*) begin\n        free_bd_next = free_bd_reg;\n        if (we_m && (free_bd_reg > 0)) begin\n            free_bd_next = free_bd_reg - 1;\n        end\n        if (re_s && (s_rd_cnt > 0)) begin\n            free_bd_next = free_bd_reg + 1;\n        end\n        if (a_cmp && (last_a_cmp_reg > 0)) begin\n            free_bd_next = free_bd_reg + 1;\n        end\n    end\n\n    // Write BD\n    always @(posedge clk) begin\n        if (we_m && (free_bd_reg > 0)) begin\n            bd_mem[m_wr_pnt] <= dat_in_m;\n            m_wr_pnt <= (m_wr_pnt == BD_SIZE-1) ? 0 : m_wr_pnt + 1;\n            m_wr_cnt <= (m_wr_cnt == 0) ? 1 : m_wr_cnt + 1;\n            new_bw <= (m_wr_cnt == 2) ? 1 : 0;\n        end\n    end\n\n    // Read BD\n    always @(posedge clk) begin\n        if (re_s && (s_rd_cnt > 0)) begin\n            dat_out_s_reg <= bd_mem[s_rd_pnt];\n            s_rd_pnt <= (s_rd_pnt == BD_SIZE-1) ? 0 : s_rd_pnt + 1;\n            s_rd_cnt <= (s_rd_cnt == 0) ? 1 : s_rd_cnt + 1;\n        end\n    end\n\n    // Release BD\n    always @(posedge clk) begin\n        if (a_cmp && (last_a_cmp_reg > 0)) begin\n            free_bd_reg <= free_bd_reg + 1;\n            last_a_cmp_reg <= last_a_cmp_next;\n        end\n    end\n\n    // Assign outputs\n    assign free_bd = free_bd_reg;\n    assign ack_o_s = ack_o_s_reg;\n    assign dat_out_s = dat_out_s_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 32\n`define FIFO_TX_MEM_DEPTH 32\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 16, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 32;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] a_cmp_d1;\n    reg [BD_WIDTH-1:0] a_cmp_d2;\n    reg [BD_WIDTH-1:0] a_cmp_d3;\n    reg [BD_WIDTH-1:0] a_cmp_d4;\n    reg [BD_WIDTH-1:0] a_cmp_d5;\n    reg [BD_WIDTH-1:0] a_cmp_d6;\n    reg [BD_WIDTH-1:0] a_cmp_d7;\n    reg [BD_WIDTH-1:0] a_cmp_d8;\n    reg [BD_WIDTH-1:0] a_cmp_d9;\n    reg [BD_WIDTH-1:0] a_cmp_d10;\n    reg [BD_WIDTH-1:0] a_cmp_d11;\n    reg [BD_WIDTH-1:0] a_cmp_d12;\n    reg [BD_WIDTH-1:0] a_cmp_d13;\n    reg [BD_WIDTH-1:0] a_cmp_d14;\n    reg [BD_WIDTH-1:0] a_cmp_d15;\n    reg [BD_WIDTH-1:0] a_cmp_d16;\n    reg [BD_WIDTH-1:0] a_cmp_d17;\n    reg [BD_WIDTH-1:0] a_cmp_d18;\n    reg [BD_WIDTH-1:0] a_cmp_d19;\n    reg [BD_WIDTH-1:0] a_cmp_d20;\n    reg [BD_WIDTH-1:0] a_cmp_d21;\n    reg [BD_WIDTH-1:0] a_cmp_d22;\n    reg [BD_WIDTH-1:0] a_cmp_d23;\n    reg [BD_WIDTH-1:0] a_cmp_d24;\n    reg [BD_WIDTH-1:0] a_cmp_d25;\n    reg [BD_WIDTH-1:0] a_cmp_d26;\n    reg [BD_WIDTH-1:0] a_cmp_d27;\n    reg [BD_WIDTH-1:0] a_cmp_d28;\n    reg [BD_WIDTH-1:0] a_cmp_d29;\n    reg [BD_WIDTH-1:0] a_cmp_d30;\n    reg [BD_WIDTH-1:0] a_cmp_d31;\n\n    reg [RAM_MEM_WIDTH-1:0] bd_mem [0:BD_SIZE-1];\n\n    assign free_bd = free_bd_reg;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            free_bd_reg <= 0;\n            m_wr_pnt <= 0;\n            s_rd_pnt <= 0;\n            m_wr_cnt <= 0;\n            s_rd_cnt <= 0;\n            new_bw <= 0;\n            last_a_cmp <= 0;\n            a_cmp_d1 <= 0;\n            a_cmp_d2 <= 0;\n            a_cmp_d3 <= 0;\n            a_cmp_d4 <= 0;\n            a_cmp_d5 <= 0;\n            a_cmp_d6 <= 0;\n            a_cmp_d7 <= 0;\n            a_cmp_d8 <= 0;\n            a_cmp_d9 <= 0;\n            a_cmp_d10 <= 0;\n            a_cmp_d11 <= 0;\n            a_cmp_d12 <= 0;\n            a_cmp_d13 <= 0;\n            a_cmp_d14 <= 0;\n            a_cmp_d15 <= 0;\n            a_cmp_d16 <= 0;\n            a_cmp_d17 <= 0;\n            a_cmp_d18 <= 0;\n            a_cmp_d19 <= 0;\n            a_cmp_d20 <= 0;\n            a_cmp_d21 <= 0;\n            a_cmp_d22 <= 0;\n            a_cmp_d23 <= 0;\n            a_cmp_d24 <= 0;\n            a_cmp_d25 <= 0;\n            a_cmp_d26 <= 0;\n            a_cmp_d27 <= 0;\n            a_cmp_d28 <= 0;\n            a_cmp_d29 <= 0;\n            a_cmp_d30 <= 0;\n            a_cmp_d31 <= 0;\n        end else begin\n            free_bd_reg <= free_bd_next;\n            if (we_m) begin\n                if (free_bd_reg > 0) begin\n                    if (m_wr_cnt == 0) begin\n                        bd_mem[m_wr_pnt] <= dat_in_m;\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 1) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1:16], dat_in_m[15:0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 2) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1:8], dat_in_m[7:0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 3) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1:4], dat_in_m[3:0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 4) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1:2], dat_in_m[1:0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 5) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1:1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 6) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 7) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 8) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 9) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 10) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 11) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 12) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 13) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 14) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 15) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 16) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 17) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 18) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 19) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 20) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 21) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 22) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 23) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 24) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 25) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 26) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 27) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 28) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 29) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 30) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end else if (m_wr_cnt == 31) begin\n                        bd_mem[m_wr_pnt] <= {bd_mem[m_wr_pnt][RAM_MEM_WIDTH-1], dat_in_m[0]};\n                        m_wr_pnt <= m_wr_pnt + 1;\n                        m_wr_cnt <= m_wr_cnt + 1;\n                        new_bw <= 1;\n                    end\n                end\n            end else begin\n                if (re_s) begin\n                    if (s_rd_cnt == 0) begin\n                        dat_out_s <= bd_mem[s_rd_pnt];\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 1) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1:16], dat_out_s[15:0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 2) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1:8], dat_out_s[7:0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 3) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1:4], dat_out_s[3:0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 4) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1:2], dat_out_s[1:0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 5) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1:1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 6) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 7) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 8) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 9) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 10) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 11) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 12) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 13) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 14) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 15) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 16) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 17) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 18) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 19) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 20) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 21) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 22) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 23) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 24) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 25) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 26) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 27) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 28) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 29) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 30) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end else if (s_rd_cnt == 31) begin\n                        dat_out_s <= {bd_mem[s_rd_pnt][RAM_MEM_WIDTH-1], dat_out_s[0]};\n                        s_rd_pnt <= s_rd_pnt + 1;\n                        s_rd_cnt <= s_rd_cnt + 1;\n                        ack_o_s <= 1;\n                    end\n                end\n            end\n            if (a_cmp) begin\n                if (a_cmp_d1 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d1 <= a_cmp;\n                end else if (a_cmp_d2 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d2 <= a_cmp;\n                end else if (a_cmp_d3 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d3 <= a_cmp;\n                end else if (a_cmp_d4 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d4 <= a_cmp;\n                end else if (a_cmp_d5 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d5 <= a_cmp;\n                end else if (a_cmp_d6 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d6 <= a_cmp;\n                end else if (a_cmp_d7 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d7 <= a_cmp;\n                end else if (a_cmp_d8 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d8 <= a_cmp;\n                end else if (a_cmp_d9 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d9 <= a_cmp;\n                end else if (a_cmp_d10 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d10 <= a_cmp;\n                end else if (a_cmp_d11 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d11 <= a_cmp;\n                end else if (a_cmp_d12 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d12 <= a_cmp;\n                end else if (a_cmp_d13 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d13 <= a_cmp;\n                end else if (a_cmp_d14 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d14 <= a_cmp;\n                end else if (a_cmp_d15 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d15 <= a_cmp;\n                end else if (a_cmp_d16 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d16 <= a_cmp;\n                end else if (a_cmp_d17 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d17 <= a_cmp;\n                end else if (a_cmp_d18 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d18 <= a_cmp;\n                end else if (a_cmp_d19 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d19 <= a_cmp;\n                end else if (a_cmp_d20 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d20 <= a_cmp;\n                end else if (a_cmp_d21 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d21 <= a_cmp;\n                end else if (a_cmp_d22 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d22 <= a_cmp;\n                end else if (a_cmp_d23 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d23 <= a_cmp;\n                end else if (a_cmp_d24 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d24 <= a_cmp;\n                end else if (a_cmp_d25 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d25 <= a_cmp;\n                end else if (a_cmp_d26 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d26 <= a_cmp;\n                end else if (a_cmp_d27 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d27 <= a_cmp;\n                end else if (a_cmp_d28 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d28 <= a_cmp;\n                end else if (a_cmp_d29 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d29 <= a_cmp;\n                end else if (a_cmp_d30 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d30 <= a_cmp;\n                end else if (a_cmp_d31 == 0) begin\n                    last_a_cmp <= a_cmp;\n                    a_cmp_d31 <= a_cmp;\n                end\n            end\n            if (a_cmp_d1 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d2 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d3 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d4 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d5 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d6 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d7 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d8 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d9 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d10 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d11 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d12 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d13 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d14 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d15 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d16 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d17 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d18 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d19 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d20 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d21 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d22 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d23 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d24 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d25 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d26 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d27 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d28 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d29 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d30 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else if (a_cmp_d31 == 1 && last_a_cmp == 0) begin\n                free_bd_next <= free_bd_reg + 1;\n            end else begin\n                free_bd_next <= free_bd_reg;\n            end\n            if (new_bw) begin\n                free_bd_next <= free_bd_reg - 1;\n                new_bw <= 0;\n            end\n            if (s_rd_cnt == 31) begin\n                s_rd_cnt <= 0;\n                ack_o_s <= 0;\n            end else begin\n                s_rd_cnt <= s_rd_cnt + 1;\n            end\n            if (m_wr_cnt == 31) begin\n                m_wr_cnt <= 0;\n            end else begin\n                m_wr_cnt <= m_wr_cnt + 1;\n            end\n            if (m_wr_pnt == BD_SIZE) begin\n                m_wr_pnt <= 0;\n            end\n            if (s_rd_pnt == BD_SIZE) begin\n                s_rd_pnt <= 0;\n            end\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define BLOCK_SIZE 512\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 18, "code": "\nmodule sd_bd(\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output reg [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output reg ack_o_s,\n    input a_cmp,\n    output reg [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\nparameter BD_SIZE = 128;\nparameter BD_WIDTH = $clog2(BD_SIZE);\nparameter RAM_MEM_WIDTH = 32;\n\nreg [BD_WIDTH-1:0] m_wr_pnt;\nreg [BD_WIDTH-1:0] s_rd_pnt;\nreg [BD_WIDTH-1:0] m_wr_cnt;\nreg [BD_WIDTH-1:0] s_rd_cnt;\nreg [BD_WIDTH-1:0] new_bw;\nreg [BD_WIDTH-1:0] last_a_cmp;\n\nreg [RAM_MEM_WIDTH-1:0] bd_mem [BD_SIZE-1:0];\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_wr_pnt <= 0;\n        s_rd_pnt <= 0;\n        m_wr_cnt <= 0;\n        s_rd_cnt <= 0;\n        new_bw <= 0;\n        last_a_cmp <= 0;\n        ack_o_s <= 0;\n        if (RAM_MEM_WIDTH == 32) begin\n            free_bd <= BD_SIZE / 2;\n        end else begin\n            free_bd <= BD_SIZE / 4;\n        end\n    end else begin\n        if (we_m) begin\n            if (free_bd > 0) begin\n                if (RAM_MEM_WIDTH == 32) begin\n                    bd_mem[m_wr_pnt] <= dat_in_m;\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    m_wr_cnt <= m_wr_cnt + 1;\n                    if (m_wr_cnt == 1) begin\n                        new_bw <= 1;\n                        free_bd <= free_bd - 1;\n                    end\n                end else begin\n                    bd_mem[m_wr_pnt] <= dat_in_m[31:16];\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    bd_mem[m_wr_pnt] <= dat_in_m[15:0];\n                    m_wr_pnt <= m_wr_pnt + 1;\n                    m_wr_cnt <= m_wr_cnt + 2;\n                    if (m_wr_cnt == 2) begin\n                        new_bw <= 1;\n                        free_bd <= free_bd - 1;\n                    end\n                end\n            end\n        end\n        if (re_s) begin\n            if (s_rd_cnt < BD_SIZE) begin\n                dat_out_s <= bd_mem[s_rd_pnt];\n                s_rd_pnt <= s_rd_pnt + 1;\n                s_rd_cnt <= s_rd_cnt + 1;\n                if (RAM_MEM_WIDTH == 16) begin\n                    ack_o_s <= 1;\n                end\n            end\n        end\n        if (a_cmp) begin\n            if (last_a_cmp == 0) begin\n                free_bd <= free_bd + 1;\n            end\n            last_a_cmp <= a_cmp;\n        end\n        if (new_bw) begin\n            new_bw <= 0;\n        end\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 19, "code": "\nmodule sd_bd(\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    parameter BD_SIZE = 128;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] free_bd_next;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] a_cmp_r;\n    reg [BD_WIDTH-1:0] a_cmp_rr;\n    reg [BD_WIDTH-1:0] a_cmp_rrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr;\n    reg [BD_WIDTH-1:0] a_cmp_rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_bd", "codeid": 20, "code": "\nmodule sd_bd (\n    input clk,\n    input rst,\n    input we_m,\n    input [RAM_MEM_WIDTH-1:0] dat_in_m,\n    output [BD_WIDTH-1:0] free_bd,\n    input re_s,\n    output ack_o_s,\n    input a_cmp,\n    output [RAM_MEM_WIDTH-1:0] dat_out_s\n);\n\n    // Define constants\n    parameter BD_SIZE = 128;\n    parameter BD_WIDTH = $clog2(BD_SIZE);\n    parameter RAM_MEM_WIDTH = 32;\n    parameter MEM_OFFSET = 0;\n\n    // Define internal signals\n    reg [BD_WIDTH-1:0] free_bd_reg;\n    reg [BD_WIDTH-1:0] m_wr_pnt;\n    reg [BD_WIDTH-1:0] s_rd_pnt;\n    reg [BD_WIDTH-1:0] m_wr_cnt;\n    reg [BD_WIDTH-1:0] s_rd_cnt;\n    reg [BD_WIDTH-1:0] new_bw;\n    reg [BD_WIDTH-1:0] last_a_cmp;\n    reg [BD_WIDTH-1:0] a_cmp_d1;\n    reg [BD_WIDTH-1:0] a_cmp_d2;\n    reg [BD_WIDTH-1:0] a_cmp_d3;\n    reg [BD_WIDTH-1:0] a_cmp_d4;\n    reg [BD_WIDTH-1:0] a_cmp_d5;\n    reg [BD_WIDTH-1:0] a_cmp_d6;\n    reg [BD_WIDTH-1:0] a_cmp_d7;\n    reg [BD_WIDTH-1:0] a_cmp_d8;\n    reg [BD_WIDTH-1:0] a_cmp_d9;\n    reg [BD_WIDTH-1:0] a_cmp_d10;\n    reg [BD_WIDTH-1:0] a_cmp_d11;\n    reg [BD_WIDTH-1:0] a_cmp_d12;\n    reg [BD_WIDTH-1:0] a_cmp_d13;\n    reg [BD_WIDTH-1:0] a_cmp_d14;\n    reg [BD_WIDTH-1:0] a_cmp_d15;\n    reg [BD_WIDTH-1:0] a_cmp_d16;\n    reg [BD_WIDTH-1:0] a_cmp_d17;\n    reg [BD_WIDTH-1:0] a_cmp_d18;\n    reg [BD_WIDTH-1:0] a_cmp_d19;\n    reg [BD_WIDTH-1:0] a_cmp_d20;\n    reg [BD_WIDTH-1:0] a_cmp_d21;\n    reg [BD_WIDTH-1:0] a_cmp_d22;\n    reg [BD_WIDTH-1:0] a_cmp_d23;\n    reg [BD_WIDTH-1:0] a_cmp_d24;\n    reg [BD_WIDTH-1:0] a_cmp_d25;\n    reg [BD_WIDTH-1:0] a_cmp_d26;\n    reg [BD_WIDTH-1:0] a_cmp_d27;\n    reg [BD_WIDTH-1:0] a_cmp_d28;\n    reg [BD_WIDTH-1:0] a_cmp_d29;\n    reg [BD_WIDTH-1:0] a_cmp_d30;\n    reg [BD_WIDTH-1:0] a_cmp_d31;\n    reg [BD_WIDTH-1:0] a_cmp_d32;\n    reg [BD_WIDTH-1:0] a_cmp_d33;\n    reg [BD_WIDTH-1:0] a_cmp_d34;\n    reg [BD_WIDTH-1:0] a_cmp_d35;\n    reg [BD_WIDTH-1:0] a_cmp_d36;\n    reg [BD_WIDTH-1:0] a_cmp_d37;\n    reg [BD_WIDTH-1:0] a_cmp_d38;\n    reg [BD_WIDTH-1:0] a_cmp_d39;\n    reg [BD_WIDTH-1:0] a_cmp_d40;\n    reg [BD_WIDTH-1:0] a_cmp_d41;\n    reg [BD_WIDTH-1:0] a_cmp_d42;\n    reg [BD_WIDTH-1:0] a_cmp_d43;\n    reg [BD_WIDTH-1:0] a_cmp_d44;\n    reg [BD_WIDTH-1:0] a_cmp_d45;\n    reg [BD_WIDTH-1:0] a_cmp_d46;\n    reg [BD_WIDTH-1:0] a_cmp_d47;\n    reg [BD_WIDTH-1:0] a_cmp_d48;\n    reg [BD_WIDTH-1:0] a_cmp_d49;\n    reg [BD_WIDTH-1:0] a_cmp_d50;\n    reg [BD_WIDTH-1:0] a_cmp_d51;\n    reg [BD_WIDTH-1:0] a_cmp_d52;\n    reg [BD_WIDTH-1:0] a_cmp_d53;\n    reg [BD_WIDTH-1:0] a_cmp_d54;\n    reg [BD_WIDTH-1:0] a_cmp_d55;\n    reg [BD_WIDTH-1:0] a_cmp_d56;\n    reg [BD_WIDTH-1:0] a_cmp_d57;\n    reg [BD_WIDTH-1:0] a_cmp_d58;\n    reg [BD_WIDTH-1:0] a_cmp_d59;\n    reg [BD_WIDTH-1:0] a_cmp_d60;\n    reg [BD_WIDTH-1:0] a_cmp_d61;\n    reg [BD_WIDTH-1:0] a_cmp_d62;\n    reg [BD_WIDTH-1:0] a_cmp_d63;\n    reg [BD_WIDTH-1:0] a_cmp_d64;\n    reg [BD_WIDTH-1:0] a_cmp_d65;\n    reg [BD_WIDTH-1:0] a_cmp_d66;\n    reg [BD_WIDTH-1:0] a_cmp_d67;\n    reg [BD_WIDTH-1:0] a_cmp_d68;\n    reg [BD_WIDTH-1:0] a_cmp_d69;\n    reg [BD_WIDTH-1:0] a_cmp_d70;\n    reg [BD_WIDTH-1:0] a_cmp_d71;\n    reg [BD_WIDTH-1:0] a_cmp_d72;\n    reg [BD_WIDTH-1:0] a_cmp_d73;\n    reg [BD_WIDTH-1:0] a_cmp_d74;\n    reg [BD_WIDTH-1:0] a_cmp_d75;\n    reg [BD_WIDTH-1:0] a_cmp_d76;\n    reg [BD_WIDTH-1:0] a_cmp_d77;\n    reg [BD_WIDTH-1:0] a_cmp_d78;\n    reg [BD_WIDTH-1:0] a_cmp_d79;\n    reg [BD_WIDTH-1:0] a_cmp_d80;\n    reg [BD_WIDTH-1:0] a_cmp_d81;\n    reg [BD_WIDTH-1:0] a_cmp_d82;\n    reg [BD_WIDTH-1:0] a_cmp_d83;\n    reg [BD_WIDTH-1:0] a_cmp_d84;\n    reg [BD_WIDTH-1:0] a_cmp_d85;\n    reg [BD_WIDTH-1:0] a_cmp_d86;\n    reg [BD_WIDTH-1:0] a_cmp_d87;\n    reg [BD_WIDTH-1:0] a_cmp_d88;\n    reg [BD_WIDTH-1:0] a_cmp_d89;\n    reg [BD_WIDTH-1:0] a_cmp_d90;\n    reg [BD_WIDTH-1:0] a_cmp_d91;\n    reg [BD_WIDTH-1:0] a_cmp_d92;\n    reg [BD_WIDTH-1:0] a_cmp_d93;\n    reg [BD_WIDTH-1:0] a_cmp_d94;\n    reg [BD_WIDTH-1:0] a_cmp_d95;\n    reg [BD_WIDTH-1:0] a_cmp_d96;\n    reg [BD_WIDTH-1:0] a_cmp_d97;\n    reg [BD_WIDTH-1:0] a_cmp_d98;\n    reg [BD_WIDTH-1:0] a_cmp_d99;\n    reg [BD_WIDTH-1:0] a_cmp_d100;\n    reg [BD_WIDTH-1:0] a_cmp_d101;\n    reg [BD_WIDTH-1:0] a_cmp_d102;\n    reg [BD_WIDTH-1:0] a_cmp_d103;\n    reg [BD_WIDTH-1:0] a_cmp_d104;\n    reg [BD_WIDTH-1:0] a_cmp_d105;\n    reg [BD_WIDTH-1:0] a_cmp_d106;\n    reg [BD_WIDTH-1:0] a_cmp_d107;\n    reg [BD_WIDTH-1:0] a_cmp_d108;\n    reg [BD_WIDTH-1:0] a_cmp_d109;\n    reg [BD_WIDTH-1:0] a_cmp_d110;\n    reg [BD_WIDTH-1:0] a_cmp_d111;\n    reg [BD_WIDTH-1:0] a_cmp_d112;\n    reg [BD_WIDTH-1:0] a_cmp_d113;\n    reg [BD_WIDTH-1:0] a_cmp_d114;\n    reg [BD_WIDTH-1:0] a_cmp_d115;\n    reg [BD_WIDTH-1:0] a_cmp_d116;\n    reg [BD_WIDTH-1:0] a_cmp_d117;\n    reg [BD_WIDTH-1:0] a_cmp_d118;\n    reg [BD_WIDTH-1:0] a_cmp_d119;\n    reg [BD_WIDTH-1:0] a_cmp_d120;\n    reg [BD_WIDTH-1:0] a_cmp_d121;\n    reg [BD_WIDTH-1:0] a_cmp_d122;\n    reg [BD_WIDTH-1:0] a_cmp_d123;\n    reg [BD_WIDTH-1:0] a_cmp_d124;\n    reg [BD_WIDTH-1:0] a_cmp_d125;\n    reg [BD_WIDTH-1:0] a_cmp_d126;\n    reg [BD_WIDTH-1:0] a_cmp_d127;\n    reg [BD_WIDTH-1:0] a_cmp_d128;\n    reg [BD_WIDTH-1:0] a_cmp_d129;\n    reg [BD_WIDTH-1:0] a_cmp_d130;\n    reg [BD_WIDTH-1:0] a_cmp_d131;\n    reg [BD_WIDTH-1:0] a_cmp_d132;\n    reg [BD_WIDTH-1:0] a_cmp_d133;\n    reg [BD_WIDTH-1:0] a_cmp_d134;\n    reg [BD_WIDTH-1:0] a_cmp_d135;\n    reg [BD_WIDTH-1:0] a_cmp_d136;\n    reg [BD_WIDTH-1:0] a_cmp_d137;\n    reg [BD_WIDTH-1:0] a_cmp_d138;\n    reg [BD_WIDTH-1:0] a_cmp_d139;\n    reg [BD_WIDTH-1:0] a_cmp_d140;\n    reg [BD_WIDTH-1:0] a_cmp_d141;\n    reg [BD_WIDTH-1:0] a_cmp_d142;\n    reg [BD_WIDTH-1:0] a_cmp_d143;\n    reg [BD_WIDTH-1:0] a_cmp_d144;\n    reg [BD_WIDTH-1:0] a_cmp_d145;\n    reg [BD_WIDTH-1:0] a_cmp_d146;\n    reg [BD_WIDTH-1:0] a_cmp_d147;\n    reg [BD_WIDTH-1:0] a_cmp_d148;\n    reg [BD_WIDTH-1:0] a_cmp_d149;\n    reg [BD_WIDTH-1:0] a_cmp_d150;\n    reg [BD_WIDTH-1:0] a_cmp_d151;\n    reg [BD_WIDTH-1:0] a_cmp_d152;\n    reg [BD_WIDTH-1:0] a_cmp_d153;\n    reg [BD_WIDTH-1:0] a_cmp_d154;\n    reg [BD_WIDTH-1:0] a_cmp_d155;\n    reg [BD_WIDTH-1:0] a_cmp_d156;\n    reg [BD_WIDTH-1:0] a_cmp_d157;\n    reg [BD_WIDTH-1:0] a_cmp_d158;\n    reg [BD_WIDTH-1:0] a_cmp_d159;\n    reg [BD_WIDTH-1:0] a_cmp_d160;\n    reg [BD_WIDTH-1:0] a_cmp_d161;\n    reg [BD_WIDTH-1:0] a_cmp_d162;\n    reg [BD_WIDTH-1:0] a_cmp_d163;\n    reg [BD_WIDTH-1:0] a_cmp_d164;\n    reg [BD_WIDTH-1:0] a_cmp_d165;\n    reg [BD_WIDTH-1:0] a_cmp_d166;\n    reg [BD_WIDTH-1:0] a_cmp_d167;\n    reg [BD_WIDTH-1:0] a_cmp_d168;\n    reg [BD_WIDTH-1:0] a_cmp_d169;\n    reg [BD_WIDTH-1:0] a_cmp_d170;\n    reg [BD_WIDTH-1:0] a_cmp_d171;\n    reg [BD_WIDTH-1:0] a_cmp_d172;\n    reg [BD_WIDTH-1:0] a_cmp_d173;\n    reg [BD_WIDTH-1:0] a_cmp_d174;\n    reg [BD_WIDTH-1:0] a_cmp_d175;\n    reg [BD_WIDTH-1:0] a_cmp_d176;\n    reg [BD_WIDTH-1:0] a_cmp_d177;\n    reg [BD_WIDTH-1:0] a_cmp_d178;\n    reg [BD_WIDTH-1:0] a_cmp_d179;\n    reg [BD_WIDTH-1:0] a_cmp_d180;\n    reg [BD_WIDTH-1:0] a_cmp_d181;\n    reg [BD_WIDTH-1:0] a_cmp_d182;\n    reg [BD_WIDTH-1:0] a_cmp_d183;\n    reg [BD_WIDTH-1:0] a_cmp_d184;\n    reg [BD_WIDTH-1:0] a_cmp_d185;\n    reg [BD_WIDTH-1:0] a_cmp_d186;\n    reg [BD_WIDTH-1:0] a_cmp_d187;\n    reg [BD_WIDTH-1:0] a_cmp_d188;\n    reg [BD_WIDTH-1:0] a_cmp_d189;\n    reg [BD_WIDTH-1:0] a_cmp_d190;\n    reg [BD_WIDTH-1:0] a_cmp_d191;\n    reg [BD_WIDTH-1:0] a_cmp_d192;\n    reg [BD_WIDTH-1:0] a_cmp_d193;\n    reg [BD_WIDTH-1:0] a_cmp_d194;\n    reg [BD_WIDTH-1:0] a_cmp_d195;\n    reg [BD_WIDTH-1:0] a_cmp_d196;\n    reg [BD_WIDTH-1:0] a_cmp_d197;\n    reg [BD_WIDTH-1:0] a_cmp_d198;\n    reg [BD_WIDTH-1:0] a_cmp_d199;\n    reg [BD_WIDTH-1:0] a_cmp_d200;\n    reg [BD_WIDTH-1:0] a_cmp_d201;\n    reg [BD_WIDTH-1:0] a_cmp_d202;\n    reg [BD_WIDTH-1:0] a_cmp_d203;\n    reg [BD_WIDTH-1:0] a_cmp_d204;\n    reg [BD_WIDTH-1:0] a_cmp_d205;\n    reg [BD_WIDTH-1:0] a_cmp_d206;\n    reg [BD_WIDTH-1:0] a_cmp_d207;\n    reg [BD_WIDTH-1:0] a_cmp_d208;\n    reg [BD_WIDTH-1:0] a_cmp_d209;\n    reg [BD_WIDTH-1:0] a_cmp_d210;\n    reg [BD_WIDTH-1:0] a_cmp_d211;\n    reg [BD_WIDTH-1:0] a_cmp_d212;\n    reg [BD_WIDTH-1:0] a_cmp_d213;\n    reg [BD_WIDTH-1:0] a_cmp_d214;\n    reg [BD_WIDTH-1:0] a_cmp_d215;\n    reg [BD_WIDTH-1:0] a_cmp_d216;\n    reg [BD_WIDTH-1:0] a_cmp_d217;\n    reg [BD_WIDTH-1:0] a_cmp_d218;\n    reg [BD_WIDTH-1:0] a_cmp_d219;\n    reg [BD_WIDTH-1:0] a_cmp_d220;\n    reg [BD_WIDTH-1:0] a_cmp_d221;\n    reg [BD_WIDTH-1:0] a_cmp_d222;\n    reg [BD_WIDTH-1:0] a_cmp_d223;\n    reg [BD_WIDTH-1:0] a_cmp_d224;\n    reg [BD_WIDTH-1:0] a_cmp_d225;\n    reg [BD_WIDTH-1:0] a_cmp_d226;\n    reg [BD_WIDTH-1:0] a_cmp_d227;\n    reg [BD_WIDTH-1:0] a_cmp_d228;\n    reg [BD_WIDTH-1:0] a_cmp_d229;\n    reg [BD_WIDTH-1:0] a_cmp_d230;\n    reg [BD_WIDTH-1:0] a_cmp_d231;\n    reg [BD_WIDTH-1:0] a_cmp_d232;\n    reg [BD_WIDTH-1:0] a_cmp_d233;\n    reg [BD_WIDTH-1:0] a_cmp_d234;\n    reg [BD_WIDTH-1:0] a_cmp_d235;\n    reg [BD_WIDTH-1:0] a_cmp_d236;\n    reg [BD_WIDTH-1:0] a_cmp_d237;\n    reg [BD_WIDTH-1:0] a_cmp_d238;\n    reg [BD_WIDTH-1:0] a_cmp_d239;\n    reg [BD_WIDTH-1:0] a_cmp_d240;\n    reg [BD_WIDTH-1:0] a_cmp_d241;\n    reg [BD_WIDTH-1:0] a_cmp_d242;\n    reg [BD_WIDTH-1:0] a_cmp_d243;\n    reg [BD_WIDTH-1:0] a_cmp_d244;\n    reg [BD_WIDTH-1:0] a_cmp_d245;\n    reg [BD_WIDTH-1:0] a_cmp_d246;\n    reg [BD_WIDTH-1:0] a_cmp_d247;\n    reg [BD_WIDTH-1:0] a_cmp_d248;\n    reg [BD_WIDTH-1:0] a_cmp_d249;\n    reg [BD_WIDTH-1:0] a_cmp_d250;\n    reg [BD_WIDTH-1:0] a_cmp_d251;\n    reg [BD_WIDTH-1:0] a_cmp_d252;\n    reg [BD_WIDTH-1:0] a_cmp_d253;\n    reg [BD_WIDTH-1:0] a_cmp_d254;\n    reg [BD_WIDTH-1:0] a_cmp_d255;\n    reg [BD_WIDTH-1:0] a_cmp_d256;\n    reg [BD_WIDTH-1:0] a_cmp_d257;\n    reg [BD_WIDTH-1:0] a_cmp_d258;\n    reg [BD_WIDTH-1:0] a_cmp_d259;\n    reg [BD_WIDTH-1:0] a_cmp_d260;\n    reg [BD_WIDTH-1:0] a_cmp_d261;\n    reg [BD_WIDTH-1:0] a_cmp_d262;\n    reg [BD_WIDTH-1:0] a_cmp_d263;\n    reg [BD_WIDTH-1:0] a_cmp_d264;\n    reg [BD_WIDTH-1:0] a_cmp_d265;\n    reg [BD_WIDTH-1:0] a_cmp_d266;\n    reg [BD_WIDTH-1:0] a_cmp_d267;\n    reg [BD_WIDTH-1:0] a_cmp_d268;\n    reg [BD_WIDTH-1:0] a_cmp_d269;\n    reg [BD_WIDTH-1:0] a_cmp_d270;\n    reg [BD_WIDTH-1:0] a_cmp_d271;\n    reg [BD_WIDTH-1:0] a_cmp_d272;\n    reg [BD_WIDTH-1:0] a_cmp_d273;\n    reg [BD_WIDTH-1:0] a_cmp_d274;\n    reg [BD_WIDTH-1:0] a_cmp_d275;\n    reg [BD_WIDTH-1:0] a_cmp_d276;\n    reg [BD_WIDTH-1:0] a_cmp_d277;\n    reg [BD_WIDTH-1:0] a_cmp_d278;\n    reg [BD_WIDTH-1:0] a_cmp_d279;\n    reg [BD_WIDTH-1:0] a_cmp_d280;\n    reg [BD_WIDTH-1:0] a_cmp_d281;\n    reg [BD_WIDTH-1:0] a_cmp_d282;\n    reg [BD_WIDTH-1:0] a_cmp_d283;\n    reg [BD_WIDTH-1:0] a_cmp_d284;\n    reg [BD_WIDTH-1:0] a_cmp_d285;\n    reg [BD_WIDTH-1:0] a_cmp_d286;\n    reg [BD_WIDTH-1:0] a_cmp_d287;\n    reg [BD_WIDTH-1:0] a_cmp_d288;\n    reg [BD_WIDTH-1:0] a_cmp_d289;\n    reg [BD_WIDTH-1:0] a_cmp_d290;\n    reg [BD_WIDTH-1:0] a_cmp_d291;\n    reg [BD_WIDTH-1:0] a_cmp_d292;\n    reg [BD_WIDTH-1:0] a_cmp_d293;\n    reg [BD_WIDTH-1:0] a_cmp_d294;\n    reg [BD_WIDTH-1:0] a_cmp_d295;\n    reg [BD_WIDTH-1:0] a_cmp_d296;\n    reg [BD_WIDTH-1:0] a_cmp_d297;\n    reg [BD_WIDTH-1:0] a_cmp_d298;\n    reg [BD_WIDTH-1:0] a_cmp_d299;\n    reg [BD_WIDTH-1:0] a_cmp_d300;\n    reg [BD_WIDTH-1:0] a_cmp_d301;\n    reg [BD_WIDTH-1:0] a_cmp_d302;\n    reg [BD_WIDTH-1:0] a_cmp_d303;\n    reg [BD_WIDTH-1:0] a_cmp_d304;\n    reg [BD_WIDTH-1:0] a_cmp_d305;\n    reg [BD_WIDTH-1:0] a_cmp_d306;\n    reg [BD_WIDTH-1:0] a_cmp_d307;\n    reg [BD_WIDTH-1:0] a_cmp_d308;\n    reg [BD_WIDTH-1:0] a_cmp_d309;\n    reg [BD_WIDTH-1:0] a_cmp_d310;\n    reg [BD_WIDTH-1:0] a_cmp_d311;\n    reg [BD_WIDTH-1:0] a_cmp_d312;\n    reg [BD_WIDTH-1:0] a_cmp_d313;\n    reg [BD_WIDTH-1:0] a_cmp_d314;\n    reg [BD_WIDTH-1:0] a_cmp_d315;\n    reg [BD_WIDTH-1:0] a_cmp_d316;\n    reg [BD_WIDTH-1:0] a_cmp_d317;\n    reg [BD_WIDTH-1:0] a_cmp_d318;\n    reg [BD_WIDTH-1:0] a_cmp_d319;\n    reg [BD_WIDTH-1:0] a_cmp_d320;\n    reg [BD_WIDTH-1:0] a_cmp_d321;\n    reg [BD_WIDTH-1:0] a_cmp_d322;\n    reg [BD_WIDTH-1:0] a_cmp_d323;\n    reg [BD_WIDTH-1:0] a_cmp_d324;\n    reg [BD_WIDTH-1:0] a_cmp_d325;\n    reg [BD_WIDTH-1:0] a_cmp_d326;\n    reg [BD_WIDTH-1:0] a_cmp_d327;\n    reg [BD_WIDTH-1:0] a_cmp_d328;\n    reg [BD_WIDTH-1:0] a_cmp_d329;\n    reg [BD_WIDTH-1:0] a_cmp_d330;\n    reg [BD_WIDTH-1:0] a_cmp_d331;\n    reg [BD_WIDTH-1:0] a_cmp_d332;\n    reg [BD_WIDTH-1:0] a_cmp_d333;\n    reg [BD_WIDTH-1:0] a_cmp_d334;\n    reg [BD_WIDTH-1:0] a_cmp_d335;\n    reg [BD_WIDTH-1:0] a_cmp_d336;\n    reg [BD_WIDTH-1:0] a_cmp_d337;\n    reg [BD_WIDTH-1:0] a_cmp_d338;\n    reg [BD_WIDTH-1:0] a_cmp_d339;\n    reg [BD_WIDTH-1:0] a_cmp_d340;\n    reg [BD_WIDTH-1:0] a_cmp_d341;\n    reg [BD_WIDTH-1:0] a_cmp_d342;\n    reg [BD_WIDTH-1:0] a_cmp_d343;\n    reg [BD_WIDTH-1:0] a_cmp_d344;\n    reg [BD_WIDTH-1:0] a_cmp_d345;\n    reg [BD_WIDTH-1:0] a_cmp_d346;\n    reg [BD_WIDTH-1:0] a_cmp_d347;\n    reg [BD_WIDTH-1:0] a_cmp_d348;\n    reg [BD_WIDTH-1:0] a_cmp_d349;\n    reg [BD_WIDTH-1:0] a_cmp_d350;\n    reg [BD_WIDTH-1:0] a_cmp_d351;\n    reg [BD_WIDTH-1:0] a_cmp_d352;\n    reg [BD_WIDTH-1:0] a_cmp_d353;\n    reg [BD_WIDTH-1:0] a_cmp_d354;\n    reg [BD_WIDTH-1:0] a_cmp_d355;\n    reg [BD_WIDTH-1:0] a_cmp_d356;\n    reg [BD_WIDTH-1:0] a_cmp_d357;\n    reg [BD_WIDTH-1:0] a_cmp_d358;\n    reg [BD_WIDTH-1:0] a_cmp_d359;\n    reg [BD_WIDTH-1:0] a_cmp_d360;\n    reg [BD_WIDTH-1:0] a_cmp_d361;\n    reg [BD_WIDTH-1:0] a_cmp_d362;\n    reg [BD_WIDTH-1:0] a_cmp_d363;\n    reg [BD_WIDTH-1:0] a_cmp_d364;\n    reg [BD_WIDTH-1:0] a_cmp_d365;\n    reg [BD_WIDTH-1:0] a_cmp_d366;\n    reg [BD_WIDTH-1:0] a_cmp_d367;\n    reg [BD_WIDTH-1:0] a_cmp_d368;\n    reg [BD_WIDTH-1:0] a_cmp_d369;\n    reg [BD_WIDTH-1:0] a_cmp_d370;\n    reg [BD_WIDTH-1:0] a_cmp_d371;\n    reg [BD_WIDTH-1:0] a_cmp_d372;\n    reg [BD_WIDTH-1:0] a_cmp_d373;\n    reg [BD_WIDTH-1:0] a_cmp_d374;\n    reg [BD_WIDTH-1:0] a_cmp_d375;\n    reg [BD_WIDTH-1:0] a_cmp_d376;\n    reg [BD_WIDTH-1:0] a_cmp_d377;\n    reg [BD_WIDTH-1:0] a_cmp_d378;\n    reg [BD_WIDTH-1:0] a_cmp_d379;\n    reg [BD_WIDTH-1:0] a_cmp_d380;\n    reg [BD_WIDTH-1:0] a_cmp_d381;\n    reg [BD_WIDTH-1:0] a_cmp_d382;\n    reg [BD_WIDTH-1:0] a_cmp_d383;\n    reg [BD_WIDTH-1:0] a_cmp_d384;\n    reg [BD_WIDTH-1:0] a_cmp_d385;\n    reg [BD_WIDTH-1:0] a_cmp_d386;\n    reg [BD_WIDTH-1:0] a_cmp_d387;\n    reg [BD_WIDTH-1:0] a_cmp_d388;\n    reg [BD_WIDTH-1:0] a_cmp_d389;\n    reg [BD_WIDTH-1:0] a_cmp_d390;\n    reg [BD_WIDTH-1:0] a_cmp_d391;\n    reg [BD_WIDTH-1:0] a_cmp_d392;\n    reg [BD_WIDTH-1:0] a_cmp_d393;\n    reg [BD_WIDTH-1:0] a_cmp_d394;\n    reg [BD_WIDTH-1:0] a_cmp_d395;\n    reg [BD_WIDTH-1:0] a_cmp_d396;\n    reg [BD_WIDTH-1:0] a_cmp_d397;\n    reg [BD_WIDTH-1:0] a_cmp_d398;\n    reg [BD_WIDTH-1:0] a_cmp_d399;\n    reg [BD_WIDTH-1:0] a_cmp_d400;\n    reg [BD_WIDTH-1:0] a_cmp_d401;\n    reg [BD_WIDTH-1:0] a_cmp_d402;\n    reg [BD_WIDTH-1:0] a_cmp_d403;\n    reg [BD_WIDTH-1:0] a_cmp_d404;\n    reg [BD_WIDTH-1:0] a_cmp_d405;\n    reg [BD_WIDTH-1:0] a_cmp_d406;\n    reg [BD_WIDTH-1:0] a_cmp_d407;\n    reg [BD_WIDTH-1:0] a_cmp_d408;\n    reg [BD_WIDTH-1:0] a_cmp_d409;\n    reg [BD_WIDTH-1:0] a_cmp_d410;\n    reg [BD_WIDTH-1:0] a_cmp_d411;\n    reg [BD_WIDTH-1:0] a_cmp_d412;\n    reg [BD_WIDTH-1:0] a_cmp_d413;\n    reg [BD_WIDTH-1:0] a_cmp_d414;\n    reg [BD_WIDTH-1:0] a_cmp_d415;\n    reg [BD_WIDTH-1:0] a_cmp_d416;\n    reg [BD_WIDTH-1:0] a_cmp_d417;\n    reg [BD_WIDTH-1:0] a_cmp_d418;\n    reg [BD_WIDTH-1:0] a_cmp_d419;\n    reg [BD_WIDTH-1:0] a_cmp_d420;\n    reg [BD_WIDTH-1:0] a_cmp_d421;\n    reg [BD_WIDTH-1:0] a_cmp_d422;\n    reg [BD_WIDTH-1:0] a_cmp_d423;\n    reg [BD_WIDTH-1:0] a_cmp_d424;\n    reg [BD_WIDTH-1:0] a_cmp_d425;\n    reg [BD_WIDTH-1:0] a_cmp_d426;\n    reg [BD_WIDTH-1:0] a_cmp_d427;\n    reg [BD_WIDTH-1:0] a_cmp_d428;\n    reg [BD_WIDTH-1:0] a_cmp_d429;\n    reg [BD_WIDTH-1:0] a_cmp_d430;\n    reg [BD_WIDTH-1:0] a_cmp_d431;\n    reg [BD_WIDTH-1:0] a_cmp_d432;\n    reg [BD_WIDTH-1:0] a_cmp_d433;\n    reg [BD_WIDTH-1:0] a_cmp_d434;\n    reg [BD_WIDTH-1:0] a_cmp_d435;\n    reg [BD_WIDTH-1:0] a_cmp_d436;\n    reg [BD_WIDTH-1:0] a_cmp_d437;\n    reg [BD_WIDTH-1:0] a_cmp_d438;\n    reg [BD_WIDTH-1:0] a_cmp_d439;\n    reg [BD_WIDTH-1:0] a_cmp_d440;\n    reg [BD_WIDTH-1:0] a_cmp_d441;\n    reg [BD_WIDTH-1:0] a_cmp_d442;\n    reg [BD_WIDTH-1:0] a_cmp_d443;\n    reg [BD_WIDTH-1:0] a_cmp_d444;\n    reg [BD_WIDTH-1:0] a_cmp_d445;\n    reg [BD_WIDTH-1:0] a_cmp_d446;\n    reg [BD_WIDTH-1:0] a_cmp_d447;\n    reg [BD_WIDTH-1:0] a_cmp_d448;\n    reg [BD_WIDTH-1:0] a_cmp_d449;\n    reg [BD_WIDTH-1:0] a_cmp_d450;\n    reg [BD_WIDTH-1:0] a_cmp_d451;\n    reg [BD_WIDTH-1:0] a_cmp_d452;\n    reg [BD_WIDTH-1:0] a_cmp_d453;\n    reg [BD_WIDTH-1:0] a_cmp_d454;\n    reg [BD_WIDTH-1:0] a_cmp_d455;\n    reg [BD_WIDTH-1:0] a_cmp_d456;\n    reg [BD_WIDTH-1:0] a_cmp_d457;\n    reg [BD_WIDTH-1:0] a_cmp_d458;\n    reg [BD_WIDTH-1:0] a_cmp_d459;\n    reg [BD_WIDTH-1:0] a_cmp_d460;\n    reg [BD_WIDTH-1:0] a_cmp_d461;\n    reg [BD_WIDTH-1:0] a_cmp_d462;\n    reg [BD_WIDTH-1:0] a_cmp_d463;\n    reg [BD_WIDTH-1:0] a_cmp_d464;\n    reg [BD_WIDTH-1:0] a_cmp_d465;\n    reg [BD_WIDTH-1:0] a_cmp_d466;\n    reg [BD_WIDTH-1:0] a_cmp_d467;\n    reg [BD_WIDTH-1:0] a_cmp_d468;\n    reg [BD_WIDTH-1:0] a_cmp_d469;\n    reg [BD_WIDTH-1:0] a_cmp_d470;\n    reg [BD_WIDTH-1:0] a_cmp_d471;\n    reg [BD_WIDTH-1:0] a_cmp_d472;\n    reg [BD_WIDTH-1:0] a_cmp_d473;\n    reg [BD_WIDTH-1:0] a_cmp_d474;\n    reg [BD_WIDTH-1:0] a_cmp_d475;\n    reg [BD_WIDTH-1:0] a_cmp_d476;\n    reg [BD_WIDTH-1:0] a_cmp_d477;\n    reg [BD_WIDTH-1:0] a_cmp_d478;\n    reg [BD_WIDTH-1:0] a_cmp_d479;\n    reg [BD_WIDTH-1:0] a_cmp_d480;\n    reg [BD_WIDTH-1:0] a_cmp_d481;\n    reg [BD_WIDTH-1:0] a_cmp_d482;\n    reg [BD_WIDTH-1:0] a_cmp_d483;\n    reg [BD_WIDTH-1:0] a_cmp_d484;\n    reg [BD_WIDTH-1:0] a_cmp_d485;\n    reg [BD_WIDTH-1:0] a_cmp_d486;\n    reg [BD_WIDTH-1:0] a_cmp_d487;\n    reg [BD_WIDTH-1:0] a_cmp_d488;\n    reg [BD_WIDTH-1:0] a_cmp_d489;\n    reg [BD_WIDTH-1:0] a_cmp_d490;\n    reg [BD_WIDTH-1:0] a_cmp_d491;\n    reg [BD_WIDTH-1:0] a_cmp_d492;\n    reg [BD_WIDTH-1:0] a_cmp_d493;\n    reg [BD_WIDTH-1:0] a_cmp_d494;\n    reg [BD_WIDTH-1:0] a_cmp_d495;\n    reg [BD_WIDTH-1:0] a_cmp_d496;\n    reg [BD_WIDTH-1:0] a_cmp_d497;\n    reg [BD_WIDTH-1:0] a_cmp_d498;\n    reg [BD_WIDTH-1:0] a_cmp_d499;\n    reg [BD_WIDTH-1:0] a_cmp_d500;\n    reg [BD_WIDTH-1:0] a_cmp_d501;\n    reg [BD_WIDTH-1:0] a_cmp_d502;\n    reg [BD_WIDTH-1:0] a_cmp_d503;\n    reg [BD_WIDTH-1:0] a_cmp_d504;\n    reg [BD_WIDTH-1:0] a_cmp_d505;\n    reg [BD_WIDTH-1:0] a_cmp_d506;\n    reg [BD_WIDTH-1:0] a_cmp_d507;\n    reg [BD_WIDTH-1:0] a_cmp_d508;\n    reg [BD_WIDTH-1:0] a_cmp_d509;\n    reg [BD_WIDTH-1:0] a_cmp_d510;\n    reg [BD_WIDTH-1:0] a_cmp_d511;\n    reg [BD_WIDTH-1:0] a_cmp_d512;\n    reg [BD_WIDTH-1:0] a_cmp_d513;\n    reg [BD_WIDTH-1:0] a_cmp_d514;\n    reg [BD_WIDTH-1:0] a_cmp_d515;\n    reg [BD_WIDTH-1:0] a_cmp_d516;\n    reg [BD_WIDTH-1:0] a_cmp_d517;\n    reg [BD_WIDTH-1:0] a_cmp_d518;\n    reg [BD_WIDTH-1:0] a_cmp_d519;\n    reg [BD_WIDTH-1:0] a_cmp_d520;\n    reg [BD_WIDTH-1:0] a_cmp_d521;\n    reg [BD_WIDTH-1:0] a_cmp_d522;\n    reg [BD_WIDTH-1:0] a_cmp_d523;\n    reg [BD_WIDTH-1:0] a_cmp_d524;\n    reg [BD_WIDTH-1:0] a_cmp_d525;\n    reg [BD_WIDTH-1:0] a_cmp_d526;\n    reg [BD_WIDTH-1:0] a_cmp_d527;\n    reg [BD_WIDTH-1:0] a_cmp_d528;\n    reg [BD_WIDTH-1:0] a_cmp_d529;\n    reg [BD_WIDTH-1:0] a_cmp_d530;\n    reg [BD_WIDTH-1:0] a_cmp_d531;\n    reg [BD_WIDTH-1:0] a_cmp_d532;\n    reg [BD_WIDTH-1:0] a_cmp_d533;\n    reg [BD_WIDTH-1:0] a_cmp_d534;\n    reg [BD_WIDTH-1:0] a_cmp_d535;\n    reg [BD_WIDTH-1:0] a_cmp_d536;\n    reg [BD_WIDTH-1:0] a_cmp_d537;\n    reg [BD_WIDTH-1:0] a_cmp_d538;\n    reg [BD_WIDTH-1:0] a_cmp_d539;\n    reg [BD_WIDTH-1:0] a_cmp_d540;\n    reg [BD_WIDTH-1:0] a_cmp_d541;\n    reg [BD_WIDTH-1:0] a_cmp_d542;\n    reg [BD_WIDTH-1:0] a_cmp_d543;\n    reg [BD_WIDTH-1:0] a_cmp_d544;\n    reg [BD_WIDTH-1:0] a_cmp_d545;\n    reg [BD_WIDTH-1:0] a_cmp_d546;\n    reg [BD_WIDTH-1:0] a_cmp_d547;\n    reg [BD_WIDTH-1:0] a_cmp_d548;\n    reg [BD_WIDTH-1:0] a_cmp_d549;\n    reg [BD_WIDTH-1:0] a_cmp_d550;\n    reg [BD_WIDTH-1:0] a_cmp_d551;\n    reg [BD_WIDTH-1:0] a_cmp_d552;\n    reg [BD_WIDTH-1:0] a_cmp_d553;\n    reg [BD_WIDTH-1:0] a_cmp_d554;\n    reg [BD_WIDTH-1:0] a_cmp_d555;\n    reg [BD_WIDTH-1:0] a_cmp_d556;\n    reg [BD_WIDTH-1:0] a_cmp_d557;\n    reg [BD_WIDTH-1:0] a_cmp_d558;\n    reg [BD_WIDTH-1:0] a_cmp_d559;\n    reg [BD_WIDTH-1:0] a_cmp_d560;\n    reg [BD_WIDTH-1:0] a_cmp_d561;\n    reg [BD_WIDTH-1:0] a_cmp_d562;\n    reg [BD_WIDTH-1:0] a_cmp_d563;\n    reg [BD_WIDTH-1:0] a_cmp_d564;\n    reg [BD_WIDTH-1:0] a_cmp_d565;\n    reg [BD_WIDTH-1:0] a_cmp_d566;\n    reg [BD_WIDTH-1:0] a_cmp_d567;\n    reg [BD_WIDTH-1:0] a_cmp_d568;\n    reg [BD_WIDTH-1:0] a_cmp_d569;\n    reg [BD_WIDTH-1:0] a_cmp_d570;\n    reg [BD_WIDTH-1:0] a_cmp_d571;\n    reg [BD_WIDTH-1:0] a_cmp_d572;\n    reg [BD_WIDTH-1:0] a_cmp_d573;\n    reg [BD_WIDTH-1:0] a_cmp_d574;\n    reg [BD_WIDTH-1:0] a_cmp_d575;\n    reg [BD_WIDTH-1:0] a_cmp_d576;\n    reg [BD_WIDTH-1:0] a_cmp_d577;\n    reg [BD_WIDTH-1:0] a_cmp_d578;\n    reg [BD_WIDTH-1:0] a_cmp_d579;\n    reg [BD_WIDTH-1:0] a_cmp_d580;\n    reg [BD_WIDTH-1:0] a_cmp_d581;\n    reg [BD_WIDTH-1:0] a_cmp_d582;\n    reg [BD_WIDTH-1:0] a_cmp_d583;\n    reg [BD_WIDTH-1:0] a_cmp_d584;\n    reg [BD_WIDTH-1:0] a_cmp_d585;\n    reg [BD_WIDTH-1:0] a_cmp_d586;\n    reg [BD_WIDTH-1:0] a_cmp_d587;\n    reg [BD_WIDTH-1:0] a_cmp_d588;\n    reg [BD_WIDTH-1:0] a_cmp_d589;\n    reg [BD_WIDTH-1:0] a_cmp_d590;\n    reg [BD_WIDTH-1:0] a_cmp_d591;\n    reg [BD_WIDTH-1:0] a_cmp_d592;\n    reg [BD_WIDTH-1:0] a_cmp_d593;\n    reg [BD_WIDTH-1:0] a_cmp_d594;\n    reg [BD_WIDTH-1:0] a_cmp_d595;\n    reg [BD_WIDTH-1:0] a_cmp_d596;\n    reg [BD_WIDTH-1:0] a_cmp_d597;\n    reg [BD_WIDTH-1:0] a_cmp_d598;\n    reg [BD_WIDTH-1:0] a_cmp_d599;\n    reg [BD_WIDTH-1:0] a_cmp_d600;\n    reg [BD_WIDTH-1:0] a_cmp_d601;\n    reg [BD_WIDTH-1:0] a_cmp_d602;\n    reg [BD_WIDTH-1:0] a_cmp_d603;\n    reg [BD_WIDTH-1:0] a_cmp_d604;\n    reg [BD_WIDTH-1:0] a_cmp_d605;\n    reg [BD_WIDTH-1:0] a_cmp_d606;\n    reg [BD_WIDTH-1:0] a_cmp_d607;\n    reg [BD_WIDTH-1:0] a_cmp_d608;\n    reg [BD_WIDTH-1:0] a_cmp_d609;\n    reg [BD_WIDTH-1:0] a_cmp_d610;\n    reg [BD_WIDTH-1:0] a_cmp_d611;\n    reg [BD_WIDTH-1:0] a_cmp_d612;\n    reg [BD_WIDTH-1:0] a_cmp_d613;\n    reg [BD_WIDTH-1:0] a_cmp_d614;\n    reg [BD_WIDTH-1:0] a_cmp_d615;\n    reg [BD_WIDTH-1:0] a_cmp_d616;\n    reg [BD_WIDTH-1:0] a_cmp_d617;\n    reg [BD_WIDTH-1:0] a_cmp_d618;\n    reg [BD_WIDTH-1:0] a_cmp_d619;\n    reg [BD_WIDTH-1:0] a_cmp_d620;\n    reg [BD_WIDTH-1:0] a_cmp_d621;\n    reg [BD_WIDTH-1:0] a_cmp_d622;\n    reg [BD_WIDTH-1:0] a_cmp_d623;\n    reg [BD_WIDTH-1:0] a_cmp_d624;\n    reg [BD_WIDTH-1:0] a_cmp_d625;\n    reg [BD_WIDTH-1:0] a_cmp_d626;\n    reg [BD_WIDTH-1:0] a_cmp_d627;\n    reg [BD_WIDTH-1:0] a_cmp_d628;\n    reg [BD_WIDTH-1:0] a_cmp_d629;\n    reg [BD_WIDTH-1:0] a_cmp_d630;\n    reg [BD_WIDTH-1:0] a_cmp_d631;\n    reg [BD_WIDTH-1:0] a_cmp_d632;\n    reg [BD_WIDTH-1:0] a_cmp_d633;\n    reg [BD_WIDTH-1:0] a_cmp_d634;\n    reg [BD_WIDTH-1:0] a_cmp_d635;\n    reg [BD_WIDTH-1:0] a_cmp_d636;\n    reg [BD_WIDTH-1:0] a_cmp_d637;\n    reg [BD_WIDTH-1:0] a_cmp_d638;\n    reg [BD_WIDTH-1:0] a_cmp_d639;\n    reg [BD_WIDTH-1:0] a_cmp_d640;\n    reg [BD_WIDTH-1:0] a_cmp_d641;\n    reg [BD_WIDTH-1:0] a_cmp_d642;\n    reg [BD_WIDTH-1:0] a_cmp_d643;\n    reg [BD_WIDTH-1:0] a_cmp_d644;\n    reg [BD_WIDTH-1:0] a_cmp_d645;\n    reg [BD_WIDTH-1:0] a_cmp_d646;\n    reg [BD_WIDTH-1:0] a_cmp_d647;\n    reg [BD_WIDTH-1:0] a_cmp_d648;\n    reg [BD_WIDTH-1:0] a_cmp_d649;\n    reg [BD_WIDTH-1:0] a_cmp_d650;\n    reg [BD_WIDTH-1:0] a_cmp_d651;\n    reg [BD_WIDTH-1:0] a_cmp_d652;\n    reg [BD_WIDTH-1:0] a_cmp_d653;\n    reg [BD_WIDTH-1:0] a_cmp_d654;\n    reg [BD_WIDTH-1:0] a_cmp_d655;\n    reg [BD_WIDTH-1:0] a_cmp_d656;\n    reg [BD_WIDTH-1:0] a_cmp_d657;\n    reg [BD_WIDTH-1:0] a_cmp_d658;\n    reg [BD_WIDTH-1:0] a_cmp_d659;\n    reg [BD_WIDTH-1:0] a_cmp_d660;\n    reg [BD_WIDTH-1:0] a_cmp_d661;\n    reg [BD_WIDTH-1:0] a_cmp_d662;\n    reg [BD_WIDTH-1:0] a_cmp_d663;\n    reg [BD_WIDTH-1:0] a_cmp_d664;\n    reg [BD_WIDTH-1:0] a_cmp_d665;\n    reg [BD_WIDTH-1:0] a_cmp_d666;\n    reg [BD_WIDTH-1:0] a_cmp_d667;\n    reg [BD_WIDTH-1:0] a_cmp_d668;\n    reg [BD_WIDTH-1:0] a_cmp_d669;\n    reg [BD_WIDTH-1:0] a_cmp_d670;\n    reg [BD_WIDTH-1:0] a_cmp_d671;\n    reg [BD_WIDTH-1:0] a_cmp_d672;\n    reg [BD_WIDTH-1:0] a_cmp_d673;\n    reg [BD_WIDTH-1:0] a_cmp_d674;\n    reg [BD_WIDTH-1:0] a_cmp_d675;\n    reg [BD_WIDTH-1:0] a_cmp_d676;\n    reg [BD_WIDTH-1:0] a_cmp_d677;\n    reg [BD_WIDTH-1:0] a_cmp_d678;\n    reg [BD_WIDTH-1:0] a_cmp_d679;\n    reg [BD_WIDTH-1:0] a_cmp_d680;\n    reg [BD_WIDTH-1:0] a_cmp_d681;\n    reg [BD_WIDTH-1:0] a_cmp_d682;\n    reg [BD_WIDTH-1:0] a_cmp_d683;\n    reg [BD_WIDTH-1:0] a_cmp_d684;\n    reg [BD_WIDTH-1:0] a_cmp_d685;\n    reg [BD_WIDTH-1:0] a_cmp_d686;\n    reg [BD_WIDTH-1:0] a_cmp_d687;\n    reg [BD_WIDTH-1:0] a_cmp_d688;\n    reg [BD_WIDTH-1:0] a_cmp_d689;\n    reg [BD_WIDTH-1:0] a_cmp_d690;\n    reg [BD_WIDTH-1:0] a_cmp_d691;\n    reg [BD_WIDTH-1:0] a_cmp_d692;\n    reg [BD_WIDTH-1:0] a_cmp_d693;\n    reg [BD_WIDTH-1:0] a_cmp_d694;\n    reg [BD_WIDTH-1:0] a_cmp_d695;\n    reg [BD_WIDTH-1:0] a_cmp_d696;\n    reg [BD_WIDTH-1:0] a_cmp_d697;\n    reg [BD_WIDTH-1:0] a_cmp_d698;\n    reg [BD_WIDTH-1:0] a_cmp_d699;\n    reg [BD_WIDTH-1:0] a_cmp_d700;\n    reg [BD_WIDTH-1:0] a_cmp_d71;\n    reg [BD_WIDTH-1:0] a_cmp_d72;\n    reg [BD_WIDTH-1:0] a_cmp_d73;\n    reg [BD_WIDTH-1", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_RX_MEM_ADR_SIZE 4\n`define FIFO_TX_MEM_DEPTH 16\n`define FIFO_TX_MEM_ADR_SIZE 4\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 127\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define BD_SIZE 256\n`define BD_WIDTH 8\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_clock_divider", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define BD_SIZE 255\n`define BD_WIDTH 8\n`define RAM_MEM_WIDTH 32\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_RX_MEM_ADR_SIZE 4\n`define FIFO_TX_MEM_DEPTH 16\n`define FIFO_TX_MEM_ADR_SIZE 4\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 2\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 8, "code": "\nmodule sd_cmd_master (\n    input CLK_PAD_IO,\n    input RST_PAD_I,\n    input New_CMD,\n    input data_write,\n    input data_read,\n    input [31:0] ARG_REG,\n    input [13:0] CMD_SET_REG,\n    input [15:0] TIMEOUT_REG,\n    output [15:0] STATUS_REG,\n    output [31:0] RESP_1_REG,\n    output [4:0] ERR_INT_REG,\n    output [15:0] NORMAL_INT_REG,\n    input ERR_INT_RST,\n    input NORMAL_INT_RST,\n    output [1:0] settings,\n    output go_idle_o,\n    output [39:0] cmd_out,\n    output req_out,\n    output ack_out,\n    input req_in,\n    input ack_in,\n    input [39:0] cmd_in,\n    input [7:0] serial_status,\n    input card_detect\n);\n\n// Define global parameters\nparameter BD_WIDTH = 5;\nparameter BD_SIZE = 32;\nparameter RAM_MEM_WIDTH = 32;\nparameter RESEND_MAX_CNT = 15;\nparameter MEM_OFFSET = 0;\nparameter RESET_CLK_DIV = 1;\nparameter SD_CLK_BUS_CLK = 0;\nparameter SD_CLK_SEP = 0;\nparameter SD_CLK_STATIC = 1;\nparameter SD_CLK_DYNAMIC = 0;\nparameter BLOCK_SIZE = 512;\nparameter SD_BUS_WIDTH = 4;\nparameter SD_BUS_W = 4;\nparameter FIFO_RX_MEM_DEPTH = 16;\nparameter FIFO_RX_MEM_ADR_SIZE = 4;\nparameter FIFO_TX_MEM_DEPTH = 16;\nparameter FIFO_TX_MEM_ADR_SIZE = 4;\n\n// Define internal signals\nreg [39:0] cmd_out_reg;\nreg [1:0] settings_reg;\nreg go_idle_o_reg;\nreg req_out_reg;\nreg ack_out_reg;\nreg [39:0] cmd_in_reg;\nreg [7:0] serial_status_reg;\nreg card_detect_reg;\nreg [15:0] STATUS_REG_reg;\nreg [31:0] RESP_1_REG_reg;\nreg [4:0] ERR_INT_REG_reg;\nreg [15:0] NORMAL_INT_REG_reg;\nreg [15:0] TIMEOUT_REG_reg;\nreg [31:0] ARG_REG_reg;\nreg [13:0] CMD_SET_REG_reg;\nreg [31:0] BD_reg;\nreg [31:0] BD_reg_next;\nreg [31:0] BD_reg_next_next;\nreg [31:0] BD_reg_next_next_next;\nreg [31:0] BD_reg_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] BD_reg_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\nreg [31:0] ", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 11, "code": "\nmodule sd_cmd_master (\n    input wire CLK_PAD_IO,\n    input wire RST_PAD_I,\n    input wire New_CMD,\n    input wire data_write,\n    input wire data_read,\n    input wire [31:0] ARG_REG,\n    input wire [13:0] CMD_SET_REG,\n    input wire [15:0] TIMEOUT_REG,\n    output wire [15:0] STATUS_REG,\n    output wire [31:0] RESP_1_REG,\n    output wire [4:0] ERR_INT_REG,\n    output wire [15:0] NORMAL_INT_REG,\n    input wire ERR_INT_RST,\n    input wire NORMAL_INT_RST,\n    output wire [1:0] settings,\n    output wire go_idle_o,\n    output wire [39:0] cmd_out,\n    output wire req_out,\n    output wire ack_out,\n    input wire req_in,\n    input wire ack_in,\n    input wire [39:0] cmd_in,\n    input wire [7:0] serial_status,\n    input wire card_detect\n);\n\n    // Define global variables\n    parameter BIG_ENDIAN = 1;\n    parameter LITTLE_ENDIAN = 0;\n    parameter SIM = 1;\n    parameter SYN = 0;\n    parameter SDC_IRQ_ENABLE = 1;\n    parameter ACTEL = 0;\n    parameter BD_WIDTH = 7;\n    parameter BD_SIZE = 128;\n    parameter RAM_MEM_WIDTH_16 = 1;\n    parameter RAM_MEM_WIDTH = 32;\n    parameter RESEND_MAX_CNT = 15;\n    parameter MEM_OFFSET = 0;\n    parameter RESET_CLK_DIV = 1;\n    parameter SD_CLK_BUS_CLK = 0;\n    parameter SD_CLK_SEP = 1;\n    parameter SD_CLK_STATIC = 0;\n    parameter SD_CLK_DYNAMIC = 1;\n    parameter BLOCK_SIZE = 512;\n    parameter SD_BUS_WIDTH_4 = 1;\n    parameter SD_BUS_W = 4;\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = 4;\n    parameter FIFO_TX_MEM_DEPTH = 16;\n    parameter FIFO_TX_MEM_ADR_SIZE = 4;\n\n    // Define internal signals\n    wire [39:0] cmd_out_int;\n    wire [1:0] settings_int;\n    wire go_idle_o_int;\n    wire req_out_int;\n    wire ack_out_int;\n    wire req_in_int;\n    wire ack_in_int;\n    wire [39:0] cmd_in_int;\n    wire [7:0] serial_status_int;\n    wire card_detect_int;\n    wire [15:0] STATUS_REG_int;\n    wire [31:0] RESP_1_REG_int;\n    wire [4:0] ERR_INT_REG_int;\n    wire [15:0] NORMAL_INT_REG_int;\n    wire ERR_INT_RST_int;\n    wire NORMAL_INT_RST_int;\n    wire [31:0] ARG_REG_int;\n    wire [13:0] CMD_SET_REG_int;\n    wire [15:0] TIMEOUT_REG_int;\n    wire New_CMD_int;\n    wire data_write_int;\n    wire data_read_int;\n    wire [39:0] cmd_out_int;\n    wire [1:0] settings_int;\n    wire go_idle_o_int;\n    wire req_out_int;\n    wire ack_out_int;\n    wire req_in_int;\n    wire ack_in_int;\n    wire [39:0] cmd_in_int;\n    wire [7:0] serial_status_int;\n    wire card_detect_int;\n    wire [15:0] STATUS_REG_int;\n    wire [31:0] RESP_1_REG_int;\n    wire [4:0] ERR_INT_REG_int;\n    wire [15:0] NORMAL_INT_REG_int;\n    wire ERR_INT_RST_int;\n    wire NORMAL_INT_RST_int;\n    wire [31:0] ARG_REG_int;\n    wire [13:0] CMD_SET_REG_int;\n    wire [15:0] TIMEOUT_REG_int;\n    wire New_CMD_int;\n    wire data_write_int;\n    wire data_read_int;\n\n    // Instantiate sd_cmd_master module\n    sd_cmd_master_top sd_cmd_master_top_inst (\n        .CLK_PAD_IO(CLK_PAD_IO),\n        .RST_PAD_I(RST_PAD_I),\n        .New_CMD(New_CMD),\n        .data_write(data_write),\n        .data_read(data_read),\n        .ARG_REG(ARG_REG),\n        .CMD_SET_REG(CMD_SET_REG),\n        .TIMEOUT_REG(TIMEOUT_REG),\n        .STATUS_REG(STATUS_REG),\n        .RESP_1_REG(RESP_1_REG),\n        .ERR_INT_REG(ERR_INT_REG),\n        .NORMAL_INT_REG(NORMAL_INT_REG),\n        .ERR_INT_RST(ERR_INT_RST),\n        .NORMAL_INT_RST(NORMAL_INT_RST),\n        .settings(settings),\n        .go_idle_o(go_idle_o),\n        .cmd_out(cmd_out),\n        .req_out(req_out),\n        .ack_out(ack_out),\n        .req_in(req_in),\n        .ack_in(ack_in),\n        .cmd_in(cmd_in),\n        .serial_status(serial_status),\n        .card_detect(card_detect),\n        .cmd_out_int(cmd_out_int),\n        .settings_int(settings_int),\n        .go_idle_o_int(go_idle_o_int),\n        .req_out_int(req_out_int),\n        .ack_out_int(ack_out_int),\n        .req_in_int(req_in_int),\n        .ack_in_int(ack_in_int),\n        .cmd_in_int(cmd_in_int),\n        .serial_status_int(serial_status_int),\n        .card_detect_int(card_detect_int),\n        .STATUS_REG_int(STATUS_REG_int),\n        .RESP_1_REG_int(RESP_1_REG_int),\n        .ERR_INT_REG_int(ERR_INT_REG_int),\n        .NORMAL_INT_REG_int(NORMAL_INT_REG_int),\n        .ERR_INT_RST_int(ERR_INT_RST_int),\n        .NORMAL_INT_RST_int(NORMAL_INT_RST_int),\n        .ARG_REG_int(ARG_REG_int),\n        .CMD_SET_REG_int(CMD_SET_REG_int),\n        .TIMEOUT_REG_int(TIMEOUT_REG_int),\n        .New_CMD_int(New_CMD_int),\n        .data_write_int(data_write_int),\n        .data_read_int(data_read_int),\n        .cmd_out_int(cmd_out_int),\n        .settings_int(settings_int),\n        .go_idle_o_int(go_idle_o_int),\n        .req_out_int(req_out_int),\n        .ack_out_int(ack_out_int),\n        .req_in_int(req_in_int),\n        .ack_in_int(ack_in_int),\n        .cmd_in_int(cmd_in_int),\n        .serial_status_int(serial_status_int),\n        .card_detect_int(card_detect_int),\n        .STATUS_REG_int(STATUS_REG_int),\n        .RESP_1_REG_int(RESP_1_REG_int),\n        .ERR_INT_REG_int(ERR_INT_REG_int),\n        .NORMAL_INT_REG_int(NORMAL_INT_REG_int),\n        .ERR_INT_RST_int(ERR_INT_RST_int),\n        .NORMAL_INT_RST_int(NORMAL_INT_RST_int),\n        .ARG_REG_int(ARG_REG_int),\n        .CMD_SET_REG_int(CMD_SET_REG_int),\n        .TIMEOUT_REG_int(TIMEOUT_REG_int),\n        .New_CMD_int(New_CMD_int),\n        .data_write_int(data_write_int),\n        .data_read_int(data_read_int)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_master", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_TX_MEM_DEPTH 128\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_SIZE 255\n`define BD_WIDTH 8\n`define RAM_MEM_WIDTH 32\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 255\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 255\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SDC_IRQ_ENABLE\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_TX_MEM_DEPTH 128\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_cmd_serial_host", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_TX_MEM_DEPTH 128\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define BD_SIZE 255\n`define BD_WIDTH 8\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 256\n`define RAM_MEM_WIDTH 32\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 9, "code": "\n// Define the endianess\n`define BIG_ENDIAN\n//`define LITTLE_ENDIAN\n\n// Define the simulation\n//`define SIM\n\n// Define the synthesis\n//`define SYN\n\n// Define the SDC_IRQ_ENABLE\n//`define SDC_IRQ_ENABLE\n\n// Define the ACTEL\n//`define ACTEL\n\n// Define the BD_WIDTH\n//`define BD_WIDTH 7\n\n// Define the BD_SIZE\n//`define BD_SIZE 255\n\n// Define the RAM_MEM_WIDTH\n//`define RAM_MEM_WIDTH 32\n\n// Define the RESEND_MAX_CNT\n//`define RESEND_MAX_CNT 255\n\n// Define the MEM_OFFSET\n//`define MEM_OFFSET 0\n\n// Define the RESET_CLK_DIV\n//`define RESET_CLK_DIV 255\n\n// Define the SD_CLK_BUS_CLK\n//`define SD_CLK_BUS_CLK\n\n// Define the SD_CLK_SEP\n//`define SD_CLK_SEP\n\n// Define the SD_CLK_STATIC\n//`define SD_CLK_STATIC\n\n// Define the SD_CLK_DYNAMIC\n//`define SD_CLK_DYNAMIC\n\n// Define the BLOCK_SIZE\n//`define BLOCK_SIZE 512\n\n// Define the SD_BUS_WIDTH_4\n//`define SD_BUS_WIDTH_4\n\n// Define the SD_BUS_W\n//`define SD_BUS_W 4\n\n// Define the FIFO_RX_MEM_DEPTH\n//`define FIFO_RX_MEM_DEPTH 128\n\n// Define the FIFO_TX_MEM_DEPTH\n//`define FIFO_TX_MEM_DEPTH 128\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 11, "code": "\n`define BIG_ENDIAN\n//`define LITTLE_ENDIAN\n`define SIM\n//`define SYN\n//`define SDC_IRQ_ENABLE\n//`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n//`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 10\n//`define SD_CLK_BUS_CLK\n//`define SD_CLK_SEP\n//`define SD_CLK_STATIC\n//`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n//`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n`define BLOCK_SIZE 512\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n`define BLOCK_SIZE 512\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_controller_wb", "codeid": 20, "code": "\n`define BIG_ENDIAN\n//`define LITTLE_ENDIAN\n`define SIM\n//`define SYN\n//`define SDC_IRQ_ENABLE\n//`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n//`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n//`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n//`define SD_CLK_STATIC\n//`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n//`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 1, "code": "\nmodule sd_crc_16(\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ CRC[15];\n            CRC[5] <= CRC[4] ^ CRC[15];\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 2, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    reg [15:0] crc_reg;\n    reg inv;\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            crc_reg <= 16'h0000;\n        end else if (Enable) begin\n            crc_reg <= {crc_reg[14:0], crc_reg[15] ^ BITVAL};\n            crc_reg[12] <= crc_reg[11] ^ inv;\n            crc_reg[5] <= crc_reg[4] ^ inv;\n            crc_reg[0] <= inv;\n        end\n    end\n\n    assign inv = crc_reg[15] ^ BITVAL;\n\n    assign CRC = crc_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 6, "code": "\nmodule sd_crc_16(\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ CRC[15];\n            CRC[5] <= CRC[4] ^ CRC[15];\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 7, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    reg [15:0] crc_reg;\n    reg inv;\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            crc_reg <= 16'h0000;\n        end else if (Enable) begin\n            crc_reg <= {crc_reg[14:0], inv};\n            crc_reg[12] <= crc_reg[12] ^ inv;\n            crc_reg[5] <= crc_reg[5] ^ inv;\n        end\n    end\n\n    assign inv = BITVAL ^ crc_reg[15];\n    assign CRC = crc_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 8, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    // Combinational Logic\n    wire inv = BITVAL ^ CRC[15];\n\n    // Sequential Logic\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], inv};\n            CRC[12] <= CRC[11] ^ inv;\n            CRC[5] <= CRC[4] ^ inv;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 10, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    reg [15:0] crc_reg;\n    reg [15:0] crc_next;\n    reg inv;\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            crc_reg <= 16'h0000;\n        end else if (Enable) begin\n            crc_reg <= crc_next;\n        end\n    end\n\n    always @(*) begin\n        inv = BITVAL ^ crc_reg[15];\n        crc_next = {crc_reg[14:0], 1'b0} ^ ({1'b0, inv} & 16'h8005);\n    end\n\n    assign CRC = crc_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 11, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    // Combinational Logic\n    wire inv = BITVAL ^ CRC[15];\n\n    // Sequential Logic\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], inv};\n            CRC[12] <= CRC[11] ^ inv;\n            CRC[5] <= CRC[4] ^ inv;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 12, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ BITVAL;\n            CRC[5] <= CRC[4] ^ BITVAL;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 13, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ BITVAL;\n            CRC[5] <= CRC[4] ^ BITVAL;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 14, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 15, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ CRC[15];\n            CRC[5] <= CRC[4] ^ CRC[15];\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 16, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 17, "code": "\nmodule sd_crc_16(\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    // Combinational Logic\n    wire inv = BITVAL ^ CRC[15];\n\n    // Sequential Logic\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], inv};\n            CRC[12] <= CRC[11] ^ inv;\n            CRC[5] <= CRC[4] ^ inv;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 18, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 19, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ BITVAL;\n            CRC[5] <= CRC[4] ^ BITVAL;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_16", "codeid": 20, "code": "\nmodule sd_crc_16 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [15:0] CRC\n);\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 16'h0000;\n        end else if (Enable) begin\n            CRC <= {CRC[14:0], BITVAL ^ CRC[15]};\n            CRC[12] <= CRC[11] ^ BITVAL;\n            CRC[5] <= CRC[4] ^ BITVAL;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 1, "code": "\nmodule sd_crc_7 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [6:0] CRC\n);\n\n    reg inv;\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 7'b0;\n        end else if (Enable) begin\n            inv <= BITVAL ^ CRC[6];\n            CRC[0] <= inv;\n            CRC[3] <= CRC[2] ^ inv;\n            CRC[6:1] <= CRC[5:0];\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_RX_MEM_ADR_SIZE 4\n`define FIFO_TX_MEM_DEPTH 16\n`define FIFO_TX_MEM_ADR_SIZE 4\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 7, "code": "\nmodule sd_crc_7 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [6:0] CRC\n);\n\n    reg inv;\n\n    always @(posedge CLK) begin\n        if (RST) begin\n            CRC <= 7'b0;\n        end else if (Enable) begin\n            inv <= BITVAL ^ CRC[6];\n            CRC[0] <= inv;\n            CRC[3] <= CRC[2] ^ inv;\n            CRC[6:1] <= CRC[5:0];\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 14, "code": "\nmodule sd_crc_7 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [6:0] CRC\n);\n\n    reg inv;\n\n    always @(posedge CLK or posedge RST) begin\n        if (RST) begin\n            CRC <= 7'b0;\n        end else if (Enable) begin\n            inv <= BITVAL ^ CRC[6];\n            CRC[0] <= inv;\n            CRC[3] <= CRC[2] ^ inv;\n            CRC[6:1] <= CRC[5:0];\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 19, "code": "\nmodule sd_crc_7 (\n    input BITVAL,\n    input Enable,\n    input CLK,\n    input RST,\n    output reg [6:0] CRC\n);\n\nreg inv;\n\nalways @(posedge CLK or posedge RST) begin\n    if (RST) begin\n        CRC <= 7'b0;\n    end else if (Enable) begin\n        inv <= BITVAL ^ CRC[6];\n        CRC[0] <= inv;\n        CRC[3] <= CRC[2] ^ inv;\n        CRC[6:1] <= CRC[5:0];\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_crc_7", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 3\n`define BD_SIZE 8\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 2\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n`define BLOCK_SIZE 512\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 10, "code": "\nmodule sd_defines();\n\n// Define the memory width of the block RAM\nparameter RAM_MEM_WIDTH = 32;\n\n// Define the size of the BD buffer\nparameter BD_SIZE = 255;\n\n// Define the width of the BD buffer\nparameter BD_WIDTH = $clog2(BD_SIZE);\n\n// Define the maximum number of retries for command sending\nparameter RESEND_MAX_CNT = 3;\n\n// Define the memory address offset between 2 words\nparameter MEM_OFFSET = 1;\n\n// Define the clock divider for the SD clock\nparameter RESET_CLK_DIV = 1;\n\n// Define the width of the SD bus\nparameter SD_BUS_W = 4;\n\n// Define the depth of the RX Fifo\nparameter FIFO_RX_MEM_DEPTH = 1024;\n\n// Define the depth of the TX Fifo\nparameter FIFO_TX_MEM_DEPTH = 1024;\n\n// Define the width of the RX Fifo address\nparameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n// Define the width of the TX Fifo address\nparameter FIFO_TX_MEM_ADR_SIZE = $clog2(FIFO_TX_MEM_DEPTH) + 1;\n\n// Define the block size\nparameter BLOCK_SIZE = 512;\n\n// Define the width of the block size\nparameter BLOCK_SIZE_W = $clog2(BLOCK_SIZE);\n\n// Define the width of the SD bus\nparameter SD_BUS_W = 4;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4 = 4;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_8 = 8;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_16 = 16;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_32 = 32;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_64 = 64;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_128 = 128;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_256 = 256;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_512 = 512;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1024 = 1024;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2048 = 2048;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4096 = 4096;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_8192 = 8192;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_16384 = 16384;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_32768 = 32768;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_65536 = 65536;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_131072 = 131072;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_262144 = 262144;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_524288 = 524288;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1048576 = 1048576;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2097152 = 2097152;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4194304 = 4194304;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_8388608 = 8388608;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_16777216 = 16777216;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_33554432 = 33554432;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_67108864 = 67108864;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_134217728 = 134217728;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_268435456 = 268435456;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_536870912 = 536870912;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1073741824 = 1073741824;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2147483648 = 2147483648;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4294967296 = 4294967296;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_8589934592 = 8589934592;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_17179869184 = 17179869184;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_34359738368 = 34359738368;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_68719476736 = 68719476736;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_137438953472 = 137438953472;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_274877906944 = 274877906944;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_549755813888 = 549755813888;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1099511627776 = 1099511627776;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2199023255552 = 2199023255552;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4398046511104 = 4398046511104;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_8796093022208 = 8796093022208;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_17592186044416 = 17592186044416;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_35184372088832 = 35184372088832;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_70368744177664 = 70368744177664;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_140737488355328 = 140737488355328;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_281474976710656 = 281474976710656;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_562949953421312 = 562949953421312;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1125899906842624 = 1125899906842624;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2251799813685248 = 2251799813685248;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4503599627370496 = 4503599627370496;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9007199254740992 = 9007199254740992;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_18014398509481984 = 18014398509481984;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_36028797018963968 = 36028797018963968;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_72057594037927936 = 72057594037927936;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_144115188075855872 = 144115188075855872;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_288230376151711744 = 288230376151711744;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_576460752303423488 = 576460752303423488;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1152921504606846976 = 1152921504606846976;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2305843009213693952 = 2305843009213693952;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4611686018427387904 = 4611686018427387904;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9223372036854775808 = 9223372036854775808;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_18446744073709551616 = 18446744073709551616;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_36893488147419103232 = 36893488147419103232;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_73786976294838206464 = 73786976294838206464;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_147573952589676412928 = 147573952589676412928;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_295147905179352825856 = 295147905179352825856;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_590295810358705651712 = 590295810358705651712;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1180591620717411303424 = 1180591620717411303424;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2361183241434822606848 = 2361183241434822606848;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4722366482869645213696 = 4722366482869645213696;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9444732965739290427392 = 9444732965739290427392;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_18889465931478580854784 = 18889465931478580854784;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_37778931862957161709568 = 37778931862957161709568;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_75557863725914323419136 = 75557863725914323419136;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_151115727451828646838272 = 151115727451828646838272;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_302231454903657293676544 = 302231454903657293676544;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_604462909807314587353088 = 604462909807314587353088;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1208925819614629174706176 = 1208925819614629174706176;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2417851639229258349412352 = 2417851639229258349412352;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4835703278458516698824704 = 4835703278458516698824704;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9671406556917033397649408 = 9671406556917033397649408;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_19342813113834066795298816 = 19342813113834066795298816;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_38685626227668133590597632 = 38685626227668133590597632;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_77371252455336267181195264 = 77371252455336267181195264;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_154742504910672534362390528 = 154742504910672534362390528;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_309485009821345068724781056 = 309485009821345068724781056;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_618970019642690137449562112 = 618970019642690137449562112;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1237940039285380274899124224 = 1237940039285380274899124224;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2475880078570760549798248448 = 2475880078570760549798248448;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4951760157141521099596496896 = 4951760157141521099596496896;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9903520314283042199192993792 = 9903520314283042199192993792;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_19807040628566084398385987584 = 19807040628566084398385987584;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_39614081257132168796771975168 = 39614081257132168796771975168;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_79228162514264337593543950336 = 79228162514264337593543950336;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_158456325028528675187087900672 = 158456325028528675187087900672;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_316912650057057350374175801344 = 316912650057057350374175801344;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_633825300114114700748351602688 = 633825300114114700748351602688;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1267650600228229401496703205376 = 1267650600228229401496703205376;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2535301200456458802993406410752 = 2535301200456458802993406410752;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5070602400912917605986812821504 = 5070602400912917605986812821504;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_10141204801825835211973625643008 = 10141204801825835211973625643008;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_20282409603651670423947251286016 = 20282409603651670423947251286016;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_40564819207303340847894502572032 = 40564819207303340847894502572032;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_81129638414606681695789005144064 = 81129638414606681695789005144064;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_162259276829213363391578010288128 = 162259276829213363391578010288128;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_324518553658426726783156020576256 = 324518553658426726783156020576256;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_649037107316853453566312041152512 = 649037107316853453566312041152512;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1298074214633706907132624082304032 = 1298074214633706907132624082304032;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2596148429267413814265248164608064 = 2596148429267413814265248164608064;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5192296858534827628530496329216128 = 5192296858534827628530496329216128;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_10384593717069655257060992658432256 = 10384593717069655257060992658432256;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_20769187434139310514121985316864512 = 20769187434139310514121985316864512;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_41538374868278621028243970633729024 = 41538374868278621028243970633729024;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_83076749736557242056487941267458048 = 83076749736557242056487941267458048;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_166153499473114484112975882534916096 = 166153499473114484112975882534916096;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_332306998946228968225951765069832192 = 332306998946228968225951765069832192;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_664613997892457936451903530139664384 = 664613997892457936451903530139664384;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1329227995784915872903807060279328768 = 1329227995784915872903807060279328768;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2658455991569831745807614120558657536 = 2658455991569831745807614120558657536;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5316911983139663491615228241117315072 = 5316911983139663491615228241117315072;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_10633823966279326983230456482234630144 = 10633823966279326983230456482234630144;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_21267647932558653966460912964469260288 = 21267647932558653966460912964469260288;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_42535295865117307932920825928938520576 = 42535295865117307932920825928938520576;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_85070591730234615865841651857877041152 = 85070591730234615865841651857877041152;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_170141183460469231731683303715754082304 = 170141183460469231731683303715754082304;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_340282366920938463463366607431508164608 = 340282366920938463463366607431508164608;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_680564733841876926926733214863016329216 = 680564733841876926926733214863016329216;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1361129467683753853853466429726032658432 = 1361129467683753853853466429726032658432;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2722258935367507707706932859452065316864 = 2722258935367507707706932859452065316864;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5444517870735015415413865718904130633728 = 5444517870735015415413865718904130633728;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_10889035741470030830827731437808261267456 = 10889035741470030830827731437808261267456;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_21778071482940061661655462875616522534912 = 21778071482940061661655462875616522534912;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_43556142965880123323310925751233045069824 = 43556142965880123323310925751233045069824;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_87112285931760246646621851502466090139648 = 87112285931760246646621851502466090139648;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_174224571863520493293243703004932180279296 = 174224571863520493293243703004932180279296;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_348449143727040986586487406009864360558592 = 348449143727040986586487406009864360558592;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_696898287454081973172974812019728721117184 = 696898287454081973172974812019728721117184;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1393796574908163946345949624039457442234368 = 1393796574908163946345949624039457442234368;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2787593149816327892691899248078914884468736 = 2787593149816327892691899248078914884468736;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5575186299632655785383798496157829768937472 = 5575186299632655785383798496157829768937472;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_11150372599265311570767596992315659537874944 = 11150372599265311570767596992315659537874944;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_22300745198530623141535193984631319075749888 = 22300745198530623141535193984631319075749888;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_44601490397061246283070387969262638151499776 = 44601490397061246283070387969262638151499776;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_89202980794122492566140775938525276302999552 = 89202980794122492566140775938525276302999552;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_178405961588244985132281551877050552605999104 = 178405961588244985132281551877050552605999104;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_356811923176489970264563103754101105211998208 = 356811923176489970264563103754101105211998208;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_713623846352979940529126207508202210423996416 = 713623846352979940529126207508202210423996416;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1427247692705959881058252415016404420847992832 = 1427247692705959881058252415016404420847992832;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2854495385411919762116504830032808841695985664 = 2854495385411919762116504830032808841695985664;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5708990770823839524233009660065617683391971328 = 5708990770823839524233009660065617683391971328;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_11417981541647679048466019320131235366783942656 = 11417981541647679048466019320131235366783942656;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_22835963083295358096932038640262470733567885312 = 22835963083295358096932038640262470733567885312;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_45671926166590716193864077280524941467135770624 = 45671926166590716193864077280524941467135770624;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_91343852333181432387728154561049882934271541248 = 91343852333181432387728154561049882934271541248;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_18268770466636286477545630912209965868443082496 = 18268770466636286477545630912209965868443082496;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_36537540933272572955091261824419931736886164992 = 36537540933272572955091261824419931736886164992;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_73075081866545145910182523648839863473772329984 = 73075081866545145910182523648839863473772329984;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_146150163733090291820365047297679726947544659968 = 146150163733090291820365047297679726947544659968;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_292300327466180583640730094595359453895089319936 = 292300327466180583640730094595359453895089319936;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_584600654932361167281460189190718907790178639872 = 584600654932361167281460189190718907790178639872;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1169201309864722334562920378381437815580357279744 = 1169201309864722334562920378381437815580357279744;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2338402619729444669125840756762875631160714599488 = 2338402619729444669125840756762875631160714599488;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4676805239458889338251681513525751262321429198976 = 4676805239458889338251681513525751262321429198976;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9353610478917778676503363027051502524642858397952 = 9353610478917778676503363027051502524642858397952;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_18707220957835557353006726054103005049285716795904 = 18707220957835557353006726054103005049285716795904;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_37414441915671114706013452108206010098571433591908 = 37414441915671114706013452108206010098571433591908;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_74828883831342229412026904216412020197142867993816 = 74828883831342229412026904216412020197142867993816;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_14965776766268445882405380843282404039428573997632 = 14965776766268445882405380843282404039428573997632;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_29931553532536891764810761686564808078857147995264 = 29931553532536891764810761686564808078857147995264;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_59863107065073783529621523373129616157714295990528 = 59863107065073783529621523373129616157714295990528;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_119726214130147567059243046746259232315428591981056 = 119726214130147567059243046746259232315428591981056;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_239452428260295134118486093492518464630857183962112 = 239452428260295134118486093492518464630857183962112;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_478904856520590268236972186985036929261714367924224 = 478904856520590268236972186985036929261714367924224;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_957809713041180536473944373970073858523428735848448 = 957809713041180536473944373970073858523428735848448;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_191561942608236107294788674794014771704685471797696 = 191561942608236107294788674794014771704685471797696;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_383123885216472214589577349588029543409370943595392 = 383123885216472214589577349588029543409370943595392;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_766247770432944429179154699176059086818741887907784 = 766247770432944429179154699176059086818741887907784;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_153249554086588885835830939835211817363748377581552 = 153249554086588885835830939835211817363748377581552;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_306499108173177771671661879670423634727497555163104 = 306499108173177771671661879670423634727497555163104;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_612998216346355543343323759340847269454995110326208 = 612998216346355543343323759340847269454995110326208;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1225996432692711086686647518681694528909902220644016 = 1225996432692711086686647518681694528909902220644016;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2451992865385422173373295037363389057819804441288032 = 2451992865385422173373295037363389057819804441288032;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_4903985730770844346746590074726778115639608882476064 = 4903985730770844346746590074726778115639608882476064;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_9807971461541688693493180149453556231279217764952128 = 9807971461541688693493180149453556231279217764952128;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_19615942923083377386986360298907112462558435529904256 = 19615942923083377386986360298907112462558435529904256;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_39231885846166754773972720597814224925116871107884512 = 39231885846166754773972720597814224925116871107884512;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_78463771692333509547945441195628449850233742215769024 = 78463771692333509547945441195628449850233742215769024;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_156927543384667019095890882391256899700665884431538048 = 156927543384667019095890882391256899700665884431538048;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_313855086769334038191781764782513799401331768863076096 = 313855086769334038191781764782513799401331768863076096;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_627710173538668076383563529565027598802663537726152192 = 627710173538668076383563529565027598802663537726152192;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_1255420347077336152767127059130055197605326755442443968 = 1255420347077336152767127059130055197605326755442443968;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_2510840694154672305534254118260110395210653511084897936 = 2510840694154672305534254118260110395210653511084897936;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_5021681388309344611068508236520220790421306222169795872 = 5021681388309344611068508236520220790421306222169795872;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_10043362776618689222137016473040441580842612444339591744 = 10043362776618689222137016473040441580842612444339591744;\n\n// Define the width of the SD bus\nparameter SD_BUS_WIDTH_20086725553237378444274032946080883161685224888679193488 = 20086725553", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_master", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 8\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 3\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 2\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 6, "code": "\nmodule sd_data_serial_host (\n    input sd_clk,\n    input rst,\n    input [31:0] data_in,\n    input [1:0] start_dat,\n    input ack_transfer,\n    input [SD_BUS_W-1:0] DAT_dat_i,\n    output reg rd,\n    output reg [SD_BUS_W-1:0] data_out,\n    output reg we,\n    output reg DAT_oe_o,\n    output reg [SD_BUS_W-1:0] DAT_dat_o,\n    output reg busy_n,\n    output reg transm_complete,\n    output reg crc_ok\n);\n\n    // Internal signals\n    reg [SD_BUS_W-1:0] crc_in;\n    reg crc_en;\n    reg crc_rst;\n    wire [SD_BUS_W-1:0] crc_out;\n    reg [SD_BUS_W-1:0] temp_in;\n    reg [10:0] transf_cnt;\n    reg [5:0] state;\n    reg [5:0] next_state;\n    reg [2:0] crc_status;\n    reg busy_int;\n    reg ack_transfer_int;\n    reg ack_q;\n    reg q_start_bit;\n    reg [4:0] crc_c;\n    reg [3:0] last_din;\n    reg [2:0] crc_s;\n    reg [31:0] write_buf_0;\n    reg [31:0] write_buf_1;\n    reg [31:0] sd_data_out;\n    reg [0:0] out_buff_ptr;\n    reg [0:0] in_buff_ptr;\n    reg [2:0] data_send_index;\n\n    // CRC Generation Block\n    sd_crc_16 crc_gen (\n        .BITVAL(crc_in),\n        .Enable(crc_en),\n        .CLK(sd_clk),\n        .RST(crc_rst),\n        .CRC(crc_out)\n    );\n\n    // Acknowledgment Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            ack_q <= 1'b0;\n            ack_transfer_int <= 1'b0;\n        end else begin\n            ack_q <= ack_transfer;\n            ack_transfer_int <= ack_q;\n        end\n    end\n\n    // Finite State Machine Logic for Transmit and Receive Operations\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (start_dat == 2'b01) begin\n                    next_state = WRITE_DAT;\n                end else if (start_dat == 2'b10) begin\n                    next_state = READ_WAIT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            WRITE_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = WRITE_CRC;\n                end else begin\n                    next_state = WRITE_DAT;\n                end\n            end\n            WRITE_CRC: begin\n                if (crc_status == OK) begin\n                    next_state = WRITE_BUSY;\n                end else begin\n                    next_state = WRITE_CRC;\n                end\n            end\n            WRITE_BUSY: begin\n                if (busy_int == 0) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = WRITE_BUSY;\n                end\n            end\n            READ_WAIT: begin\n                if (DAT_dat_i[0] == 0) begin\n                    next_state = READ_DAT;\n                end else begin\n                    next_state = READ_WAIT;\n                end\n            end\n            READ_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = READ_DAT;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Start Bit Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            q_start_bit <= 1'b1;\n        end else begin\n            if (!DAT_dat_i[0] && state == READ_WAIT) begin\n                q_start_bit <= 1'b0;\n            end else begin\n                q_start_bit <= 1'b1;\n            end\n        end\n    end\n\n    // Sequential Logic for FSM\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            state <= IDLE;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Output Logic for FSM Control\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            write_buf_0 <= 32'h0;\n            write_buf_1 <= 32'h0;\n            DAT_oe_o <= 1'b0;\n            crc_en <= 1'b0;\n            crc_rst <= 1'b1;\n            transf_cnt <= 11'h0;\n            rd <= 1'b0;\n            last_din <= 4'h0;\n            crc_c <= 5'h0;\n            crc_s <= 3'h0;\n            sd_data_out <= 32'h0;\n            out_buff_ptr <= 1'b0;\n            in_buff_ptr <= 1'b0;\n            data_send_index <= 3'h0;\n            crc_status <= 3'h7;\n            busy_int <= 1'b0;\n            we <= 1'b0;\n            data_out <= 32'h0;\n            crc_ok <= 1'b0;\n            transm_complete <= 1'b0;\n            DAT_dat_o <= 32'h0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    crc_en <= 1'b0;\n                    crc_rst <= 1'b1;\n                    transf_cnt <= 11'h0;\n                    rd <= 1'b0;\n                    last_din <= 4'h0;\n                    crc_c <= 5'h0;\n                    crc_s <= 3'h0;\n                    sd_data_out <= 32'h0;\n                    out_buff_ptr <= 1'b0;\n                    in_buff_ptr <= 1'b0;\n                    data_send_index <= 3'h0;\n                    crc_status <= 3'h7;\n                    busy_int <= 1'b0;\n                    we <= 1'b0;\n                    data_out <= 32'h0;\n                    crc_ok <= 1'b0;\n                    transm_complete <= 1'b0;\n                    DAT_dat_o <= 32'h0;\n                end\n                WRITE_DAT: begin\n                    crc_en <= 1'b1;\n                    crc_rst <= 1'b0;\n                    transf_cnt <= transf_cnt + 1'b1;\n                    rd <= 1'b1;\n                    last_din <= DAT_dat_i;\n                    crc_c <= crc_c + 1'b1;\n                    crc_s <= crc_s;\n                    sd_data_out <= write_buf_0;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    data_send_index <= data_send_index + 1'b1;\n                    crc_status <= crc_status;\n                    busy_int <= busy_int;\n                    we <= 1'b1;\n                    data_out <= data_in;\n                    crc_ok <= crc_ok;\n                    transm_complete <= transm_complete;\n                    DAT_dat_o <= data_in[31:28];\n                end\n                WRITE_CRC: begin\n                    crc_en <= 1'b1;\n                    crc_rst <= 1'b0;\n                    transf_cnt <= transf_cnt;\n                    rd <= 1'b0;\n                    last_din <= last_din;\n                    crc_c <= crc_c;\n                    crc_s <= crc_s;\n                    sd_data_out <= sd_data_out;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    data_send_index <= data_send_index;\n                    crc_status <= crc_status;\n                    busy_int <= busy_int;\n                    we <= 1'b0;\n                    data_out <= data_out;\n                    crc_ok <= crc_ok;\n                    transm_complete <= transm_complete;\n                    DAT_dat_o <= crc_out[15:12];\n                end\n                WRITE_BUSY: begin\n                    crc_en <= 1'b0;\n                    crc_rst <= 1'b1;\n                    transf_cnt <= transf_cnt;\n                    rd <= 1'b0;\n                    last_din <= last_din;\n                    crc_c <= crc_c;\n                    crc_s <= crc_s;\n                    sd_data_out <= sd_data_out;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    data_send_index <= data_send_index;\n                    crc_status <= crc_status;\n                    busy_int <= busy_int;\n                    we <= 1'b0;\n                    data_out <= data_out;\n                    crc_ok <= crc_ok;\n                    transm_complete <= 1'b1;\n                    DAT_dat_o <= crc_out[15:12];\n                end\n                READ_WAIT: begin\n                    crc_en <= 1'b0;\n                    crc_rst <= 1'b1;\n                    transf_cnt <= transf_cnt;\n                    rd <= 1'b0;\n                    last_din <= last_din;\n                    crc_c <= crc_c;\n                    crc_s <= crc_s;\n                    sd_data_out <= sd_data_out;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    data_send_index <= data_send_index;\n                    crc_status <= crc_status;\n                    busy_int <= busy_int;\n                    we <= 1'b0;\n                    data_out <= data_out;\n                    crc_ok <= crc_ok;\n                    transm_complete <= transm_complete;\n                    DAT_dat_o <= crc_out[15:12];\n                end\n                READ_DAT: begin\n                    crc_en <= 1'b1;\n                    crc_rst <= 1'b0;\n                    transf_cnt <= transf_cnt + 1'b1;\n                    rd <= 1'b1;\n                    last_din <= DAT_dat_i;\n                    crc_c <= crc_c + 1'b1;\n                    crc_s <= crc_s;\n                    sd_data_out <= sd_data_out;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    data_send_index <= data_send_index;\n                    crc_status <= crc_status;\n                    busy_int <= busy_int;\n                    we <= 1'b0;\n                    data_out <= data_in;\n                    crc_ok <= crc_ok;\n                    transm_complete <= transm_complete;\n                    DAT_dat_o <= data_in[31:28];\n                end\n                default: begin\n                    crc_en <= 1'b0;\n                    crc_rst <= 1'b1;\n                    transf_cnt <= 11'h0;\n                    rd <= 1'b0;\n                    last_din <= 4'h0;\n                    crc_c <= 5'h0;\n                    crc_s <= 3'h0;\n                    sd_data_out <= 32'h0;\n                    out_buff_ptr <= 1'b0;\n                    in_buff_ptr <= 1'b0;\n                    data_send_index <= 3'h0;\n                    crc_status <= 3'h7;\n                    busy_int <= 1'b0;\n                    we <= 1'b0;\n                    data_out <= 32'h0;\n                    crc_ok <= 1'b0;\n                    transm_complete <= 1'b0;\n                    DAT_dat_o <= 32'h0;\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 127\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 12, "code": "\nmodule sd_data_serial_host (\n    input sd_clk,\n    input rst,\n    input [31:0] data_in,\n    input [1:0] start_dat,\n    input ack_transfer,\n    input [SD_BUS_W-1:0] DAT_dat_i,\n    output reg rd,\n    output reg [SD_BUS_W-1:0] data_out,\n    output reg we,\n    output reg DAT_oe_o,\n    output reg [SD_BUS_W-1:0] DAT_dat_o,\n    output reg busy_n,\n    output reg transm_complete,\n    output reg crc_ok\n);\n\n    // Internal signals\n    reg [SD_BUS_W-1:0] crc_in;\n    reg crc_en;\n    reg crc_rst;\n    wire [15:0] crc_out;\n    reg [SD_BUS_W-1:0] temp_in;\n    reg [10:0] transf_cnt;\n    reg [5:0] state;\n    reg [5:0] next_state;\n    reg [2:0] crc_status;\n    reg busy_int;\n    reg ack_transfer_int;\n    reg ack_q;\n    reg q_start_bit;\n    reg [4:0] crc_c;\n    reg [3:0] last_din;\n    reg [2:0] crc_s;\n    reg [31:0] write_buf_0;\n    reg [31:0] write_buf_1;\n    reg [31:0] sd_data_out;\n    reg [0:0] out_buff_ptr;\n    reg [0:0] in_buff_ptr;\n    reg [2:0] data_send_index;\n\n    // CRC Generation Block\n    sd_crc_16 crc_gen (\n        .BITVAL(crc_in),\n        .Enable(crc_en),\n        .CLK(sd_clk),\n        .RST(crc_rst),\n        .CRC(crc_out)\n    );\n\n    // Acknowledgment Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            ack_q <= 0;\n            ack_transfer_int <= 0;\n        end else begin\n            ack_q <= ack_transfer;\n            ack_transfer_int <= ack_q;\n        end\n    end\n\n    // Finite State Machine Logic for Transmit and Receive Operations\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (start_dat == 2'b01) begin\n                    next_state = WRITE_DAT;\n                end else if (start_dat == 2'b10) begin\n                    next_state = READ_WAIT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            WRITE_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = WRITE_CRC;\n                end else begin\n                    next_state = WRITE_DAT;\n                end\n            end\n            WRITE_CRC: begin\n                if (crc_status == OK) begin\n                    next_state = WRITE_BUSY;\n                end else begin\n                    next_state = WRITE_CRC;\n                end\n            end\n            WRITE_BUSY: begin\n                if (busy_int == 0) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = WRITE_BUSY;\n                end\n            end\n            READ_WAIT: begin\n                if (DAT_dat_i[0] == 0) begin\n                    next_state = READ_DAT;\n                end else if (DAT_dat_i[0] == 1) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = READ_WAIT;\n                end\n            end\n            READ_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = READ_DAT;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Start Bit Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            q_start_bit <= 1;\n        end else begin\n            if (!DAT_dat_i[0] & state == READ_WAIT) begin\n                q_start_bit <= 0;\n            end else begin\n                q_start_bit <= 1;\n            end\n        end\n    end\n\n    // Sequential Logic for FSM\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            state <= IDLE;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Output Logic for FSM Control\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            write_buf_0 <= 0;\n            write_buf_1 <= 0;\n            DAT_oe_o <= 0;\n            crc_en <= 0;\n            crc_rst <= 1;\n            transf_cnt <= 0;\n            rd <= 0;\n            last_din <= 0;\n            crc_c <= 0;\n            DAT_dat_o <= 0;\n            crc_status <= 7;\n            crc_s <= 0;\n            transm_complete <= 0;\n            busy_n <= 1;\n            we <= 0;\n            data_out <= 0;\n            crc_ok <= 0;\n            busy_int <= 0;\n            data_send_index <= 0;\n            out_buff_ptr <= 0;\n            in_buff_ptr <= 0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (start_dat == 2'b01) begin\n                        write_buf_0 <= data_in;\n                        write_buf_1 <= data_in;\n                        DAT_oe_o <= 1;\n                        crc_en <= 1;\n                        crc_rst <= 0;\n                        transf_cnt <= 0;\n                        rd <= 1;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= write_buf_0[31:28];\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 1;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end else if (start_dat == 2'b10) begin\n                        DAT_oe_o <= 1;\n                        crc_en <= 1;\n                        crc_rst <= 0;\n                        transf_cnt <= 0;\n                        rd <= 1;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end else begin\n                        DAT_oe_o <= 0;\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_DAT: begin\n                    crc_en <= 1;\n                    crc_rst <= 0;\n                    transf_cnt <= transf_cnt + 1;\n                    rd <= 1;\n                    last_din <= DAT_dat_i;\n                    crc_c <= crc_c + 1;\n                    DAT_dat_o <= sd_data_out[31:28];\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 1;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= data_send_index + 1;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    if (transf_cnt == SD_BUS_W) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_CRC: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (crc_status == OK) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_BUSY: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 1;\n                    busy_n <= 0;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 1;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (busy_int == 0) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                READ_WAIT: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (DAT_dat_i[0] == 0) begin\n                        crc_en <= 1;\n                        crc_rst <= 0;\n                        transf_cnt <= 0;\n                        rd <= 1;\n                        last_din <= DAT_dat_i;\n                        crc_c <= 0;\n                        DAT_dat_o <= DAT_dat_i;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end else if (DAT_dat_i[0] == 1) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                READ_DAT: begin\n                    crc_en <= 1;\n                    crc_rst <= 0;\n                    transf_cnt <= transf_cnt + 1;\n                    rd <= 1;\n                    last_din <= DAT_dat_i;\n                    crc_c <= crc_c + 1;\n                    DAT_dat_o <= DAT_dat_i;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= DAT_dat_i;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= data_send_index + 1;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    if (transf_cnt == SD_BUS_W) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                default: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 14, "code": "\nmodule sd_data_serial_host (\n    // Interface\n    input  wire        sd_clk,\n    input  wire        rst,\n    input  wire [31:0] data_in,\n    input  wire [1:0]  start_dat,\n    input  wire        ack_transfer,\n    input  wire [SD_BUS_W-1:0] DAT_dat_i,\n    output wire        rd,\n    output wire [SD_BUS_W-1:0] data_out,\n    output wire        we,\n    output wire        DAT_oe_o,\n    output wire [SD_BUS_W-1:0] DAT_dat_o,\n    output wire        busy_n,\n    output wire        transm_complete,\n    output wire        crc_ok\n);\n\n    // Internal signals\n    reg [SD_BUS_W-1:0] crc_in;\n    reg crc_en;\n    reg crc_rst;\n    wire [15:0] crc_out;\n    reg [SD_BUS_W-1:0] temp_in;\n    reg [10:0] transf_cnt;\n    reg [5:0] state;\n    reg [5:0] next_state;\n    reg [2:0] crc_status;\n    reg busy_int;\n    reg ack_transfer_int;\n    reg ack_q;\n    reg q_start_bit;\n    reg [4:0] crc_c;\n    reg [3:0] last_din;\n    reg [2:0] crc_s;\n    reg [31:0] write_buf_0;\n    reg [31:0] write_buf_1;\n    reg [31:0] sd_data_out;\n    reg [0:0] out_buff_ptr;\n    reg [0:0] in_buff_ptr;\n    reg [2:0] data_send_index;\n\n    // CRC Generation Block\n    sd_crc_16 crc_16_gen (\n        .BITVAL(crc_in),\n        .Enable(crc_en),\n        .CLK(sd_clk),\n        .RST(crc_rst),\n        .CRC(crc_out)\n    );\n\n    // Acknowledgment Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            ack_q <= 1'b0;\n            ack_transfer_int <= 1'b0;\n        end else begin\n            ack_q <= ack_transfer;\n            ack_transfer_int <= ack_q;\n        end\n    end\n\n    // Finite State Machine Logic for Transmit and Receive Operations\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (start_dat == 2'b01) begin\n                    next_state = WRITE_DAT;\n                end else if (start_dat == 2'b10) begin\n                    next_state = READ_WAIT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            WRITE_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = WRITE_CRC;\n                end else begin\n                    next_state = WRITE_DAT;\n                end\n            end\n            WRITE_CRC: begin\n                if (crc_status == OK) begin\n                    next_state = WRITE_BUSY;\n                end else begin\n                    next_state = WRITE_CRC;\n                end\n            end\n            WRITE_BUSY: begin\n                if (busy_int == 0) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = WRITE_BUSY;\n                end\n            end\n            READ_WAIT: begin\n                if (DAT_dat_i[0] == 0) begin\n                    next_state = READ_DAT;\n                end else begin\n                    next_state = READ_WAIT;\n                end\n            end\n            READ_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = READ_DAT;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Start Bit Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            q_start_bit <= 1'b1;\n        end else begin\n            if (!DAT_dat_i[0] && state == READ_WAIT) begin\n                q_start_bit <= 1'b0;\n            end else begin\n                q_start_bit <= 1'b1;\n            end\n        end\n    end\n\n    // Sequential Logic for FSM\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            state <= IDLE;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Output Logic for FSM Control\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            write_buf_0 <= 0;\n            write_buf_1 <= 0;\n            DAT_oe_o <= 0;\n            crc_en <= 0;\n            crc_rst <= 1;\n            transf_cnt <= 0;\n            rd <= 0;\n            last_din <= 0;\n            crc_c <= 0;\n            DAT_dat_o <= 0;\n            crc_status <= 7;\n            crc_s <= 0;\n            transm_complete <= 0;\n            busy_n <= 1;\n            we <= 0;\n            data_out <= 0;\n            crc_ok <= 0;\n            busy_int <= 0;\n            data_send_index <= 0;\n            out_buff_ptr <= 0;\n            in_buff_ptr <= 0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (start_dat == 2'b01) begin\n                        write_buf_0 <= data_in;\n                        write_buf_1 <= data_in;\n                        DAT_oe_o <= 1;\n                        crc_en <= 1;\n                        crc_rst <= 0;\n                        transf_cnt <= 0;\n                        rd <= 1;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 1;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end else if (start_dat == 2'b10) begin\n                        DAT_oe_o <= 0;\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_DAT: begin\n                    crc_en <= 1;\n                    crc_rst <= 0;\n                    transf_cnt <= transf_cnt + 1;\n                    rd <= 1;\n                    last_din <= temp_in[3:0];\n                    crc_c <= crc_c + 1;\n                    DAT_dat_o <= temp_in[3:0];\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 1;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= data_send_index + 1;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    if (transf_cnt == SD_BUS_W) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_CRC: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (crc_status == OK) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_BUSY: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (busy_int == 0) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 1;\n                        busy_n <= 0;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 1;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                READ_WAIT: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (DAT_dat_i[0] == 0) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                READ_DAT: begin\n                    crc_en <= 1;\n                    crc_rst <= 0;\n                    transf_cnt <= transf_cnt + 1;\n                    rd <= 1;\n                    last_din <= temp_in[3:0];\n                    crc_c <= crc_c + 1;\n                    DAT_dat_o <= temp_in[3:0];\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 1;\n                    data_out <= temp_in;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= data_send_index + 1;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    if (transf_cnt == SD_BUS_W) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                default: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 16, "code": "\nmodule sd_data_serial_host (\n    input sd_clk,\n    input rst,\n    input [31:0] data_in,\n    input [1:0] start_dat,\n    input ack_transfer,\n    input [SD_BUS_W-1:0] DAT_dat_i,\n    output reg rd,\n    output reg [SD_BUS_W-1:0] data_out,\n    output reg we,\n    output reg DAT_oe_o,\n    output reg [SD_BUS_W-1:0] DAT_dat_o,\n    output reg busy_n,\n    output reg transm_complete,\n    output reg crc_ok\n);\n\n    // Internal signals\n    reg [SD_BUS_W-1:0] crc_in;\n    reg crc_en;\n    reg crc_rst;\n    wire [15:0] crc_out;\n    reg [SD_BUS_W-1:0] temp_in;\n    reg [10:0] transf_cnt;\n    reg [5:0] state;\n    reg [5:0] next_state;\n    reg [2:0] crc_status;\n    reg busy_int;\n    reg ack_transfer_int;\n    reg ack_q;\n    reg q_start_bit;\n    reg [4:0] crc_c;\n    reg [3:0] last_din;\n    reg [2:0] crc_s;\n    reg [31:0] write_buf_0;\n    reg [31:0] write_buf_1;\n    reg [31:0] sd_data_out;\n    reg [0:0] out_buff_ptr;\n    reg [0:0] in_buff_ptr;\n    reg [2:0] data_send_index;\n\n    // CRC Generation Block\n    sd_crc_16 crc_16_gen (\n        .BITVAL(crc_in),\n        .Enable(crc_en),\n        .CLK(sd_clk),\n        .RST(crc_rst),\n        .CRC(crc_out)\n    );\n\n    // Acknowledgment Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            ack_q <= 1'b0;\n            ack_transfer_int <= 1'b0;\n        end else begin\n            ack_q <= ack_transfer;\n            ack_transfer_int <= ack_q;\n        end\n    end\n\n    // Finite State Machine Logic for Transmit and Receive Operations\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (start_dat == 2'b01) begin\n                    next_state = WRITE_DAT;\n                end else if (start_dat == 2'b10) begin\n                    next_state = READ_WAIT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            WRITE_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = WRITE_CRC;\n                end else begin\n                    next_state = WRITE_DAT;\n                end\n            end\n            WRITE_CRC: begin\n                if (crc_status == OK) begin\n                    next_state = WRITE_BUSY;\n                end else begin\n                    next_state = WRITE_CRC;\n                end\n            end\n            WRITE_BUSY: begin\n                if (busy_int == 0) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = WRITE_BUSY;\n                end\n            end\n            READ_WAIT: begin\n                if (DAT_dat_i[0] == 0) begin\n                    next_state = READ_DAT;\n                end else begin\n                    next_state = READ_WAIT;\n                end\n            end\n            READ_DAT: begin\n                if (transf_cnt == SD_BUS_W) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = READ_DAT;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Start Bit Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            q_start_bit <= 1'b1;\n        end else begin\n            if (!DAT_dat_i[0] & state == READ_WAIT) begin\n                q_start_bit <= 1'b0;\n            end else begin\n                q_start_bit <= 1'b1;\n            end\n        end\n    end\n\n    // Sequential Logic for FSM\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            state <= IDLE;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Output Logic for FSM Control\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            write_buf_0 <= 32'h0;\n            write_buf_1 <= 32'h0;\n            DAT_oe_o <= 1'b0;\n            crc_en <= 1'b0;\n            crc_rst <= 1'b1;\n            transf_cnt <= 11'h0;\n            rd <= 1'b0;\n            last_din <= 4'h0;\n            crc_c <= 5'h0;\n            crc_in <= 32'h0;\n            DAT_dat_o <= 32'h0;\n            crc_status <= 3'h7;\n            crc_s <= 3'h0;\n            transm_complete <= 1'b0;\n            busy_n <= 1'b1;\n            we <= 1'b0;\n            data_out <= 32'h0;\n            crc_ok <= 1'b0;\n            busy_int <= 1'b0;\n            data_send_index <= 3'h0;\n            out_buff_ptr <= 1'b0;\n            in_buff_ptr <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    crc_en <= 1'b0;\n                    crc_rst <= 1'b1;\n                    transf_cnt <= 11'h0;\n                    rd <= 1'b0;\n                    last_din <= 4'h0;\n                    crc_c <= 5'h0;\n                    DAT_dat_o <= 32'h0;\n                    crc_status <= 3'h7;\n                    crc_s <= 3'h0;\n                    transm_complete <= 1'b0;\n                    busy_n <= 1'b1;\n                    we <= 1'b0;\n                    data_out <= 32'h0;\n                    crc_ok <= 1'b0;\n                    busy_int <= 1'b0;\n                    data_send_index <= 3'h0;\n                    out_buff_ptr <= 1'b0;\n                    in_buff_ptr <= 1'b0;\n                    if (start_dat == 2'b01) begin\n                        write_buf_0 <= data_in;\n                        write_buf_1 <= data_in;\n                        sd_data_out <= write_buf_0;\n                        out_buff_ptr <= 1'b1;\n                        in_buff_ptr <= 1'b1;\n                        DAT_oe_o <= 1'b1;\n                        crc_en <= 1'b1;\n                        crc_rst <= 1'b0;\n                        transf_cnt <= 11'h0;\n                        rd <= 1'b1;\n                        last_din <= 4'h0;\n                        crc_c <= 5'h0;\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b1;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                    end else if (start_dat == 2'b10) begin\n                        DAT_oe_o <= 1'b1;\n                        crc_en <= 1'b1;\n                        crc_rst <= 1'b0;\n                        transf_cnt <= 11'h0;\n                        rd <= 1'b1;\n                        last_din <= 4'h0;\n                        crc_c <= 5'h0;\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end\n                end\n                WRITE_DAT: begin\n                    crc_en <= 1'b1;\n                    crc_rst <= 1'b0;\n                    transf_cnt <= transf_cnt + 11'h1;\n                    rd <= 1'b1;\n                    last_din <= DAT_dat_i;\n                    crc_c <= crc_c + 5'h1;\n                    if (out_buff_ptr == 1'b0) begin\n                        sd_data_out <= write_buf_0;\n                    end else begin\n                        sd_data_out <= write_buf_1;\n                    end\n                    if (transf_cnt == SD_BUS_W) begin\n                        crc_en <= 1'b0;\n                        crc_rst <= 1'b1;\n                        transf_cnt <= 11'h0;\n                        rd <= 1'b0;\n                        last_din <= 4'h0;\n                        crc_c <= 5'h0;\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        next_state <= WRITE_CRC;\n                    end else begin\n                        if (out_buff_ptr == 1'b0) begin\n                            out_buff_ptr <= 1'b1;\n                        end else begin\n                            out_buff_ptr <= 1'b0;\n                        end\n                        if (in_buff_ptr == 1'b0) begin\n                            in_buff_ptr <= 1'b1;\n                        end else begin\n                            in_buff_ptr <= 1'b0;\n                        end\n                        DAT_dat_o <= sd_data_out[31:28];\n                        crc_in <= sd_data_out;\n                    end\n                end\n                WRITE_CRC: begin\n                    crc_en <= 1'b0;\n                    crc_rst <= 1'b1;\n                    transf_cnt <= transf_cnt + 11'h1;\n                    rd <= 1'b0;\n                    last_din <= 4'h0;\n                    crc_c <= 5'h0;\n                    DAT_dat_o <= 32'h0;\n                    crc_status <= 3'h7;\n                    crc_s <= 3'h0;\n                    transm_complete <= 1'b0;\n                    busy_n <= 1'b1;\n                    we <= 1'b0;\n                    data_out <= 32'h0;\n                    crc_ok <= 1'b0;\n                    busy_int <= 1'b0;\n                    data_send_index <= 3'h0;\n                    out_buff_ptr <= 1'b0;\n                    in_buff_ptr <= 1'b0;\n                    if (transf_cnt == 11'h0) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h3) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h4) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h5) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h6) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h7) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h8) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h9) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'ha) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'hb) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'hc) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'hd) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'he) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'hf) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h10) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h11) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h12) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h13) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h14) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h15) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h16) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h17) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h18) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h19) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1a) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1b) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1c) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1d) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1e) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1f) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h20) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h21) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h22) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h23) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h24) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h25) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h26) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h27) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h28) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h29) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2a) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2b) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2c) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2d) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2e) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2f) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h30) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h31) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h32) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h33) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h4) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h1) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                    end else if (transf_cnt == 11'h2) begin\n                        DAT_dat_o <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        out_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_ok <= 1'b0;\n                        busy_int <= 1'b0;\n                        data_send_index <= 3'h0;\n                        out_buff_ptr <= 1'b0;\n                        in_buff_ptr <= 1'b0;\n                        crc_status <= 3'h7;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b0;\n                        busy_n <= 1'b1;\n                        we <= 1'b0;\n                        data_out <= 32'h0;\n                        crc_s <= 3'h0;\n                        transm_complete <= 1'b", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 18, "code": "\nmodule sd_data_serial_host (\n    input sd_clk,\n    input rst,\n    input [31:0] data_in,\n    input [1:0] start_dat,\n    input ack_transfer,\n    input [SD_BUS_W-1:0] DAT_dat_i,\n    output rd,\n    output [SD_BUS_W-1:0] data_out,\n    output we,\n    output DAT_oe_o,\n    output [SD_BUS_W-1:0] DAT_dat_o,\n    output busy_n,\n    output transm_complete,\n    output crc_ok\n);\n\n    // Internal signals\n    reg [SD_BUS_W-1:0] crc_in;\n    reg crc_en;\n    reg crc_rst;\n    wire [SD_BUS_W-1:0] crc_out;\n    reg [SD_BUS_W-1:0] temp_in;\n    reg [10:0] transf_cnt;\n    reg [5:0] state;\n    reg [5:0] next_state;\n    reg [2:0] crc_status;\n    reg busy_int;\n    reg ack_transfer_int;\n    reg ack_q;\n    reg q_start_bit;\n    reg [4:0] crc_c;\n    reg [3:0] last_din;\n    reg [2:0] crc_s;\n    reg [31:0] write_buf_0;\n    reg [31:0] write_buf_1;\n    reg [31:0] sd_data_out;\n    reg [0:0] out_buff_ptr;\n    reg [0:0] in_buff_ptr;\n    reg [2:0] data_send_index;\n\n    // CRC Generation Block\n    sd_crc_16 crc_16_gen (\n        .BITVAL(crc_in),\n        .Enable(crc_en),\n        .CLK(sd_clk),\n        .RST(crc_rst),\n        .CRC(crc_out)\n    );\n\n    // Acknowledgment Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            ack_q <= 0;\n            ack_transfer_int <= 0;\n        end else begin\n            ack_q <= ack_transfer;\n            ack_transfer_int <= ack_q;\n        end\n    end\n\n    // Finite State Machine Logic for Transmit and Receive Operations\n    always @(*) begin\n        case (state)\n            IDLE: begin\n                if (start_dat == 2'b01) begin\n                    next_state = WRITE_DAT;\n                end else if (start_dat == 2'b10) begin\n                    next_state = READ_WAIT;\n                end else begin\n                    next_state = IDLE;\n                end\n            end\n            WRITE_DAT: begin\n                if (transf_cnt == BIT_BLOCK) begin\n                    next_state = WRITE_CRC;\n                end else begin\n                    next_state = WRITE_DAT;\n                end\n            end\n            WRITE_CRC: begin\n                if (crc_status == OK) begin\n                    next_state = WRITE_BUSY;\n                end else begin\n                    next_state = WRITE_CRC;\n                end\n            end\n            WRITE_BUSY: begin\n                if (busy_int == 0) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = WRITE_BUSY;\n                end\n            end\n            READ_WAIT: begin\n                if (DAT_dat_i[0] == 0) begin\n                    next_state = READ_DAT;\n                end else begin\n                    next_state = READ_WAIT;\n                end\n            end\n            READ_DAT: begin\n                if (transf_cnt == BIT_BLOCK_REC) begin\n                    next_state = IDLE;\n                end else begin\n                    next_state = READ_DAT;\n                end\n            end\n            default: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Start Bit Synchronization Block\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            q_start_bit <= 1;\n        end else begin\n            if (!DAT_dat_i[0] & (state == READ_WAIT)) begin\n                q_start_bit <= 0;\n            end else begin\n                q_start_bit <= 1;\n            end\n        end\n    end\n\n    // Sequential Logic for FSM\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            state <= IDLE;\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Output Logic for FSM Control\n    always @(posedge sd_clk) begin\n        if (rst) begin\n            write_buf_0 <= 0;\n            write_buf_1 <= 0;\n            DAT_oe_o <= 0;\n            crc_en <= 0;\n            crc_rst <= 1;\n            transf_cnt <= 0;\n            rd <= 0;\n            last_din <= 0;\n            crc_c <= 0;\n            DAT_dat_o <= 0;\n            crc_status <= 7;\n            crc_s <= 0;\n            transm_complete <= 0;\n            busy_n <= 1;\n            we <= 0;\n            data_out <= 0;\n            crc_ok <= 0;\n            busy_int <= 0;\n            data_send_index <= 0;\n            out_buff_ptr <= 0;\n            in_buff_ptr <= 0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (start_dat == 2'b01) begin\n                        write_buf_0 <= data_in;\n                        write_buf_1 <= data_in;\n                        DAT_oe_o <= 1;\n                        crc_en <= 1;\n                        crc_rst <= 0;\n                        transf_cnt <= 0;\n                        rd <= 1;\n                        last_din <= data_in[3:0];\n                        crc_c <= 0;\n                        DAT_dat_o <= data_in[3:0];\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 0;\n                        we <= 1;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end else if (start_dat == 2'b10) begin\n                        DAT_oe_o <= 0;\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_DAT: begin\n                    crc_en <= 1;\n                    crc_rst <= 0;\n                    transf_cnt <= transf_cnt + 1;\n                    rd <= 1;\n                    last_din <= sd_data_out[3:0];\n                    crc_c <= crc_c + 1;\n                    DAT_dat_o <= sd_data_out[3:0];\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 0;\n                    we <= 1;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= data_send_index + 1;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    if (transf_cnt == BIT_BLOCK) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_CRC: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (crc_status == OK) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 1;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 1;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                WRITE_BUSY: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (busy_int == 0) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 1;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 1;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                READ_WAIT: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                    if (DAT_dat_i[0] == 0) begin\n                        crc_en <= 1;\n                        crc_rst <= 0;\n                        transf_cnt <= 0;\n                        rd <= 1;\n                        last_din <= DAT_dat_i[3:0];\n                        crc_c <= 0;\n                        DAT_dat_o <= DAT_dat_i[3:0];\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 0;\n                        busy_n <= 0;\n                        we <= 1;\n                        data_out <= 0;\n                        crc_ok <= 0;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                READ_DAT: begin\n                    crc_en <= 1;\n                    crc_rst <= 0;\n                    transf_cnt <= transf_cnt + 1;\n                    rd <= 1;\n                    last_din <= DAT_dat_i[3:0];\n                    crc_c <= crc_c + 1;\n                    DAT_dat_o <= DAT_dat_i[3:0];\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 0;\n                    we <= 1;\n                    data_out <= DAT_dat_i;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= data_send_index + 1;\n                    out_buff_ptr <= out_buff_ptr;\n                    in_buff_ptr <= in_buff_ptr;\n                    if (transf_cnt == BIT_BLOCK_REC) begin\n                        crc_en <= 0;\n                        crc_rst <= 1;\n                        transf_cnt <= 0;\n                        rd <= 0;\n                        last_din <= 0;\n                        crc_c <= 0;\n                        DAT_dat_o <= 0;\n                        crc_status <= 7;\n                        crc_s <= 0;\n                        transm_complete <= 1;\n                        busy_n <= 1;\n                        we <= 0;\n                        data_out <= 0;\n                        crc_ok <= 1;\n                        busy_int <= 0;\n                        data_send_index <= 0;\n                        out_buff_ptr <= 0;\n                        in_buff_ptr <= 0;\n                    end\n                end\n                default: begin\n                    crc_en <= 0;\n                    crc_rst <= 1;\n                    transf_cnt <= 0;\n                    rd <= 0;\n                    last_din <= 0;\n                    crc_c <= 0;\n                    DAT_dat_o <= 0;\n                    crc_status <= 7;\n                    crc_s <= 0;\n                    transm_complete <= 0;\n                    busy_n <= 1;\n                    we <= 0;\n                    data_out <= 0;\n                    crc_ok <= 0;\n                    busy_int <= 0;\n                    data_send_index <= 0;\n                    out_buff_ptr <= 0;\n                    in_buff_ptr <= 0;\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_data_serial_host", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 1, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\nparameter MEM_OFFSET = 4;\nparameter FIFO_RX_MEM_DEPTH = 1024;\nparameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\nreg [FIFO_RX_MEM_ADR_SIZE-1:0] offset;\nreg wb_free;\nreg reset_rx_fifo;\nreg rd;\n\nsd_rx_fifo #(\n    .BD_SIZE(FIFO_RX_MEM_DEPTH),\n    .BD_WIDTH($clog2(FIFO_RX_MEM_DEPTH)),\n    .MEM_ADR_SIZE(FIFO_RX_MEM_ADR_SIZE)\n) rx_fifo (\n    .d(dat_i),\n    .wr(wr),\n    .wclk(sd_clk),\n    .q(m_wb_dat_o),\n    .rd(rd),\n    .full(full),\n    .empty(empty),\n    .mem_empt(),\n    .rclk(clk),\n    .rst(reset_rx_fifo)\n);\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_wb_adr_o <= 0;\n        m_wb_we_o <= 0;\n        m_wb_dat_o <= 0;\n        m_wb_cyc_o <= 0;\n        m_wb_stb_o <= 0;\n        m_wb_cti_o <= 0;\n        m_wb_bte_o <= 0;\n        offset <= 0;\n        wb_free <= 1;\n        reset_rx_fifo <= 1;\n        rd <= 0;\n    end else begin\n        if (en) begin\n            if (empty) begin\n                rd <= 0;\n            end else if (wb_free) begin\n                rd <= 1;\n                m_wb_adr_o <= adr + offset;\n                m_wb_we_o <= 1;\n                m_wb_dat_o <= rx_fifo.q;\n                m_wb_cyc_o <= 1;\n                m_wb_stb_o <= 1;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n                wb_free <= 0;\n            end\n        end else begin\n            reset_rx_fifo <= 1;\n            rd <= 0;\n            offset <= 0;\n            wb_free <= 1;\n            m_wb_adr_o <= 0;\n            m_wb_we_o <= 0;\n            m_wb_dat_o <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        offset <= 0;\n    end else begin\n        if (en && m_wb_ack_i) begin\n            offset <= offset + MEM_OFFSET;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        reset_rx_fifo <= 1;\n    end else begin\n        if (en) begin\n            reset_rx_fifo <= 0;\n        end else begin\n            reset_rx_fifo <= 1;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_wb_cyc_o <= 0;\n        m_wb_stb_o <= 0;\n        m_wb_cti_o <= 0;\n        m_wb_bte_o <= 0;\n    end else begin\n        if (en && m_wb_ack_i) begin\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end else if (en && !m_wb_ack_i) begin\n            m_wb_cyc_o <= 1;\n            m_wb_stb_o <= 1;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 4\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 4\n`define RESET_CLK_DIV 3\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 4\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 2\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 4\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 8, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    parameter MEM_OFFSET = 4;\n\n    reg [8:0] offset;\n    reg wb_free;\n    reg reset_rx_fifo;\n    reg rd;\n    wire [31:0] q;\n    wire [1:0] mem_empt;\n\n    sd_rx_fifo rx_fifo (\n        .d(dat_i),\n        .wr(wr),\n        .wclk(sd_clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty),\n        .mem_empt(mem_empt),\n        .rclk(clk),\n        .rst(reset_rx_fifo)\n    );\n\n    always @(posedge clk) begin\n        if (rst) begin\n            offset <= 0;\n            wb_free <= 1;\n            reset_rx_fifo <= 1;\n            rd <= 0;\n            m_wb_adr_o <= 0;\n            m_wb_we_o <= 0;\n            m_wb_dat_o <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end else begin\n            if (en) begin\n                if (empty) begin\n                    rd <= 0;\n                end else begin\n                    rd <= 1;\n                    m_wb_adr_o <= adr + offset;\n                    m_wb_we_o <= 1;\n                    m_wb_dat_o <= q;\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n                    if (m_wb_ack_i) begin\n                        wb_free <= 1;\n                        offset <= offset + MEM_OFFSET;\n                        m_wb_adr_o <= 0;\n                        m_wb_we_o <= 0;\n                        m_wb_dat_o <= 0;\n                        m_wb_cyc_o <= 0;\n                        m_wb_stb_o <= 0;\n                        m_wb_cti_o <= 0;\n                        m_wb_bte_o <= 0;\n                    end\n                end\n            end else begin\n                reset_rx_fifo <= 1;\n                rd <= 0;\n                m_wb_adr_o <= 0;\n                m_wb_we_o <= 0;\n                m_wb_dat_o <= 0;\n                m_wb_cyc_o <= 0;\n                m_wb_stb_o <= 0;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n            end\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 4\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 10, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    // Constants\n    localparam MEM_OFFSET = 4;\n    localparam FIFO_RX_MEM_DEPTH = 1024;\n    localparam FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    // Registers\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] offset;\n    reg wb_free;\n    reg reset_rx_fifo;\n    reg rd;\n\n    // Wishbone signals\n    assign m_wb_adr_o = adr + offset;\n    assign m_wb_we_o = 1'b1;\n    assign m_wb_dat_o = dat_i;\n    assign m_wb_cyc_o = wb_free & en;\n    assign m_wb_stb_o = wb_free & en;\n    assign m_wb_cti_o = 3'b000;\n    assign m_wb_bte_o = 2'b00;\n\n    // RX FIFO signals\n    wire [31:0] q;\n    wire full;\n    wire empty;\n    wire [1:0] mem_empt;\n\n    sd_rx_fifo rx_fifo (\n        .d(dat_i),\n        .wr(wr),\n        .wclk(sd_clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty),\n        .mem_empt(mem_empt),\n        .rclk(clk),\n        .rst(reset_rx_fifo)\n    );\n\n    // State machine\n    reg [1:0] state;\n    parameter IDLE = 2'b00;\n    parameter WRITE = 2'b01;\n    parameter READ = 2'b10;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            state <= IDLE;\n            offset <= 0;\n            wb_free <= 1'b1;\n            reset_rx_fifo <= 1'b1;\n            rd <= 1'b0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    if (en) begin\n                        state <= WRITE;\n                        reset_rx_fifo <= 1'b0;\n                        rd <= 1'b0;\n                    end\n                end\n                WRITE: begin\n                    if (full) begin\n                        state <= IDLE;\n                        reset_rx_fifo <= 1'b1;\n                        rd <= 1'b0;\n                    end else if (wb_free) begin\n                        state <= READ;\n                        rd <= 1'b1;\n                    end\n                end\n                READ: begin\n                    if (empty) begin\n                        state <= WRITE;\n                        rd <= 1'b0;\n                    end else if (m_wb_ack_i) begin\n                        state <= WRITE;\n                        offset <= offset + MEM_OFFSET;\n                        rd <= 1'b0;\n                        wb_free <= 1'b1;\n                    end\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 13, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output [31:0] m_wb_adr_o,\n    output m_wb_we_o,\n    output [31:0] m_wb_dat_o,\n    output m_wb_cyc_o,\n    output m_wb_stb_o,\n    input m_wb_ack_i,\n    output [2:0] m_wb_cti_o,\n    output [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    // Constants\n    localparam MEM_OFFSET = 4;\n    localparam FIFO_RX_MEM_DEPTH = 16;\n    localparam FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    // Registers\n    reg [8:0] offset;\n    reg wb_free;\n    reg reset_rx_fifo;\n    reg rd;\n\n    // Wishbone signals\n    assign m_wb_adr_o = adr + offset;\n    assign m_wb_we_o = 1'b1;\n    assign m_wb_dat_o = dat_i;\n    assign m_wb_cyc_o = wb_free & en;\n    assign m_wb_stb_o = wb_free & en;\n    assign m_wb_cti_o = 3'b000;\n    assign m_wb_bte_o = 2'b00;\n\n    // RX FIFO signals\n    wire [31:0] q;\n    wire full;\n    wire empty;\n    wire [1:0] mem_empt;\n\n    sd_rx_fifo rx_fifo (\n        .d(dat_i),\n        .wr(wr),\n        .wclk(sd_clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty),\n        .mem_empt(mem_empt),\n        .rclk(clk),\n        .rst(reset_rx_fifo)\n    );\n\n    // State machine\n    reg [1:0] state;\n    localparam IDLE = 2'b00;\n    localparam READ = 2'b01;\n    localparam WRITE = 2'b10;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset all control signals and counters\n            offset <= 0;\n            wb_free <= 1'b1;\n            reset_rx_fifo <= 1'b1;\n            rd <= 1'b0;\n            state <= IDLE;\n        end else begin\n            case (state)\n                IDLE: begin\n                    // Reset RX FIFO buffer\n                    reset_rx_fifo <= 1'b1;\n                    // Set Wishbone master signals to inactive state\n                    m_wb_cyc_o <= 1'b0;\n                    m_wb_stb_o <= 1'b0;\n                    // Initialize address offset to 0\n                    offset <= 0;\n                    if (en) begin\n                        // Start FIFO read operation\n                        rd <= 1'b1;\n                        state <= READ;\n                    end\n                end\n                READ: begin\n                    // Stop any previous read operation\n                    rd <= 1'b0;\n                    // Release FIFO from reset state\n                    reset_rx_fifo <= 1'b0;\n                    if (!empty && wb_free) begin\n                        // Start reading from FIFO and initiate Wishbone write transaction\n                        rd <= 1'b1;\n                        m_wb_dat_o <= q;\n                        m_wb_cyc_o <= 1'b1;\n                        m_wb_stb_o <= 1'b1;\n                        wb_free <= 1'b0;\n                        state <= WRITE;\n                    end\n                end\n                WRITE: begin\n                    // Reset Wishbone control signals\n                    m_wb_cyc_o <= 1'b0;\n                    m_wb_stb_o <= 1'b0;\n                    // Update address offset\n                    offset <= offset + MEM_OFFSET;\n                    // Mark Wishbone bus as free\n                    wb_free <= 1'b1;\n                    // Check for acknowledgment\n                    if (m_wb_ack_i) begin\n                        state <= READ;\n                    end\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 14, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    // Constants\n    localparam MEM_OFFSET = 4; // Memory address offset between 2 words\n    localparam FIFO_RX_MEM_DEPTH = 1024; // Width of RX Fifo\n    localparam FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1; // $\\log_2{FIFO\\_RX\\_MEM\\_DEPTH}$ +1\n\n    // Registers\n    reg [8:0] offset; // Address offset for Wishbone transactions\n    reg wb_free; // Wishbone bus availability flag\n    reg reset_rx_fifo; // RX FIFO reset control\n    reg rd; // Read enable for RX FIFO\n\n    // Sub-modules\n    sd_rx_fifo #(\n        .FIFO_RX_MEM_DEPTH(FIFO_RX_MEM_DEPTH),\n        .FIFO_RX_MEM_ADR_SIZE(FIFO_RX_MEM_ADR_SIZE)\n    ) rx_fifo (\n        .d(dat_i),\n        .wr(wr),\n        .wclk(sd_clk),\n        .q(m_wb_dat_o),\n        .rd(rd),\n        .full(full),\n        .empty(empty),\n        .mem_empt(),\n        .rclk(clk),\n        .rst(reset_rx_fifo)\n    );\n\n    // State machine\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset all control signals and counters\n            offset <= 0;\n            wb_free <= 1;\n            reset_rx_fifo <= 1;\n            rd <= 0;\n\n            // Reset the RX FIFO buffer\n            rx_fifo.reset();\n\n            // Set Wishbone master signals to inactive state\n            m_wb_adr_o <= 0;\n            m_wb_we_o <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end else begin\n            if (en) begin\n                // FIFO Read Preparation\n                if (!rd && !empty) begin\n                    rd <= 1;\n                end\n\n                // Read from FIFO and initiate Wishbone write transaction\n                if (rd && !empty && wb_free) begin\n                    // Prepare Wishbone data output\n                    m_wb_dat_o <= rx_fifo.q;\n\n                    // Set Wishbone write enable and control signals\n                    m_wb_we_o <= 1;\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n\n                    // Mark Wishbone bus as busy\n                    wb_free <= 0;\n                end\n\n                // Wishbone Write Transaction Completion\n                if (wb_free && m_wb_ack_i) begin\n                    // Reset Wishbone control signals\n                    m_wb_we_o <= 0;\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n\n                    // Update address offset\n                    offset <= offset + MEM_OFFSET;\n\n                    // Mark Wishbone bus as free\n                    wb_free <= 1;\n                end\n            } else begin\n                // Reset RX FIFO\n                rx_fifo.reset();\n\n                // Stop FIFO read operation\n                rd <= 0;\n\n                // Reset address offset\n                offset <= 0;\n\n                // Reset all Wishbone control signals\n                m_wb_adr_o <= 0;\n                m_wb_we_o <= 0;\n                m_wb_cyc_o <= 0;\n                m_wb_stb_o <= 0;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n\n                // Mark Wishbone bus as free\n                wb_free <= 1;\n            end\n        end\n    end\n\n    // Wishbone address output\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_adr_o <= 0;\n        end else begin\n            if (en) begin\n                m_wb_adr_o <= adr + offset;\n            end\n        end\n    end\n\n    // Wishbone write enable output\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_we_o <= 0;\n        end else begin\n            if (en) begin\n                m_wb_we_o <= 1;\n            end\n        end\n    end\n\n    // Wishbone cycle output\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_cyc_o <= 0;\n        end else begin\n            if (en) begin\n                m_wb_cyc_o <= 1;\n            end\n        end\n    end\n\n    // Wishbone strobe output\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_stb_o <= 0;\n        end else begin\n            if (en) begin\n                m_wb_stb_o <= 1;\n            end\n        end\n    end\n\n    // Wishbone cycle type identifier output\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_cti_o <= 0;\n        end else begin\n            if (en) begin\n                m_wb_cti_o <= 0;\n            end\n        end\n    end\n\n    // Wishbone burst type extension output\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_bte_o <= 0;\n        end else begin\n            if (en) begin\n                m_wb_bte_o <= 0;\n            end\n        end\n    end\n\n    // RX FIFO reset control\n    always @(posedge clk) begin\n        if (rst) begin\n            reset_rx_fifo <= 1;\n        end else begin\n            if (en) begin\n                reset_rx_fifo <= 0;\n            end\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 16, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    parameter MEM_OFFSET = 4;\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] rd_ptr;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] wr_ptr;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] mem_empt;\n    reg [31:0] rx_fifo [FIFO_RX_MEM_DEPTH-1:0];\n    reg [31:0] dat_o;\n    reg [31:0] offset;\n    reg [31:0] wb_free;\n    reg [31:0] reset_rx_fifo;\n    reg [31:0] rd;\n    reg [31:0] full_reg;\n    reg [31:0] empty_reg;\n\n    assign full = full_reg;\n    assign empty = empty_reg;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            offset <= 0;\n            wb_free <= 1;\n            reset_rx_fifo <= 1;\n            rd <= 0;\n            full_reg <= 0;\n            empty_reg <= 1;\n            mem_empt <= 0;\n            rd_ptr <= 0;\n            wr_ptr <= 0;\n        end else begin\n            if (en) begin\n                if (wr) begin\n                    rx_fifo[wr_ptr] <= dat_i;\n                    wr_ptr <= wr_ptr + 1;\n                    if (wr_ptr == FIFO_RX_MEM_DEPTH) begin\n                        wr_ptr <= 0;\n                    end\n                    if (wr_ptr == rd_ptr) begin\n                        full_reg <= 1;\n                    end\n                    empty_reg <= 0;\n                    mem_empt <= FIFO_RX_MEM_DEPTH - (wr_ptr - rd_ptr);\n                end\n                if (rd && !wb_free && !empty_reg) begin\n                    dat_o <= rx_fifo[rd_ptr];\n                    rd_ptr <= rd_ptr + 1;\n                    if (rd_ptr == FIFO_RX_MEM_DEPTH) begin\n                        rd_ptr <= 0;\n                    end\n                    if (rd_ptr == wr_ptr) begin\n                        empty_reg <= 1;\n                    end\n                    full_reg <= 0;\n                    mem_empt <= FIFO_RX_MEM_DEPTH - (wr_ptr - rd_ptr);\n                end\n                if (wb_free && !empty_reg) begin\n                    m_wb_adr_o <= adr + offset;\n                    m_wb_we_o <= 1;\n                    m_wb_dat_o <= dat_o;\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n                    wb_free <= 0;\n                    rd <= 1;\n                    offset <= offset + MEM_OFFSET;\n                end else begin\n                    m_wb_adr_o <= 0;\n                    m_wb_we_o <= 0;\n                    m_wb_dat_o <= 0;\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n                    wb_free <= 1;\n                    rd <= 0;\n                end\n            end else begin\n                reset_rx_fifo <= 1;\n                rd <= 0;\n                offset <= 0;\n                m_wb_adr_o <= 0;\n                m_wb_we_o <= 0;\n                m_wb_dat_o <= 0;\n                m_wb_cyc_o <= 0;\n                m_wb_stb_o <= 0;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n                wb_free <= 1;\n            end\n        end\n    end\n\n    always @(posedge sd_clk) begin\n        if (reset_rx_fifo) begin\n            rd_ptr <= 0;\n            wr_ptr <= 0;\n            mem_empt <= 0;\n            reset_rx_fifo <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 17, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [3:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    // Define constants\n    localparam MEM_OFFSET = 4;\n    localparam FIFO_RX_MEM_DEPTH = 1024;\n    localparam FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    // Define registers\n    reg [8:0] offset;\n    reg wb_free;\n    reg reset_rx_fifo;\n    reg rd;\n\n    // Define wires\n    wire [31:0] dat_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] rx_fifo_adr;\n    wire [31:0] rx_fifo_dat;\n    wire rx_fifo_wr;\n    wire rx_fifo_rd;\n    wire rx_fifo_full;\n    wire rx_fifo_empty;\n\n    // Instantiate sd_rx_fifo module\n    sd_rx_fifo #(\n        .FIFO_RX_MEM_DEPTH(FIFO_RX_MEM_DEPTH),\n        .FIFO_RX_MEM_ADR_SIZE(FIFO_RX_MEM_ADR_SIZE)\n    ) rx_fifo (\n        .d(dat_i),\n        .wr(wr),\n        .wclk(sd_clk),\n        .q(dat_o),\n        .rd(rd),\n        .full(rx_fifo_full),\n        .empty(rx_fifo_empty),\n        .mem_empt(),\n        .rclk(clk),\n        .rst(reset_rx_fifo)\n    );\n\n    // State machine\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            // Reset all control signals and counters\n            offset <= 0;\n            wb_free <= 1;\n            reset_rx_fifo <= 1;\n            rd <= 0;\n            m_wb_adr_o <= 0;\n            m_wb_we_o <= 0;\n            m_wb_dat_o <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end else begin\n            if (en) begin\n                // FIFO Read Preparation\n                if (!rx_fifo_empty && wb_free) begin\n                    rd <= 1;\n                end else begin\n                    rd <= 0;\n                end\n\n                // Wishbone Write Transaction Completion\n                if (wb_free && m_wb_ack_i) begin\n                    // Reset Wishbone control signals\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n\n                    // Update address offset\n                    offset <= offset + MEM_OFFSET;\n\n                    // Mark Wishbone bus as free\n                    wb_free <= 1;\n                end\n\n                // Read from FIFO and initiate Wishbone write transaction\n                if (!rx_fifo_empty && wb_free) begin\n                    // Prepare Wishbone data output\n                    m_wb_dat_o <= dat_o;\n\n                    // Set Wishbone write enable and control signals\n                    m_wb_we_o <= 1;\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n\n                    // Mark Wishbone bus as busy\n                    wb_free <= 0;\n                end\n            end else begin\n                // Reset RX FIFO\n                reset_rx_fifo <= 1;\n\n                // Stop FIFO read operation\n                rd <= 0;\n\n                // Reset address offset\n                offset <= 0;\n\n                // Reset all Wishbone control signals\n                m_wb_adr_o <= 0;\n                m_wb_we_o <= 0;\n                m_wb_dat_o <= 0;\n                m_wb_cyc_o <= 0;\n                m_wb_stb_o <= 0;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n\n                // Mark Wishbone bus as free\n                wb_free <= 1;\n            end\n        end\n    end\n\n    // Output assignments\n    assign rx_fifo_adr = offset[FIFO_RX_MEM_ADR_SIZE-1:0];\n    assign rx_fifo_dat = m_wb_dat_o;\n    assign rx_fifo_wr = m_wb_we_o;\n    assign rx_fifo_rd = rd;\n    assign full = rx_fifo_full;\n    assign empty = rx_fifo_empty;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 4\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 19, "code": "\nmodule sd_fifo_rx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    output reg [31:0] m_wb_dat_o,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    input [SD_BUS_W-1:0] dat_i,\n    input wr,\n    output full,\n    output empty\n);\n\n    parameter MEM_OFFSET = 4;\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] rx_fifo_wr_ptr;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] rx_fifo_rd_ptr;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] rx_fifo_mem_adr;\n    reg [SD_BUS_W-1:0] rx_fifo_mem [0:FIFO_RX_MEM_DEPTH-1];\n    reg rx_fifo_wr_en;\n    reg rx_fifo_rd_en;\n    wire rx_fifo_full;\n    wire rx_fifo_empty;\n\n    assign full = rx_fifo_full;\n    assign empty = rx_fifo_empty;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            rx_fifo_wr_ptr <= 0;\n            rx_fifo_rd_ptr <= 0;\n            rx_fifo_mem_adr <= 0;\n            rx_fifo_wr_en <= 0;\n            rx_fifo_rd_en <= 0;\n        end else begin\n            if (wr && !rx_fifo_full) begin\n                rx_fifo_mem[rx_fifo_wr_ptr] <= dat_i;\n                rx_fifo_wr_ptr <= rx_fifo_wr_ptr + 1;\n                rx_fifo_wr_en <= 1;\n            end else begin\n                rx_fifo_wr_en <= 0;\n            end\n\n            if (m_wb_ack_i && !rx_fifo_empty) begin\n                m_wb_dat_o <= rx_fifo_mem[rx_fifo_rd_ptr];\n                rx_fifo_rd_ptr <= rx_fifo_rd_ptr + 1;\n                rx_fifo_rd_en <= 1;\n            end else begin\n                rx_fifo_rd_en <= 0;\n            end\n        end\n    end\n\n    assign rx_fifo_full = (rx_fifo_wr_ptr == rx_fifo_rd_ptr) && rx_fifo_wr_en && !rx_fifo_rd_en;\n    assign rx_fifo_empty = (rx_fifo_wr_ptr == rx_fifo_rd_ptr) && !rx_fifo_wr_en && rx_fifo_rd_en;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            m_wb_adr_o <= 0;\n            m_wb_we_o <= 0;\n            m_wb_dat_o <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n        end else begin\n            if (en) begin\n                if (!m_wb_ack_i && !rx_fifo_empty) begin\n                    m_wb_adr_o <= adr + (rx_fifo_mem_adr * MEM_OFFSET);\n                    m_wb_we_o <= 1;\n                    m_wb_dat_o <= rx_fifo_mem[rx_fifo_rd_ptr];\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n                end else begin\n                    m_wb_adr_o <= 0;\n                    m_wb_we_o <= 0;\n                    m_wb_dat_o <= 0;\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n                end\n            end else begin\n                m_wb_adr_o <= 0;\n                m_wb_we_o <= 0;\n                m_wb_dat_o <= 0;\n                m_wb_cyc_o <= 0;\n                m_wb_stb_o <= 0;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n            end\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_rx_filler", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_TX_MEM_DEPTH 256\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 2, "code": "\n// Define the core define options\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 2\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 5, "code": "\nmodule sd_fifo_tx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    input [31:0] m_wb_dat_i,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    output reg [31:0] dat_o,\n    input rd,\n    output reg empty,\n    output reg fe\n);\n\n    // Constants\n    localparam BD_SIZE = 256;\n    localparam BD_WIDTH = $clog2(BD_SIZE);\n    localparam FIFO_TX_MEM_DEPTH = 256;\n    localparam FIFO_TX_MEM_ADR_SIZE = $clog2(FIFO_TX_MEM_DEPTH) + 1;\n\n    // Registers\n    reg [BD_WIDTH-1:0] offset;\n    reg [BD_WIDTH-1:0] we;\n    reg [31:0] din;\n    reg wr_tx;\n    reg reset_tx_fifo;\n    reg first;\n    reg ackd;\n    reg delay;\n\n    // Wishbone master signals\n    assign m_wb_adr_o = {adr[31:2], offset[BD_WIDTH-1:2], 2'b00};\n    assign m_wb_we_o = 0;\n    assign m_wb_cti_o = 0;\n    assign m_wb_bte_o = 0;\n\n    // TX FIFO signals\n    wire [31:0] q;\n    wire full;\n    wire empty_fifo;\n    wire [5:0] mem_empt;\n\n    sd_tx_fifo #(\n        .FIFO_DEPTH(FIFO_TX_MEM_DEPTH),\n        .FIFO_ADR_SIZE(FIFO_TX_MEM_ADR_SIZE)\n    ) tx_fifo (\n        .d(din),\n        .wr(wr_tx),\n        .wclk(clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty_fifo),\n        .mem_empt(mem_empt),\n        .rclk(sd_clk),\n        .rst(reset_tx_fifo)\n    );\n\n    // State machine\n    reg [1:0] state;\n    localparam IDLE = 2'b00;\n    localparam READ = 2'b01;\n    localparam WRITE = 2'b10;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset all registers and signals\n            offset <= 0;\n            we <= 0;\n            din <= 0;\n            wr_tx <= 0;\n            reset_tx_fifo <= 1;\n            first <= 1;\n            ackd <= 0;\n            delay <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_we_o <= 0;\n            state <= IDLE;\n            empty <= 1;\n            fe <= 0;\n        end else begin\n            // Default values\n            wr_tx <= 0;\n            reset_tx_fifo <= 0;\n            delay <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_we_o <= 0;\n            empty <= 0;\n            fe <= 0;\n\n            // State machine\n            case (state)\n                IDLE: begin\n                    if (en && !full) begin\n                        // Start a Wishbone read transaction\n                        m_wb_cyc_o <= 1;\n                        m_wb_stb_o <= 1;\n                        m_wb_we_o <= 0;\n                        state <= READ;\n                    end\n                end\n                READ: begin\n                    if (m_wb_ack_i) begin\n                        // Wishbone transaction acknowledged\n                        din <= m_wb_dat_i;\n                        wr_tx <= 1;\n                        m_wb_cyc_o <= 0;\n                        m_wb_stb_o <= 0;\n                        m_wb_we_o <= 0;\n                        state <= WRITE;\n                        delay <= 1;\n                    end\n                end\n                WRITE: begin\n                    if (delay) begin\n                        // Increment memory address offset\n                        offset <= offset + 1;\n                        ackd <= ~ackd;\n                        wr_tx <= 0;\n                        delay <= 0;\n                        state <= IDLE;\n                    end\n                end\n            endcase\n\n            // Update FIFO empty flag\n            empty <= empty_fifo;\n\n            // Update FIFO full flag\n            fe <= full;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 10, "code": "\nmodule sd_fifo_tx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    input [31:0] m_wb_dat_i,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    output reg [31:0] dat_o,\n    input rd,\n    output reg empty,\n    output reg fe\n);\n\n    // Define constants\n    localparam BD_SIZE = 256;\n    localparam BD_WIDTH = $clog2(BD_SIZE);\n    localparam FIFO_RX_MEM_DEPTH = 256;\n    localparam FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n    localparam FIFO_TX_MEM_DEPTH = 256;\n    localparam FIFO_TX_MEM_ADR_SIZE = $clog2(FIFO_TX_MEM_DEPTH) + 1;\n\n    // Define registers\n    reg [BD_WIDTH-1:0] offset;\n    reg [BD_WIDTH-1:0] we;\n    reg [31:0] din;\n    reg wr_tx;\n    reg reset_tx_fifo;\n    reg first;\n    reg ackd;\n    reg delay;\n\n    // Define wires\n    wire [31:0] q;\n    wire full;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] mem_empt;\n\n    // Instantiate sd_tx_fifo module\n    sd_tx_fifo #(\n        .FIFO_DEPTH(FIFO_TX_MEM_DEPTH)\n    ) tx_fifo (\n        .d(din),\n        .wr(wr_tx),\n        .wclk(sd_clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty),\n        .mem_empt(mem_empt),\n        .rclk(clk),\n        .rst(reset_tx_fifo)\n    );\n\n    // State machine\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset all registers and counters\n            offset <= 0;\n            we <= 0;\n            din <= 0;\n            wr_tx <= 0;\n            reset_tx_fifo <= 1;\n            first <= 1;\n            ackd <= 0;\n            delay <= 0;\n\n            // Reset Wishbone signals\n            m_wb_adr_o <= 0;\n            m_wb_we_o <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_cti_o <= 0;\n            m_wb_bte_o <= 0;\n\n            // Set TX FIFO reset control\n            reset_tx_fifo <= 1;\n        end else begin\n            if (en) begin\n                // Start a Wishbone read transaction\n                if (!full && !m_wb_ack_i && ackd) begin\n                    m_wb_adr_o <= adr + offset;\n                    m_wb_we_o <= 0;\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_cti_o <= 0;\n                    m_wb_bte_o <= 0;\n                    we <= we + 1;\n                    first <= 0;\n                end\n\n                // Write data to FIFO\n                if (m_wb_ack_i && !first) begin\n                    din <= m_wb_dat_i;\n                    wr_tx <= 1;\n                    delay <= 1;\n                end\n\n                // Stop writing to FIFO\n                if (delay) begin\n                    wr_tx <= 0;\n                    delay <= 0;\n                end\n\n                // Increment memory address offset\n                if (delay) begin\n                    offset <= offset + 1;\n                    ackd <= ~ackd;\n                }\n            } else begin\n                // Reset TX FIFO\n                reset_tx_fifo <= 1;\n\n                // Reset address offset\n                offset <= 0;\n\n                // Reset Wishbone signals\n                m_wb_adr_o <= 0;\n                m_wb_we_o <= 0;\n                m_wb_cyc_o <= 0;\n                m_wb_stb_o <= 0;\n                m_wb_cti_o <= 0;\n                m_wb_bte_o <= 0;\n            end\n        end\n    end\n\n    // Set TX FIFO reset control\n    always @(posedge clk) begin\n        if (rst) begin\n            reset_tx_fifo <= 1;\n        end else begin\n            if (en) begin\n                reset_tx_fifo <= 0;\n            end else begin\n                reset_tx_fifo <= 1;\n            end\n        end\n    end\n\n    // Set TX FIFO full flag\n    always @(posedge clk) begin\n        if (rst) begin\n            fe <= 0;\n        end else begin\n            if (en) begin\n                fe <= full;\n            end else begin\n                fe <= 0;\n            end\n        end\n    end\n\n    // Set TX FIFO data output\n    always @(posedge sd_clk) begin\n        if (rd) begin\n            dat_o <= q;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 11, "code": "\nmodule sd_fifo_tx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    input [31:0] m_wb_dat_i,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    output reg [31:0] dat_o,\n    input rd,\n    output reg empty,\n    output reg fe\n);\n\n    // Registers\n    reg [8:0] offset;\n    reg [8:0] we;\n    reg [31:0] din;\n    reg wr_tx;\n    reg reset_tx_fifo;\n    reg first;\n    reg ackd;\n    reg delay;\n\n    // Wishbone signals\n    assign m_wb_adr_o = {adr[31:2], offset[8:2]};\n    assign m_wb_we_o = 0;\n    assign m_wb_cyc_o = m_wb_stb_o;\n    assign m_wb_cti_o = 0;\n    assign m_wb_bte_o = 0;\n\n    // TX FIFO signals\n    wire [31:0] q;\n    wire full;\n    wire empty;\n    wire [5:0] mem_empt;\n\n    sd_tx_fifo fifo (\n        .d(din),\n        .wr(wr_tx),\n        .wclk(clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty),\n        .mem_empt(mem_empt),\n        .rclk(sd_clk),\n        .rst(reset_tx_fifo)\n    );\n\n    // State machine\n    parameter IDLE = 2'b00;\n    parameter READ = 2'b01;\n    parameter WRITE = 2'b10;\n    reg [1:0] state;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset all control signals and counters\n            offset <= 0;\n            we <= 0;\n            din <= 0;\n            wr_tx <= 0;\n            reset_tx_fifo <= 1;\n            first <= 1;\n            ackd <= 0;\n            delay <= 0;\n            state <= IDLE;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Reset TX FIFO\n                    reset_tx_fifo <= 1;\n\n                    // Reset address offset to 0\n                    offset <= 0;\n\n                    // Set Wishbone control signals to inactive state\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_we_o <= 0;\n\n                    // Set state to READ\n                    state <= READ;\n                end\n                READ: begin\n                    // Start a Wishbone read transaction if:\n                    // - FIFO is not full\n                    // - No ongoing Wishbone transaction\n                    // - Previous transaction is acknowledged\n                    if (!full && !m_wb_ack_i && ackd) begin\n                        // Set Wishbone control signals to active state\n                        m_wb_cyc_o <= 1;\n                        m_wb_stb_o <= 1;\n                        m_wb_we_o <= 0;\n\n                        // Set state to WRITE\n                        state <= WRITE;\n                    end\n                end\n                WRITE: begin\n                    // Write data to FIFO\n                    wr_tx <= 1;\n                    din <= m_wb_dat_i;\n\n                    // Deassert Wishbone signals\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_we_o <= 0;\n\n                    // Set delay flag for timing purposes\n                    delay <= 1;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset address offset to 0\n            offset <= 0;\n\n            // Reset write enable counter\n            we <= 0;\n\n            // Reset first operation flag\n            first <= 1;\n\n            // Reset acknowledge delay flag\n            ackd <= 0;\n\n            // Reset delay flag\n            delay <= 0;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Reset address offset to 0\n                    offset <= 0;\n\n                    // Reset write enable counter\n                    we <= 0;\n\n                    // Reset first operation flag\n                    first <= 1;\n\n                    // Reset acknowledge delay flag\n                    ackd <= 0;\n\n                    // Reset delay flag\n                    delay <= 0;\n                end\n                READ: begin\n                    // Increment memory address offset\n                    offset <= offset + 1;\n\n                    // Toggle acknowledge flag\n                    ackd <= ~ackd;\n\n                    // Stop writing to FIFO\n                    wr_tx <= 0;\n                end\n                WRITE: begin\n                    // Increment write enable counter\n                    we <= we + 1;\n\n                    // Set first operation flag\n                    first <= 0;\n\n                    // Set delay flag for timing purposes\n                    delay <= 1;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset TX FIFO\n            reset_tx_fifo <= 1;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Reset TX FIFO\n                    reset_tx_fifo <= 1;\n                end\n                READ: begin\n                    // Reset TX FIFO\n                    reset_tx_fifo <= 1;\n                end\n                WRITE: begin\n                    // Reset TX FIFO\n                    reset_tx_fifo <= 1;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Set Wishbone control signals to inactive state\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_we_o <= 0;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Set Wishbone control signals to inactive state\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_we_o <= 0;\n                end\n                READ: begin\n                    // Set Wishbone control signals to active state\n                    m_wb_cyc_o <= 1;\n                    m_wb_stb_o <= 1;\n                    m_wb_we_o <= 0;\n                end\n                WRITE: begin\n                    // Set Wishbone control signals to inactive state\n                    m_wb_cyc_o <= 0;\n                    m_wb_stb_o <= 0;\n                    m_wb_we_o <= 0;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Set state to IDLE\n            state <= IDLE;\n        end else begin\n            case (state)\n                IDLE: begin\n                    // Set state to READ\n                    state <= READ;\n                end\n                READ: begin\n                    // Set state to WRITE\n                    state <= WRITE;\n                end\n                WRITE: begin\n                    // Set state to READ\n                    state <= READ;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Set TX FIFO full flag to 0\n            fe <= 0;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Set TX FIFO full flag to 0\n                    fe <= 0;\n                end\n                READ: begin\n                    // Set TX FIFO full flag to 0\n                    fe <= 0;\n                end\n                WRITE: begin\n                    // Set TX FIFO full flag to 0\n                    fe <= 0;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Set TX FIFO empty flag to 1\n            empty <= 1;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Set TX FIFO empty flag to 1\n                    empty <= 1;\n                end\n                READ: begin\n                    // Set TX FIFO empty flag to 1\n                    empty <= 1;\n                end\n                WRITE: begin\n                    // Set TX FIFO empty flag to 1\n                    empty <= 1;\n                end\n            endcase\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Set TX FIFO data output to 0\n            dat_o <= 0;\n        } else begin\n            case (state)\n                IDLE: begin\n                    // Set TX FIFO data output to 0\n                    dat_o <= 0;\n                end\n                READ: begin\n                    // Set TX FIFO data output to 0\n                    dat_o <= 0;\n                end\n                WRITE: begin\n                    // Set TX FIFO data output to 0\n                    dat_o <= 0;\n                end\n            endcase\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_TX_MEM_DEPTH 512\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_DEPTH 1024\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 2\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH 4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_TX_MEM_DEPTH 512\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 19, "code": "\nmodule sd_fifo_tx_filler (\n    input clk,\n    input rst,\n    output reg [31:0] m_wb_adr_o,\n    output reg m_wb_we_o,\n    input [31:0] m_wb_dat_i,\n    output reg m_wb_cyc_o,\n    output reg m_wb_stb_o,\n    input m_wb_ack_i,\n    output reg [2:0] m_wb_cti_o,\n    output reg [1:0] m_wb_bte_o,\n    input en,\n    input [31:0] adr,\n    input sd_clk,\n    output reg [31:0] dat_o,\n    input rd,\n    output reg empty,\n    output reg fe\n);\n\n    // Registers\n    reg [8:0] offset;\n    reg [8:0] we;\n    reg [31:0] din;\n    reg wr_tx;\n    reg reset_tx_fifo;\n    reg first;\n    reg ackd;\n    reg delay;\n\n    // Wishbone signals\n    assign m_wb_adr_o = {adr[31:2], offset};\n    assign m_wb_we_o = 0;\n    assign m_wb_cti_o = 0;\n    assign m_wb_bte_o = 0;\n\n    // FIFO signals\n    wire [31:0] q;\n    wire full;\n    wire empty_fifo;\n    wire [5:0] mem_empt;\n\n    // Instantiate FIFO\n    sd_tx_fifo fifo (\n        .d(din),\n        .wr(wr_tx),\n        .wclk(clk),\n        .q(q),\n        .rd(rd),\n        .full(full),\n        .empty(empty_fifo),\n        .mem_empt(mem_empt),\n        .rclk(sd_clk),\n        .rst(reset_tx_fifo)\n    );\n\n    // State machine\n    parameter IDLE = 2'b00;\n    parameter READ = 2'b01;\n    parameter WRITE = 2'b10;\n    reg [1:0] state;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Reset all registers and signals\n            offset <= 0;\n            we <= 0;\n            din <= 0;\n            wr_tx <= 0;\n            reset_tx_fifo <= 1;\n            first <= 1;\n            ackd <= 0;\n            delay <= 0;\n            m_wb_cyc_o <= 0;\n            m_wb_stb_o <= 0;\n            m_wb_we_o <= 0;\n            state <= IDLE;\n            empty <= 1;\n            fe <= 0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    if (en) begin\n                        // Start a Wishbone read transaction\n                        m_wb_cyc_o <= 1;\n                        m_wb_stb_o <= 1;\n                        m_wb_we_o <= 0;\n                        state <= READ;\n                    end\n                end\n                READ: begin\n                    if (m_wb_ack_i) begin\n                        // Write data to FIFO\n                        wr_tx <= 1;\n                        din <= m_wb_dat_i;\n                        // Deassert Wishbone signals\n                        m_wb_cyc_o <= 0;\n                        m_wb_stb_o <= 0;\n                        m_wb_we_o <= 0;\n                        // Set delay flag for timing purposes\n                        delay <= 1;\n                        state <= WRITE;\n                    end\n                end\n                WRITE: begin\n                    if (delay) begin\n                        // Increment memory address offset\n                        offset <= offset + 1;\n                        // Toggle acknowledge flag\n                        ackd <= ~ackd;\n                        // Stop writing to FIFO\n                        wr_tx <= 0;\n                        delay <= 0;\n                        state <= IDLE;\n                    end\n                end\n            endcase\n            // Update FIFO empty flag\n            empty <= empty_fifo;\n            // Update FIFO full flag\n            fe <= full;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_fifo_tx_filler", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 1, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 32;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    reg [7:0] we;\n    reg [31:0] tmp;\n    reg ft;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr && !full) begin\n            tmp <= tmp | {d, tmp[31:4]};\n            if (tmp[3:0] == 4'hF) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                we <= 8'h1;\n            end else begin\n                we <= we << 4;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n        end\n    end\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            ft <= 1;\n        end else if (rd && !empty) begin\n            ft <= 0;\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 2, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                if (adr_i == FIFO_RX_MEM_DEPTH) begin\n                    adr_i <= 0;\n                end\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n            if (adr_o == FIFO_RX_MEM_DEPTH) begin\n                adr_o <= 0;\n            end\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_RX_MEM_ADR_SIZE 4\n`define FIFO_TX_MEM_DEPTH 16\n`define FIFO_TX_MEM_ADR_SIZE 4\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 6, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    reg [7:0] we;\n    reg [31:0] tmp;\n    reg ft;\n\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                ft <= 0;\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n        end\n    end\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 7, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign empty = (adr_i == adr_o) ? 1'b1 : 1'b0;\n    assign full = (adr_i == adr_o) ? 1'b1 : 1'b0;\n    assign mem_empt = (FIFO_RX_MEM_DEPTH - adr_i + adr_o) % FIFO_RX_MEM_DEPTH;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= (adr_i == FIFO_RX_MEM_DEPTH-1) ? 0 : adr_i + 1;\n                ft <= 0;\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= (adr_o == FIFO_RX_MEM_DEPTH-1) ? 0 : adr_o + 1;\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 16\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_RX_MEM_ADR_SIZE 4\n`define FIFO_TX_MEM_DEPTH 16\n`define FIFO_TX_MEM_ADR_SIZE 4\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 9, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [FIFO_RX_MEM_DEPTH-1:0];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign full = (adr_i[FIFO_RX_MEM_ADR_SIZE-1] != adr_o[FIFO_RX_MEM_ADR_SIZE-1]) && (adr_i[FIFO_RX_MEM_ADR_SIZE-2:0] == adr_o[FIFO_RX_MEM_ADR_SIZE-2:0]);\n    assign empty = (adr_i == adr_o);\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr && !full) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                ft <= 0;\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 10, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                if (adr_i == FIFO_RX_MEM_DEPTH) begin\n                    adr_i <= 0;\n                end\n            end\n            we <= {we[6:0], 1'b1};\n            ft <= 1;\n        end else begin\n            ft <= 0;\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n            if (adr_o == FIFO_RX_MEM_DEPTH) begin\n                adr_o <= 0;\n            end\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 12, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 1024;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i, adr_o;\n    reg [7:0] we;\n    reg [31:0] tmp;\n    reg ft;\n\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                ft <= 0;\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n        end\n    end\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_RX_MEM_ADR_SIZE 4\n`define FIFO_TX_MEM_DEPTH 16\n`define FIFO_TX_MEM_ADR_SIZE 4\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 14, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            we <= {we[6:0], 1'b0};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= (adr_i == FIFO_RX_MEM_DEPTH-1) ? 0 : adr_i + 1;\n            end\n            if (tmp[31:28] == 4'hF) begin\n                ft <= 0;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= (adr_o == FIFO_RX_MEM_DEPTH-1) ? 0 : adr_o + 1;\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 15, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                if (adr_i == FIFO_RX_MEM_DEPTH) begin\n                    adr_i <= 0;\n                end\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n            if (adr_o == FIFO_RX_MEM_DEPTH) begin\n                adr_o <= 0;\n            end\n            if (adr_o == adr_i && ft) begin\n                ft <= 0;\n            end\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 16\n`define FIFO_TX_MEM_DEPTH 16\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 18, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [0:FIFO_RX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i = 0;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o = 0;\n    reg [7:0] we = 8'h1;\n    reg [31:0] tmp = 0;\n    reg ft = 0;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (ft) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                if (adr_i == FIFO_RX_MEM_DEPTH) begin\n                    adr_i <= 0;\n                end\n            end else begin\n                ft <= 1;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n            if (adr_o == FIFO_RX_MEM_DEPTH) begin\n                adr_o <= 0;\n            end\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_rx_fifo", "codeid": 20, "code": "\nmodule sd_rx_fifo (\n    input [3:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [1:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    parameter FIFO_RX_MEM_DEPTH = 16;\n    parameter FIFO_RX_MEM_ADR_SIZE = $clog2(FIFO_RX_MEM_DEPTH) + 1;\n\n    reg [31:0] ram [FIFO_RX_MEM_DEPTH-1:0];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    reg [7:0] we;\n    reg [31:0] tmp;\n    reg ft;\n\n    assign full = (adr_i == adr_o) && ft;\n    assign empty = (adr_i == adr_o) && !ft;\n    assign mem_empt = FIFO_RX_MEM_DEPTH - adr_i + adr_o;\n\n    always @(posedge wclk) begin\n        if (wr) begin\n            tmp <= {tmp[27:0], d};\n            if (tmp[31]) begin\n                ram[adr_i] <= tmp;\n                adr_i <= adr_i + 1;\n                we <= 8'h1;\n            end else begin\n                we <= {we[6:0], 1'b1};\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n        end\n    end\n\n    always @(posedge wclk) begin\n        if (wr && !full) begin\n            ft <= 1;\n        end else if (rd && !empty) begin\n            ft <= 0;\n        end\n    end\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n            we <= 8'h1;\n            tmp <= 0;\n            ft <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 1, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [5:0] mem_empt_next;\n    wire [31:0] q_next;\n    wire full_next;\n    wire empty_next;\n\n    assign adr_i_next = (wr & ~full) ? adr_i + 1 : adr_i;\n    assign adr_o_next = (rd & ~empty) ? adr_o + 1 : adr_o;\n    assign mem_empt_next = adr_i_next - adr_o_next;\n    assign q_next = ram[adr_o];\n    assign full_next = (mem_empt_next == FIFO_TX_MEM_DEPTH);\n    assign empty_next = (mem_empt_next == 0);\n\n    always @(posedge wclk) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n        end else begin\n            adr_i <= adr_i_next;\n            adr_o <= adr_o_next;\n            if (wr & ~full) begin\n                ram[adr_i] <= d;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rst) begin\n            full <= 0;\n            empty <= 1;\n            mem_empt <= 0;\n        end else begin\n            full <= full_next;\n            empty <= empty_next;\n            mem_empt <= mem_empt_next;\n            q <= q_next;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define SIM\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_TX_MEM_DEPTH 128\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 3, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [5:0] mem_empt_next;\n    wire [31:0] q_next;\n    wire full_next;\n    wire empty_next;\n\n    assign adr_i_next = (wr & ~full) ? adr_i + 1'b1 : adr_i;\n    assign adr_o_next = (rd & ~empty) ? adr_o + 1'b1 : adr_o;\n    assign mem_empt_next = adr_i_next - adr_o_next;\n    assign q_next = ram[adr_o];\n    assign full_next = (mem_empt_next == FIFO_TX_MEM_DEPTH);\n    assign empty_next = (mem_empt_next == 0);\n\n    always @(posedge wclk) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n        end else begin\n            adr_i <= adr_i_next;\n            adr_o <= adr_o_next;\n            ram[adr_i] <= d;\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rst) begin\n            q <= 0;\n            full <= 0;\n            empty <= 1;\n            mem_empt <= 0;\n        end else begin\n            q <= q_next;\n            full <= full_next;\n            empty <= empty_next;\n            mem_empt <= mem_empt_next;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 5, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [5:0] mem_empt_next;\n    wire [31:0] q_next;\n    wire full_next;\n    wire empty_next;\n\n    assign adr_i_next = (wr & ~full) ? adr_i + 1 : adr_i;\n    assign adr_o_next = (rd & ~empty) ? adr_o + 1 : adr_o;\n    assign mem_empt_next = adr_i_next - adr_o_next;\n    assign q_next = ram[adr_o];\n    assign full_next = (mem_empt_next == FIFO_TX_MEM_DEPTH);\n    assign empty_next = (mem_empt_next == 0);\n\n    always @(posedge wclk) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n        end else begin\n            adr_i <= adr_i_next;\n            adr_o <= adr_o_next;\n            if (wr & ~full) begin\n                ram[adr_i] <= d;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rst) begin\n            q <= 0;\n            full <= 0;\n            empty <= 1;\n            mem_empt <= 0;\n        end else begin\n            q <= q_next;\n            full <= full_next;\n            empty <= empty_next;\n            mem_empt <= mem_empt_next;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 6, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [5:0] mem_empt_next;\n    wire [5:0] mem_empt_next_wrap;\n    wire [5:0] mem_empt_next_wrap_next;\n    wire [5:0] mem_empt_next_wrap_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    wire [5:0] mem_empt_next_wrap_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 9, "code": "\nmodule sd_tx_fifo(\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    reg [5:0] mem_empt_reg;\n    wire [5:0] mem_empt_next;\n    wire [5:0] mem_empt_next_wrap;\n    wire [5:0] mem_empt_next_wrap_r;\n    wire [5:0] mem_empt_next_wrap_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [5:0] mem_empt_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 10, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    reg [5:0] mem_empt_reg;\n    wire [5:0] mem_empt_next;\n    wire [5:0] mem_empt_next_wrap;\n    wire [5:0] mem_empt_next_wrap_r;\n    wire [5:0] mem_empt_next_wrap_r_1;\n    wire [5:0] mem_empt_next_wrap_r_2;\n    wire [5:0] mem_empt_next_wrap_r_3;\n    wire [5:0] mem_empt_next_wrap_r_4;\n    wire [5:0] mem_empt_next_wrap_r_5;\n    wire [5:0] mem_empt_next_wrap_r_6;\n    wire [5:0] mem_empt_next_wrap_r_7;\n    wire [5:0] mem_empt_next_wrap_r_8;\n    wire [5:0] mem_empt_next_wrap_r_9;\n    wire [5:0] mem_empt_next_wrap_r_10;\n    wire [5:0] mem_empt_next_wrap_r_11;\n    wire [5:0] mem_empt_next_wrap_r_12;\n    wire [5:0] mem_empt_next_wrap_r_13;\n    wire [5:0] mem_empt_next_wrap_r_14;\n    wire [5:0] mem_empt_next_wrap_r_15;\n    wire [5:0] mem_empt_next_wrap_r_16;\n    wire [5:0] mem_empt_next_wrap_r_17;\n    wire [5:0] mem_empt_next_wrap_r_18;\n    wire [5:0] mem_empt_next_wrap_r_19;\n    wire [5:0] mem_empt_next_wrap_r_20;\n    wire [5:0] mem_empt_next_wrap_r_21;\n    wire [5:0] mem_empt_next_wrap_r_22;\n    wire [5:0] mem_empt_next_wrap_r_23;\n    wire [5:0] mem_empt_next_wrap_r_24;\n    wire [5:0] mem_empt_next_wrap_r_25;\n    wire [5:0] mem_empt_next_wrap_r_26;\n    wire [5:0] mem_empt_next_wrap_r_27;\n    wire [5:0] mem_empt_next_wrap_r_28;\n    wire [5:0] mem_empt_next_wrap_r_29;\n    wire [5:0] mem_empt_next_wrap_r_30;\n    wire [5:0] mem_empt_next_wrap_r_31;\n    wire [5:0] mem_empt_next_wrap_r_32;\n    wire [5:0] mem_empt_next_wrap_r_33;\n    wire [5:0] mem_empt_next_wrap_r_34;\n    wire [5:0] mem_empt_next_wrap_r_35;\n    wire [5:0] mem_empt_next_wrap_r_36;\n    wire [5:0] mem_empt_next_wrap_r_37;\n    wire [5:0] mem_empt_next_wrap_r_38;\n    wire [5:0] mem_empt_next_wrap_r_39;\n    wire [5:0] mem_empt_next_wrap_r_40;\n    wire [5:0] mem_empt_next_wrap_r_41;\n    wire [5:0] mem_empt_next_wrap_r_42;\n    wire [5:0] mem_empt_next_wrap_r_43;\n    wire [5:0] mem_empt_next_wrap_r_44;\n    wire [5:0] mem_empt_next_wrap_r_45;\n    wire [5:0] mem_empt_next_wrap_r_46;\n    wire [5:0] mem_empt_next_wrap_r_47;\n    wire [5:0] mem_empt_next_wrap_r_48;\n    wire [5:0] mem_empt_next_wrap_r_49;\n    wire [5:0] mem_empt_next_wrap_r_50;\n    wire [5:0] mem_empt_next_wrap_r_51;\n    wire [5:0] mem_empt_next_wrap_r_52;\n    wire [5:0] mem_empt_next_wrap_r_53;\n    wire [5:0] mem_empt_next_wrap_r_54;\n    wire [5:0] mem_empt_next_wrap_r_55;\n    wire [5:0] mem_empt_next_wrap_r_56;\n    wire [5:0] mem_empt_next_wrap_r_57;\n    wire [5:0] mem_empt_next_wrap_r_58;\n    wire [5:0] mem_empt_next_wrap_r_59;\n    wire [5:0] mem_empt_next_wrap_r_60;\n    wire [5:0] mem_empt_next_wrap_r_61;\n    wire [5:0] mem_empt_next_wrap_r_62;\n    wire [5:0] mem_empt_next_wrap_r_63;\n    wire [5:0] mem_empt_next_wrap_r_64;\n    wire [5:0] mem_empt_next_wrap_r_65;\n    wire [5:0] mem_empt_next_wrap_r_66;\n    wire [5:0] mem_empt_next_wrap_r_67;\n    wire [5:0] mem_empt_next_wrap_r_68;\n    wire [5:0] mem_empt_next_wrap_r_69;\n    wire [5:0] mem_empt_next_wrap_r_70;\n    wire [5:0] mem_empt_next_wrap_r_71;\n    wire [5:0] mem_empt_next_wrap_r_72;\n    wire [5:0] mem_empt_next_wrap_r_73;\n    wire [5:0] mem_empt_next_wrap_r_74;\n    wire [5:0] mem_empt_next_wrap_r_75;\n    wire [5:0] mem_empt_next_wrap_r_76;\n    wire [5:0] mem_empt_next_wrap_r_77;\n    wire [5:0] mem_empt_next_wrap_r_78;\n    wire [5:0] mem_empt_next_wrap_r_79;\n    wire [5:0] mem_empt_next_wrap_r_80;\n    wire [5:0] mem_empt_next_wrap_r_81;\n    wire [5:0] mem_empt_next_wrap_r_82;\n    wire [5:0] mem_empt_next_wrap_r_83;\n    wire [5:0] mem_empt_next_wrap_r_84;\n    wire [5:0] mem_empt_next_wrap_r_85;\n    wire [5:0] mem_empt_next_wrap_r_86;\n    wire [5:0] mem_empt_next_wrap_r_87;\n    wire [5:0] mem_empt_next_wrap_r_88;\n    wire [5:0] mem_empt_next_wrap_r_89;\n    wire [5:0] mem_empt_next_wrap_r_90;\n    wire [5:0] mem_empt_next_wrap_r_91;\n    wire [5:0] mem_empt_next_wrap_r_92;\n    wire [5:0] mem_empt_next_wrap_r_93;\n    wire [5:0] mem_empt_next_wrap_r_94;\n    wire [5:0] mem_empt_next_wrap_r_95;\n    wire [5:0] mem_empt_next_wrap_r_96;\n    wire [5:0] mem_empt_next_wrap_r_97;\n    wire [5:0] mem_empt_next_wrap_r_98;\n    wire [5:0] mem_empt_next_wrap_r_99;\n    wire [5:0] mem_empt_next_wrap_r_100;\n    wire [5:0] mem_empt_next_wrap_r_101;\n    wire [5:0] mem_empt_next_wrap_r_102;\n    wire [5:0] mem_empt_next_wrap_r_103;\n    wire [5:0] mem_empt_next_wrap_r_104;\n    wire [5:0] mem_empt_next_wrap_r_105;\n    wire [5:0] mem_empt_next_wrap_r_106;\n    wire [5:0] mem_empt_next_wrap_r_107;\n    wire [5:0] mem_empt_next_wrap_r_108;\n    wire [5:0] mem_empt_next_wrap_r_109;\n    wire [5:0] mem_empt_next_wrap_r_110;\n    wire [5:0] mem_empt_next_wrap_r_111;\n    wire [5:0] mem_empt_next_wrap_r_112;\n    wire [5:0] mem_empt_next_wrap_r_113;\n    wire [5:0] mem_empt_next_wrap_r_114;\n    wire [5:0] mem_empt_next_wrap_r_115;\n    wire [5:0] mem_empt_next_wrap_r_116;\n    wire [5:0] mem_empt_next_wrap_r_117;\n    wire [5:0] mem_empt_next_wrap_r_118;\n    wire [5:0] mem_empt_next_wrap_r_119;\n    wire [5:0] mem_empt_next_wrap_r_120;\n    wire [5:0] mem_empt_next_wrap_r_121;\n    wire [5:0] mem_empt_next_wrap_r_122;\n    wire [5:0] mem_empt_next_wrap_r_123;\n    wire [5:0] mem_empt_next_wrap_r_124;\n    wire [5:0] mem_empt_next_wrap_r_125;\n    wire [5:0] mem_empt_next_wrap_r_126;\n    wire [5:0] mem_empt_next_wrap_r_127;\n    wire [5:0] mem_empt_next_wrap_r_128;\n    wire [5:0] mem_empt_next_wrap_r_129;\n    wire [5:0] mem_empt_next_wrap_r_130;\n    wire [5:0] mem_empt_next_wrap_r_131;\n    wire [5:0] mem_empt_next_wrap_r_132;\n    wire [5:0] mem_empt_next_wrap_r_133;\n    wire [5:0] mem_empt_next_wrap_r_134;\n    wire [5:0] mem_empt_next_wrap_r_135;\n    wire [5:0] mem_empt_next_wrap_r_136;\n    wire [5:0] mem_empt_next_wrap_r_137;\n    wire [5:0] mem_empt_next_wrap_r_138;\n    wire [5:0] mem_empt_next_wrap_r_139;\n    wire [5:0] mem_empt_next_wrap_r_140;\n    wire [5:0] mem_empt_next_wrap_r_141;\n    wire [5:0] mem_empt_next_wrap_r_142;\n    wire [5:0] mem_empt_next_wrap_r_143;\n    wire [5:0] mem_empt_next_wrap_r_144;\n    wire [5:0] mem_empt_next_wrap_r_145;\n    wire [5:0] mem_empt_next_wrap_r_146;\n    wire [5:0] mem_empt_next_wrap_r_147;\n    wire [5:0] mem_empt_next_wrap_r_148;\n    wire [5:0] mem_empt_next_wrap_r_149;\n    wire [5:0] mem_empt_next_wrap_r_150;\n    wire [5:0] mem_empt_next_wrap_r_151;\n    wire [5:0] mem_empt_next_wrap_r_152;\n    wire [5:0] mem_empt_next_wrap_r_153;\n    wire [5:0] mem_empt_next_wrap_r_154;\n    wire [5:0] mem_empt_next_wrap_r_155;\n    wire [5:0] mem_empt_next_wrap_r_156;\n    wire [5:0] mem_empt_next_wrap_r_157;\n    wire [5:0] mem_empt_next_wrap_r_158;\n    wire [5:0] mem_empt_next_wrap_r_159;\n    wire [5:0] mem_empt_next_wrap_r_160;\n    wire [5:0] mem_empt_next_wrap_r_161;\n    wire [5:0] mem_empt_next_wrap_r_162;\n    wire [5:0] mem_empt_next_wrap_r_163;\n    wire [5:0] mem_empt_next_wrap_r_164;\n    wire [5:0] mem_empt_next_wrap_r_165;\n    wire [5:0] mem_empt_next_wrap_r_166;\n    wire [5:0] mem_empt_next_wrap_r_167;\n    wire [5:0] mem_empt_next_wrap_r_168;\n    wire [5:0] mem_empt_next_wrap_r_169;\n    wire [5:0] mem_empt_next_wrap_r_170;\n    wire [5:0] mem_empt_next_wrap_r_171;\n    wire [5:0] mem_empt_next_wrap_r_172;\n    wire [5:0] mem_empt_next_wrap_r_173;\n    wire [5:0] mem_empt_next_wrap_r_174;\n    wire [5:0] mem_empt_next_wrap_r_175;\n    wire [5:0] mem_empt_next_wrap_r_176;\n    wire [5:0] mem_empt_next_wrap_r_177;\n    wire [5:0] mem_empt_next_wrap_r_178;\n    wire [5:0] mem_empt_next_wrap_r_179;\n    wire [5:0] mem_empt_next_wrap_r_180;\n    wire [5:0] mem_empt_next_wrap_r_181;\n    wire [5:0] mem_empt_next_wrap_r_182;\n    wire [5:0] mem_empt_next_wrap_r_183;\n    wire [5:0] mem_empt_next_wrap_r_184;\n    wire [5:0] mem_empt_next_wrap_r_185;\n    wire [5:0] mem_empt_next_wrap_r_186;\n    wire [5:0] mem_empt_next_wrap_r_187;\n    wire [5:0] mem_empt_next_wrap_r_188;\n    wire [5:0] mem_empt_next_wrap_r_189;\n    wire [5:0] mem_empt_next_wrap_r_190;\n    wire [5:0] mem_empt_next_wrap_r_191;\n    wire [5:0] mem_empt_next_wrap_r_192;\n    wire [5:0] mem_empt_next_wrap_r_193;\n    wire [5:0] mem_empt_next_wrap_r_194;\n    wire [5:0] mem_empt_next_wrap_r_195;\n    wire [5:0] mem_empt_next_wrap_r_196;\n    wire [5:0] mem_empt_next_wrap_r_197;\n    wire [5:0] mem_empt_next_wrap_r_198;\n    wire [5:0] mem_empt_next_wrap_r_199;\n    wire [5:0] mem_empt_next_wrap_r_200;\n    wire [5:0] mem_empt_next_wrap_r_201;\n    wire [5:0] mem_empt_next_wrap_r_202;\n    wire [5:0] mem_empt_next_wrap_r_203;\n    wire [5:0] mem_empt_next_wrap_r_204;\n    wire [5:0] mem_empt_next_wrap_r_205;\n    wire [5:0] mem_empt_next_wrap_r_206;\n    wire [5:0] mem_empt_next_wrap_r_207;\n    wire [5:0] mem_empt_next_wrap_r_208;\n    wire [5:0] mem_empt_next_wrap_r_209;\n    wire [5:0] mem_empt_next_wrap_r_210;\n    wire [5:0] mem_empt_next_wrap_r_211;\n    wire [5:0] mem_empt_next_wrap_r_212;\n    wire [5:0] mem_empt_next_wrap_r_213;\n    wire [5:0] mem_empt_next_wrap_r_214;\n    wire [5:0] mem_empt_next_wrap_r_215;\n    wire [5:0] mem_empt_next_wrap_r_216;\n    wire [5:0] mem_empt_next_wrap_r_217;\n    wire [5:0] mem_empt_next_wrap_r_218;\n    wire [5:0] mem_empt_next_wrap_r_219;\n    wire [5:0] mem_empt_next_wrap_r_220;\n    wire [5:0] mem_empt_next_wrap_r_221;\n    wire [5:0] mem_empt_next_wrap_r_222;\n    wire [5:0] mem_empt_next_wrap_r_223;\n    wire [5:0] mem_empt_next_wrap_r_224;\n    wire [5:0] mem_empt_next_wrap_r_225;\n    wire [5:0] mem_empt_next_wrap_r_226;\n    wire [5:0] mem_empt_next_wrap_r_227;\n    wire [5:0] mem_empt_next_wrap_r_228;\n    wire [5:0] mem_empt_next_wrap_r_229;\n    wire [5:0] mem_empt_next_wrap_r_230;\n    wire [5:0] mem_empt_next_wrap_r_231;\n    wire [5:0] mem_empt_next_wrap_r_232;\n    wire [5:0] mem_empt_next_wrap_r_233;\n    wire [5:0] mem_empt_next_wrap_r_234;\n    wire [5:0] mem_empt_next_wrap_r_235;\n    wire [5:0] mem_empt_next_wrap_r_236;\n    wire [5:0] mem_empt_next_wrap_r_237;\n    wire [5:0] mem_empt_next_wrap_r_238;\n    wire [5:0] mem_empt_next_wrap_r_239;\n    wire [5:0] mem_empt_next_wrap_r_240;\n    wire [5:0] mem_empt_next_wrap_r_241;\n    wire [5:0] mem_empt_next_wrap_r_242;\n    wire [5:0] mem_empt_next_wrap_r_243;\n    wire [5:0] mem_empt_next_wrap_r_244;\n    wire [5:0] mem_empt_next_wrap_r_245;\n    wire [5:0] mem_empt_next_wrap_r_246;\n    wire [5:0] mem_empt_next_wrap_r_247;\n    wire [5:0] mem_empt_next_wrap_r_248;\n    wire [5:0] mem_empt_next_wrap_r_249;\n    wire [5:0] mem_empt_next_wrap_r_250;\n    wire [5:0] mem_empt_next_wrap_r_251;\n    wire [5:0] mem_empt_next_wrap_r_252;\n    wire [5:0] mem_empt_next_wrap_r_253;\n    wire [5:0] mem_empt_next_wrap_r_254;\n    wire [5:0] mem_empt_next_wrap_r_255;\n    wire [5:0] mem_empt_next_wrap_r_256;\n    wire [5:0] mem_empt_next_wrap_r_257;\n    wire [5:0] mem_empt_next_wrap_r_258;\n    wire [5:0] mem_empt_next_wrap_r_259;\n    wire [5:0] mem_empt_next_wrap_r_260;\n    wire [5:0] mem_empt_next_wrap_r_261;\n    wire [5:0] mem_empt_next_wrap_r_262;\n    wire [5:0] mem_empt_next_wrap_r_263;\n    wire [5:0] mem_empt_next_wrap_r_264;\n    wire [5:0] mem_empt_next_wrap_r_265;\n    wire [5:0] mem_empt_next_wrap_r_266;\n    wire [5:0] mem_empt_next_wrap_r_267;\n    wire [5:0] mem_empt_next_wrap_r_268;\n    wire [5:0] mem_empt_next_wrap_r_269;\n    wire [5:0] mem_empt_next_wrap_r_270;\n    wire [5:0] mem_empt_next_wrap_r_271;\n    wire [5:0] mem_empt_next_wrap_r_272;\n    wire [5:0] mem_empt_next_wrap_r_273;\n    wire [5:0] mem_empt_next_wrap_r_274;\n    wire [5:0] mem_empt_next_wrap_r_275;\n    wire [5:0] mem_empt_next_wrap_r_276;\n    wire [5:0] mem_empt_next_wrap_r_277;\n    wire [5:0] mem_empt_next_wrap_r_278;\n    wire [5:0] mem_empt_next_wrap_r_279;\n    wire [5:0] mem_empt_next_wrap_r_280;\n    wire [5:0] mem_empt_next_wrap_r_281;\n    wire [5:0] mem_empt_next_wrap_r_282;\n    wire [5:0] mem_empt_next_wrap_r_283;\n    wire [5:0] mem_empt_next_wrap_r_284;\n    wire [5:0] mem_empt_next_wrap_r_285;\n    wire [5:0] mem_empt_next_wrap_r_286;\n    wire [5:0] mem_empt_next_wrap_r_287;\n    wire [5:0] mem_empt_next_wrap_r_288;\n    wire [5:0] mem_empt_next_wrap_r_289;\n    wire [5:0] mem_empt_next_wrap_r_290;\n    wire [5:0] mem_empt_next_wrap_r_291;\n    wire [5:0] mem_empt_next_wrap_r_292;\n    wire [5:0] mem_empt_next_wrap_r_293;\n    wire [5:0] mem_empt_next_wrap_r_294;\n    wire [5:0] mem_empt_next_wrap_r_295;\n    wire [5:0] mem_empt_next_wrap_r_296;\n    wire [5:0] mem_empt_next_wrap_r_297;\n    wire [5:0] mem_empt_next_wrap_r_298;\n    wire [5:0] mem_empt_next_wrap_r_299;\n    wire [5:0] mem_empt_next_wrap_r_300;\n    wire [5:0] mem_empt_next_wrap_r_301;\n    wire [5:0] mem_empt_next_wrap_r_302;\n    wire [5:0] mem_empt_next_wrap_r_303;\n    wire [5:0] mem_empt_next_wrap_r_304;\n    wire [5:0] mem_empt_next_wrap_r_305;\n    wire [5:0] mem_empt_next_wrap_r_306;\n    wire [5:0] mem_empt_next_wrap_r_307;\n    wire [5:0] mem_empt_next_wrap_r_308;\n    wire [5:0] mem_empt_next_wrap_r_309;\n    wire [5:0] mem_empt_next_wrap_r_310;\n    wire [5:0] mem_empt_next_wrap_r_311;\n    wire [5:0] mem_empt_next_wrap_r_312;\n    wire [5:0] mem_empt_next_wrap_r_313;\n    wire [5:0] mem_empt_next_wrap_r_314;\n    wire [5:0] mem_empt_next_wrap_r_315;\n    wire [5:0] mem_empt_next_wrap_r_316;\n    wire [5:0] mem_empt_next_wrap_r_317;\n    wire [5:0] mem_empt_next_wrap_r_318;\n    wire [5:0] mem_empt_next_wrap_r_319;\n    wire [5:0] mem_empt_next_wrap_r_320;\n    wire [5:0] mem_empt_next_wrap_r_321;\n    wire [5:0] mem_empt_next_wrap_r_322;\n    wire [5:0] mem_empt_next_wrap_r_323;\n    wire [5:0] mem_empt_next_wrap_r_324;\n    wire [5:0] mem_empt_next_wrap_r_325;\n    wire [5:0] mem_empt_next_wrap_r_326;\n    wire [5:0] mem_empt_next_wrap_r_327;\n    wire [5:0] mem_empt_next_wrap_r_328;\n    wire [5:0] mem_empt_next_wrap_r_329;\n    wire [5:0] mem_empt_next_wrap_r_330;\n    wire [5:0] mem_empt_next_wrap_r_331;\n    wire [5:0] mem_empt_next_wrap_r_332;\n    wire [5:0] mem_empt_next_wrap_r_333;\n    wire [5:0] mem_empt_next_wrap_r_334;\n    wire [5:0] mem_empt_next_wrap_r_335;\n    wire [5:0] mem_empt_next_wrap_r_336;\n    wire [5:0] mem_empt_next_wrap_r_337;\n    wire [5:0] mem_empt_next_wrap_r_338;\n    wire [5:0] mem_empt_next_wrap_r_339;\n    wire [5:0] mem_empt_next_wrap_r_340;\n    wire [5:0] mem_empt_next_wrap_r_341;\n    wire [5:0] mem_empt_next_wrap_r_342;\n    wire [5:0] mem_empt_next_wrap_r_343;\n    wire [5:0] mem_empt_next_wrap_r_344;\n    wire [5:0] mem_empt_next_wrap_r_345;\n    wire [5:0] mem_empt_next_wrap_r_346;\n    wire [5:0] mem_empt_next_wrap_r_347;\n    wire [5:0] mem_empt_next_wrap_r_348;\n    wire [5:0] mem_empt_next_wrap_r_349;\n    wire [5:0] mem_empt_next_wrap_r_350;\n    wire [5:0] mem_empt_next_wrap_r_351;\n    wire [5:0] mem_empt_next_wrap_r_352;\n    wire [5:0] mem_empt_next_wrap_r_353;\n    wire [5:0] mem_empt_next_wrap_r_354;\n    wire [5:0] mem_empt_next_wrap_r_355;\n    wire [5:0] mem_empt_next_wrap_r_356;\n    wire [5:0] mem_empt_next_wrap_r_357;\n    wire [5:0] mem_empt_next_wrap_r_358;\n    wire [5:0] mem_empt_next_wrap_r_359;\n    wire [5:0] mem_empt_next_wrap_r_360;\n    wire [5:0] mem_empt_next_wrap_r_361;\n    wire [5:0] mem_empt_next_wrap_r_362;\n    wire [5:0] mem_empt_next_wrap_r_363;\n    wire [5:0] mem_empt_next_wrap_r_364;\n    wire [5:0] mem_empt_next_wrap_r_365;\n    wire [5:0] mem_empt_next_wrap_r_366;\n    wire [5:0] mem_empt_next_wrap_r_367;\n    wire [5:0] mem_empt_next_wrap_r_368;\n    wire [5:0] mem_empt_next_wrap_r_369;\n    wire [5:0] mem_empt_next_wrap_r_370;\n    wire [5:0] mem_empt_next_wrap_r_371;\n    wire [5:0] mem_empt_next_wrap_r_372;\n    wire [5:0] mem_empt_next_wrap_r_373;\n    wire [5:0] mem_empt_next_wrap_r_374;\n    wire [5:0] mem_empt_next_wrap_r_375;\n    wire [5:0] mem_empt_next_wrap_r_376;\n    wire [5:0] mem_empt_next_wrap_r_377;\n    wire [5:0] mem_empt_next_wrap_r_378;\n    wire [5:0] mem_empt_next_wrap_r_379;\n    wire [5:0] mem_empt_next_wrap_r_380;\n    wire [5:0] mem_empt_next_wrap_r_381;\n    wire [5:0] mem_empt_next_wrap_r_382;\n    wire [5:0] mem_empt_next_wrap_r_383;\n    wire [5:0] mem_empt_next_wrap_r_384;\n    wire [5:0] mem_empt_next_wrap_r_385;\n    wire [5:0] mem_empt_next_wrap_r_386;\n    wire [5:0] mem_empt_next_wrap_r_387;\n    wire [5:0] mem_empt_next_wrap_r_388;\n    wire [5:0] mem_empt_next_wrap_r_389;\n    wire [5:0] mem_empt_next_wrap_r_390;\n    wire [5:0] mem_empt_next_wrap_r_391;\n    wire [5:0] mem_empt_next_wrap_r_392;\n    wire [5:0] mem_empt_next_wrap_r_393;\n    wire [5:0] mem_empt_next_wrap_r_394;\n    wire [5:0] mem_empt_next_wrap_r_395;\n    wire [5:0] mem_empt_next_wrap_r_396;\n    wire [5:0] mem_empt_next_wrap_r_397;\n    wire [5:0] mem_empt_next_wrap_r_398;\n    wire [5:0] mem_empt_next_wrap_r_399;\n    wire [5:0] mem_empt_next_wrap_r_400;\n    wire [5:0] mem_empt_next_wrap_r_401;\n    wire [5:0] mem_empt_next_wrap_r_402;\n    wire [5:0] mem_empt_next_wrap_r_403;\n    wire [5:0] mem_empt_next_wrap_r_404;\n    wire [5:0] mem_empt_next_wrap_r_405;\n    wire [5:0] mem_empt_next_wrap_r_406;\n    wire [5:0] mem_empt_next_wrap_r_407;\n    wire [5:0] mem_empt_next_wrap_r_408;\n    wire [5:0] mem_empt_next_wrap_r_409;\n    wire [5:0] mem_empt_next_wrap_r_410;\n    wire [5:0] mem_empt_next_wrap_r_411;\n    wire [5:0] mem_empt_next_wrap_r_412;\n    wire [5:0] mem_empt_next_wrap_r_413;\n    wire [5:0] mem_empt_next_wrap_r_414;\n    wire [5:0] mem_empt_next_wrap_r_415;\n    wire [5:0] mem_empt_next_wrap_r_416;\n    wire [5:0] mem_empt_next_wrap_r_417;\n    wire [5:0] mem_empt_next_wrap_r_418;\n    wire [5:0] mem_empt_next_wrap_r_419;\n    wire [5:0] mem_empt_next_wrap_r_420;\n    wire [5:0] mem_empt_next_wrap_r_421;\n    wire [5:0] mem_empt_next_wrap_r_422;\n    wire [5:0] mem_empt_next_wrap_r_423;\n    wire [5:0] mem_empt_next_wrap_r_424;\n    wire [5:0] mem_empt_next_wrap_r_425;\n    wire [5:0] mem_empt_next_wrap_r_426;\n    wire [5:0] mem_empt_next_wrap_r_427;\n    wire [5:0] mem_empt_next_wrap_r_428;\n    wire [5:0] mem_empt_next_wrap_r_429;\n    wire [5:0] mem_empt_next_wrap_r_430;\n    wire [5:0] mem_empt_next_wrap_r_431;\n    wire [5:0] mem_empt_next_wrap_r_432;\n    wire [5:0] mem_empt_next_wrap_r_433;\n    wire [5:0] mem_empt_next_wrap_r_434;\n    wire [5:0] mem_empt_next_wrap_r_435;\n    wire [5:0] mem_empt_next_wrap_r_436;\n    wire [5:0] mem_empt_next_wrap_r_437;\n    wire [5:0] mem_empt_next_wrap_r_438;\n    wire [5:0] mem_empt_next_wrap_r_439;\n    wire [5:0] mem_empt_next_wrap_r_440;\n    wire [5:0] mem_empt_next_wrap_r_441;\n    wire [5:0] mem_empt_next_wrap_r_442;\n    wire [5:0] mem_empt_next_wrap_r_443;\n    wire [5:0] mem_empt_next_wrap_r_444;\n    wire [5:0] mem_empt_next_wrap_r_445;\n    wire [5:0] mem_empt_next_wrap_r_446;\n    wire [5:0] mem_empt_next_wrap_r_447;\n    wire [5:0] mem_empt_next_wrap_r_448;\n    wire [5:0] mem_empt_next_wrap_r_449;\n    wire [5:0] mem_empt_next_wrap_r_450;\n    wire [5:0] mem_empt_next_wrap_r_451;\n    wire [5:0] mem_empt_next_wrap_r_452;\n    wire [5:0] mem_empt_next_wrap_r_453;\n    wire [5:0] mem_empt_next_wrap_r_454;\n    wire [5:0] mem_empt_next_wrap_r_455;\n    wire [5:0] mem_empt_next_wrap_r_456;\n    wire [5:0] mem_empt_next_wrap_r_457;\n    wire [5:0] mem_empt_next_wrap_r_458;\n    wire [5:0] mem_empt_next_wrap_r_459;\n    wire [5:0] mem_empt_next_wrap_r_460;\n    wire [5:0] mem_empt_next_wrap_r_461;\n    wire [5:0] mem_empt_next_wrap_r_462;\n    wire [5:0] mem_empt_next_wrap_r_463;\n    wire [5:0] mem_empt_next_wrap_r_464;\n    wire [5:0] mem_empt_next_wrap_r_465;\n    wire [5:0] mem_empt_next_wrap_r_466;\n    wire [5:0] mem_empt_next_wrap_r_467;\n    wire [5:0] mem_empt_next_wrap_r_468;\n    wire [5:0] mem_empt_next_wrap_r_469;\n    wire [5:0] mem_empt_next_wrap_r_470;\n    wire [5:0] mem_empt_next_wrap_r_471;\n    wire [5:0] mem_empt_next_wrap_r_472;\n    wire [5:0] mem_empt_next_wrap_r_473;\n    wire [5:0] mem_empt_next_wrap_r_474;\n    wire [5:0] mem_empt_next_wrap_r_475;\n    wire [5:0] mem_empt_next_wrap_r_476;\n    wire [5:0] mem_empt_next_wrap_r_477;\n    wire [5:0] mem_empt_next_wrap_r_478;\n    wire [5:0] mem_empt_next_wrap_r_479;\n    wire [5:0] mem_empt_next_wrap_r_480;\n    wire [5:0] mem_empt_next_wrap_r_481;\n    wire [5:0] mem_empt_next_wrap_r_482;\n    wire [5:0] mem_empt_next_wrap_r_483;\n    wire [5:0] mem_empt_next_wrap_r_484;\n    wire [5:0] mem_empt_next_wrap_r_485;\n    wire [5:0] mem_empt_next_wrap_r_486;\n    wire [5:0] mem_empt_next_wrap_r_487;\n    wire [5:0] mem_empt_next_wrap_r_488;\n    wire [5:0] mem_empt_next_wrap_r_489;\n    wire [5:0] mem_empt_next_wrap_r_490;\n    wire [5:0] mem_empt_next_wrap_r_491;\n    wire [5:0] mem_empt_next_wrap_r_492;\n    wire [5:0] mem_empt_next_wrap_r_493;\n    wire [5:0] mem_empt_next_wrap_r_494;\n    wire [5:0] mem_empt_next_wrap_r_495;\n    wire [5:0] mem_empt_next_wrap_r_496;\n    wire [5:0] mem_empt_next_wrap_r_497;\n    wire [5:0] mem_empt_next_wrap_r_498;\n    wire [5:0] mem_empt_next_wrap_r_499;\n    wire [5:0] mem_empt_next_wrap_r_500;\n    wire [5:0] mem_empt_next_wrap_r_501;\n    wire [5:0] mem_empt_next_wrap_r_502;\n    wire [5:0] mem_empt_next_wrap_r_503;\n    wire [5:0] mem_empt_next_wrap_r_504;\n    wire [5:0] mem_empt_next_wrap_r_505;\n    wire [5:0] mem_empt_next_wrap_r_506;\n    wire [5:0] mem_empt_next_wrap_r_507;\n    wire [5:0] mem_empt_next_wrap_r_508;\n    wire [5:0] mem_empt_next_wrap_r_509;\n    wire [5:0] mem_empt_next_wrap_r_510;\n    wire [5:0] mem_empt_next_wrap_r_511;\n    wire [5:0] mem_empt_next_wrap_r_512;\n    wire [5:0] mem_empt_next_wrap_r_513;\n    wire [5:0] mem_empt_next_wrap_r_514;\n    wire [5:0] mem_empt_next_wrap_r_515;\n    wire [5:0] mem_empt_next_wrap_r_516;\n    wire [5:0] mem_empt_next_wrap_r_517;\n    wire [5:0] mem_empt_next_wrap_r_518;\n    wire [5:0] mem_empt_next_wrap_r_519;\n    wire [5:0] mem_empt_next_wrap_r_520;\n    wire [5:0] mem_empt_next_wrap_r_521;\n    wire [5:0] mem_empt_next_wrap_r_522;\n    wire [5:0] mem_empt_next_wrap_r_523;\n    wire [5:0] mem_empt_next_wrap_r_524;\n    wire [5:0] mem_empt_next_wrap_r_525;\n    wire [5:0] mem_empt_next_wrap_r_526;\n    wire [5:0] mem_empt_next_wrap_r_527;\n    wire [5:0] mem_empt_next_wrap_r_528;\n    wire [5:0] mem_empt_next_wrap_r_529;\n    wire [5:0] mem_empt_next_wrap_r_530;\n    wire [5:0] mem_empt_next_wrap_r_531;\n    wire [5:0] mem_empt_next_wrap_r_532;\n    wire [5:0] mem_empt_next_wrap_r_533;\n    wire [5:0] mem_empt_next_wrap_r_534;\n    wire [5:0] mem_empt_next_wrap_r_535;\n    wire [5:0] mem_empt_next_wrap_r_536;\n    wire [5:0] mem_empt_next_wrap_r_537;\n    wire [5:0] mem_empt_next_wrap_r_538;\n    wire [5:0] mem_empt_next_wrap_r_539;\n    wire [5:0] mem_empt_next_wrap_r_540;\n    wire [5:0] mem_empt_next_wrap_r_541;\n    wire [5:0] mem_empt_next_wrap_r_542;\n    wire [5:0] mem_empt_next_wrap_r_543;\n    wire [5:0] mem_empt_next_wrap_r_544;\n    wire [5:0] mem_empt_next_wrap_r_545;\n    wire [5:0] mem_empt_next_wrap_r_546;\n    wire [5:0] mem_empt_next_wrap_r_547;\n    wire [5:0] mem_empt_next_wrap_r_548;\n    wire [5:0] mem_empt_next_wrap_r_549;\n    wire [5:0] mem_empt_next_wrap_r_550;\n    wire [5:0] mem_empt_next_wrap_r_551;\n    wire [5:0] mem_empt_next_wrap_r_552;\n    wire [5:0] mem_empt_next_wrap_r_553;\n    wire [5:0] mem_empt_next_wrap_r_554;\n    wire [5:0] mem_empt_next_wrap_r_555;\n    wire [5:0] mem_empt_next_wrap_r_556;\n    wire [5:0] mem_empt_next_wrap_r_557;\n    wire [5:0] mem_empt_next_wrap_r_558;\n    wire [5:0] mem_empt_next_wrap_r_559;\n    wire [5:0] mem_empt_next_wrap_r_560;\n    wire [5:0] mem_empt_next_wrap_r_561;\n    wire [5:0] mem_empt_next_wrap_r_562;\n    wire [5:0] mem_empt_next_wrap_r_563;\n    wire [5:0] mem_empt_next_wrap_r_564;\n    wire [5:0] mem_empt_next_wrap_r_565;\n    wire [5:0] mem_empt_next_wrap_r_566;\n    wire [5:0] mem_empt_next_wrap_r_567;\n    wire [5:0] mem_empt_next_wrap_r_568;\n    wire [5:0] mem_empt_next_wrap_r_569;\n    wire [5:0] mem_empt_next_wrap_r_570;\n    wire [5:0] mem_empt_next_wrap_r_571;\n    wire [5:0] mem_empt_next_wrap_r_572;\n    wire [5:0] mem_empt_next_wrap_r_573;\n    wire [5:0] mem_empt_next_wrap_r_574;\n    wire [5:0] mem_empt_next_wrap_r_575;\n    wire [5:0] mem_empt_next_wrap_r_576;\n    wire [5:0] mem_empt_next_wrap_r_577;\n    wire [5:0] mem_empt_next_wrap_r_578;\n    wire [5:0] mem_empt_next_wrap_r_579;\n    wire [5:0] mem_empt_next_wrap_r_580;\n    wire [5:0] mem_empt_next_wrap_r_581;\n    wire [5:0] mem_empt_next_wrap_r_582;\n    wire [5:0] mem_empt_next_wrap_r_583;\n    wire [5:0] mem_empt_next_wrap_r_584;\n    wire [5:0] mem_empt_next_wrap_r_585;\n    wire [5:0] mem_empt_next_wrap_r_586;\n    wire [5:0] mem_empt_next_wrap_r_587;\n    wire [5:0] mem_empt_next_wrap_r_588;\n    wire [5:0] mem_empt_next_wrap_r_589;\n    wire [5:0] mem_empt_next_wrap_r_590;\n    wire [5:0] mem_empt_next_wrap_r_591;\n    wire [5:0] mem_empt_next_wrap_r_592;\n    wire [5:0] mem_empt_next_wrap_r_593;\n    wire [5:0] mem_empt_next_wrap_r_594;\n    wire [5:0] mem_empt_next_wrap_r_595;\n    wire [5:0] mem_empt_next_wrap_r_596;\n    wire [5:0] mem_empt_next_wrap_r_597;\n    wire [5:0] mem_empt_next_wrap_r_598;\n    wire [5:0] mem_empt_next_wrap_r_599;\n    wire [5:0] mem_empt_next_wrap_r_600;\n    wire [5:0] mem_empt_next_wrap_r_601;\n    wire [5:0] mem_empt_next_wrap_r_602;\n    wire [5:0] mem_empt_next_wrap_r_603;\n    wire [5:0] mem_empt_next_wrap_r_604;\n    wire [5:0] mem_empt_next_wrap_r_605;\n    wire [5:0] mem_empt_next_wrap_r_606;\n    wire [5:0] mem_empt_next_wrap_r_607;\n    wire [5:0] mem_empt_next_wrap_r_608;\n    wire [5:0] mem_empt_next_wrap_r_609;\n    wire [5:0] mem_empt_next_wrap_r_610;\n    wire [5:0] mem_empt_next_wrap_r_611;\n    wire [5:0] mem_empt_next_wrap_r_612;\n    wire [5:0] mem_empt_next_wrap_r_613;\n    wire [5:0] mem_empt_next_wrap_r_614;\n    wire [5:0] mem_empt_next_wrap_r_615;\n    wire [5:0] mem_empt_next_wrap_r_616;\n    wire [5:0] mem_empt_next_wrap_r_617;\n    wire [5:0] mem_empt_next_wrap_r_618;\n    wire [5:0] mem_empt_next_wrap_r_619;\n    wire [5:0] mem_empt_next_wrap_r_620;\n    wire [5:0] mem_empt_next_wrap_r_621;\n    wire [5:0] mem_empt_next_wrap_r_622;\n    wire [5:0] mem_empt_next_wrap_r_623;\n    wire [5:0] mem_empt_next_wrap_r_624;\n    wire [5:0] mem_empt_next_wrap_r_625;\n    wire [5:0] mem_empt_next_wrap_r_626;\n    wire [5:0] mem_empt_next_wrap_r_627;\n    wire [5:0] mem_empt_next_wrap_r_628;\n    wire [5:0] mem_empt_next_wrap_r_629;\n    wire [5:0] mem_empt_next_wrap_r_630;\n    wire [5:0] mem_empt_next_wrap_r_631;\n    wire [5:0] mem_empt_next_wrap_r_632;\n    wire [5:0] mem_empt_next_wrap_r_633;\n    wire [5:0] mem_empt_next_wrap_r_634;\n    wire [5:0] mem_empt_next_wrap_r_635;\n    wire [5:0] mem_empt_next_wrap_r_636;\n    wire [5:0] mem_empt_next_wrap_r_637;\n    wire [5:0] mem_empt_next_wrap_r_638;\n    wire [5:0] mem_empt_next_wrap_r_639;\n    wire [5:0] mem_empt_next_wrap_r_640;\n    wire [5:0] mem_empt_next_wrap_r_641;\n    wire [5:0] mem_empt_next_wrap_r_642;\n    wire [5:0] mem_empt_next_wrap_r_643;\n    wire [5:0] mem_empt_next_wrap_r_644;\n    wire [5:0] mem_empt_next_wrap_r_645;\n    wire [5:0] mem_empt_next_wrap_r_646;\n    wire [5:0] mem_empt_next_wrap_r_647;\n    wire [5:0] mem_empt_next_wrap_r_648;\n    wire [5:0] mem_empt_next_wrap_r_649;\n    wire [5:0] mem_empt_next_wrap_r_650;\n    wire [5:0] mem_empt_next_wrap_r_651;\n    wire [5:0] mem_empt_next_wrap_r_652;\n    wire [5:0] mem_empt_next_wrap_r_653;\n    wire [5:0] mem_empt_next_wrap_r_654;\n    wire [5:0] mem_empt_next_wrap_r_655;\n    wire [5:0] mem_empt_next_wrap_r_656;\n    wire [5:0] mem_empt_next_wrap_r_657;\n    wire [5:0] mem_empt_next_wrap_r_658;\n    wire [5:0] mem_empt_next_wrap_r_659;\n    wire [5:0] mem_empt_next_wrap_r_660;\n    wire [5:0] mem_empt_next_wrap_r_661;\n    wire [5:0] mem_empt_next_wrap_r_662;\n    wire [5:0] mem_empt_next_wrap_r_663;\n    wire [5:0] mem_empt_next_wrap_r_664;\n    wire [5:0] mem_empt_next_wrap_r_665;\n    wire [5:0] mem_empt_next_wrap_r_666;\n    wire [5:0] mem_empt_next_wrap_r_667;\n    wire [5:0] mem_empt_next_wrap_r_668;\n    wire [5:0] mem_empt_next_wrap_r_669;\n    wire [5:0] mem_empt_next_wrap_r_670;\n    wire [5:0] mem_empt_next_wrap_r_671;\n    wire [5:0] mem_empt_next_wrap_r_672;\n    wire [5:0] mem_empt_next_wrap_r_673;\n    wire [5:0] mem_empt_next_wrap_r_674;\n    wire [5:0] mem_empt_next_wrap_r_675;\n    wire [5:0] mem_empt_next_wrap_r_676;\n    wire [5:0] mem_empt_next_wrap_r_677;\n    wire [5:0] mem_empt_next_wrap_r_678;\n    wire [5:0] mem_empt_next_wrap_r_679;\n    wire [5:0] mem_empt_next_wrap_r_680;\n    wire [5:0] mem_empt_next_wrap_r_681;\n    wire [5:0] mem_empt_next_wrap_r_682;\n    wire [5:0] mem_empt_next_wrap_r_683;\n    wire [5:0] mem_empt_next_wrap_r_684;\n    wire [5:0] mem_empt_next_wrap_r_685;\n    wire [5:0] mem_empt_next_wrap_r_686;\n    wire [5:0] mem_empt_next_wrap_r_687;\n    wire [5:0] mem_empt_next_wrap_r_688;\n    wire [5:0] mem_empt_next_wrap_r_689;\n    wire [5:0] mem_empt_next_wrap_r_690;\n    wire [5:0] mem_empt_next_wrap_r_691;\n    wire [5:0] mem_empt_next_wrap_r_692;\n    wire [5:0] mem_empt_next_wrap_r_693;\n    wire [5:0] mem_empt_next_wrap_r_694;\n    wire [5:0] mem_empt_next_wrap_r_695;\n    wire [5:0] mem_empt_next_wrap_r_696;\n    wire [5:0] mem_empt_next_wrap_r_697;\n    wire [5:0] mem_empt_next_wrap_r_698;\n    wire [5:0] mem_empt_next_wrap_r_699;\n    wire [5:0] mem_empt_next_wrap_r_700;\n    wire [5:0] mem_empt_next_wrap_r_701;\n    wire [5:0] mem_empt_next_wrap_r_702;\n    wire [5:0] mem_empt_next_wrap_r_703;\n    wire [5:0] mem_empt_next_wrap_r_704;\n    wire [5:0] mem_empt_next_wrap_r_705;\n    wire [5:0] mem_empt_next_wrap_r_706;\n    wire [5:0] mem_empt_next_wrap_r_707;\n    wire [5:0] mem_empt_next_wrap_r_708;\n    wire [5:0] mem_empt_next_wrap_r_709;\n    wire [5:0] mem_empt_next_wrap_r_710;\n    wire [5:0] mem_empt_next_wrap_r_711;\n    wire [5:0] mem_empt_next_wrap_r_712;\n    wire [5:0] mem_empt_next_wrap_r_713;\n    wire [5:0] mem_empt_next_wrap_r_714;\n    wire [5:0] mem_empt_next_wrap_r_715;\n    wire [5:0] mem_empt_next_wrap_r_716;\n    wire [5:0] mem_empt_next_wrap_r_717;\n    wire [5:0] mem_empt_next_wrap_r_718;\n    wire [5:0] mem_empt_next_wrap_r_719;\n    wire [5:0] mem_empt_next_wrap_r_720;\n    wire [5:0] mem_empt_next_wrap_r_721;\n    wire [5:0] mem_empt_next_wrap_r_722;\n    wire [5:0] mem_empt_next_wrap_r_723;\n    wire [5:0] mem_empt_next_wrap_r_724;\n    wire [5:0] mem_empt_next_wrap_r_725;\n    wire [5:0] mem_empt_next_wrap_r_726;\n    wire [5:0] mem_empt_next_wrap_r_727;\n    wire [5:0] mem_empt_next_wrap_r_728;\n    wire [5:0] mem_empt_next_wrap_r_729;\n    wire [5:0] mem_empt_next_wrap_r_730;\n    wire [5:0] mem_empt_next_wrap_r_731;\n    wire [5:0] mem_empt_next_wrap_r_732;\n    wire [5:0] mem_empt_next_wrap_r_733;\n    wire [5:0] mem_empt_next_wrap_r_734;\n    wire [5:0] mem_empt_next_wrap_r_735;\n    wire [5:0] mem_empt_next_wrap_r_736;\n    wire [5:0] mem_empt_next_wrap_r_737;\n    wire [5:0] mem_empt_next_wrap_r_738;\n    wire [5:0] mem_empt_next_wrap_r_739;\n    wire [5:", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 12, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    // Define constants\n    parameter FIFO_TX_MEM_DEPTH = 16;\n    parameter FIFO_TX_MEM_ADR_SIZE = 4;\n\n    // Define registers\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o;\n\n    // Define wires\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_o_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r;\n    wire [FIFO_TX_MEM_ADR_SIZE-1:0] adr_i_next_wrap_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 13, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next_wrap;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next_wrap;\n    wire [5:0] mem_empt_next;\n    wire [5:0] mem_empt_next_wrap;\n    wire [5:0] mem_empt_next_wrap_1;\n    wire [5:0] mem_empt_next_wrap_2;\n    wire [5:0] mem_empt_next_wrap_3;\n    wire [5:0] mem_empt_next_wrap_4;\n    wire [5:0] mem_empt_next_wrap_5;\n    wire [5:0] mem_empt_next_wrap_6;\n    wire [5:0] mem_empt_next_wrap_7;\n    wire [5:0] mem_empt_next_wrap_8;\n    wire [5:0] mem_empt_next_wrap_9;\n    wire [5:0] mem_empt_next_wrap_10;\n    wire [5:0] mem_empt_next_wrap_11;\n    wire [5:0] mem_empt_next_wrap_12;\n    wire [5:0] mem_empt_next_wrap_13;\n    wire [5:0] mem_empt_next_wrap_14;\n    wire [5:0] mem_empt_next_wrap_15;\n    wire [5:0] mem_empt_next_wrap_16;\n    wire [5:0] mem_empt_next_wrap_17;\n    wire [5:0] mem_empt_next_wrap_18;\n    wire [5:0] mem_empt_next_wrap_19;\n    wire [5:0] mem_empt_next_wrap_20;\n    wire [5:0] mem_empt_next_wrap_21;\n    wire [5:0] mem_empt_next_wrap_22;\n    wire [5:0] mem_empt_next_wrap_23;\n    wire [5:0] mem_empt_next_wrap_24;\n    wire [5:0] mem_empt_next_wrap_25;\n    wire [5:0] mem_empt_next_wrap_26;\n    wire [5:0] mem_empt_next_wrap_27;\n    wire [5:0] mem_empt_next_wrap_28;\n    wire [5:0] mem_empt_next_wrap_29;\n    wire [5:0] mem_empt_next_wrap_30;\n    wire [5:0] mem_empt_next_wrap_31;\n    wire [5:0] mem_empt_next_wrap_32;\n    wire [5:0] mem_empt_next_wrap_33;\n    wire [5:0] mem_empt_next_wrap_34;\n    wire [5:0] mem_empt_next_wrap_35;\n    wire [5:0] mem_empt_next_wrap_36;\n    wire [5:0] mem_empt_next_wrap_37;\n    wire [5:0] mem_empt_next_wrap_38;\n    wire [5:0] mem_empt_next_wrap_39;\n    wire [5:0] mem_empt_next_wrap_40;\n    wire [5:0] mem_empt_next_wrap_41;\n    wire [5:0] mem_empt_next_wrap_42;\n    wire [5:0] mem_empt_next_wrap_43;\n    wire [5:0] mem_empt_next_wrap_44;\n    wire [5:0] mem_empt_next_wrap_45;\n    wire [5:0] mem_empt_next_wrap_46;\n    wire [5:0] mem_empt_next_wrap_47;\n    wire [5:0] mem_empt_next_wrap_48;\n    wire [5:0] mem_empt_next_wrap_49;\n    wire [5:0] mem_empt_next_wrap_50;\n    wire [5:0] mem_empt_next_wrap_51;\n    wire [5:0] mem_empt_next_wrap_52;\n    wire [5:0] mem_empt_next_wrap_53;\n    wire [5:0] mem_empt_next_wrap_54;\n    wire [5:0] mem_empt_next_wrap_55;\n    wire [5:0] mem_empt_next_wrap_56;\n    wire [5:0] mem_empt_next_wrap_57;\n    wire [5:0] mem_empt_next_wrap_58;\n    wire [5:0] mem_empt_next_wrap_59;\n    wire [5:0] mem_empt_next_wrap_60;\n    wire [5:0] mem_empt_next_wrap_61;\n    wire [5:0] mem_empt_next_wrap_62;\n    wire [5:0] mem_empt_next_wrap_63;\n    wire [5:0] mem_empt_next_wrap_64;\n    wire [5:0] mem_empt_next_wrap_65;\n    wire [5:0] mem_empt_next_wrap_66;\n    wire [5:0] mem_empt_next_wrap_67;\n    wire [5:0] mem_empt_next_wrap_68;\n    wire [5:0] mem_empt_next_wrap_69;\n    wire [5:0] mem_empt_next_wrap_70;\n    wire [5:0] mem_empt_next_wrap_71;\n    wire [5:0] mem_empt_next_wrap_72;\n    wire [5:0] mem_empt_next_wrap_73;\n    wire [5:0] mem_empt_next_wrap_74;\n    wire [5:0] mem_empt_next_wrap_75;\n    wire [5:0] mem_empt_next_wrap_76;\n    wire [5:0] mem_empt_next_wrap_77;\n    wire [5:0] mem_empt_next_wrap_78;\n    wire [5:0] mem_empt_next_wrap_79;\n    wire [5:0] mem_empt_next_wrap_80;\n    wire [5:0] mem_empt_next_wrap_81;\n    wire [5:0] mem_empt_next_wrap_82;\n    wire [5:0] mem_empt_next_wrap_83;\n    wire [5:0] mem_empt_next_wrap_84;\n    wire [5:0] mem_empt_next_wrap_85;\n    wire [5:0] mem_empt_next_wrap_86;\n    wire [5:0] mem_empt_next_wrap_87;\n    wire [5:0] mem_empt_next_wrap_88;\n    wire [5:0] mem_empt_next_wrap_89;\n    wire [5:0] mem_empt_next_wrap_90;\n    wire [5:0] mem_empt_next_wrap_91;\n    wire [5:0] mem_empt_next_wrap_92;\n    wire [5:0] mem_empt_next_wrap_93;\n    wire [5:0] mem_empt_next_wrap_94;\n    wire [5:0] mem_empt_next_wrap_95;\n    wire [5:0] mem_empt_next_wrap_96;\n    wire [5:0] mem_empt_next_wrap_97;\n    wire [5:0] mem_empt_next_wrap_98;\n    wire [5:0] mem_empt_next_wrap_99;\n    wire [5:0] mem_empt_next_wrap_100;\n    wire [5:0] mem_empt_next_wrap_101;\n    wire [5:0] mem_empt_next_wrap_102;\n    wire [5:0] mem_empt_next_wrap_103;\n    wire [5:0] mem_empt_next_wrap_104;\n    wire [5:0] mem_empt_next_wrap_105;\n    wire [5:0] mem_empt_next_wrap_106;\n    wire [5:0] mem_empt_next_wrap_107;\n    wire [5:0] mem_empt_next_wrap_108;\n    wire [5:0] mem_empt_next_wrap_109;\n    wire [5:0] mem_empt_next_wrap_110;\n    wire [5:0] mem_empt_next_wrap_111;\n    wire [5:0] mem_empt_next_wrap_112;\n    wire [5:0] mem_empt_next_wrap_113;\n    wire [5:0] mem_empt_next_wrap_114;\n    wire [5:0] mem_empt_next_wrap_115;\n    wire [5:0] mem_empt_next_wrap_116;\n    wire [5:0] mem_empt_next_wrap_117;\n    wire [5:0] mem_empt_next_wrap_118;\n    wire [5:0] mem_empt_next_wrap_119;\n    wire [5:0] mem_empt_next_wrap_120;\n    wire [5:0] mem_empt_next_wrap_121;\n    wire [5:0] mem_empt_next_wrap_122;\n    wire [5:0] mem_empt_next_wrap_123;\n    wire [5:0] mem_empt_next_wrap_124;\n    wire [5:0] mem_empt_next_wrap_125;\n    wire [5:0] mem_empt_next_wrap_126;\n    wire [5:0] mem_empt_next_wrap_127;\n    wire [5:0] mem_empt_next_wrap_128;\n    wire [5:0] mem_empt_next_wrap_129;\n    wire [5:0] mem_empt_next_wrap_130;\n    wire [5:0] mem_empt_next_wrap_131;\n    wire [5:0] mem_empt_next_wrap_132;\n    wire [5:0] mem_empt_next_wrap_133;\n    wire [5:0] mem_empt_next_wrap_134;\n    wire [5:0] mem_empt_next_wrap_135;\n    wire [5:0] mem_empt_next_wrap_136;\n    wire [5:0] mem_empt_next_wrap_137;\n    wire [5:0] mem_empt_next_wrap_138;\n    wire [5:0] mem_empt_next_wrap_139;\n    wire [5:0] mem_empt_next_wrap_140;\n    wire [5:0] mem_empt_next_wrap_141;\n    wire [5:0] mem_empt_next_wrap_142;\n    wire [5:0] mem_empt_next_wrap_143;\n    wire [5:0] mem_empt_next_wrap_144;\n    wire [5:0] mem_empt_next_wrap_145;\n    wire [5:0] mem_empt_next_wrap_146;\n    wire [5:0] mem_empt_next_wrap_147;\n    wire [5:0] mem_empt_next_wrap_148;\n    wire [5:0] mem_empt_next_wrap_149;\n    wire [5:0] mem_empt_next_wrap_150;\n    wire [5:0] mem_empt_next_wrap_151;\n    wire [5:0] mem_empt_next_wrap_152;\n    wire [5:0] mem_empt_next_wrap_153;\n    wire [5:0] mem_empt_next_wrap_154;\n    wire [5:0] mem_empt_next_wrap_155;\n    wire [5:0] mem_empt_next_wrap_156;\n    wire [5:0] mem_empt_next_wrap_157;\n    wire [5:0] mem_empt_next_wrap_158;\n    wire [5:0] mem_empt_next_wrap_159;\n    wire [5:0] mem_empt_next_wrap_160;\n    wire [5:0] mem_empt_next_wrap_161;\n    wire [5:0] mem_empt_next_wrap_162;\n    wire [5:0] mem_empt_next_wrap_163;\n    wire [5:0] mem_empt_next_wrap_164;\n    wire [5:0] mem_empt_next_wrap_165;\n    wire [5:0] mem_empt_next_wrap_166;\n    wire [5:0] mem_empt_next_wrap_167;\n    wire [5:0] mem_empt_next_wrap_168;\n    wire [5:0] mem_empt_next_wrap_169;\n    wire [5:0] mem_empt_next_wrap_170;\n    wire [5:0] mem_empt_next_wrap_171;\n    wire [5:0] mem_empt_next_wrap_172;\n    wire [5:0] mem_empt_next_wrap_173;\n    wire [5:0] mem_empt_next_wrap_174;\n    wire [5:0] mem_empt_next_wrap_175;\n    wire [5:0] mem_empt_next_wrap_176;\n    wire [5:0] mem_empt_next_wrap_177;\n    wire [5:0] mem_empt_next_wrap_178;\n    wire [5:0] mem_empt_next_wrap_179;\n    wire [5:0] mem_empt_next_wrap_180;\n    wire [5:0] mem_empt_next_wrap_181;\n    wire [5:0] mem_empt_next_wrap_182;\n    wire [5:0] mem_empt_next_wrap_183;\n    wire [5:0] mem_empt_next_wrap_184;\n    wire [5:0] mem_empt_next_wrap_185;\n    wire [5:0] mem_empt_next_wrap_186;\n    wire [5:0] mem_empt_next_wrap_187;\n    wire [5:0] mem_empt_next_wrap_188;\n    wire [5:0] mem_empt_next_wrap_189;\n    wire [5:0] mem_empt_next_wrap_190;\n    wire [5:0] mem_empt_next_wrap_191;\n    wire [5:0] mem_empt_next_wrap_192;\n    wire [5:0] mem_empt_next_wrap_193;\n    wire [5:0] mem_empt_next_wrap_194;\n    wire [5:0] mem_empt_next_wrap_195;\n    wire [5:0] mem_empt_next_wrap_196;\n    wire [5:0] mem_empt_next_wrap_197;\n    wire [5:0] mem_empt_next_wrap_198;\n    wire [5:0] mem_empt_next_wrap_199;\n    wire [5:0] mem_empt_next_wrap_200;\n    wire [5:0] mem_empt_next_wrap_201;\n    wire [5:0] mem_empt_next_wrap_202;\n    wire [5:0] mem_empt_next_wrap_203;\n    wire [5:0] mem_empt_next_wrap_204;\n    wire [5:0] mem_empt_next_wrap_205;\n    wire [5:0] mem_empt_next_wrap_206;\n    wire [5:0] mem_empt_next_wrap_207;\n    wire [5:0] mem_empt_next_wrap_208;\n    wire [5:0] mem_empt_next_wrap_209;\n    wire [5:0] mem_empt_next_wrap_210;\n    wire [5:0] mem_empt_next_wrap_211;\n    wire [5:0] mem_empt_next_wrap_212;\n    wire [5:0] mem_empt_next_wrap_213;\n    wire [5:0] mem_empt_next_wrap_214;\n    wire [5:0] mem_empt_next_wrap_215;\n    wire [5:0] mem_empt_next_wrap_216;\n    wire [5:0] mem_empt_next_wrap_217;\n    wire [5:0] mem_empt_next_wrap_218;\n    wire [5:0] mem_empt_next_wrap_219;\n    wire [5:0] mem_empt_next_wrap_220;\n    wire [5:0] mem_empt_next_wrap_221;\n    wire [5:0] mem_empt_next_wrap_222;\n    wire [5:0] mem_empt_next_wrap_223;\n    wire [5:0] mem_empt_next_wrap_224;\n    wire [5:0] mem_empt_next_wrap_225;\n    wire [5:0] mem_empt_next_wrap_226;\n    wire [5:0] mem_empt_next_wrap_227;\n    wire [5:0] mem_empt_next_wrap_228;\n    wire [5:0] mem_empt_next_wrap_229;\n    wire [5:0] mem_empt_next_wrap_230;\n    wire [5:0] mem_empt_next_wrap_231;\n    wire [5:0] mem_empt_next_wrap_232;\n    wire [5:0] mem_empt_next_wrap_233;\n    wire [5:0] mem_empt_next_wrap_234;\n    wire [5:0] mem_empt_next_wrap_235;\n    wire [5:0] mem_empt_next_wrap_236;\n    wire [5:0] mem_empt_next_wrap_237;\n    wire [5:0] mem_empt_next_wrap_238;\n    wire [5:0] mem_empt_next_wrap_239;\n    wire [5:0] mem_empt_next_wrap_240;\n    wire [5:0] mem_empt_next_wrap_241;\n    wire [5:0] mem_empt_next_wrap_242;\n    wire [5:0] mem_empt_next_wrap_243;\n    wire [5:0] mem_empt_next_wrap_244;\n    wire [5:0] mem_empt_next_wrap_245;\n    wire [5:0] mem_empt_next_wrap_246;\n    wire [5:0] mem_empt_next_wrap_247;\n    wire [5:0] mem_empt_next_wrap_248;\n    wire [5:0] mem_empt_next_wrap_249;\n    wire [5:0] mem_empt_next_wrap_250;\n    wire [5:0] mem_empt_next_wrap_251;\n    wire [5:0] mem_empt_next_wrap_252;\n    wire [5:0] mem_empt_next_wrap_253;\n    wire [5:0] mem_empt_next_wrap_254;\n    wire [5:0] mem_empt_next_wrap_255;\n    wire [5:0] mem_empt_next_wrap_256;\n    wire [5:0] mem_empt_next_wrap_257;\n    wire [5:0] mem_empt_next_wrap_258;\n    wire [5:0] mem_empt_next_wrap_259;\n    wire [5:0] mem_empt_next_wrap_260;\n    wire [5:0] mem_empt_next_wrap_261;\n    wire [5:0] mem_empt_next_wrap_262;\n    wire [5:0] mem_empt_next_wrap_263;\n    wire [5:0] mem_empt_next_wrap_264;\n    wire [5:0] mem_empt_next_wrap_265;\n    wire [5:0] mem_empt_next_wrap_266;\n    wire [5:0] mem_empt_next_wrap_267;\n    wire [5:0] mem_empt_next_wrap_268;\n    wire [5:0] mem_empt_next_wrap_269;\n    wire [5:0] mem_empt_next_wrap_270;\n    wire [5:0] mem_empt_next_wrap_271;\n    wire [5:0] mem_empt_next_wrap_272;\n    wire [5:0] mem_empt_next_wrap_273;\n    wire [5:0] mem_empt_next_wrap_274;\n    wire [5:0] mem_empt_next_wrap_275;\n    wire [5:0] mem_empt_next_wrap_276;\n    wire [5:0] mem_empt_next_wrap_277;\n    wire [5:0] mem_empt_next_wrap_278;\n    wire [5:0] mem_empt_next_wrap_279;\n    wire [5:0] mem_empt_next_wrap_280;\n    wire [5:0] mem_empt_next_wrap_281;\n    wire [5:0] mem_empt_next_wrap_282;\n    wire [5:0] mem_empt_next_wrap_283;\n    wire [5:0] mem_empt_next_wrap_284;\n    wire [5:0] mem_empt_next_wrap_285;\n    wire [5:0] mem_empt_next_wrap_286;\n    wire [5:0] mem_empt_next_wrap_287;\n    wire [5:0] mem_empt_next_wrap_288;\n    wire [5:0] mem_empt_next_wrap_289;\n    wire [5:0] mem_empt_next_wrap_290;\n    wire [5:0] mem_empt_next_wrap_291;\n    wire [5:0] mem_empt_next_wrap_292;\n    wire [5:0] mem_empt_next_wrap_293;\n    wire [5:0] mem_empt_next_wrap_294;\n    wire [5:0] mem_empt_next_wrap_295;\n    wire [5:0] mem_empt_next_wrap_296;\n    wire [5:0] mem_empt_next_wrap_297;\n    wire [5:0] mem_empt_next_wrap_298;\n    wire [5:0] mem_empt_next_wrap_299;\n    wire [5:0] mem_empt_next_wrap_300;\n    wire [5:0] mem_empt_next_wrap_301;\n    wire [5:0] mem_empt_next_wrap_302;\n    wire [5:0] mem_empt_next_wrap_303;\n    wire [5:0] mem_empt_next_wrap_304;\n    wire [5:0] mem_empt_next_wrap_305;\n    wire [5:0] mem_empt_next_wrap_306;\n    wire [5:0] mem_empt_next_wrap_307;\n    wire [5:0] mem_empt_next_wrap_308;\n    wire [5:0] mem_empt_next_wrap_309;\n    wire [5:0] mem_empt_next_wrap_310;\n    wire [5:0] mem_empt_next_wrap_311;\n    wire [5:0] mem_empt_next_wrap_312;\n    wire [5:0] mem_empt_next_wrap_313;\n    wire [5:0] mem_empt_next_wrap_314;\n    wire [5:0] mem_empt_next_wrap_315;\n    wire [5:0] mem_empt_next_wrap_316;\n    wire [5:0] mem_empt_next_wrap_317;\n    wire [5:0] mem_empt_next_wrap_318;\n    wire [5:0] mem_empt_next_wrap_319;\n    wire [5:0] mem_empt_next_wrap_320;\n    wire [5:0] mem_empt_next_wrap_321;\n    wire [5:0] mem_empt_next_wrap_322;\n    wire [5:0] mem_empt_next_wrap_323;\n    wire [5:0] mem_empt_next_wrap_324;\n    wire [5:0] mem_empt_next_wrap_325;\n    wire [5:0] mem_empt_next_wrap_326;\n    wire [5:0] mem_empt_next_wrap_327;\n    wire [5:0] mem_empt_next_wrap_328;\n    wire [5:0] mem_empt_next_wrap_329;\n    wire [5:0] mem_empt_next_wrap_330;\n    wire [5:0] mem_empt_next_wrap_331;\n    wire [5:0] mem_empt_next_wrap_332;\n    wire [5:0] mem_empt_next_wrap_333;\n    wire [5:0] mem_empt_next_wrap_334;\n    wire [5:0] mem_empt_next_wrap_335;\n    wire [5:0] mem_empt_next_wrap_336;\n    wire [5:0] mem_empt_next_wrap_337;\n    wire [5:0] mem_empt_next_wrap_338;\n    wire [5:0] mem_empt_next_wrap_339;\n    wire [5:0] mem_empt_next_wrap_340;\n    wire [5:0] mem_empt_next_wrap_341;\n    wire [5:0] mem_empt_next_wrap_342;\n    wire [5:0] mem_empt_next_wrap_343;\n    wire [5:0] mem_empt_next_wrap_344;\n    wire [5:0] mem_empt_next_wrap_345;\n    wire [5:0] mem_empt_next_wrap_346;\n    wire [5:0] mem_empt_next_wrap_347;\n    wire [5:0] mem_empt_next_wrap_348;\n    wire [5:0] mem_empt_next_wrap_349;\n    wire [5:0] mem_empt_next_wrap_350;\n    wire [5:0] mem_empt_next_wrap_351;\n    wire [5:0] mem_empt_next_wrap_352;\n    wire [5:0] mem_empt_next_wrap_353;\n    wire [5:0] mem_empt_next_wrap_354;\n    wire [5:0] mem_empt_next_wrap_355;\n    wire [5:0] mem_empt_next_wrap_356;\n    wire [5:0] mem_empt_next_wrap_357;\n    wire [5:0] mem_empt_next_wrap_358;\n    wire [5:0] mem_empt_next_wrap_359;\n    wire [5:0] mem_empt_next_wrap_360;\n    wire [5:0] mem_empt_next_wrap_361;\n    wire [5:0] mem_empt_next_wrap_362;\n    wire [5:0] mem_empt_next_wrap_363;\n    wire [5:0] mem_empt_next_wrap_364;\n    wire [5:0] mem_empt_next_wrap_365;\n    wire [5:0] mem_empt_next_wrap_366;\n    wire [5:0] mem_empt_next_wrap_367;\n    wire [5:0] mem_empt_next_wrap_368;\n    wire [5:0] mem_empt_next_wrap_369;\n    wire [5:0] mem_empt_next_wrap_370;\n    wire [5:0] mem_empt_next_wrap_371;\n    wire [5:0] mem_empt_next_wrap_372;\n    wire [5:0] mem_empt_next_wrap_373;\n    wire [5:0] mem_empt_next_wrap_374;\n    wire [5:0] mem_empt_next_wrap_375;\n    wire [5:0] mem_empt_next_wrap_376;\n    wire [5:0] mem_empt_next_wrap_377;\n    wire [5:0] mem_empt_next_wrap_378;\n    wire [5:0] mem_empt_next_wrap_379;\n    wire [5:0] mem_empt_next_wrap_380;\n    wire [5:0] mem_empt_next_wrap_381;\n    wire [5:0] mem_empt_next_wrap_382;\n    wire [5:0] mem_empt_next_wrap_383;\n    wire [5:0] mem_empt_next_wrap_384;\n    wire [5:0] mem_empt_next_wrap_385;\n    wire [5:0] mem_empt_next_wrap_386;\n    wire [5:0] mem_empt_next_wrap_387;\n    wire [5:0] mem_empt_next_wrap_388;\n    wire [5:0] mem_empt_next_wrap_389;\n    wire [5:0] mem_empt_next_wrap_390;\n    wire [5:0] mem_empt_next_wrap_391;\n    wire [5:0] mem_empt_next_wrap_392;\n    wire [5:0] mem_empt_next_wrap_393;\n    wire [5:0] mem_empt_next_wrap_394;\n    wire [5:0] mem_empt_next_wrap_395;\n    wire [5:0] mem_empt_next_wrap_396;\n    wire [5:0] mem_empt_next_wrap_397;\n    wire [5:0] mem_empt_next_wrap_398;\n    wire [5:0] mem_empt_next_wrap_399;\n    wire [5:0] mem_empt_next_wrap_400;\n    wire [5:0] mem_empt_next_wrap_401;\n    wire [5:0] mem_empt_next_wrap_402;\n    wire [5:0] mem_empt_next_wrap_403;\n    wire [5:0] mem_empt_next_wrap_404;\n    wire [5:0] mem_empt_next_wrap_405;\n    wire [5:0] mem_empt_next_wrap_406;\n    wire [5:0] mem_empt_next_wrap_407;\n    wire [5:0] mem_empt_next_wrap_408;\n    wire [5:0] mem_empt_next_wrap_409;\n    wire [5:0] mem_empt_next_wrap_410;\n    wire [5:0] mem_empt_next_wrap_411;\n    wire [5:0] mem_empt_next_wrap_412;\n    wire [5:0] mem_empt_next_wrap_413;\n    wire [5:0] mem_empt_next_wrap_414;\n    wire [5:0] mem_empt_next_wrap_415;\n    wire [5:0] mem_empt_next_wrap_416;\n    wire [5:0] mem_empt_next_wrap_417;\n    wire [5:0] mem_empt_next_wrap_418;\n    wire [5:0] mem_empt_next_wrap_419;\n    wire [5:0] mem_empt_next_wrap_420;\n    wire [5:0] mem_empt_next_wrap_421;\n    wire [5:0] mem_empt_next_wrap_422;\n    wire [5:0] mem_empt_next_wrap_423;\n    wire [5:0] mem_empt_next_wrap_424;\n    wire [5:0] mem_empt_next_wrap_425;\n    wire [5:0] mem_empt_next_wrap_426;\n    wire [5:0] mem_empt_next_wrap_427;\n    wire [5:0] mem_empt_next_wrap_428;\n    wire [5:0] mem_empt_next_wrap_429;\n    wire [5:0] mem_empt_next_wrap_430;\n    wire [5:0] mem_empt_next_wrap_431;\n    wire [5:0] mem_empt_next_wrap_432;\n    wire [5:0] mem_empt_next_wrap_433;\n    wire [5:0] mem_empt_next_wrap_434;\n    wire [5:0] mem_empt_next_wrap_435;\n    wire [5:0] mem_empt_next_wrap_436;\n    wire [5:0] mem_empt_next_wrap_437;\n    wire [5:0] mem_empt_next_wrap_438;\n    wire [5:0] mem_empt_next_wrap_439;\n    wire [5:0] mem_empt_next_wrap_440;\n    wire [5:0] mem_empt_next_wrap_441;\n    wire [5:0] mem_empt_next_wrap_442;\n    wire [5:0] mem_empt_next_wrap_443;\n    wire [5:0] mem_empt_next_wrap_444;\n    wire [5:0] mem_empt_next_wrap_445;\n    wire [5:0] mem_empt_next_wrap_446;\n    wire [5:0] mem_empt_next_wrap_447;\n    wire [5:0] mem_empt_next_wrap_448;\n    wire [5:0] mem_empt_next_wrap_449;\n    wire [5:0] mem_empt_next_wrap_450;\n    wire [5:0] mem_empt_next_wrap_451;\n    wire [5:0] mem_empt_next_wrap_452;\n    wire [5:0] mem_empt_next_wrap_453;\n    wire [5:0] mem_empt_next_wrap_454;\n    wire [5:0] mem_empt_next_wrap_455;\n    wire [5:0] mem_empt_next_wrap_456;\n    wire [5:0] mem_empt_next_wrap_457;\n    wire [5:0] mem_empt_next_wrap_458;\n    wire [5:0] mem_empt_next_wrap_459;\n    wire [5:0] mem_empt_next_wrap_460;\n    wire [5:0] mem_empt_next_wrap_461;\n    wire [5:0] mem_empt_next_wrap_462;\n    wire [5:0] mem_empt_next_wrap_463;\n    wire [5:0] mem_empt_next_wrap_464;\n    wire [5:0] mem_empt_next_wrap_465;\n    wire [5:0] mem_empt_next_wrap_466;\n    wire [5:0] mem_empt_next_wrap_467;\n    wire [5:0] mem_empt_next_wrap_468;\n    wire [5:0] mem_empt_next_wrap_469;\n    wire [5:0] mem_empt_next_wrap_470;\n    wire [5:0] mem_empt_next_wrap_471;\n    wire [5:0] mem_empt_next_wrap_472;\n    wire [5:0] mem_empt_next_wrap_473;\n    wire [5:0] mem_empt_next_wrap_474;\n    wire [5:0] mem_empt_next_wrap_475;\n    wire [5:0] mem_empt_next_wrap_476;\n    wire [5:0] mem_empt_next_wrap_477;\n    wire [5:0] mem_empt_next_wrap_478;\n    wire [5:0] mem_empt_next_wrap_479;\n    wire [5:0] mem_empt_next_wrap_480;\n    wire [5:0] mem_empt_next_wrap_481;\n    wire [5:0] mem_empt_next_wrap_482;\n    wire [5:0] mem_empt_next_wrap_483;\n    wire [5:0] mem_empt_next_wrap_484;\n    wire [5:0] mem_empt_next_wrap_485;\n    wire [5:0] mem_empt_next_wrap_486;\n    wire [5:0] mem_empt_next_wrap_487;\n    wire [5:0] mem_empt_next_wrap_488;\n    wire [5:0] mem_empt_next_wrap_489;\n    wire [5:0] mem_empt_next_wrap_490;\n    wire [5:0] mem_empt_next_wrap_491;\n    wire [5:0] mem_empt_next_wrap_492;\n    wire [5:0] mem_empt_next_wrap_493;\n    wire [5:0] mem_empt_next_wrap_494;\n    wire [5:0] mem_empt_next_wrap_495;\n    wire [5:0] mem_empt_next_wrap_496;\n    wire [5:0] mem_empt_next_wrap_497;\n    wire [5:0] mem_empt_next_wrap_498;\n    wire [5:0] mem_empt_next_wrap_499;\n    wire [5:0] mem_empt_next_wrap_500;\n    wire [5:0] mem_empt_next_wrap_501;\n    wire [5:0] mem_empt_next_wrap_502;\n    wire [5:0] mem_empt_next_wrap_503;\n    wire [5:0] mem_empt_next_wrap_504;\n    wire [5:0] mem_empt_next_wrap_505;\n    wire [5:0] mem_empt_next_wrap_506;\n    wire [5:0] mem_empt_next_wrap_507;\n    wire [5:0] mem_empt_next_wrap_508;\n    wire [5:0] mem_empt_next_wrap_509;\n    wire [5:0] mem_empt_next_wrap_510;\n    wire [5:0] mem_empt_next_wrap_511;\n    wire [5:0] mem_empt_next_wrap_512;\n    wire [5:0] mem_empt_next_wrap_513;\n    wire [5:0] mem_empt_next_wrap_514;\n    wire [5:0] mem_empt_next_wrap_515;\n    wire [5:0] mem_empt_next_wrap_516;\n    wire [5:0] mem_empt_next_wrap_517;\n    wire [5:0] mem_empt_next_wrap_518;\n    wire [5:0] mem_empt_next_wrap_519;\n    wire [5:0] mem_empt_next_wrap_520;\n    wire [5:0] mem_empt_next_wrap_521;\n    wire [5:0] mem_empt_next_wrap_522;\n    wire [5:0] mem_empt_next_wrap_523;\n    wire [5:0] mem_empt_next_wrap_524;\n    wire [5:0] mem_empt_next_wrap_525;\n    wire [5:0] mem_empt_next_wrap_526;\n    wire [5:0] mem_empt_next_wrap_527;\n    wire [5:0] mem_empt_next_wrap_528;\n    wire [5:0] mem_empt_next_wrap_529;\n    wire [5:0] mem_empt_next_wrap_530;\n    wire [5:0] mem_empt_next_wrap_531;\n    wire [5:0] mem_empt_next_wrap_532;\n    wire [5:0] mem_empt_next_wrap_533;\n    wire [5:0] mem_empt_next_wrap_534;\n    wire [5:0] mem_empt_next_wrap_535;\n    wire [5:0] mem_empt_next_wrap_536;\n    wire [5:0] mem_empt_next_wrap_537;\n    wire [5:0] mem_empt_next_wrap_538;\n    wire [5:0] mem_empt_next_wrap_539;\n    wire [5:0] mem_empt_next_wrap_540;\n    wire [5:0] mem_empt_next_wrap_541;\n    wire [5:0] mem_empt_next_wrap_542;\n    wire [5:0] mem_empt_next_wrap_543;\n    wire [5:0] mem_empt_next_wrap_544;\n    wire [5:0] mem_empt_next_wrap_545;\n    wire [5:0] mem_empt_next_wrap_546;\n    wire [5:0] mem_empt_next_wrap_547;\n    wire [5:0] mem_empt_next_wrap_548;\n    wire [5:0] mem_empt_next_wrap_549;\n    wire [5:0] mem_empt_next_wrap_550;\n    wire [5:0] mem_empt_next_wrap_551;\n    wire [5:0] mem_empt_next_wrap_552;\n    wire [5:0] mem_empt_next_wrap_553;\n    wire [5:0] mem_empt_next_wrap_554;\n    wire [5:0] mem_empt_next_wrap_555;\n    wire [5:0] mem_empt_next_wrap_556;\n    wire [5:0] mem_empt_next_wrap_557;\n    wire [5:0] mem_empt_next_wrap_558;\n    wire [5:0] mem_empt_next_wrap_559;\n    wire [5:0] mem_empt_next_wrap_560;\n    wire [5:0] mem_empt_next_wrap_561;\n    wire [5:0] mem_empt_next_wrap_562;\n    wire [5:0] mem_empt_next_wrap_563;\n    wire [5:0] mem_empt_next_wrap_564;\n    wire [5:0] mem_empt_next_wrap_565;\n    wire [5:0] mem_empt_next_wrap_566;\n    wire [5:0] mem_empt_next_wrap_567;\n    wire [5:0] mem_empt_next_wrap_568;\n    wire [5:0] mem_empt_next_wrap_569;\n    wire [5:0] mem_empt_next_wrap_570;\n    wire [5:0] mem_empt_next_wrap_571;\n    wire [5:0] mem_empt_next_wrap_572;\n    wire [5:0] mem_empt_next_wrap_573;\n    wire [5:0] mem_empt_next_wrap_574;\n    wire [5:0] mem_empt_next_wrap_575;\n    wire [5:0] mem_empt_next_wrap_576;\n    wire [5:0] mem_empt_next_wrap_577;\n    wire [5:0] mem_empt_next_wrap_578;\n    wire [5:0] mem_empt_next_wrap_579;\n    wire [5:0] mem_empt_next_wrap_580;\n    wire [5:0] mem_empt_next_wrap_581;\n    wire [5:0] mem_empt_next_wrap_582;\n    wire [5:0] mem_empt_next_wrap_583;\n    wire [5:0] mem_empt_next_wrap_584;\n    wire [5:0] mem_empt_next_wrap_585;\n    wire [5:0] mem_empt_next_wrap_586;\n    wire [5:0] mem_empt_next_wrap_587;\n    wire [5:0] mem_empt_next_wrap_588;\n    wire [5:0] mem_empt_next_wrap_589;\n    wire [5:0] mem_empt_next_wrap_590;\n    wire [5:0] mem_empt_next_wrap_591;\n    wire [5:0] mem_empt_next_wrap_592;\n    wire [5:0] mem_empt_next_wrap_593;\n    wire [5:0] mem_empt_next_wrap_594;\n    wire [5:0] mem_empt_next_wrap_595;\n    wire [5:0] mem_empt_next_wrap_596;\n    wire [5:0] mem_empt_next_wrap_597;\n    wire [5:0] mem_empt_next_wrap_598;\n    wire [5:0] mem_empt_next_wrap_599;\n    wire [5:0] mem_empt_next_wrap_600;\n    wire [5:0] mem_empt_next_wrap_601;\n    wire [5:0] mem_empt_next_wrap_602;\n    wire [5:0] mem_empt_next_wrap_603;\n    wire [5:0] mem_empt_next_wrap_604;\n    wire [5:0] mem_empt_next_wrap_605;\n    wire [5:0] mem_empt_next_wrap_606;\n    wire [5:0] mem_empt_next_wrap_607;\n    wire [5:0] mem_empt_next_wrap_608;\n    wire [5:0] mem_empt_next_wrap_609;\n    wire [5:0] mem_empt_next_wrap_610;\n    wire [5:0] mem_empt_next_wrap_611;\n    wire [5:0] mem_empt_next_wrap_612;\n    wire [5:0] mem_empt_next_wrap_613;\n    wire [5:0] mem_empt_next_wrap_614;\n    wire [5:0] mem_empt_next_wrap_615;\n    wire [5:0] mem_empt_next_wrap_616;\n    wire [5:0] mem_empt_next_wrap_617;\n    wire [5:0] mem_empt_next_wrap_618;\n    wire [5:0] mem_empt_next_wrap_619;\n    wire [5:0] mem_empt_next_wrap_620;\n    wire [5:0] mem_empt_next_wrap_621;\n    wire [5:0] mem_empt_next_wrap_622;\n    wire [5:0] mem_empt_next_wrap_623;\n    wire [5:0] mem_empt_next_wrap_624;\n    wire [5:0] mem_empt_next_wrap_625;\n    wire [5:0] mem_empt_next_wrap_626;\n    wire [5:0] mem_empt_next_wrap_627;\n    wire [5:0] mem_empt_next_wrap_628;\n    wire [5:0] mem_empt_next_wrap_629;\n    wire [5:0] mem_empt_next_wrap_630;\n    wire [5:0] mem_empt_next_wrap_631;\n    wire [5:0] mem_empt_next_wrap_632;\n    wire [5:0] mem_empt_next_wrap_633;\n    wire [5:0] mem_empt_next_wrap_634;\n    wire [5:0] mem_empt_next_wrap_635;\n    wire [5:0] mem_empt_next_wrap_636;\n    wire [5:0] mem_empt_next_wrap_637;\n    wire [5:0] mem_empt_next_wrap_638;\n    wire [5:0] mem_empt_next_wrap_639;\n    wire [5:0] mem_empt_next_wrap_640;\n    wire [5:0] mem_empt_next_wrap_641;\n    wire [5:0] mem_empt_next_wrap_642;\n    wire [5:0] mem_empt_next_wrap_643;\n    wire [5:0] mem_empt_next_wrap_644;\n    wire [5:0] mem_empt_next_wrap_645;\n    wire [5:0] mem_empt_next_wrap_646;\n    wire [5:0] mem_empt_next_wrap_647;\n    wire [5:0] mem_empt_next_wrap_648;\n    wire [5:0] mem_empt_next_wrap_649;\n    wire [5:0] mem_empt_next_wrap_650;\n    wire [5:0] mem_empt_next_wrap_651;\n    wire [5:0] mem_empt_next_wrap_652;\n    wire [5:0] mem_empt_next_wrap_653;\n    wire [5:0] mem_empt_next_wrap_654;\n    wire [5:0] mem_empt_next_wrap_655;\n    wire [5:0] mem_empt_next_wrap_656;\n    wire [5:0] mem_empt_next_wrap_657;\n    wire [5:0] mem_empt_next_wrap_658;\n    wire [5:0] mem_empt_next_wrap_659;\n    wire [5:0] mem_empt_next_wrap_660;\n    wire [5:0] mem_empt_next_wrap_661;\n    wire [5:0] mem_empt_next_wrap_662;\n    wire [5:0] mem_empt_next_wrap_663;\n    wire [5:0] mem_empt_next_wrap_664;\n    wire [5:0] mem_empt_next_wrap_665;\n    wire [5:0] mem_empt_next_wrap_666;\n    wire [5:0] mem_empt_next_wrap_667;\n    wire [5:0] mem_empt_next_wrap_668;\n    wire [5:0] mem_empt_next_wrap_669;\n    wire [5:0] mem_empt_next_wrap_670;\n    wire [5:0] mem_empt_next_wrap_671;\n    wire [5:0] mem_empt_next_wrap_672;\n    wire [5:0] mem_empt_next_wrap_673;\n    wire [5:0] mem_empt_next_wrap_674;\n    wire [5:0] mem_empt_next_wrap_675;\n    wire [5:0] mem_empt_next_wrap_676;\n    wire [5:0] mem_empt_next_wrap_677;\n    wire [5:0] mem_empt_next_wrap_678;\n    wire [5:0] mem_empt_next_wrap_679;\n    wire [5:0] mem_empt_next_wrap_680;\n    wire [5:0] mem_empt_next_wrap_681;\n    wire [5:0] mem_empt_next_wrap_682;\n    wire [5:0] mem_empt_next_wrap_683;\n    wire [5:0] mem_empt_next_wrap_684;\n    wire [5:0] mem_empt_next_wrap_685;\n    wire [5:0] mem_empt_next_wrap_686;\n    wire [5:0] mem_empt_next_wrap_687;\n    wire [5:0] mem_empt_next_wrap_688;\n    wire [5:0] mem_empt_next_wrap_689;\n    wire [5:0] mem_empt_next_wrap_690;\n    wire [5:0] mem_empt_next_wrap_691;\n    wire [5:0] mem_empt_next_wrap_692;\n    wire [5:0] mem_empt_next_wrap_693;\n    wire [5:0] mem_empt_next_wrap_694;\n    wire [5:0] mem_empt_next_wrap_695;\n    wire [5:0] mem_empt_next_wrap_696;\n    wire [5:0] mem_empt_next_wrap_697;\n    wire [5:0] mem_empt_next_wrap_698;\n    wire [5:0] mem_empt_next_wrap_699;\n    wire [5:0] mem_empt_next_wrap_700;\n    wire [5:0] mem_empt_next_wrap_701;\n    wire [5:0] mem_empt_next_wrap_702;\n    wire [5:0] mem_empt_next_wrap_703;\n    wire [5:0] mem_empt_next_wrap_704;\n    wire [5:0] mem_empt_next_wrap_705;\n    wire [5:0] mem_empt_next_wrap_706;\n    wire [5:0] mem_empt_next_wrap_707;\n    wire [5:0] mem_empt_next_wrap_708;\n    wire [5:0] mem_empt_next_wrap_709;\n    wire [5:0] mem_empt_next_wrap_710;\n    wire [5:0] mem_empt_next_wrap_711;\n    wire [5:0] mem_empt_next_wrap_712;\n    wire [5:0] mem_empt_next_wrap_713;\n    wire [5:0] mem_empt_next_wrap_714;\n    wire [5:0] mem_empt_next_wrap_715;\n    wire [5:0] mem_empt_next_wrap_716;\n    wire [5:0] mem_empt_next_wrap_717;\n    wire [5:0] mem_empt_next_wrap_718;\n    wire [5:0] mem_empt_next_wrap_719;\n    wire [5:0] mem_empt_next_wrap_720;\n    wire [5:0] mem_empt_next_wrap_721;\n    wire [5:0] mem_empt_next_wrap_722;\n    wire [5:0] mem_empt_next_wrap_723;\n    wire [5:0] mem_empt_next_wrap_724;\n    wire [5:0] mem_empt_next_wrap_725;\n    wire [5:0] mem_empt_next_wrap_726;\n    wire [5:0] mem_empt_next_wrap_727;\n    wire [5:0] mem_empt_next_wrap_728;\n    wire [5:0] mem_empt_next_wrap_729;\n    wire [5:0] mem_empt_next_wrap_730;\n    wire [5:0] mem_empt_next_wrap_731;\n    wire [5:0] mem_empt_next_wrap_732;\n    wire [5:0] mem_empt_next_wrap_733;\n    wire [5:0] mem_empt_next_wrap_734;\n    wire [5:0] mem_empt_next_wrap_735;\n    wire [5:0] mem_empt_next_wrap_736;\n    wire [5:0] mem_empt_next_wrap_737;\n    wire [5:0] mem_empt_next_wrap_738;\n    wire [5:0] mem_empt_next_wrap_739;\n    wire [5:0] mem_empt_next_wrap_740;\n    wire [5:0] mem_empt_next_wrap_741;\n    wire [5:0] mem_empt_next_wrap_742;\n    wire [5:0] mem_empt_next_wrap_743;\n    wire [5:0] mem_empt_next_wrap_744;\n    wire [5:0] mem_empt_next_wrap_745;\n    wire [5:0] mem_empt_next_wrap_746;\n    wire [5:0] mem_empt_next_wrap_747;\n    wire [5:0] mem_empt_next_wrap_748;\n    wire [5:0] mem_empt_next_wrap_749;\n    wire [5:0] mem_empt_next_wrap_750;\n    wire [5:0] mem_empt_next_wrap_751;\n    wire [5:0] mem_empt_next_wrap_752;\n    wire [5:0] mem_empt_next_wrap_753;\n    wire [5:0] mem_empt_next_wrap_754;\n    wire [5:0] mem_empt_next_wrap_755;\n    wire [5:0] mem_empt_next_wrap_756;\n    wire [5:0] mem_empt_next_wrap_757;\n    wire [5:0] mem_empt_next_wrap_758;\n    wire [5:0] mem_empt_next_wrap_759;\n    wire [5:0] mem_empt_next_wrap_760;\n    wire [5:0] mem_empt_next_wrap_761;\n    wire [5:0] mem_empt_next_wrap_762;\n    wire [5:0] mem_empt_next_wrap_763;\n    wire [5:0] mem_empt_next_wrap_764;\n    wire [5:0] mem_empt_next_wrap_765;\n    wire [5:0] mem_empt_next_wrap_766;\n    wire [5:0] mem_empt_next_wrap_767;\n    wire [5:0] mem_empt_next_wrap_768;\n    wire [5:0] mem_empt_next_wrap_769;\n    wire [5:0] mem_empt_next_wrap_770;\n    wire [5:0] mem_empt_next_wrap_771;\n    wire [5:0] mem_empt_next_wrap_772;\n    wire [5:0] mem_empt_next_wrap_773;\n    wire [5:0] mem_empt_next_wrap_774;\n    wire [5:0] mem_empt_next_wrap_775;\n    wire [5:0] mem_empt_next_wrap_776;\n    wire [5:0] mem_empt_next_wrap_777;\n    wire [5:0] mem_empt_next_wrap_778;\n    wire [5:0] mem_empt_next_wrap_779;\n    wire [5:0] mem_empt_next_wrap_780;\n    wire [5:0] mem_empt_next_wrap_781;\n    wire [5:0] mem_empt_next_wrap_782;\n    wire [5:0] mem_empt_next_wrap_783;\n    wire [5:0] mem_empt_next_wrap_784;\n    wire [5:0] mem_empt_next_wrap_785;\n    wire [5:0] mem_empt_next_wrap_786;\n    wire [5:0] mem_empt_next_wrap_787;\n    wire [5:0] mem_empt_next_wrap_788;\n    wire [5:0] mem_empt_next_wrap_789;\n    wire [5:0] mem_empt_next_wrap_790;\n    wire [5:0] mem_empt_next_wrap_791;\n    wire [5:0] mem_empt_next_wrap_792;\n    wire [5:0] mem_empt_next_wrap_793;\n    wire [5:0] mem_empt_next_wrap_794;\n    wire [5:0] mem_empt_next_wrap_795;\n    wire [5:0] mem_empt_next_wrap_796;\n    wire [5:0] mem_empt_next_wrap_797;\n    wire [5:0] mem_empt_next_wrap_798;\n    wire [5:0] mem_empt_next_wrap_799;\n    wire [5:0] mem_empt_next_wrap_800;\n    wire [5:0] mem_empt_next_wrap_801;\n    wire [5:0] mem_empt_next_wrap_802;\n    wire [5:0] mem_empt_next_wrap_803;\n    wire [5:0] mem_empt_next_wrap_804;\n    wire [5:0] mem_empt_next_wrap_805;\n    wire [5:0] mem_empt_next_wrap_806;\n    wire [5:0] mem_empt_next_wrap_807;\n    wire [5:0] mem_empt_next_wrap_808;\n    wire [5:0] mem_empt_next_wrap_809;", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 14, "code": "\nmodule sd_tx_fifo(\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [5:0] mem_empt_next;\n    wire [31:0] q_next;\n    wire full_next;\n    wire empty_next;\n\n    assign adr_i_next = (wr && !full) ? adr_i + 1'b1 : adr_i;\n    assign adr_o_next = (rd && !empty) ? adr_o + 1'b1 : adr_o;\n    assign mem_empt_next = (adr_i_next == adr_o_next) ? 6'd0 : (adr_i_next > adr_o_next) ? (adr_i_next - adr_o_next) : (FIFO_TX_MEM_DEPTH - adr_o_next + adr_i_next);\n    assign q_next = ram[adr_o];\n    assign full_next = (adr_i_next == adr_o_next) ? 1'b1 : 1'b0;\n    assign empty_next = (adr_i_next == adr_o_next) ? 1'b1 : 1'b0;\n\n    always @(posedge wclk) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n        end else begin\n            adr_i <= adr_i_next;\n            adr_o <= adr_o_next;\n            if (wr && !full) begin\n                ram[adr_i] <= d;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rst) begin\n            q <= 0;\n            full <= 0;\n            empty <= 1;\n            mem_empt <= 0;\n        end else begin\n            q <= q_next;\n            full <= full_next;\n            empty <= empty_next;\n            mem_empt <= mem_empt_next;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 15, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 16, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n\n    always @(posedge wclk) begin\n        if (wr && !full) begin\n            ram[adr_i] <= d;\n            adr_i <= adr_i + 1;\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rd && !empty) begin\n            q <= ram[adr_o];\n            adr_o <= adr_o + 1;\n        end\n    end\n\n    assign full = (adr_i == adr_o) && (adr_i != 0);\n    assign empty = (adr_i == adr_o) && (adr_i == 0);\n    assign mem_empt = adr_i - adr_o;\n\n    always @(posedge rst) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 512\n`define FIFO_RX_MEM_ADR_SIZE 9\n`define FIFO_TX_MEM_DEPTH 512\n`define FIFO_TX_MEM_ADR_SIZE 9\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 19, "code": "\nmodule sd_tx_fifo (\n    input [31:0] d,\n    input wr,\n    input wclk,\n    output [31:0] q,\n    input rd,\n    output full,\n    output empty,\n    output [5:0] mem_empt,\n    input rclk,\n    input rst\n);\n\n    reg [31:0] ram [0:FIFO_TX_MEM_DEPTH-1];\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i;\n    reg [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_i_next;\n    wire [FIFO_RX_MEM_ADR_SIZE-1:0] adr_o_next;\n    wire [5:0] mem_empt_next;\n    wire full_next;\n    wire empty_next;\n\n    assign adr_i_next = (wr && !full) ? adr_i + 1 : adr_i;\n    assign adr_o_next = (rd && !empty) ? adr_o + 1 : adr_o;\n    assign mem_empt_next = adr_i_next - adr_o_next;\n    assign full_next = (mem_empt_next == FIFO_TX_MEM_DEPTH);\n    assign empty_next = (adr_i_next == adr_o_next);\n\n    always @(posedge wclk) begin\n        if (rst) begin\n            adr_i <= 0;\n            adr_o <= 0;\n        end else begin\n            adr_i <= adr_i_next;\n            adr_o <= adr_o_next;\n            if (wr && !full) begin\n                ram[adr_i] <= d;\n            end\n        end\n    end\n\n    always @(posedge rclk) begin\n        if (rst) begin\n            q <= 0;\n            full <= 0;\n            empty <= 1;\n            mem_empt <= 0;\n        end else begin\n            if (rd && !empty) begin\n                q <= ram[adr_o];\n            end\n            full <= full_next;\n            empty <= empty_next;\n            mem_empt <= mem_empt_next;\n        end\n    end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sd_tx_fifo", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 128\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 128\n`define FIFO_RX_MEM_ADR_SIZE 7\n`define FIFO_TX_MEM_DEPTH 128\n`define FIFO_TX_MEM_ADR_SIZE 7\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 1, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SIM\n`define SYN\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 2, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 3, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 4, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RAM_MEM_WIDTH_16\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 5, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 6, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 7, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 8, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 9, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 2\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 10, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 255\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 255\n`define SD_CLK_BUS_CLK\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 11, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 12, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 13, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 15\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 14, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SIM\n`define SYN\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 15, "code": "\nmodule sd_defines;\n\n// Endianess\n`define BIG_ENDIAN\n//`define LITTLE_ENDIAN\n\n// Simulation or Synthesis\n//`define SIM\n`define SYN\n\n// Enable Interrupt\n`define SDC_IRQ_ENABLE\n\n// Get predefine settings from Actel\n//`define ACTEL\n\n// BD Size\n`define BD_WIDTH 7\n`define BD_SIZE 255\n\n// RAM Width\n`define RAM_MEM_WIDTH_16\n//`define RAM_MEM_WIDTH 32\n\n// Resend Max Count\n`define RESEND_MAX_CNT 10\n\n// Memory Offset\n`define MEM_OFFSET 2\n\n// Reset Clk Div\n`define RESET_CLK_DIV 10\n\n// SD CLK\n//`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n//`define SD_CLK_STATIC\n//`define SD_CLK_DYNAMIC\n\n// Block Size\n`define BLOCK_SIZE 512\n\n// SD Bus Width\n`define SD_BUS_WIDTH_4\n//`define SD_BUS_W 4\n\n// FIFO RX Memory Depth\n`define FIFO_RX_MEM_DEPTH 128\n//`define FIFO_RX_MEM_ADR_SIZE $clog2(FIFO_RX_MEM_DEPTH)+1\n\n// FIFO TX Memory Depth\n`define FIFO_TX_MEM_DEPTH 128\n//`define FIFO_TX_MEM_ADR_SIZE $clog2(FIFO_TX_MEM_DEPTH)+1\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 16, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 254\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 254\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 17, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 18, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 19, "code": "\n`define BIG_ENDIAN\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 1\n`define RESET_CLK_DIV 10\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 256\n`define FIFO_RX_MEM_ADR_SIZE 8\n`define FIFO_TX_MEM_DEPTH 256\n`define FIFO_TX_MEM_ADR_SIZE 8\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "sdc_controller", "codeid": 20, "code": "\n`define BIG_ENDIAN\n`define LITTLE_ENDIAN\n`define SIM\n`define SYN\n`define SDC_IRQ_ENABLE\n`define ACTEL\n`define BD_WIDTH 7\n`define BD_SIZE 255\n`define RAM_MEM_WIDTH_16\n`define RAM_MEM_WIDTH 32\n`define RESEND_MAX_CNT 10\n`define MEM_OFFSET 0\n`define RESET_CLK_DIV 1\n`define SD_CLK_BUS_CLK\n`define SD_CLK_SEP\n`define SD_CLK_STATIC\n`define SD_CLK_DYNAMIC\n`define BLOCK_SIZE 512\n`define SD_BUS_WIDTH_4\n`define SD_BUS_W 4\n`define FIFO_RX_MEM_DEPTH 1024\n`define FIFO_RX_MEM_ADR_SIZE 10\n`define FIFO_TX_MEM_DEPTH 1024\n`define FIFO_TX_MEM_ADR_SIZE 10\n", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
