{"task": "e203_clkgate", "codeid": 1, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 2, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  assign clk_out = clk_in;\n`else\n  reg enb;\n  always @ (negedge clk_in or posedge test_mode) begin\n    if (test_mode)\n      enb <= 1'b1;\n    else\n      enb <= clock_en;\n  end\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 3, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly pass the input clock to the output\n  assign clk_out = clk_in;\n`else\n  // In non-FPGA mode, implement clock gating\n  reg enb;\n  always @ (negedge clk_in or posedge test_mode) begin\n    if (test_mode) begin\n      enb <= 1'b1;\n    end else begin\n      enb <= clock_en;\n    end\n  end\n\n  // Gated clock output\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 4, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly pass the input clock to the output\n  assign clk_out = clk_in;\n`else\n  // In non-FPGA mode, implement clock gating\n  reg enb;\n  always @(negedge clk_in or posedge test_mode) begin\n    if (test_mode) begin\n      enb <= 1'b1;\n    end else begin\n      enb <= clock_en;\n    end\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 5, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly pass the input clock to output\n  assign clk_out = clk_in;\n`else\n  // In non-FPGA mode, implement clock gating\n  reg enb;\n  always @(negedge clk_in or posedge test_mode) begin\n    if (test_mode) begin\n      enb <= 1'b1;\n    end else begin\n      enb <= clock_en;\n    end\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 6, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 7, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly pass through the clock\n  assign clk_out = clk_in;\n`else\n  // In non-FPGA mode, implement clock gating\n  reg enb;\n\n  always @(negedge clk_in or posedge test_mode) begin\n    if (test_mode) begin\n      enb <= 1'b1;\n    end else begin\n      enb <= clock_en;\n    end\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 8, "code": "module e203_clkgate (\n    input wire clk_in,\n    input wire test_mode,\n    input wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly connect input clock to output clock\n    assign clk_out = clk_in;\n`else\n    // In Gating mode, use enable signal to control clock output\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 9, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly pass through the clock\n    assign clk_out = clk_in;\n`else\n    // In Gating mode, use a latch to control the clock gating\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 1, "code": "`ifdef E203_HAS_CSR_NICE\nmodule e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns 0 for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 10, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly connect input clock to output clock\n    assign clk_out = clk_in;\n`else\n    // In Gating mode, use enable signal to control clock output\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 11, "code": "`include \"e203_defines.v\"\n\nmodule e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly connect the input clock to the output\n    assign clk_out = clk_in;\n`else\n    // In non-FPGA mode, implement clock gating\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 1, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n  assign clk_core_ifu = ifu_clk_en ? clk : 1'b0;\n  assign clk_core_exu = exu_clk_en ? clk : 1'b0;\n  assign clk_core_lsu = lsu_clk_en ? clk : 1'b0;\n  assign clk_core_biu = biu_clk_en ? clk : 1'b0;\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign clk_itcm = itcm_clk_en ? clk : 1'b0;\n  assign itcm_ls = ~itcm_clk_en;\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign clk_dtcm = dtcm_clk_en ? clk : 1'b0;\n  assign dtcm_ls = ~dtcm_clk_en;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 2, "code": "`ifdef E203_HAS_CSR_NICE\n\nmodule e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 12, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly pass the input clock to the output\n  assign clk_out = clk_in;\n`else\n  // In non-FPGA mode, implement clock gating\n  reg enb;\n  always @ (negedge clk_in or posedge test_mode) begin\n    if (test_mode) begin\n      enb <= 1'b1;\n    end else begin\n      enb <= clock_en;\n    end\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 2, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itcm_active_r <= 1'b0;\n    end else begin\n      itcm_active_r <= itcm_active;\n    end\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dtcm_active_r <= 1'b0;\n    end else begin\n      dtcm_active_r <= dtcm_active;\n    end\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 3, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itcm_active_r <= 1'b0;\n    end else begin\n      itcm_active_r <= itcm_active;\n    end\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dtcm_active_r <= 1'b0;\n    end else begin\n      dtcm_active_r <= dtcm_active;\n    end\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 13, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly pass the input clock to the output\n    assign clk_out = clk_in;\n`else\n    // In Gating mode, use a latch to control the clock enable signal\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    // Generate the gated clock output\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 4, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // ITCM clock control\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  // DTCM clock control\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 1, "code": "module e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 14, "code": "`include \"e203_defines.v\"\n\nmodule e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly connect input clock to output clock\n    assign clk_out = clk_in;\n`else\n    // In Gating mode, use enable signal to control clock output\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode) begin\n            enb <= 1'b1;\n        end else begin\n            enb <= clock_en;\n        end\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 2, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 5, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 15, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly connect input clock to output clock\n    assign clk_out = clk_in;\n`else\n    // In gating mode, use enable signal to control clock output\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 3, "code": "`ifdef E203_HAS_CSR_NICE\nmodule e203_extend_csr (\n  input  wire        clk,\n  input  wire        rst_n,\n  input  wire        nice_csr_valid,\n  output wire        nice_csr_ready,\n  input  wire [31:0] nice_csr_addr,\n  input  wire        nice_csr_wr,\n  input  wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 4, "code": "module e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 6, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 7, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n  assign clk_core_ifu = ifu_clk_en ? clk : 1'b0;\n  assign clk_core_exu = exu_clk_en ? clk : 1'b0;\n  assign clk_core_lsu = lsu_clk_en ? clk : 1'b0;\n  assign clk_core_biu = biu_clk_en ? clk : 1'b0;\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n  assign clk_itcm = itcm_clk_en ? clk : 1'b0;\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n  assign clk_dtcm = dtcm_clk_en ? clk : 1'b0;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 8, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  ,\n  input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  ,\n  input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n  assign clk_core_ifu = ifu_clk_en ? clk : 1'b0;\n  assign clk_core_exu = exu_clk_en ? clk : 1'b0;\n  assign clk_core_lsu = lsu_clk_en ? clk : 1'b0;\n  assign clk_core_biu = biu_clk_en ? clk : 1'b0;\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign clk_itcm = itcm_clk_en ? clk : 1'b0;\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign clk_dtcm = dtcm_clk_en ? clk : 1'b0;\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 9, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // ITCM clock control logic\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  // DTCM clock control logic\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 3, "code": "`include \"e203_defines.v\"\n\nmodule e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 16, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly connect clk_in to clk_out\n  assign clk_out = clk_in;\n`else\n  // In Gating mode, use enable signal to control clk_out\n  reg enb;\n  always @ (negedge clk_in or posedge test_mode) begin\n    if (test_mode)\n      enb <= 1'b1;\n    else\n      enb <= clock_en;\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 1, "code": "`include \"e203_defines.v\"\n\nmodule e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input  [E203_PC_SIZE-1:0] pc_rtvec,\n  input  [E203_HART_ID_W-1:0] core_mhartid,\n  input  dbg_irq_r,\n  input  [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  [E203_EVT_NUM-1:0] evt_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input  [31:0] dcsr_r,\n  input  [E203_PC_SIZE-1:0] dpc_r,\n  input  [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle\n);\n\n  // Internal signals and logic for the e203_core module\n  // This includes instantiation of submodules like e203_ifu, e203_exu, e203_lsu, and e203_biu\n  // and the interconnection logic between them.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 10, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  ,input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  ,input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n  assign clk_core_ifu = ifu_clk_en ? clk : 1'b0;\n  assign clk_core_exu = exu_clk_en ? clk : 1'b0;\n  assign clk_core_lsu = lsu_clk_en ? clk : 1'b0;\n  assign clk_core_biu = biu_clk_en ? clk : 1'b0;\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign clk_itcm = itcm_clk_en ? clk : 1'b0;\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign clk_dtcm = dtcm_clk_en ? clk : 1'b0;\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 4, "code": "module e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 17, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // FPGA mode: Directly connect input clock to output\n    assign clk_out = clk_in;\n`else\n    // Gating mode: Use enable signal to control clock output\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 5, "code": "module e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  // Instantiate the general-purpose RAM module\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 11, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // ITCM clock control\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  // DTCM clock control\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 18, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  assign clk_out = clk_in;\n`else\n  reg enb;\n  always @ (negedge clk_in or posedge test_mode) begin\n    if (test_mode)\n      enb <= 1'b1;\n    else\n      enb <= clock_en;\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 6, "code": "module e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 12, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // ITCM clock control logic\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  // DTCM clock control logic\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 5, "code": "module e203_extend_csr (\n  input  wire        clk,\n  input  wire        rst_n,\n  input  wire        nice_csr_valid,\n  output wire        nice_csr_ready,\n  input  wire [31:0] nice_csr_addr,\n  input  wire        nice_csr_wr,\n  input  wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 7, "code": "`include \"e203_defines.v\"\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 6, "code": "`ifdef E203_HAS_CSR_NICE\nmodule e203_extend_csr (\n  input  clk,\n  input  rst_n,\n  input  nice_csr_valid,\n  output nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input  nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 13, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    ,\n    input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    ,\n    input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n    // Clock gating logic for IFU\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    // Clock gating logic for EXU\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    // Clock gating logic for LSU\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    // Clock gating logic for BIU\n    wire biu_clk_en = core_cgstop | core_biu_active;\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n`ifdef E203_HAS_ITCM\n    // ITCM clock control\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n\n    assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n    // DTCM clock control\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n\n    assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 14, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input wire itcm_active\n    , output wire itcm_ls\n    , output wire clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input wire dtcm_active\n    , output wire dtcm_ls\n    , output wire clk_dtcm\n    `endif\n);\n\n    // Clock enable control logic\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    wire biu_clk_en = core_cgstop | core_biu_active;\n\n    // Clock gating instances\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    assign clk_aon = clk;\n\n    `ifdef E203_HAS_ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    assign itcm_ls = ~itcm_clk_en;\n\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    assign dtcm_ls = ~dtcm_clk_en;\n\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n    `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 19, "code": "module e203_clkgate (\n  input  wire clk_in,\n  input  wire test_mode,\n  input  wire clock_en,\n  output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n  // In FPGA mode, directly connect input clock to output clock\n  assign clk_out = clk_in;\n`else\n  // In Gating mode, use enable signal to control clock output\n  reg enb;\n  always @ (negedge clk_in or posedge test_mode) begin\n    if (test_mode) begin\n      enb <= 1'b1;\n    end else begin\n      enb <= clock_en;\n    end\n  end\n\n  assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 15, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n  `endif\n);\n\n  // Clock enable control logic\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  // Clock gating instances\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  // Always-on clock\n  assign clk_aon = clk;\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 8, "code": "`include \"e203_defines.v\"\n\nmodule e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 16, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n\n  // Clock gating logic for EXU, LSU, BIU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  // Instantiate clock gating units\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .clk_en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .clk_en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .clk_en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .clk_en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // ITCM clock control logic\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .clk_en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  // DTCM clock control logic\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .clk_en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 2, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n  // Additional ICB and NICE interfaces would be defined here\n);\n\n  // Internal signals and submodule instantiations would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 3, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // Internal signals and logic for the core module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 1, "code": "module e203_cpu_top (\n  // Global signals\n  input wire clk,\n  input wire rst_n,\n\n  // Program Counter Inspection\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire core_wfi,\n  output wire tm_stop,\n\n  // Reset Vector\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n\n  // Interrupts\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n\n  // TCM Control Signals\n  input wire tcm_sd,\n  input wire tcm_ds,\n\n  // External ICB to ITCM\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External ICB to DTCM\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Debug Interface\n  output wire dbg_irq_r\n);\n\n  // Core Module Instantiation\n  e203_cpu u_e203_cpu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .dbg_irq_r(dbg_irq_r)\n  );\n\n  // SRAM Module Instantiation\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .dtcm_ram_sd(tcm_sd),\n    .dtcm_ram_ds(tcm_ds),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 9, "code": "`include \"e203_defines.v\"\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 2, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a)\n  );\n\n  // Instantiate the e203_srams module for ITCM and DTCM\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0),\n    .itcm_ram_cs(1'b0),\n    .itcm_ram_we(1'b0),\n    .itcm_ram_addr({E203_ITCM_RAM_AW{1'b0}}),\n    .itcm_ram_wem({E203_ITCM_RAM_MW{1'b0}}),\n    .itcm_ram_din({E203_ITCM_RAM_DW{1'b0}}),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(tcm_sd),\n    .dtcm_ram_ds(tcm_ds),\n    .dtcm_ram_ls(1'b0),\n    .dtcm_ram_cs(1'b0),\n    .dtcm_ram_we(1'b0),\n    .dtcm_ram_addr({E203_DTCM_RAM_AW{1'b0}}),\n    .dtcm_ram_wem({E203_DTCM_RAM_MW{1'b0}}),\n    .dtcm_ram_din({E203_DTCM_RAM_DW{1'b0}}),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(1'b0)\n  );\n\n  // External-agent ICB to ITCM interface\n  assign ext2itcm_icb_cmd_ready = 1'b0;\n  assign ext2itcm_icb_rsp_valid = 1'b0;\n  assign ext2itcm_icb_rsp_err = 1'b0;\n  assign ext2itcm_icb_rsp_rdata = {E203_XLEN{1'b0}};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 4, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input  [E203_PC_SIZE-1:0] pc_rtvec,\n  input  [E203_HART_ID_W-1:0] core_mhartid,\n  input  dbg_irq_r,\n  input  [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  [E203_EVT_NUM-1:0] evt_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input  [31:0] dcsr_r,\n  input  [E203_PC_SIZE-1:0] dpc_r,\n  input  [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle\n);\n\n  // Internal signals and submodule instantiations would go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 5, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n  // Additional ICB and NICE interfaces would be declared here\n);\n\n// Submodule instantiations and internal logic would be implemented here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 7, "code": "module e203_extend_csr (\n  input  wire         clk,\n  input  wire         rst_n,\n  input  wire         nice_csr_valid,\n  output wire         nice_csr_ready,\n  input  wire [31:0]  nice_csr_addr,\n  input  wire         nice_csr_wr,\n  input  wire [31:0]  nice_csr_wdata,\n  output wire [31:0]  nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 3, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the e203_srams module\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0), // Assuming low-power mode is not used\n    .itcm_ram_cs(1'b1), // Assuming chip select is always enabled\n    .itcm_ram_we(1'b0), // Assuming write enable is not used\n    .itcm_ram_addr(ext2itcm_icb_cmd_addr),\n    .itcm_ram_wem(ext2itcm_icb_cmd_wmask),\n    .itcm_ram_din(ext2itcm_icb_cmd_wdata),\n    .itcm_ram_dout(ext2itcm_icb_rsp_rdata),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(tcm_sd),\n    .dtcm_ram_ds(tcm_ds),\n    .dtcm_ram_ls(1'b0), // Assuming low-power mode is not used\n    .dtcm_ram_cs(1'b1), // Assuming chip select is always enabled\n    .dtcm_ram_we(1'b0), // Assuming write enable is not used\n    .dtcm_ram_addr(ext2itcm_icb_cmd_addr),\n    .dtcm_ram_wem(ext2itcm_icb_cmd_wmask),\n    .dtcm_ram_din(ext2itcm_icb_cmd_wdata),\n    .dtcm_ram_dout(ext2itcm_icb_rsp_rdata),\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(1'b0) // Assuming test mode is not used\n  );\n\n  // Additional logic for handling external ICB interface\n  assign ext2itcm_icb_cmd_ready = 1'b1; // Assuming always ready\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_rsp_err = 1'b0; // Assuming no error\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 20, "code": "module e203_clkgate (\n    input wire clk_in,\n    input wire test_mode,\n    input wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // In FPGA mode, directly connect clk_in to clk_out\n    assign clk_out = clk_in;\n`else\n    // In Gating mode, use an enable signal to control clk_out\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    // Perform AND operation between clk_in and enable signal\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 17, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  ,input  wire itcm_active\n  ,output wire itcm_ls\n  ,output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  ,input  wire dtcm_active\n  ,output wire dtcm_ls\n  ,output wire clk_dtcm\n  `endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate(\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate(\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate(\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate(\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  // Always-on clock\n  assign clk_aon = clk;\n\n  `ifdef E203_HAS_ITCM\n  // ITCM clock control\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate(\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n  assign itcm_ls = ~itcm_clk_en;\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  // DTCM clock control\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate(\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n  assign dtcm_ls = ~dtcm_clk_en;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 10, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 4, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signal declarations\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk;\n  wire core_wfi;\n  wire core_tm_stop;\n  wire [E203_PC_SIZE-1:0] core_pc_rtvec;\n  wire core_dbg_irq_r;\n  wire core_ext_irq_a;\n  wire core_sft_irq_a;\n  wire core_tmr_irq_a;\n  wire core_tcm_sd;\n  wire core_tcm_ds;\n  wire core_ext2itcm_icb_cmd_valid;\n  wire core_ext2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] core_ext2itcm_icb_cmd_addr;\n  wire core_ext2itcm_icb_cmd_read;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] core_ext2itcm_icb_cmd_wmask;\n  wire core_ext2itcm_icb_rsp_valid;\n  wire core_ext2itcm_icb_rsp_ready;\n  wire core_ext2itcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(core_tm_stop),\n    .pc_rtvec(core_pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(core_ext_irq_a),\n    .sft_irq_a(core_sft_irq_a),\n    .tmr_irq_a(core_tmr_irq_a),\n    .tcm_sd(core_tcm_sd),\n    .tcm_ds(core_tcm_ds),\n    .ext2itcm_icb_cmd_valid(core_ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(core_ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(core_ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(core_ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(core_ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(core_ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(core_ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(core_ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk;\n  assign core_wfi = core_wfi;\n  assign tm_stop = core_tm_stop;\n  assign dbg_irq_r = core_dbg_irq_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 1, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n  // Module implementation goes here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 1, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals and logic for instruction decoding\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 11, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 12, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 2, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n  // DTCM Interfaces\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n  // Submodule instantiations and internal logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 1, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 8, "code": "module e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The CSR module is always ready\n  assign nice_csr_ready = 1'b1;\n\n  // The CSR read data is always zero\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 3, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 6, "code": "module e203_core(\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ppi_icb_enable,\n  input clint_icb_enable,\n  input plic_icb_enable,\n  input mem_icb_enable,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input [E203_ADDR_SIZE-1:0] dtcm_region_indic,\n  input [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  input nice_mem_holdup,\n  input nice_req_ready,\n  input nice_rsp_multicyc_valid,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n  input nice_icb_cmd_valid,\n  input nice_icb_cmd_addr,\n  input nice_icb_cmd_read,\n  input [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input [1:0] nice_icb_cmd_size,\n  input nice_icb_rsp_ready,\n  output nice_req_valid,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  output nice_rsp_multicyc_ready,\n  output nice_icb_cmd_ready,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output nice_icb_rsp_err\n);\n\n// Internal signals and logic for the e203_core module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 18, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // ITCM clock control\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  // DTCM clock control\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 4, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  input clk,\n  input rst_n\n);\n\n  // Submodule instantiations and interconnections would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 5, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n// Submodule instantiations and internal logic would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 5, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_internal;\n  wire core_wfi_internal;\n  wire core_tm_stop;\n  wire [E203_PC_SIZE-1:0] core_pc_rtvec;\n  wire core_dbg_irq_r;\n  wire core_ext_irq_a;\n  wire core_sft_irq_a;\n  wire core_tmr_irq_a;\n  wire core_tcm_sd;\n  wire core_tcm_ds;\n  wire core_ext2itcm_icb_cmd_valid;\n  wire core_ext2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] core_ext2itcm_icb_cmd_addr;\n  wire core_ext2itcm_icb_cmd_read;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] core_ext2itcm_icb_cmd_wmask;\n  wire core_ext2itcm_icb_rsp_valid;\n  wire core_ext2itcm_icb_rsp_ready;\n  wire core_ext2itcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n\n  // Core module instantiation\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_internal),\n    .core_wfi(core_wfi_internal),\n    .tm_stop(core_tm_stop),\n    .pc_rtvec(core_pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(core_ext_irq_a),\n    .sft_irq_a(core_sft_irq_a),\n    .tmr_irq_a(core_tmr_irq_a),\n    .tcm_sd(core_tcm_sd),\n    .tcm_ds(core_tcm_ds),\n    .ext2itcm_icb_cmd_valid(core_ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(core_ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(core_ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(core_ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(core_ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(core_ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(core_ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(core_ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_internal;\n  assign core_wfi = core_wfi_internal;\n  assign tm_stop = core_tm_stop;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 6, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM module\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0),\n    .itcm_ram_cs(1'b0),\n    .itcm_ram_we(1'b0),\n    .itcm_ram_addr({E203_ITCM_RAM_AW{1'b0}}),\n    .itcm_ram_wem({E203_ITCM_RAM_MW{1'b0}}),\n    .itcm_ram_din({E203_ITCM_RAM_DW{1'b0}}),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(tcm_sd),\n    .dtcm_ram_ds(tcm_ds),\n    .dtcm_ram_ls(1'b0),\n    .dtcm_ram_cs(1'b0),\n    .dtcm_ram_we(1'b0),\n    .dtcm_ram_addr({E203_DTCM_RAM_AW{1'b0}}),\n    .dtcm_ram_wem({E203_DTCM_RAM_MW{1'b0}}),\n    .dtcm_ram_din({E203_DTCM_RAM_DW{1'b0}}),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(1'b0)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 6, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  `ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n  `endif\n\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 1, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM Interface\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = (E203_HAS_MEM_ITF) ? 2 : 1;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = (E203_HAS_FIO || E203_HAS_MEM_ITF) ? 5 : 4;\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 7, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the e203_srams module\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0), // Assuming low-power mode is not used\n    .itcm_ram_cs(1'b1), // Assuming chip select is always enabled\n    .itcm_ram_we(1'b0), // Assuming write enable is not used\n    .itcm_ram_addr(ext2itcm_icb_cmd_addr),\n    .itcm_ram_wem(ext2itcm_icb_cmd_wmask),\n    .itcm_ram_din(ext2itcm_icb_cmd_wdata),\n    .itcm_ram_dout(ext2itcm_icb_rsp_rdata),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n)\n  );\n\n  // Logic for handling external ITCM interface\n  assign ext2itcm_icb_cmd_ready = 1'b1; // Assuming always ready\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_rsp_err = 1'b0; // Assuming no error\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 7, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 8, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n  // DTCM Interfaces\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n// Submodule Instantiations and Logic\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 8, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire wfi;\n  wire stop;\n  wire [E203_PC_SIZE-1:0] rtvec;\n  wire dbg_irq_sync;\n  wire ext_irq;\n  wire sft_irq;\n  wire tmr_irq;\n  wire itcm_sd;\n  wire itcm_ds;\n  wire itcm_cmd_valid;\n  wire itcm_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire itcm_cmd_read;\n  wire [E203_XLEN-1:0] itcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] itcm_cmd_wmask;\n  wire itcm_rsp_valid;\n  wire itcm_rsp_ready;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(wfi),\n    .tm_stop(stop),\n    .pc_rtvec(rtvec),\n    .dbg_irq_r(dbg_irq_sync),\n    .ext_irq_a(ext_irq),\n    .sft_irq_a(sft_irq),\n    .tmr_irq_a(tmr_irq),\n    .ext2itcm_icb_cmd_valid(itcm_cmd_valid),\n    .ext2itcm_icb_cmd_ready(itcm_cmd_ready),\n    .ext2itcm_icb_cmd_addr(itcm_cmd_addr),\n    .ext2itcm_icb_cmd_read(itcm_cmd_read),\n    .ext2itcm_icb_cmd_wdata(itcm_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(itcm_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(itcm_rsp_valid),\n    .ext2itcm_icb_rsp_ready(itcm_rsp_ready),\n    .ext2itcm_icb_rsp_err(itcm_rsp_err),\n    .ext2itcm_icb_rsp_rdata(itcm_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = csr_clk;\n  assign core_wfi = wfi;\n  assign tm_stop = stop;\n  assign dbg_irq_r = dbg_irq_sync;\n\n  // Assign inputs\n  assign rtvec = pc_rtvec;\n  assign ext_irq = ext_irq_a;\n  assign sft_irq = sft_irq_a;\n  assign tmr_irq = tmr_irq_a;\n  assign itcm_sd = tcm_sd;\n  assign itcm_ds = tcm_ds;\n  assign itcm_cmd_valid = ext2itcm_icb_cmd_valid;\n  assign itcm_cmd_ready = ext2itcm_icb_cmd_ready;\n  assign itcm_cmd_addr = ext2itcm_icb_cmd_addr;\n  assign itcm_cmd_read = ext2itcm_icb_cmd_read;\n  assign itcm_cmd_wdata = ext2itcm_icb_cmd_wdata;\n  assign itcm_cmd_wmask = ext2itcm_icb_cmd_wmask;\n  assign itcm_rsp_valid = ext2itcm_icb_rsp_valid;\n  assign itcm_rsp_ready = ext2itcm_icb_rsp_ready;\n  assign itcm_rsp_err = ext2itcm_icb_rsp_err;\n  assign itcm_rsp_rdata = ext2itcm_icb_rsp_rdata;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 1, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [11:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 9, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_int;\n  wire core_wfi_int;\n  wire core_tm_stop;\n  wire core_dbg_irq_r;\n  wire core_ext_irq_a;\n  wire core_sft_irq_a;\n  wire core_tmr_irq_a;\n  wire core_tcm_sd;\n  wire core_tcm_ds;\n  wire core_ext2itcm_icb_cmd_valid;\n  wire core_ext2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] core_ext2itcm_icb_cmd_addr;\n  wire core_ext2itcm_icb_cmd_read;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] core_ext2itcm_icb_cmd_wmask;\n  wire core_ext2itcm_icb_rsp_valid;\n  wire core_ext2itcm_icb_rsp_ready;\n  wire core_ext2itcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n\n  // Instantiate e203_cpu module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_int),\n    .core_wfi(core_wfi_int),\n    .tm_stop(core_tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(core_ext_irq_a),\n    .sft_irq_a(core_sft_irq_a),\n    .tmr_irq_a(core_tmr_irq_a),\n    .tcm_sd(core_tcm_sd),\n    .tcm_ds(core_tcm_ds),\n    .ext2itcm_icb_cmd_valid(core_ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(core_ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(core_ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(core_ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(core_ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(core_ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(core_ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(core_ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_int;\n  assign core_wfi = core_wfi_int;\n  assign tm_stop = core_tm_stop;\n  assign dbg_irq_r = core_dbg_irq_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 9, "code": "`ifdef E203_HAS_CSR_NICE\nmodule e203_extend_csr (\n  input  wire        clk,\n  input  wire        rst_n,\n  input  wire        nice_csr_valid,\n  output wire        nice_csr_ready,\n  input  wire [31:0] nice_csr_addr,\n  input  wire        nice_csr_wr,\n  input  wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 10, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire core_wfi_signal;\n  wire timer_stop;\n  wire [E203_PC_SIZE-1:0] reset_vector;\n  wire debug_irq;\n  wire external_irq;\n  wire software_irq;\n  wire timer_irq;\n  wire tcm_shutdown;\n  wire tcm_deep_sleep;\n  wire itcm_cmd_valid;\n  wire itcm_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire itcm_cmd_read;\n  wire [E203_XLEN-1:0] itcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] itcm_cmd_wmask;\n  wire itcm_rsp_valid;\n  wire itcm_rsp_ready;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n\n  // Instantiate the core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(core_wfi_signal),\n    .tm_stop(timer_stop),\n    .pc_rtvec(reset_vector),\n    .dbg_irq_r(debug_irq),\n    .ext_irq_a(external_irq),\n    .sft_irq_a(software_irq),\n    .tmr_irq_a(timer_irq)\n  );\n\n  // Instantiate the SRAM module\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_shutdown),\n    .itcm_ram_ds(tcm_deep_sleep),\n    .itcm_ram_cs(itcm_cmd_valid),\n    .itcm_ram_we(itcm_cmd_ready),\n    .itcm_ram_addr(itcm_cmd_addr),\n    .itcm_ram_wem(itcm_cmd_wmask),\n    .itcm_ram_din(itcm_cmd_wdata),\n    .itcm_ram_dout(itcm_rsp_rdata),\n    .clk_itcm_ram(core_clk),\n    .rst_itcm(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = csr_clk;\n  assign core_wfi = core_wfi_signal;\n  assign tm_stop = timer_stop;\n  assign dbg_irq_r = debug_irq;\n  assign ext2itcm_icb_cmd_ready = itcm_cmd_ready;\n  assign ext2itcm_icb_rsp_valid = itcm_rsp_valid;\n  assign ext2itcm_icb_rsp_err = itcm_rsp_err;\n  assign ext2itcm_icb_rsp_rdata = itcm_rsp_rdata;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 7, "code": "module e203_core(\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input  [E203_PC_SIZE-1:0] pc_rtvec,\n  input  [E203_HART_ID_W-1:0] core_mhartid,\n  input  dbg_irq_r,\n  input  [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  [E203_EVT_NUM-1:0] evt_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input  [31:0] dcsr_r,\n  input  [E203_PC_SIZE-1:0] dpc_r,\n  input  [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle,\n  input  ppi_icb_enable,\n  input  clint_icb_enable,\n  input  plic_icb_enable,\n  input  mem_icb_enable,\n  input  fio_icb_enable,\n  input  nice_mem_holdup,\n  output nice_req_valid,\n  input  nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input  nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input  [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input  nice_rsp_multicyc_err,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_XLEN-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [1:0] nice_icb_cmd_size,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output nice_icb_rsp_err\n);\n  // Internal signals and module instantiations go here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 1, "code": "`include \"e203_defines.v\"\n\nmodule e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_dtcm_sram_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 9, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  input clk,\n  input rst_n\n);\n  // Module implementation goes here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 2, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter instantiation\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller instantiation\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 11, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the e203_srams module for ITCM and DTCM management\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0), // Assuming low-power mode is not used\n    .itcm_ram_cs(1'b1), // Assuming chip select is always enabled\n    .itcm_ram_we(1'b0), // Assuming write enable is not used\n    .itcm_ram_addr(ext2itcm_icb_cmd_addr),\n    .itcm_ram_wem(ext2itcm_icb_cmd_wmask),\n    .itcm_ram_din(ext2itcm_icb_cmd_wdata),\n    .itcm_ram_dout(ext2itcm_icb_rsp_rdata),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(1'b0), // Assuming DTCM shutdown is not used\n    .dtcm_ram_ds(1'b0), // Assuming DTCM deep sleep is not used\n    .dtcm_ram_ls(1'b0), // Assuming DTCM low-power mode is not used\n    .dtcm_ram_cs(1'b1), // Assuming DTCM chip select is always enabled\n    .dtcm_ram_we(1'b0), // Assuming DTCM write enable is not used\n    .dtcm_ram_addr({E203_DTCM_RAM_AW{1'b0}}), // Assuming no DTCM address\n    .dtcm_ram_wem({E203_DTCM_RAM_MW{1'b0}}), // Assuming no DTCM write mask\n    .dtcm_ram_din({E203_DTCM_RAM_DW{1'b0}}), // Assuming no DTCM write data\n    .dtcm_ram_dout(), // Assuming no DTCM read data\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(1'b0) // Assuming test mode is not used\n  );\n\n  // External ITCM interface handling\n  assign ext2itcm_icb_cmd_ready = 1'b1; // Assuming always ready to accept commands\n  assign ext2itcm_icb_rsp_valid = 1'b1; // Assuming always valid response\n  assign ext2itcm_icb_rsp_err = 1'b0; // Assuming no error in response\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 2, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n// would be implemented here, following the design document's specifications.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 2, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 12, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_internal;\n  wire core_wfi_internal;\n  wire tm_stop_internal;\n  wire [E203_PC_SIZE-1:0] core_pc_rtvec;\n  wire core_dbg_irq_r;\n  wire core_ext_irq_a;\n  wire core_sft_irq_a;\n  wire core_tmr_irq_a;\n  wire core_tcm_sd;\n  wire core_tcm_ds;\n  wire core_ext2itcm_icb_cmd_valid;\n  wire core_ext2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] core_ext2itcm_icb_cmd_addr;\n  wire core_ext2itcm_icb_cmd_read;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] core_ext2itcm_icb_cmd_wmask;\n  wire core_ext2itcm_icb_rsp_valid;\n  wire core_ext2itcm_icb_rsp_ready;\n  wire core_ext2itcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n\n  // Instantiate the e203_cpu core\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_internal),\n    .core_wfi(core_wfi_internal),\n    .tm_stop(tm_stop_internal),\n    .pc_rtvec(core_pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(core_ext_irq_a),\n    .sft_irq_a(core_sft_irq_a),\n    .tmr_irq_a(core_tmr_irq_a),\n    .tcm_sd(core_tcm_sd),\n    .tcm_ds(core_tcm_ds),\n    .ext2itcm_icb_cmd_valid(core_ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(core_ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(core_ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(core_ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(core_ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(core_ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(core_ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(core_ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_internal;\n  assign core_wfi = core_wfi_internal;\n  assign tm_stop = tm_stop_internal;\n  assign dbg_irq_r = core_dbg_irq_r;\n  assign ext2itcm_icb_cmd_ready = core_ext2itcm_icb_cmd_ready;\n  assign ext2itcm_icb_rsp_valid = core_ext2itcm_icb_rsp_valid;\n  assign ext2itcm_icb_rsp_err = core_ext2itcm_icb_rsp_err;\n  assign ext2itcm_icb_rsp_rdata = core_ext2itcm_icb_rsp_rdata;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 1, "code": "module e203_exu_branchslv(\n  input  cmt_i_valid,\n  output cmt_i_ready,\n  input  cmt_i_rv32,\n  input  cmt_i_dret,\n  input  cmt_i_mret,\n  input  cmt_i_fencei,\n  input  cmt_i_bjp,\n  input  cmt_i_bjp_prdt,\n  input  cmt_i_bjp_rslv,\n  input  [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  [E203_XLEN-1:0] cmt_i_imm,\n  input  [E203_PC_SIZE-1:0] csr_epc_r,\n  input  [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input  clk,\n  input  rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_req;\n  assign cmt_i_ready = ~flush_need | (flush_req & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_rv32 ? 32'h4 : 32'h2;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = \n      (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n      (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n      cmt_i_dret ? csr_dpc_r :\n      csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 10, "code": "module e203_cpu (\n  // Core Interfaces\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n  // DTCM Interfaces (Optional)\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Other ICB Interface\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 10, "code": "`ifdef E203_HAS_CSR_NICE\nmodule e203_extend_csr(\n  input  clk,\n  input  rst_n,\n  input  nice_csr_valid,\n  output nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input  nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The CSR read data is always zero\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 2, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_req;\n\n  assign cmt_i_ready = ~flush_req | brchmis_flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm[E203_PC_SIZE-1:0] : (cmt_i_rv32 ? 32'h4 : 32'h2);\n\n  assign brchmis_flush_pc = \n    (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    cmt_i_dret ? csr_dpc_r :\n    csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 13, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_internal;\n  wire core_wfi_internal;\n  wire tm_stop_internal;\n  wire [E203_PC_SIZE-1:0] core_pc_rtvec;\n  wire core_dbg_irq_r;\n  wire core_ext_irq_a;\n  wire core_sft_irq_a;\n  wire core_tmr_irq_a;\n  wire core_tcm_sd;\n  wire core_tcm_ds;\n  wire core_ext2itcm_icb_cmd_valid;\n  wire core_ext2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] core_ext2itcm_icb_cmd_addr;\n  wire core_ext2itcm_icb_cmd_read;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] core_ext2itcm_icb_cmd_wmask;\n  wire core_ext2itcm_icb_rsp_valid;\n  wire core_ext2itcm_icb_rsp_ready;\n  wire core_ext2itcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n\n  // Instantiate the e203_cpu core\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_internal),\n    .core_wfi(core_wfi_internal),\n    .tm_stop(tm_stop_internal),\n    .pc_rtvec(core_pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(core_ext_irq_a),\n    .sft_irq_a(core_sft_irq_a),\n    .tmr_irq_a(core_tmr_irq_a),\n    .tcm_sd(core_tcm_sd),\n    .tcm_ds(core_tcm_ds),\n    .ext2itcm_icb_cmd_valid(core_ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(core_ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(core_ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(core_ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(core_ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(core_ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(core_ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(core_ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_internal;\n  assign core_wfi = core_wfi_internal;\n  assign tm_stop = tm_stop_internal;\n  assign core_pc_rtvec = pc_rtvec;\n  assign dbg_irq_r = core_dbg_irq_r;\n  assign core_ext_irq_a = ext_irq_a;\n  assign core_sft_irq_a = sft_irq_a;\n  assign core_tmr_irq_a = tmr_irq_a;\n  assign core_tcm_sd = tcm_sd;\n  assign core_tcm_ds = tcm_ds;\n  assign core_ext2itcm_icb_cmd_valid = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_cmd_ready = core_ext2itcm_icb_cmd_ready;\n  assign core_ext2itcm_icb_cmd_addr = ext2itcm_icb_cmd_addr;\n  assign core_ext2itcm_icb_cmd_read = ext2itcm_icb_cmd_read;\n  assign core_ext2itcm_icb_cmd_wdata = ext2itcm_icb_cmd_wdata;\n  assign core_ext2itcm_icb_cmd_wmask = ext2itcm_icb_cmd_wmask;\n  assign ext2itcm_icb_rsp_valid = core_ext2itcm_icb_rsp_valid;\n  assign core_ext2itcm_icb_rsp_ready = ext2itcm_icb_rsp_ready;\n  assign ext2itcm_icb_rsp_err = core_ext2itcm_icb_rsp_err;\n  assign ext2itcm_icb_rsp_rdata = core_ext2itcm_icb_rsp_rdata;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 3, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signal declarations\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Arbitration logic\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_dtcm_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 14, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_internal;\n  wire core_wfi_internal;\n  wire tm_stop_internal;\n  wire [E203_PC_SIZE-1:0] core_pc_rtvec;\n  wire dbg_irq_r_internal;\n  wire ext_irq_a_internal;\n  wire sft_irq_a_internal;\n  wire tmr_irq_a_internal;\n  wire tcm_sd_internal;\n  wire tcm_ds_internal;\n  wire ext2itcm_icb_cmd_valid_internal;\n  wire ext2itcm_icb_cmd_ready_internal;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr_internal;\n  wire ext2itcm_icb_cmd_read_internal;\n  wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata_internal;\n  wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask_internal;\n  wire ext2itcm_icb_rsp_valid_internal;\n  wire ext2itcm_icb_rsp_ready_internal;\n  wire ext2itcm_icb_rsp_err_internal;\n  wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata_internal;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_internal),\n    .core_wfi(core_wfi_internal),\n    .tm_stop(tm_stop_internal),\n    .pc_rtvec(core_pc_rtvec),\n    .dbg_irq_r(dbg_irq_r_internal),\n    .ext_irq_a(ext_irq_a_internal),\n    .sft_irq_a(sft_irq_a_internal),\n    .tmr_irq_a(tmr_irq_a_internal),\n    .tcm_sd(tcm_sd_internal),\n    .tcm_ds(tcm_ds_internal),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid_internal),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready_internal),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr_internal),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read_internal),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata_internal),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask_internal),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid_internal),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready_internal),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err_internal),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata_internal),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_internal;\n  assign core_wfi = core_wfi_internal;\n  assign tm_stop = tm_stop_internal;\n  assign dbg_irq_r = dbg_irq_r_internal;\n\n  // Assign inputs\n  assign core_pc_rtvec = pc_rtvec;\n  assign ext_irq_a_internal = ext_irq_a;\n  assign sft_irq_a_internal = sft_irq_a;\n  assign tmr_irq_a_internal = tmr_irq_a;\n  assign tcm_sd_internal = tcm_sd;\n  assign tcm_ds_internal = tcm_ds;\n  assign ext2itcm_icb_cmd_valid_internal = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_cmd_ready = ext2itcm_icb_cmd_ready_internal;\n  assign ext2itcm_icb_cmd_addr_internal = ext2itcm_icb_cmd_addr;\n  assign ext2itcm_icb_cmd_read_internal = ext2itcm_icb_cmd_read;\n  assign ext2itcm_icb_cmd_wdata_internal = ext2itcm_icb_cmd_wdata;\n  assign ext2itcm_icb_cmd_wmask_internal = ext2itcm_icb_cmd_wmask;\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_rsp_valid_internal;\n  assign ext2itcm_icb_rsp_ready_internal = ext2itcm_icb_rsp_ready;\n  assign ext2itcm_icb_rsp_err = ext2itcm_icb_rsp_err_internal;\n  assign ext2itcm_icb_rsp_rdata = ext2itcm_icb_rsp_rdata_internal;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 4, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Arbitration logic\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(1)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 1, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  reg [E203_ITAG_WIDTH-1:0] itag_fifo [0:3];\n  reg [1:0] fifo_head, fifo_tail;\n  reg fifo_full, fifo_empty;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // Instruction tag FIFO logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      fifo_head <= 0;\n      fifo_tail <= 0;\n      fifo_full <= 0;\n      fifo_empty <= 1;\n    end else begin\n      if (nice_req_valid & nice_req_ready) begin\n        itag_fifo[fifo_tail] <= nice_i_itag;\n        fifo_tail <= fifo_tail + 1;\n        fifo_empty <= 0;\n        if (fifo_tail + 1 == fifo_head) fifo_full <= 1;\n      end\n      if (nice_rsp_multicyc_valid & nice_rsp_multicyc_ready) begin\n        fifo_head <= fifo_head + 1;\n        fifo_full <= 0;\n        if (fifo_head + 1 == fifo_tail) fifo_empty <= 1;\n      end\n    end\n  end\n\n  // Multi-cycle response logic\n  assign nice_rsp_multicyc_ready = ~fifo_empty;\n  assign nice_o_itag_valid = ~fifo_empty & nice_rsp_multicyc_valid;\n  assign nice_o_itag = itag_fifo[fifo_head];\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface logic\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 11, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n  // DTCM Interfaces\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n// Submodule instantiations and internal logic would be here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 12, "code": "module e203_cpu (\n  // Core Interfaces\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Other ICB Interface\n  input *_icb_enable,\n  output *_icb_cmd_valid,\n  input *_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output *_icb_cmd_read,\n  output [E203_XLEN-1:0] *_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask,\n  output *_icb_cmd_lock,\n  output *_icb_cmd_excl,\n  output [1:0] *_icb_cmd_size,\n  input *_icb_rsp_valid,\n  output *_icb_rsp_ready,\n  input *_icb_rsp_err,\n  input *_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] *_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 1, "code": "module e203_exu_alu_rglr (\n  input  wire                   alu_i_valid,\n  output wire                   alu_i_ready,\n  input  wire [E203_XLEN-1:0]   alu_i_rs1,\n  input  wire [E203_XLEN-1:0]   alu_i_rs2,\n  input  wire [E203_XLEN-1:0]   alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                   alu_o_valid,\n  input  wire                   alu_o_ready,\n  output wire [E203_XLEN-1:0]   alu_o_wbck_wdat,\n  output wire                   alu_o_wbck_err,\n  output wire                   alu_o_cmt_ecall,\n  output wire                   alu_o_cmt_ebreak,\n  output wire                   alu_o_cmt_wfi,\n  output wire                   alu_req_alu_add,\n  output wire                   alu_req_alu_sub,\n  output wire                   alu_req_alu_xor,\n  output wire                   alu_req_alu_sll,\n  output wire                   alu_req_alu_srl,\n  output wire                   alu_req_alu_sra,\n  output wire                   alu_req_alu_or,\n  output wire                   alu_req_alu_and,\n  output wire                   alu_req_alu_slt,\n  output wire                   alu_req_alu_sltu,\n  output wire                   alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]   alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]   alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]   alu_req_alu_res,\n  input  wire                   clk,\n  input  wire                   rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 13, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n// Submodule instantiations and internal logic would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 3, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO 5 `else 4 `endif;\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 4, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = E203_HAS_MEM_ITF ? 2 : 1;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = (E203_HAS_FIO || E203_HAS_MEM_ITF) ? (E203_HAS_FIO && E203_HAS_MEM_ITF ? 6 : 5) : 4;\n\n  // Instantiate ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 3, "code": "module e203_exu_branchslv(\n  input  cmt_i_valid,\n  output cmt_i_ready,\n  input  cmt_i_rv32,\n  input  cmt_i_dret,\n  input  cmt_i_mret,\n  input  cmt_i_fencei,\n  input  cmt_i_bjp,\n  input  cmt_i_bjp_prdt,\n  input  cmt_i_bjp_rslv,\n  input  [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  [E203_XLEN-1:0] cmt_i_imm,\n  input  [E203_PC_SIZE-1:0] csr_epc_r,\n  input  [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input  clk,\n  input  rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_req;\n\n  assign cmt_i_ready = ~flush_need | (flush_req & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_bjp ? (cmt_i_bjp_prdt ? (cmt_i_rv32 ? 32'd4 : 32'd2) : cmt_i_imm[E203_PC_SIZE-1:0]) : 32'd0;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt) ? (cmt_i_pc + (cmt_i_rv32 ? 32'd4 : 32'd2)) :\n                              (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                              cmt_i_dret ? csr_dpc_r : csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 2, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_ready = longp_wbck_i_valid ? longp_wbck_i_ready : alu_wbck_i_ready;\n  assign wbck_i_wdat  = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 1, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n  wire bjp_i_rv32 = bjp_i_info[E203_DECINFO_RV32];\n\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_rv32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 1, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_op1_imm = csr_i_info[E203_DECINFO_CSR_ZIMMM +: 5];\n  wire [11:0] csr_op1_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX +: 12];\n\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_op1_imm} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_op1_idx;\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) : {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_i_valid;\n\n  assign csr_i_ready = csr_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 1, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]          muldiv_sbf_0_r,\n  output wire [32:0]          muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_res;\n  assign alu_res = (alu_req_alu_add) ? (alu_req_alu_op1 + alu_req_alu_op2) :\n                   (alu_req_alu_sub) ? (alu_req_alu_op1 - alu_req_alu_op2) :\n                   (alu_req_alu_xor) ? (alu_req_alu_op1 ^ alu_req_alu_op2) :\n                   (alu_req_alu_sll) ? (alu_req_alu_op1 << alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_srl) ? (alu_req_alu_op1 >> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_sra) ? (alu_req_alu_op1 >>> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_or)  ? (alu_req_alu_op1 | alu_req_alu_op2) :\n                   (alu_req_alu_and) ? (alu_req_alu_op1 & alu_req_alu_op2) :\n                   0;\n\n  assign alu_req_alu_res = alu_res;\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res;\n  assign bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_res;\n  assign agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  assign muldiv_res = (muldiv_req_alu_add) ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                      (muldiv_req_alu_sub) ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                      0;\n\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 5, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 13, "code": "`ifdef E203_HAS_DTCM\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(1),\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 6, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_dtcm_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 4, "code": "module e203_exu_branchslv (\n  input wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input wire cmt_i_rv32,\n  input wire cmt_i_dret,\n  input wire cmt_i_mret,\n  input wire cmt_i_fencei,\n  input wire cmt_i_bjp,\n  input wire cmt_i_bjp_prdt,\n  input wire cmt_i_bjp_rslv,\n  input wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input wire [E203_XLEN-1:0] cmt_i_imm,\n  input wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input wire nonalu_excpirq_flush_req_raw,\n  input wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input wire clk,\n  input wire rst_n\n);\n\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] next_pc;\n  wire [E203_PC_SIZE-1:0] branch_target;\n\n  assign flush_need = (cmt_i_bjp && (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) || cmt_i_fencei || cmt_i_mret || cmt_i_dret;\n\n  assign branch_target = cmt_i_bjp_rslv ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) : (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  assign next_pc = cmt_i_dret ? csr_dpc_r :\n                   cmt_i_mret ? csr_epc_r :\n                   branch_target;\n\n  assign brchmis_flush_req = flush_need && cmt_i_valid && !nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = next_pc;\n\n  assign cmt_mret_ena = cmt_i_mret && brchmis_flush_req && brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret && brchmis_flush_req && brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei && brchmis_flush_req && brchmis_flush_ack;\n\n  assign cmt_i_ready = !cmt_i_bjp && !cmt_i_fencei && !cmt_i_mret && !cmt_i_dret ||\n                       (!nonalu_excpirq_flush_req_raw && !flush_need) ||\n                       (!nonalu_excpirq_flush_req_raw && brchmis_flush_ack);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 5, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                    cmt_i_fencei |\n                    cmt_i_mret |\n                    cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n                                (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n                                (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n                                (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                                cmt_i_dret ? csr_dpc_r : csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 1, "code": "module e203_reset_ctrl #(\n  parameter MASTER = 1,\n  parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  output wire rst_core,\n`ifdef E203_HAS_ITCM\n  output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n  output wire rst_dtcm,\n`endif\n  output wire rst_aon\n);\n\n  wire async_rst_n = test_mode ? rst_n : 1'b1;\n  reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n  always @(posedge clk or negedge async_rst_n) begin\n    if (!async_rst_n) begin\n      rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n    end else begin\n      rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n    end\n  end\n\n  wire sync_rst_n = MASTER ? rst_sync[RST_SYNC_LEVEL-1] : rst_n;\n\n  assign rst_core = sync_rst_n;\n`ifdef E203_HAS_ITCM\n  assign rst_itcm = sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n  assign rst_dtcm = sync_rst_n;\n`endif\n  assign rst_aon = sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 2, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // ALU operation request signals\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection logic\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Special instruction handling\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result retrieval\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 14, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 2, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add = bjp_i_jump;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 1, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 1, "code": "`include \"e203_defines.v\"\n\nmodule e203_srams (\n  // ITCM RAM Interface\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  // DTCM RAM Interface\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n  // ITCM RAM Module\n  generate\n    if (E203_HAS_ITCM) begin: itcm_ram_block\n      e203_itcm_ram u_itcm_ram (\n        .sd(itcm_ram_sd),\n        .ds(itcm_ram_ds),\n        .ls(itcm_ram_ls),\n        .cs(itcm_ram_cs),\n        .we(itcm_ram_we),\n        .addr(itcm_ram_addr),\n        .wem(itcm_ram_wem),\n        .din(itcm_ram_din),\n        .dout(itcm_ram_dout),\n        .rst_n(~rst_itcm),\n        .clk(clk_itcm_ram)\n      );\n    end\n  endgenerate\n\n  // DTCM RAM Module\n  generate\n    if (E203_HAS_DTCM) begin: dtcm_ram_block\n      e203_dtcm_ram u_dtcm_ram (\n        .sd(dtcm_ram_sd),\n        .ds(dtcm_ram_ds),\n        .ls(dtcm_ram_ls),\n        .cs(dtcm_ram_cs),\n        .we(dtcm_ram_we),\n        .addr(dtcm_ram_addr),\n        .wem(dtcm_ram_wem),\n        .din(dtcm_ram_din),\n        .dout(dtcm_ram_dout),\n        .rst_n(~rst_dtcm),\n        .clk(clk_dtcm_ram)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 15, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n  // Submodule instantiations and internal logic go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 16, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Other ICB Interface\n  input clk,\n  input rst_n\n);\n\n// Submodule instantiations and internal logic would go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 5, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n// Local parameters\nlocalparam BIU_ARBT_I_NUM = (E203_HAS_MEM_ITF) ? 2 : 1;\nlocalparam BIU_ARBT_I_PTR_W = 1;\nlocalparam BIU_SPLT_I_NUM = (E203_HAS_FIO || E203_HAS_MEM_ITF) ? 5 : 4;\n\n// ICB Arbiter\nsirv_gnrl_icb_arbt #(\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .ARBT_NUM(BIU_ARBT_I_NUM),\n  .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n  .USR_W(1),\n  .ARBT_SCHEME(0),\n  .ALLOW_0CYCL_RSP(0),\n  .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n  .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n) u_icb_arbt (\n  .o_icb_cmd_valid(),\n  .o_icb_cmd_ready(),\n  .o_icb_cmd_read(),\n  .o_icb_cmd_addr(),\n  .o_icb_cmd_wdata(),\n  .o_icb_cmd_wmask(),\n  .o_icb_rsp_valid(),\n  .o_icb_rsp_ready(),\n  .i_bus_icb_cmd_valid(),\n  .i_bus_icb_cmd_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// ICB Buffer\nsirv_gnrl_icb_buffer #(\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .USR_W(1),\n  .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n  .CMD_DP(E203_BIU_CMD_DP),\n  .RSP_DP(E203_BIU_RSP_DP),\n  .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n  .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n) u_icb_buffer (\n  .icb_buffer_active(),\n  .i_icb_cmd_valid(),\n  .i_icb_cmd_ready(),\n  .i_icb_cmd_read(),\n  .i_icb_cmd_addr(),\n  .i_icb_cmd_wdata(),\n  .i_icb_cmd_wmask(),\n  .i_icb_rsp_valid(),\n  .i_icb_rsp_ready(),\n  .o_icb_cmd_valid(),\n  .o_icb_cmd_ready(),\n  .o_icb_rsp_valid(),\n  .o_icb_rsp_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// ICB Splitter\nsirv_gnrl_icb_splt #(\n  .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n  .SPLT_PTR_W(BIU_SPLT_I_NUM),\n  .USR_W(1),\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .ALLOW_DIFF(0),\n  .ALLOW_0CYCL_RSP(1),\n  .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n  .SPLT_NUM(BIU_SPLT_I_NUM),\n  .SPLT_PTR_1HOT(1)\n) u_icb_splt (\n  .i_icb_splt_indic(),\n  .i_icb_cmd_valid(),\n  .i_icb_cmd_ready(),\n  .i_icb_cmd_read(),\n  .i_icb_cmd_addr(),\n  .i_icb_cmd_wdata(),\n  .i_icb_cmd_wmask(),\n  .i_icb_rsp_valid(),\n  .i_icb_rsp_ready(),\n  .o_bus_icb_cmd_valid(),\n  .o_bus_icb_cmd_ready(),\n  .o_bus_icb_rsp_valid(),\n  .o_bus_icb_rsp_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 3, "code": "module e203_exu_wbck(\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 2, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_wen, fifo_ren;\n  wire fifo_full, fifo_empty;\n  wire [E203_ITAG_WIDTH-1:0] fifo_din, fifo_dout;\n\n  // FIFO instance for instruction tags\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) itag_fifo (\n    .i_vld(fifo_wen),\n    .i_rdy(fifo_full),\n    .i_dat(fifo_din),\n    .o_vld(fifo_ren),\n    .o_rdy(fifo_empty),\n    .o_dat(fifo_dout),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // Instruction tag handling\n  assign fifo_wen = nice_req_valid & nice_req_ready;\n  assign fifo_din = nice_i_itag;\n  assign fifo_ren = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_ren;\n  assign nice_o_itag = fifo_dout;\n  assign nice_rsp_multicyc_ready = ~fifo_empty;\n\n  // Output signals\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 1, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculation\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc :\n                           (dec_jalr & (dec_jalr_rs1idx == 5'b00000)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 5'b00001)) ? rf2bpu_x1 :\n                           rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency and wait logic\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr | ~ir_rs1en;\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 5'b00001) & jalr_rs1xn_dep) |\n                    (dec_jalr & (dec_jalr_rs1idx != 5'b00000) & (dec_jalr_rs1idx != 5'b00001) & (jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr));\n\n  // Register read state management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 5'b00000) & (dec_jalr_rs1idx != 5'b00001) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Trigger module for rs1xn_rdrf_r\n  sirv_gnrl_dfflr #(.DW(1)) u_rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Register file read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 14, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 2, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync_reg;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync_reg <= {RST_SYNC_LEVEL{1'b1}};\n        end else if (test_mode) begin\n            rst_sync_reg <= {RST_SYNC_LEVEL{1'b0}};\n        end else begin\n            rst_sync_reg <= {rst_sync_reg[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    wire rst_sync = rst_sync_reg[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? ~rst_n : rst_sync;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = test_mode ? ~rst_n : rst_sync;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = test_mode ? ~rst_n : rst_sync;\n`endif\n    assign rst_aon = test_mode ? ~rst_n : rst_sync;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 3, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    `ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n    `endif\n    `ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n    `endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin : gen_master_mode\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n) begin\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                end else begin\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n                end\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin : gen_slave_mode\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    wire rst_final_n = test_mode ? rst_n : rst_sync_n;\n\n    assign rst_core = ~rst_final_n;\n    `ifdef E203_HAS_ITCM\n    assign rst_itcm = ~rst_final_n;\n    `endif\n    `ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~rst_final_n;\n    `endif\n    assign rst_aon = ~rst_final_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 1, "code": "module e203_itcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  // Instantiate the generic RAM module\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 1, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read operations\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write operation\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 3, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 7, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Arbitration logic\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 4, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 4, "code": "module e203_exu_alu_rglr (\n  input  wire                 alu_i_valid,\n  output wire                 alu_i_ready,\n  input  wire [E203_XLEN-1:0] alu_i_rs1,\n  input  wire [E203_XLEN-1:0] alu_i_rs2,\n  input  wire [E203_XLEN-1:0] alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                 alu_o_valid,\n  input  wire                 alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire                 alu_o_wbck_err,\n  output wire                 alu_o_cmt_ecall,\n  output wire                 alu_o_cmt_ebreak,\n  output wire                 alu_o_cmt_wfi,\n  output wire                 alu_req_alu_add,\n  output wire                 alu_req_alu_sub,\n  output wire                 alu_req_alu_xor,\n  output wire                 alu_req_alu_sll,\n  output wire                 alu_req_alu_srl,\n  output wire                 alu_req_alu_sra,\n  output wire                 alu_req_alu_or,\n  output wire                 alu_req_alu_and,\n  output wire                 alu_req_alu_slt,\n  output wire                 alu_req_alu_sltu,\n  output wire                 alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 2, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine declarations\n  // ...\n\n  // Address Generation Logic\n  // ...\n\n  // AMO Operations Logic\n  // ...\n\n  // Exception Handling Logic\n  // ...\n\n  // LSU Interface Logic\n  // ...\n\n  // Write-Back Interface Logic\n  // ...\n\n  // State Machine Logic\n  // ...\n\n  // Clock and Reset Logic\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 3, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 6, "code": "module e203_exu_branchslv(\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret | flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_bjp & ~cmt_i_bjp_prdt ? cmt_i_imm[E203_PC_SIZE-1:0] : (cmt_i_rv32 ? 32'd4 : 32'd2);\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = \n      cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt) ? (cmt_i_pc + (cmt_i_rv32 ? 32'd4 : 32'd2)) :\n      cmt_i_bjp & ~cmt_i_bjp_prdt ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n      cmt_i_dret ? csr_dpc_r :\n      csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 7, "code": "module e203_exu_branchslv(\n  input  cmt_i_valid,\n  output cmt_i_ready,\n  input  cmt_i_rv32,\n  input  cmt_i_dret,\n  input  cmt_i_mret,\n  input  cmt_i_fencei,\n  input  cmt_i_bjp,\n  input  cmt_i_bjp_prdt,\n  input  cmt_i_bjp_rslv,\n  input  [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  [E203_XLEN-1:0] cmt_i_imm,\n  input  [E203_PC_SIZE-1:0] csr_epc_r,\n  input  [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input  clk,\n  input  rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                    cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = (cmt_i_dret) ? csr_dpc_r :\n                                 (cmt_i_mret) ? csr_epc_r :\n                                 (cmt_i_bjp & cmt_i_bjp_prdt) ? cmt_i_pc + (cmt_i_rv32 ? 4 : 2) :\n                                 cmt_i_pc;\n  assign brchmis_flush_add_op2 = (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm[E203_PC_SIZE-1:0] : 0;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n                              (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                              (cmt_i_dret) ? csr_dpc_r :\n                              csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 3, "code": "module e203_exu_alu_lsuagu (\n  input  wire                     agu_i_valid,\n  output wire                     agu_i_ready,\n  input  wire [E203_XLEN-1:0]     agu_i_rs1,\n  input  wire [E203_XLEN-1:0]     agu_i_rs2,\n  input  wire [E203_XLEN-1:0]     agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                     agu_i_longpipe,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  output wire                     agu_o_valid,\n  input  wire                     agu_o_ready,\n  output wire [E203_XLEN-1:0]     agu_o_wbck_wdat,\n  output wire                     agu_o_wbck_err,\n  output wire                     agu_o_cmt_misalgn,\n  output wire                     agu_o_cmt_ld,\n  output wire                     agu_o_cmt_stamo,\n  output wire                     agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                     agu_icb_cmd_usign,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]     agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]     agu_req_alu_op2,\n  output wire                     agu_req_alu_swap,\n  output wire                     agu_req_alu_add,\n  output wire                     agu_req_alu_and,\n  output wire                     agu_req_alu_or,\n  output wire                     agu_req_alu_xor,\n  output wire                     agu_req_alu_max,\n  output wire                     agu_req_alu_min,\n  output wire                     agu_req_alu_maxu,\n  output wire                     agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_res,\n  output wire                     agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]     agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]     agu_sbf_0_r,\n  output wire                     agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]     agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]     agu_sbf_1_r,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals and logic for the AGU module\n  // Define the state machine and other logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 19, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  assign clk_aon = clk;\n  assign clk_core_ifu = ifu_clk_en ? clk : 1'b0;\n  assign clk_core_exu = exu_clk_en ? clk : 1'b0;\n  assign clk_core_lsu = lsu_clk_en ? clk : 1'b0;\n  assign clk_core_biu = biu_clk_en ? clk : 1'b0;\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itcm_active_r <= 1'b0;\n    end else begin\n      itcm_active_r <= itcm_active;\n    end\n  end\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n  assign clk_itcm = itcm_clk_en ? clk : 1'b0;\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dtcm_active_r <= 1'b0;\n    end else begin\n      dtcm_active_r <= dtcm_active;\n    end\n  end\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n  assign clk_dtcm = dtcm_clk_en ? clk : 1'b0;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 2, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  // CSR read enable logic\n  assign csr_rd_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  // CSR write enable logic\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  // CSR index\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // CSR enable\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  // Write-back CSR data\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) : {E203_XLEN{1'b0}};\n\n  // CSR output valid\n  assign csr_o_valid = csr_i_valid & csr_o_ready;\n\n  // CSR output write-back data\n  assign csr_o_wbck_wdat = read_csr_dat;\n\n  // CSR output write-back error\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // Handshake signals\n  assign csr_i_ready = csr_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 2, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 3, "code": "module e203_srams (\n  input  wire itcm_ram_sd,\n  input  wire itcm_ram_ds,\n  input  wire itcm_ram_ls,\n  input  wire itcm_ram_cs,\n  input  wire itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire clk_itcm_ram,\n  input  wire rst_itcm,\n\n  input  wire dtcm_ram_sd,\n  input  wire dtcm_ram_ds,\n  input  wire dtcm_ram_ls,\n  input  wire dtcm_ram_cs,\n  input  wire dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire clk_dtcm_ram,\n  input  wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 1, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // No operations in lockstep mode\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 15, "code": "module e203_cpu_top(\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the e203_srams module for ITCM and DTCM management\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0), // Assuming low-power mode is not used\n    .itcm_ram_cs(ext2itcm_icb_cmd_valid),\n    .itcm_ram_we(~ext2itcm_icb_cmd_read),\n    .itcm_ram_addr(ext2itcm_icb_cmd_addr),\n    .itcm_ram_wem(ext2itcm_icb_cmd_wmask),\n    .itcm_ram_din(ext2itcm_icb_cmd_wdata),\n    .itcm_ram_dout(ext2itcm_icb_rsp_rdata),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(1'b0), // Assuming DTCM is not used\n    .dtcm_ram_ds(1'b0),\n    .dtcm_ram_ls(1'b0),\n    .dtcm_ram_cs(1'b0),\n    .dtcm_ram_we(1'b0),\n    .dtcm_ram_addr({E203_DTCM_RAM_AW{1'b0}}),\n    .dtcm_ram_wem({E203_DTCM_RAM_MW{1'b0}}),\n    .dtcm_ram_din({E203_DTCM_RAM_DW{1'b0}}),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(1'b0)\n  );\n\n  // ITCM ICB interface logic\n  assign ext2itcm_icb_cmd_ready = 1'b1; // Always ready to accept commands\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_cmd_valid; // Response valid when command is valid\n  assign ext2itcm_icb_rsp_err = 1'b0; // No error in this simple example\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 1, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 6, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n// Local parameters\nlocalparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\nlocalparam BIU_ARBT_I_PTR_W = 1;\nlocalparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO 5 `else 4 `endif + `ifdef E203_HAS_MEM_ITF 1 `else 0 `endif;\n\n// ICB Arbiter\nsirv_gnrl_icb_arbt #(\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .ARBT_NUM(BIU_ARBT_I_NUM),\n  .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n  .USR_W(1),\n  .ARBT_SCHEME(0),\n  .ALLOW_0CYCL_RSP(0),\n  .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n  .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n) u_icb_arbt (\n  .o_icb_cmd_valid(),\n  .o_icb_cmd_ready(),\n  .o_icb_cmd_read(),\n  .o_icb_cmd_addr(),\n  .o_icb_cmd_wdata(),\n  .o_icb_cmd_wmask(),\n  .o_icb_rsp_valid(),\n  .o_icb_rsp_ready(),\n  .i_bus_icb_cmd_valid(),\n  .i_bus_icb_cmd_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// ICB Buffer\nsirv_gnrl_icb_buffer #(\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .USR_W(1),\n  .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n  .CMD_DP(E203_BIU_CMD_DP),\n  .RSP_DP(E203_BIU_RSP_DP),\n  .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n  .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n) u_icb_buffer (\n  .icb_buffer_active(),\n  .i_icb_cmd_valid(),\n  .i_icb_cmd_ready(),\n  .i_icb_cmd_read(),\n  .i_icb_cmd_addr(),\n  .i_icb_cmd_wdata(),\n  .i_icb_cmd_wmask(),\n  .i_icb_rsp_valid(),\n  .i_icb_rsp_ready(),\n  .o_icb_cmd_valid(),\n  .o_icb_cmd_ready(),\n  .o_icb_rsp_valid(),\n  .o_icb_rsp_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// ICB Splitter\nsirv_gnrl_icb_splt #(\n  .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n  .SPLT_PTR_W(BIU_SPLT_I_NUM),\n  .USR_W(1),\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .ALLOW_DIFF(0),\n  .ALLOW_0CYCL_RSP(1),\n  .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n  .SPLT_NUM(BIU_SPLT_I_NUM),\n  .SPLT_PTR_1HOT(1)\n) u_icb_splt (\n  .i_icb_splt_indic(),\n  .i_icb_cmd_valid(),\n  .i_icb_cmd_ready(),\n  .i_icb_cmd_read(),\n  .i_icb_cmd_addr(),\n  .i_icb_cmd_wdata(),\n  .i_icb_cmd_wmask(),\n  .i_icb_rsp_valid(),\n  .i_icb_rsp_ready(),\n  .o_bus_icb_cmd_valid(),\n  .o_bus_icb_cmd_ready(),\n  .o_bus_icb_rsp_valid(),\n  .o_bus_icb_rsp_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 3, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_i_rdwen :\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC];\n  assign csr_rd_en = csr_i_valid & csr_rd_en_raw;\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n  assign csr_wr_en = csr_i_valid & csr_wr_en_raw;\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) : {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 1, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  input clk,\n  input rst_n\n);\n\n// Submodule instantiations and internal logic would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 5, "code": "module e203_exu_alu_rglr(\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Decode ALU operation type\n  wire op_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  wire op_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  wire op_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  wire op_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  wire op_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  wire op_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  wire op_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  wire op_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  wire op_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  wire op_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  wire op_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add  = op_add;\n  assign alu_req_alu_sub  = op_sub;\n  assign alu_req_alu_xor  = op_xor;\n  assign alu_req_alu_sll  = op_sll;\n  assign alu_req_alu_srl  = op_srl;\n  assign alu_req_alu_sra  = op_sra;\n  assign alu_req_alu_or   = op_or;\n  assign alu_req_alu_and  = op_and;\n  assign alu_req_alu_slt  = op_slt;\n  assign alu_req_alu_sltu = op_sltu;\n  assign alu_req_alu_lui  = op_lui;\n\n  // Special instructions\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result from shared data path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 7, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO 5 `else 4 `endif;\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, ifu_icb_cmd_valid}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, ifu_icb_cmd_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_sirv_gnrl_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 16, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_internal;\n  wire core_wfi_internal;\n  wire tm_stop_internal;\n  wire dbg_irq_r_internal;\n  wire ext_irq_a_internal;\n  wire sft_irq_a_internal;\n  wire tmr_irq_a_internal;\n  wire tcm_sd_internal;\n  wire tcm_ds_internal;\n  wire ext2itcm_icb_cmd_valid_internal;\n  wire ext2itcm_icb_cmd_ready_internal;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr_internal;\n  wire ext2itcm_icb_cmd_read_internal;\n  wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata_internal;\n  wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask_internal;\n  wire ext2itcm_icb_rsp_valid_internal;\n  wire ext2itcm_icb_rsp_ready_internal;\n  wire ext2itcm_icb_rsp_err_internal;\n  wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata_internal;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_internal),\n    .core_wfi(core_wfi_internal),\n    .tm_stop(tm_stop_internal),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r_internal),\n    .ext_irq_a(ext_irq_a_internal),\n    .sft_irq_a(sft_irq_a_internal),\n    .tmr_irq_a(tmr_irq_a_internal),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid_internal),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready_internal),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr_internal),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read_internal),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata_internal),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask_internal),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid_internal),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready_internal),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err_internal),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata_internal),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_internal;\n  assign core_wfi = core_wfi_internal;\n  assign tm_stop = tm_stop_internal;\n  assign dbg_irq_r = dbg_irq_r_internal;\n\n  // Assign inputs\n  assign ext_irq_a_internal = ext_irq_a;\n  assign sft_irq_a_internal = sft_irq_a;\n  assign tmr_irq_a_internal = tmr_irq_a;\n  assign tcm_sd_internal = tcm_sd;\n  assign tcm_ds_internal = tcm_ds;\n  assign ext2itcm_icb_cmd_valid_internal = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_cmd_ready = ext2itcm_icb_cmd_ready_internal;\n  assign ext2itcm_icb_cmd_addr_internal = ext2itcm_icb_cmd_addr;\n  assign ext2itcm_icb_cmd_read_internal = ext2itcm_icb_cmd_read;\n  assign ext2itcm_icb_cmd_wdata_internal = ext2itcm_icb_cmd_wdata;\n  assign ext2itcm_icb_cmd_wmask_internal = ext2itcm_icb_cmd_wmask;\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_rsp_valid_internal;\n  assign ext2itcm_icb_rsp_ready_internal = ext2itcm_icb_rsp_ready;\n  assign ext2itcm_icb_rsp_err = ext2itcm_icb_rsp_err_internal;\n  assign ext2itcm_icb_rsp_rdata = ext2itcm_icb_rsp_rdata_internal;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 4, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n\n  assign csr_rd_en = csr_i_valid & csr_rd_en_raw;\n  assign csr_wr_en = csr_i_valid & csr_wr_en_raw;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) : 0;\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 3, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 4, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // Operand Selection\n  wire [E203_XLEN-1:0] op1 = (bjp_i_info[E203_DECINFO_BJP_JUMP]) ? bjp_i_pc : bjp_i_rs1;\n  wire [E203_XLEN-1:0] op2 = (bjp_i_info[E203_DECINFO_BJP_JUMP]) ? \n                             ((bjp_i_info[E203_DECINFO_RV32]) ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // ALU Requests\n  assign bjp_req_alu_op1 = op1;\n  assign bjp_req_alu_op2 = op2;\n  assign bjp_req_alu_cmp_eq = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  assign bjp_req_alu_cmp_ne = bjp_i_info[E203_DECINFO_BJP_BNE];\n  assign bjp_req_alu_cmp_lt = bjp_i_info[E203_DECINFO_BJP_BLT];\n  assign bjp_req_alu_cmp_gt = bjp_i_info[E203_DECINFO_BJP_BGT];\n  assign bjp_req_alu_cmp_ltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  assign bjp_req_alu_cmp_gtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  assign bjp_req_alu_add = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  // BJP resolved result\n  wire bjp_resolved = (bjp_i_info[E203_DECINFO_BJP_JUMP]) ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp = bjp_i_info[E203_DECINFO_BJP_BXX] | bjp_i_info[E203_DECINFO_BJP_JUMP];\n  assign bjp_o_cmt_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n  assign bjp_o_cmt_rslv = bjp_resolved;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 2, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include the global configuration file\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : gen_master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // Lockstep mode: no operation\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          // Synchronize interrupt signals\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // Direct pass-through\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : gen_slave_mode\n      // Slave mode: direct pass-through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 8, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = (E203_HAS_MEM_ITF ? 2 : 1);\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = (E203_HAS_FIO ? (E203_HAS_MEM_ITF ? 6 : 5) : (E203_HAS_MEM_ITF ? 5 : 4));\n\n  // Instantiate ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 17, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n\n  // DTCM Interfaces (Optional)\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Other ICB Interface\n  input *_icb_enable,\n  output *_icb_cmd_valid,\n  input *_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output *_icb_cmd_read,\n  output [E203_XLEN-1:0] *_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask,\n  output *_icb_cmd_lock,\n  output *_icb_cmd_excl,\n  output [1:0] *_icb_cmd_size,\n  input *_icb_rsp_valid,\n  output *_icb_rsp_ready,\n  input *_icb_rsp_err,\n  input *_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] *_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 4, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n;\n    wire sync_rst_n;\n\n    // Test mode handling: bypass synchronization\n    assign async_rst_n = test_mode ? rst_n : 1'b1;\n\n    // Reset synchronization mechanism\n    generate\n        if (MASTER) begin: master_reset_sync\n            reg [RST_SYNC_LEVEL-1:0] rst_sync_reg;\n            always @(posedge clk or negedge async_rst_n) begin\n                if (!async_rst_n)\n                    rst_sync_reg <= {RST_SYNC_LEVEL{1'b0}};\n                else\n                    rst_sync_reg <= {rst_sync_reg[RST_SYNC_LEVEL-2:0], 1'b1};\n            end\n            assign sync_rst_n = rst_sync_reg[RST_SYNC_LEVEL-1];\n        end else begin: slave_reset_sync\n            assign sync_rst_n = async_rst_n;\n        end\n    endgenerate\n\n    // Reset signal distribution\n    assign rst_core = sync_rst_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = sync_rst_n;\n`endif\n    assign rst_aon = sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 2, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 4, "code": "module e203_exu_alu (\n  input  i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input  nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input  [31:0] nice_csr_rdata,\n  input  nice_xs_off,\n  output amo_wait,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] i_itag,\n  input  [E203_XLEN-1:0] i_rs1,\n  input  [E203_XLEN-1:0] i_rs2,\n  input  [E203_XLEN-1:0] i_imm,\n  input  [E203_DECINFO_WIDTH-1:0] i_info,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  i_pc_vld,\n  input  [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  i_rdwen,\n  input  i_ilegl,\n  input  i_buserr,\n  input  i_misalgn,\n  input  flush_req,\n  input  flush_pulse,\n  output cmt_o_valid,\n  input  cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input  wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input  nonflush_cmt_ena,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input  nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input  nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input  nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  i_nice_cmt_off_ilgl,\n  input  clk,\n  input  rst_n\n);\n\n  // Instantiate submodules here\n  // e203_exu_alu_csrctrl\n  // e203_exu_alu_bjp\n  // e203_exu_alu_lsuagu\n  // e203_exu_alu_rglr\n  // e203_exu_alu_muldiv (optional)\n  // e203_exu_nice (optional)\n  // e203_exu_alu_dpath\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 8, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_req;\n  assign cmt_i_ready = ~flush_req | flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_bjp ? (cmt_i_bjp_prdt ? (cmt_i_rv32 ? 32'd4 : 32'd2) : cmt_i_imm[E203_PC_SIZE-1:0]) : 32'd0;\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'd4 : 32'd2)) :\n                                (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                                cmt_i_dret ? csr_dpc_r : csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 5, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\n  // ALU Request Generation\n  wire is_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire is_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire is_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire is_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire is_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire is_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire is_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire is_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire is_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire is_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire is_fencei= bjp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  assign bjp_req_alu_cmp_eq  = is_beq;\n  assign bjp_req_alu_cmp_ne  = is_bne;\n  assign bjp_req_alu_cmp_lt  = is_blt;\n  assign bjp_req_alu_cmp_gt  = is_bgt;\n  assign bjp_req_alu_cmp_ltu = is_bltu;\n  assign bjp_req_alu_cmp_gtu = is_bgtu;\n  assign bjp_req_alu_add     = is_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = is_jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = is_bxx || is_jump;\n  assign bjp_o_cmt_mret   = is_mret;\n  assign bjp_o_cmt_dret   = is_dret;\n  assign bjp_o_cmt_fencei = is_fencei;\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 4, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 2, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 6, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Decode instruction type\n  wire is_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  wire is_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  wire is_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  wire is_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  wire is_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  wire is_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  wire is_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  wire is_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  wire is_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  wire is_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  wire is_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation request signals\n  assign alu_req_alu_add  = is_add;\n  assign alu_req_alu_sub  = is_sub;\n  assign alu_req_alu_xor  = is_xor;\n  assign alu_req_alu_sll  = is_sll;\n  assign alu_req_alu_srl  = is_srl;\n  assign alu_req_alu_sra  = is_sra;\n  assign alu_req_alu_or   = is_or;\n  assign alu_req_alu_and  = is_and;\n  assign alu_req_alu_slt  = is_slt;\n  assign alu_req_alu_sltu = is_sltu;\n  assign alu_req_alu_lui  = is_lui;\n\n  // Special instructions\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 5, "code": "module e203_srams (\n  input  wire itcm_ram_sd,\n  input  wire itcm_ram_ds,\n  input  wire itcm_ram_ls,\n  input  wire itcm_ram_cs,\n  input  wire itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire clk_itcm_ram,\n  input  wire rst_itcm,\n\n  input  wire dtcm_ram_sd,\n  input  wire dtcm_ram_ds,\n  input  wire dtcm_ram_ls,\n  input  wire dtcm_ram_cs,\n  input  wire dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire clk_dtcm_ram,\n  input  wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 9, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable,\n`endif\n\n  // Internal signals for arbitration, buffering, and splitting\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, ifu_icb_cmd_valid}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, ifu_icb_cmd_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Error handling and other logic can be added here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 8, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n\n  // DTCM RAM Interface\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals for arbitration\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter instantiation\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller instantiation\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 10, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n// Local parameters\nlocalparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\nlocalparam BIU_ARBT_I_PTR_W = 1;\nlocalparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO `ifdef E203_HAS_MEM_ITF 6 `else 5 `endif `else `ifdef E203_HAS_MEM_ITF 5 `else 4 `endif `endif;\n\n// ICB Arbiter\nsirv_gnrl_icb_arbt #(\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .ARBT_NUM(BIU_ARBT_I_NUM),\n  .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n  .USR_W(1),\n  .ARBT_SCHEME(0),\n  .ALLOW_0CYCL_RSP(0),\n  .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n  .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n) u_icb_arbt (\n  .o_icb_cmd_valid(),\n  .o_icb_cmd_ready(),\n  .o_icb_cmd_read(),\n  .o_icb_cmd_addr(),\n  .o_icb_cmd_wdata(),\n  .o_icb_cmd_wmask(),\n  .o_icb_rsp_valid(),\n  .o_icb_rsp_ready(),\n  .i_bus_icb_cmd_valid(),\n  .i_bus_icb_cmd_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// ICB Buffer\nsirv_gnrl_icb_buffer #(\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .USR_W(1),\n  .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n  .CMD_DP(E203_BIU_CMD_DP),\n  .RSP_DP(E203_BIU_RSP_DP),\n  .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n  .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n) u_icb_buffer (\n  .icb_buffer_active(),\n  .i_icb_cmd_valid(),\n  .i_icb_cmd_ready(),\n  .i_icb_cmd_read(),\n  .i_icb_cmd_addr(),\n  .i_icb_cmd_wdata(),\n  .i_icb_cmd_wmask(),\n  .i_icb_rsp_valid(),\n  .i_icb_rsp_ready(),\n  .o_icb_cmd_valid(),\n  .o_icb_cmd_ready(),\n  .o_icb_rsp_valid(),\n  .o_icb_rsp_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// ICB Splitter\nsirv_gnrl_icb_splt #(\n  .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n  .SPLT_PTR_W(BIU_SPLT_I_NUM),\n  .USR_W(1),\n  .AW(E203_ADDR_SIZE),\n  .DW(E203_XLEN),\n  .ALLOW_DIFF(0),\n  .ALLOW_0CYCL_RSP(1),\n  .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n  .SPLT_NUM(BIU_SPLT_I_NUM),\n  .SPLT_PTR_1HOT(1)\n) u_icb_splt (\n  .i_icb_splt_indic(),\n  .i_icb_cmd_valid(),\n  .i_icb_cmd_ready(),\n  .i_icb_cmd_read(),\n  .i_icb_cmd_addr(),\n  .i_icb_cmd_wdata(),\n  .i_icb_cmd_wmask(),\n  .i_icb_rsp_valid(),\n  .i_icb_rsp_ready(),\n  .o_bus_icb_cmd_valid(),\n  .o_bus_icb_cmd_ready(),\n  .o_bus_icb_rsp_valid(),\n  .o_bus_icb_rsp_ready(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 6, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .rst_n(rst_itcm),\n    .clk(clk_itcm_ram)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .rst_n(rst_dtcm),\n    .clk(clk_dtcm_ram)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 5, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign longp_wbck_i_ready = ~alu_wbck_i_valid | longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 3, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_INSTR_SIZE-1:0] i_instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc;\n  wire i_prdt_taken;\n  wire i_muldiv_b2b;\n  wire i_misalgn;\n  wire i_buserr;\n  wire dbg_mode;\n\n  // Assign fixed values to internal signals\n  assign i_instr = instr;\n  assign i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  assign i_prdt_taken = 1'b0;\n  assign i_muldiv_b2b = 1'b0;\n  assign i_misalgn = 1'b0;\n  assign i_buserr = 1'b0;\n  assign dbg_mode = 1'b0;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused signals are not connected\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 6, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = |{beq, bne, blt, bgt, bltu, bgtu, jump};\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 4, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(32'b0),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 3, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : gen_master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // No operations in lockstep mode\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a  (ext_irq_a),\n            .dout   (ext_irq_r),\n            .rst_n  (rst_n),\n            .clk    (clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a  (sft_irq_a),\n            .dout   (sft_irq_r),\n            .rst_n  (rst_n),\n            .clk    (clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a  (tmr_irq_a),\n            .dout   (tmr_irq_r),\n            .rst_n  (rst_n),\n            .clk    (clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a  (dbg_irq_a),\n            .dout   (dbg_irq_r),\n            .rst_n  (rst_n),\n            .clk    (clk)\n          );\n        `else\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : gen_slave_mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 9, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr  ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 2, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n  wire jalr_rs1xn_dep_clr = jalr_rs1xn_dep_ir_clr | (~jalr_rs1xn_dep);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep_clr;\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1xn_rdrf_r = dec_jalr_rs1xn & rs1xn_rdrf_r;\n  assign bpu_wait = dec_jalr & (dec_jalr_rs1x1 & (~oitf_empty) & jalr_rs1idx_cam_irrdidx) | jalr_rs1xn_rdrf_r;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n                         | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & 32'b0)\n                         | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n                         | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 10, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 11, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n`endif\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO 5 `else 4 `endif;\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, `ifdef E203_HAS_MEM_ITF ifu_icb_cmd_valid `endif}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, `ifdef E203_HAS_MEM_ITF ifu_icb_cmd_ready `endif}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 12, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n`endif\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO `ifdef E203_HAS_MEM_ITF 6 `else 5 `endif `else `ifdef E203_HAS_MEM_ITF 5 `else 4 `endif `endif;\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 13, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable,\n`endif\n\n  // Internal signals for arbitration, buffering, and splitting\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, ifu_icb_cmd_valid}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, ifu_icb_cmd_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_sirv_gnrl_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 7, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add = bjp_i_jump;\n\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 14, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable,\n`endif\n\n  // ICB Arbiter\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // ICB Buffer\n  wire buf_icb_cmd_valid;\n  wire buf_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] buf_icb_cmd_addr;\n  wire buf_icb_cmd_read;\n  wire [E203_XLEN-1:0] buf_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] buf_icb_cmd_wmask;\n  wire [1:0] buf_icb_cmd_burst;\n  wire [1:0] buf_icb_cmd_beat;\n  wire buf_icb_cmd_lock;\n  wire buf_icb_cmd_excl;\n  wire [1:0] buf_icb_cmd_size;\n  wire buf_icb_rsp_valid;\n  wire buf_icb_rsp_ready;\n  wire buf_icb_rsp_err;\n  wire buf_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] buf_icb_rsp_rdata;\n\n  // ICB Splitter\n  wire splt_icb_cmd_valid;\n  wire splt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] splt_icb_cmd_addr;\n  wire splt_icb_cmd_read;\n  wire [E203_XLEN-1:0] splt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] splt_icb_cmd_wmask;\n  wire [1:0] splt_icb_cmd_burst;\n  wire [1:0] splt_icb_cmd_beat;\n  wire splt_icb_cmd_lock;\n  wire splt_icb_cmd_excl;\n  wire [1:0] splt_icb_cmd_size;\n  wire splt_icb_rsp_valid;\n  wire splt_icb_rsp_ready;\n  wire splt_icb_rsp_err;\n  wire splt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] splt_icb_rsp_rdata;\n\n  // Instantiate ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, ifu_icb_cmd_valid}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, ifu_icb_cmd_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(buf_icb_cmd_valid),\n    .o_icb_cmd_ready(buf_icb_cmd_ready),\n    .o_icb_rsp_valid(buf_icb_rsp_valid),\n    .o_icb_rsp_ready(buf_icb_rsp_ready),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_sirv_gnrl_icb_splt (\n    .i_icb_splt_indic({ppi_region_indic, clint_region_indic, plic_region_indic}),\n    .i_icb_cmd_valid(buf_icb_cmd_valid),\n    .i_icb_cmd_ready(buf_icb_cmd_ready),\n    .i_icb_cmd_read(buf_icb_cmd_read),\n    .i_icb_cmd_addr(buf_icb_cmd_addr),\n    .i_icb_cmd_wdata(buf_icb_cmd_wdata),\n    .i_icb_cmd_wmask(buf_icb_cmd_wmask),\n    .i_icb_rsp_valid(buf_icb_rsp_valid),\n    .i_icb_rsp_ready(buf_icb_rsp_ready),\n    .o_bus_icb_cmd_valid({ppi_icb_cmd_valid, clint_icb_cmd_valid, plic_icb_cmd_valid}),\n    .o_bus_icb_cmd_ready({ppi_icb_cmd_ready, clint_icb_cmd_ready, plic_icb_cmd_ready}),\n    .o_bus_icb_rsp_valid({ppi_icb_rsp_valid, clint_icb_rsp_valid, plic_icb_rsp_valid}),\n    .o_bus_icb_rsp_ready({ppi_icb_rsp_ready, clint_icb_rsp_ready, plic_icb_rsp_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 5, "code": "module e203_exu_alu (\n  input  wire                         i_valid,\n  output wire                         i_ready,\n  output wire                         i_longpipe,\n  output wire                         nice_csr_valid,\n  input  wire                         nice_csr_ready,\n  output wire [31:0]                  nice_csr_addr,\n  output wire                         nice_csr_wr,\n  output wire [31:0]                  nice_csr_wdata,\n  input  wire [31:0]                  nice_csr_rdata,\n  input  wire                         nice_xs_off,\n  output wire                         amo_wait,\n  input  wire                         oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0]   i_itag,\n  input  wire [E203_XLEN-1:0]         i_rs1,\n  input  wire [E203_XLEN-1:0]         i_rs2,\n  input  wire [E203_XLEN-1:0]         i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]      i_pc,\n  input  wire [E203_INSTR_SIZE-1:0]   i_instr,\n  input  wire                         i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0]  i_rdidx,\n  input  wire                         i_rdwen,\n  input  wire                         i_ilegl,\n  input  wire                         i_buserr,\n  input  wire                         i_misalgn,\n  input  wire                         flush_req,\n  input  wire                         flush_pulse,\n  output wire                         cmt_o_valid,\n  input  wire                         cmt_o_ready,\n  output wire                         cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]      cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0]   cmt_o_instr,\n  output wire [E203_XLEN-1:0]         cmt_o_imm,\n  output wire                         cmt_o_rv32,\n  output wire                         cmt_o_bjp,\n  output wire                         cmt_o_mret,\n  output wire                         cmt_o_dret,\n  output wire                         cmt_o_ecall,\n  output wire                         cmt_o_ebreak,\n  output wire                         cmt_o_fencei,\n  output wire                         cmt_o_wfi,\n  output wire                         cmt_o_ifu_misalgn,\n  output wire                         cmt_o_ifu_buserr,\n  output wire                         cmt_o_ifu_ilegl,\n  output wire                         cmt_o_bjp_prdt,\n  output wire                         cmt_o_bjp_rslv,\n  output wire                         cmt_o_misalgn,\n  output wire                         cmt_o_ld,\n  output wire                         cmt_o_stamo,\n  output wire                         cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0]    cmt_o_badaddr,\n  output wire                         wbck_o_valid,\n  input  wire                         wbck_o_ready,\n  output wire [E203_XLEN-1:0]         wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0]  wbck_o_rdidx,\n  input  wire                         mdv_nob2b,\n  output wire                         csr_ena,\n  output wire                         csr_wr_en,\n  output wire                         csr_rd_en,\n  output wire [11:0]                  csr_idx,\n  input  wire                         nonflush_cmt_ena,\n  input  wire                         csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]         read_csr_dat,\n  output wire [E203_XLEN-1:0]         wbck_csr_dat,\n  output wire                         agu_icb_cmd_valid,\n  input  wire                         agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]    agu_icb_cmd_addr,\n  output wire                         agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]         agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]       agu_icb_cmd_wmask,\n  output wire                         agu_icb_cmd_lock,\n  output wire                         agu_icb_cmd_excl,\n  output wire [1:0]                   agu_icb_cmd_size,\n  output wire                         agu_icb_cmd_back2agu,\n  output wire                         agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0]   agu_icb_cmd_itag,\n  input  wire                         agu_icb_rsp_valid,\n  output wire                         agu_icb_rsp_ready,\n  input  wire                         agu_icb_rsp_err,\n  input  wire                         agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]         agu_icb_rsp_rdata,\n  output wire                         nice_req_valid,\n  input  wire                         nice_req_ready,\n  output wire [E203_XLEN-1:0]         nice_req_instr,\n  output wire [E203_XLEN-1:0]         nice_req_rs1,\n  output wire [E203_XLEN-1:0]         nice_req_rs2,\n  input  wire                         nice_rsp_multicyc_valid,\n  output wire                         nice_rsp_multicyc_ready,\n  output wire                         nice_longp_wbck_valid,\n  input  wire                         nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0]   nice_o_itag,\n  input  wire                         i_nice_cmt_off_ilgl,\n  input  wire                         clk,\n  input  wire                         rst_n\n);\n\n// Internal signals and submodule instantiations would go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 7, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // ALU operation request signals\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection logic\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Special instruction handling\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result retrieval from shared data path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 2, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] rdidx;\n  wire [E203_DECINFO_WIDTH-1:0] info_bus;\n  wire [E203_XLEN-1:0] imm;\n  wire [E203_PC_SIZE-1:0] pc;\n  wire misalgn;\n  wire buserr;\n  wire ilegl;\n  wire mulhsu;\n  wire mul;\n  wire div;\n  wire rem;\n  wire divu;\n  wire remu;\n  wire rv32;\n  wire bjp;\n  wire jal;\n  wire jalr;\n  wire bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Decode logic\n  assign dec_rs1x0 = (rs1idx == 0);\n  assign dec_rs2x0 = (rs2idx == 0);\n  assign dec_rs1en = (i_instr[6:0] != 7'b0000000);\n  assign dec_rs2en = (i_instr[6:0] != 7'b0000000);\n  assign dec_rdwen = (i_instr[6:0] != 7'b0000000);\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_rdidx = rdidx;\n  assign dec_info = info_bus;\n  assign dec_imm = imm;\n  assign dec_pc = pc;\n  assign dec_misalgn = misalgn;\n  assign dec_buserr = buserr;\n  assign dec_ilegl = ilegl;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = (i_instr[6:0] == 7'b1110011);\n  assign nice_cmt_off_ilgl_o = nice_xs_off & dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 9, "code": "module e203_exu_branchslv(\n  input  cmt_i_valid,\n  output cmt_i_ready,\n  input  cmt_i_rv32,\n  input  cmt_i_dret,\n  input  cmt_i_mret,\n  input  cmt_i_fencei,\n  input  cmt_i_bjp,\n  input  cmt_i_bjp_prdt,\n  input  cmt_i_bjp_rslv,\n  input  [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  [E203_XLEN-1:0] cmt_i_imm,\n  input  [E203_PC_SIZE-1:0] csr_epc_r,\n  input  [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input  clk,\n  input  rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = cmt_i_valid & flush_need & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign brchmis_flush_add_op1 = cmt_i_dret ? csr_dpc_r :\n                                 cmt_i_mret ? csr_epc_r :\n                                 cmt_i_bjp & cmt_i_bjp_prdt ? cmt_i_pc + (cmt_i_rv32 ? 32'd4 : 32'd2) :\n                                 cmt_i_pc;\n\n  assign brchmis_flush_add_op2 = cmt_i_bjp & ~cmt_i_bjp_prdt ? cmt_i_imm[E203_PC_SIZE-1:0] : 0;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'd4 : 32'd2)) :\n                              (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                              cmt_i_dret ? csr_dpc_r :\n                              csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 15, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = (E203_HAS_MEM_ITF ? 2 : 1);\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = (E203_HAS_FIO ? (E203_HAS_MEM_ITF ? 6 : 5) : (E203_HAS_MEM_ITF ? 5 : 4));\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_sirv_gnrl_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 1, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input  wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire ifu2biu_icb_cmd_valid,\n  input  wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 17, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire wfi;\n  wire stop_timer;\n  wire [E203_PC_SIZE-1:0] reset_vector;\n  wire debug_irq;\n  wire external_irq;\n  wire software_irq;\n  wire timer_irq;\n  wire shutdown_tcm;\n  wire deep_sleep_tcm;\n  wire itcm_cmd_valid;\n  wire itcm_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire itcm_cmd_read;\n  wire [E203_XLEN-1:0] itcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] itcm_cmd_wmask;\n  wire itcm_rsp_valid;\n  wire itcm_rsp_ready;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n\n  // Assignments\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = csr_clk;\n  assign core_wfi = wfi;\n  assign tm_stop = stop_timer;\n  assign reset_vector = pc_rtvec;\n  assign debug_irq = dbg_irq_r;\n  assign external_irq = ext_irq_a;\n  assign software_irq = sft_irq_a;\n  assign timer_irq = tmr_irq_a;\n  assign shutdown_tcm = tcm_sd;\n  assign deep_sleep_tcm = tcm_ds;\n  assign itcm_cmd_valid = ext2itcm_icb_cmd_valid;\n  assign itcm_cmd_ready = ext2itcm_icb_cmd_ready;\n  assign itcm_cmd_addr = ext2itcm_icb_cmd_addr;\n  assign itcm_cmd_read = ext2itcm_icb_cmd_read;\n  assign itcm_cmd_wdata = ext2itcm_icb_cmd_wdata;\n  assign itcm_cmd_wmask = ext2itcm_icb_cmd_wmask;\n  assign itcm_rsp_valid = ext2itcm_icb_rsp_valid;\n  assign itcm_rsp_ready = ext2itcm_icb_rsp_ready;\n  assign itcm_rsp_err = ext2itcm_icb_rsp_err;\n  assign itcm_rsp_rdata = ext2itcm_icb_rsp_rdata;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(wfi),\n    .tm_stop(stop_timer),\n    .pc_rtvec(reset_vector),\n    .dbg_irq_r(debug_irq),\n    .ext_irq_a(external_irq),\n    .sft_irq_a(software_irq),\n    .tmr_irq_a(timer_irq),\n    .tcm_sd(shutdown_tcm),\n    .tcm_ds(deep_sleep_tcm),\n    .ext2itcm_icb_cmd_valid(itcm_cmd_valid),\n    .ext2itcm_icb_cmd_ready(itcm_cmd_ready),\n    .ext2itcm_icb_cmd_addr(itcm_cmd_addr),\n    .ext2itcm_icb_cmd_read(itcm_cmd_read),\n    .ext2itcm_icb_cmd_wdata(itcm_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(itcm_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(itcm_rsp_valid),\n    .ext2itcm_icb_rsp_ready(itcm_rsp_ready),\n    .ext2itcm_icb_rsp_err(itcm_rsp_err),\n    .ext2itcm_icb_rsp_rdata(itcm_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_srams\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(shutdown_tcm),\n    .itcm_ram_ds(deep_sleep_tcm),\n    .itcm_ram_ls(),\n    .itcm_ram_cs(),\n    .itcm_ram_we(),\n    .itcm_ram_addr(),\n    .itcm_ram_wem(),\n    .itcm_ram_din(),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(),\n    .rst_itcm(),\n    .dtcm_ram_sd(),\n    .dtcm_ram_ds(),\n    .dtcm_ram_ls(),\n    .dtcm_ram_cs(),\n    .dtcm_ram_we(),\n    .dtcm_ram_addr(),\n    .dtcm_ram_wem(),\n    .dtcm_ram_din(),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(),\n    .rst_dtcm(),\n    .test_mode()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 7, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin: itcm_block\n      e203_itcm_ram u_itcm_ram (\n        .sd(itcm_ram_sd),\n        .ds(itcm_ram_ds),\n        .ls(itcm_ram_ls),\n        .cs(itcm_ram_cs),\n        .we(itcm_ram_we),\n        .addr(itcm_ram_addr),\n        .wem(itcm_ram_wem),\n        .din(itcm_ram_din),\n        .dout(itcm_ram_dout),\n        .clk(clk_itcm_ram),\n        .rst_n(~rst_itcm)\n      );\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin: dtcm_block\n      e203_dtcm_ram u_dtcm_ram (\n        .sd(dtcm_ram_sd),\n        .ds(dtcm_ram_ds),\n        .ls(dtcm_ram_ls),\n        .cs(dtcm_ram_cs),\n        .we(dtcm_ram_we),\n        .addr(dtcm_ram_addr),\n        .wem(dtcm_ram_wem),\n        .din(dtcm_ram_din),\n        .dout(dtcm_ram_dout),\n        .clk(clk_dtcm_ram),\n        .rst_n(~rst_dtcm)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 5, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 1, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire dep = raw_dep | waw_dep;\n\n  wire csr = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n  wire agu = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_AGU);\n  wire bjp = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP);\n  wire fence = bjp & disp_i_info[E203_DECINFO_BJP_FENCE];\n  wire fencei = bjp & disp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  wire wfi = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_ALU) & disp_i_info[E203_DECINFO_ALU_WFI];\n  wire wfi_halt_ack = oitf_empty & ~amo_wait;\n\n  assign wfi_halt_exu_ack = wfi_halt_ack & wfi_halt_exu_req;\n\n  wire disp_condition = ~dep & ~wfi_halt_exu_req & ~fence & ~fencei & ~csr;\n  wire disp_alu_longpipe = disp_o_alu_longpipe & disp_o_alu_valid & disp_o_alu_ready;\n\n  assign disp_i_ready = disp_condition & disp_o_alu_ready & (disp_oitf_ready | ~disp_alu_longpipe);\n\n  assign disp_o_alu_valid = disp_i_valid & disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 1, "code": "module e203_exu_longpwbck (\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_wbck_need;\n  wire wbck_i_excp_need;\n  wire wbck_i_ready_cond;\n  wire wbck_i_valid_cond;\n\n  assign wbck_i_wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  assign wbck_i_excp_need = wbck_i_err;\n\n  assign wbck_i_ready_cond = \n    (wbck_i_wbck_need ? longp_wbck_o_ready : 1'b1) &\n    (wbck_i_excp_need ? longp_excp_o_ready : 1'b1);\n\n  assign wbck_i_valid_cond = \n    (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr)) |\n    `ifdef E203_HAS_NICE\n    (nice_longp_wbck_i_valid & (nice_longp_wbck_i_itag == oitf_ret_ptr)) |\n    `endif\n    1'b0;\n\n  assign wbck_i_valid = wbck_i_valid_cond & ~oitf_empty;\n  assign wbck_i_ready = wbck_i_ready_cond & wbck_i_valid;\n\n  assign lsu_wbck_i_ready = wbck_i_ready & (lsu_wbck_i_itag == oitf_ret_ptr);\n  `ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & (nice_longp_wbck_i_itag == oitf_ret_ptr);\n  `endif\n\n  assign longp_wbck_o_valid = wbck_i_wbck_need & wbck_i_valid & (~wbck_i_excp_need | longp_excp_o_ready);\n  assign longp_excp_o_valid = wbck_i_excp_need & wbck_i_valid & (~wbck_i_wbck_need | longp_wbck_o_ready);\n\n  assign longp_wbck_o_wdat = lsu_wbck_i_wdat;\n  assign longp_wbck_o_flags = 5'b0;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n\n  assign longp_excp_o_insterr = lsu_wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 11, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 6, "code": "module e203_exu_alu (\n  input  wire                       i_valid,\n  output wire                       i_ready,\n  output wire                       i_longpipe,\n  output wire                       nice_csr_valid,\n  input  wire                       nice_csr_ready,\n  output wire [31:0]                nice_csr_addr,\n  output wire                       nice_csr_wr,\n  output wire [31:0]                nice_csr_wdata,\n  input  wire [31:0]                nice_csr_rdata,\n  input  wire                       nice_xs_off,\n  output wire                       amo_wait,\n  input  wire                       oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]       i_rs1,\n  input  wire [E203_XLEN-1:0]       i_rs2,\n  input  wire [E203_XLEN-1:0]       i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]    i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                       i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                       i_rdwen,\n  input  wire                       i_ilegl,\n  input  wire                       i_buserr,\n  input  wire                       i_misalgn,\n  input  wire                       flush_req,\n  input  wire                       flush_pulse,\n  output wire                       cmt_o_valid,\n  input  wire                       cmt_o_ready,\n  output wire                       cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]    cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]       cmt_o_imm,\n  output wire                       cmt_o_rv32,\n  output wire                       cmt_o_bjp,\n  output wire                       cmt_o_mret,\n  output wire                       cmt_o_dret,\n  output wire                       cmt_o_ecall,\n  output wire                       cmt_o_ebreak,\n  output wire                       cmt_o_fencei,\n  output wire                       cmt_o_wfi,\n  output wire                       cmt_o_ifu_misalgn,\n  output wire                       cmt_o_ifu_buserr,\n  output wire                       cmt_o_ifu_ilegl,\n  output wire                       cmt_o_bjp_prdt,\n  output wire                       cmt_o_bjp_rslv,\n  output wire                       cmt_o_misalgn,\n  output wire                       cmt_o_ld,\n  output wire                       cmt_o_stamo,\n  output wire                       cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0]  cmt_o_badaddr,\n  output wire                       wbck_o_valid,\n  input  wire                       wbck_o_ready,\n  output wire [E203_XLEN-1:0]       wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                       mdv_nob2b,\n  output wire                       csr_ena,\n  output wire                       csr_wr_en,\n  output wire                       csr_rd_en,\n  output wire [11:0]                csr_idx,\n  input  wire                       nonflush_cmt_ena,\n  input  wire                       csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]       read_csr_dat,\n  output wire [E203_XLEN-1:0]       wbck_csr_dat,\n  output wire                       agu_icb_cmd_valid,\n  input  wire                       agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]  agu_icb_cmd_addr,\n  output wire                       agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]       agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]     agu_icb_cmd_wmask,\n  output wire                       agu_icb_cmd_lock,\n  output wire                       agu_icb_cmd_excl,\n  output wire [1:0]                 agu_icb_cmd_size,\n  output wire                       agu_icb_cmd_back2agu,\n  output wire                       agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                       agu_icb_rsp_valid,\n  output wire                       agu_icb_rsp_ready,\n  input  wire                       agu_icb_rsp_err,\n  input  wire                       agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]       agu_icb_rsp_rdata,\n  output wire                       nice_req_valid,\n  input  wire                       nice_req_ready,\n  output wire [E203_XLEN-1:0]       nice_req_instr,\n  output wire [E203_XLEN-1:0]       nice_req_rs1,\n  output wire [E203_XLEN-1:0]       nice_req_rs2,\n  input  wire                       nice_rsp_multicyc_valid,\n  output wire                       nice_rsp_multicyc_ready,\n  output wire                       nice_longp_wbck_valid,\n  input  wire                       nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                       i_nice_cmt_off_ilgl,\n  input  wire                       clk,\n  input  wire                       rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 5, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  wire csr_wr_en_raw = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_rd_en = csr_rd_en_raw;\n  assign csr_wr_en = csr_wr_en_raw;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire csr_ena_raw = csr_rd_en | csr_wr_en;\n  assign csr_ena = csr_ena_raw;\n\n  assign wbck_csr_dat = \n    csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n    csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n    csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n    {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_i_valid & csr_o_ready;\n\n  assign csr_i_ready = csr_o_ready;\n\n`ifdef E203_HAS_CSR_NICE\n  wire csr_sel_nice = (csr_idx[11:8] == 4'hE);\n  wire nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr = {csr_idx, 20'b0};\n  wire nice_csr_wr = csr_wr_en;\n  wire [31:0] nice_csr_wdata = wbck_csr_dat;\n  wire [31:0] nice_csr_rdata;\n\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : csr_o_ready);\n  assign csr_o_wbck_wdat = csr_sel_nice ? nice_csr_rdata : read_csr_dat;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 6, "code": "module e203_exu_alu_csrctrl (\n  input  csr_i_valid,\n  output csr_i_ready,\n  input  [E203_XLEN-1:0] csr_i_rs1,\n  input  [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input  csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input  csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input  clk,\n  input  rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n  assign csr_rd_en = csr_rd_en_raw & csr_i_valid;\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n  assign csr_wr_en = csr_wr_en_raw & csr_i_valid;\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  wire csr_ena_raw = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n  assign csr_ena = csr_ena_raw;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) : {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n  assign csr_i_ready = csr_o_ready & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  // NICE interface logic\n  output csr_sel_nice;\n  output nice_csr_valid;\n  input  nice_csr_ready;\n  output [31:0] nice_csr_addr;\n  output nice_csr_wr;\n  output [31:0] nice_csr_wdata;\n  input  [31:0] nice_csr_rdata;\n\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  wire [E203_XLEN-1:0] nice_read_csr_dat = nice_csr_rdata;\n  assign csr_o_wbck_wdat = csr_sel_nice ? nice_read_csr_dat : read_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 2, "code": "module e203_exu_alu_dpath (\n  input  wire                alu_req_alu,\n  input  wire                alu_req_alu_add,\n  input  wire                alu_req_alu_sub,\n  input  wire                alu_req_alu_xor,\n  input  wire                alu_req_alu_sll,\n  input  wire                alu_req_alu_srl,\n  input  wire                alu_req_alu_sra,\n  input  wire                alu_req_alu_or,\n  input  wire                alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                muldiv_req_alu_add,\n  input  wire                muldiv_req_alu_sub,\n  input  wire                muldiv_sbf_0_ena,\n  input  wire [32:0]         muldiv_sbf_0_nxt,\n  input  wire                muldiv_sbf_1_ena,\n  input  wire [32:0]         muldiv_sbf_1_nxt,\n  input  wire                clk,\n  input  wire                rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]         muldiv_sbf_0_r,\n  output wire [32:0]         muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res)\n                         | ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res)\n                         | ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res)\n                         | ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res)\n                         | ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res)\n                         | ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res)\n                         | ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)\n                         | ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n  assign muldiv_req_alu_res = muldiv_req_alu_add ? muldiv_add_res : muldiv_sub_res;\n\n  // Shared Buffer logic\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 7, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_op1_imm = csr_i_info[E203_DECINFO_CSR_ZIMMM +: 5];\n  wire [11:0] csr_op1_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX +: 12];\n\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_op1_imm} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_op1_idx;\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        (csr_op1 & ~read_csr_dat);\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 16, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO 5 `else 4 `endif;\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, ifu_icb_cmd_valid}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, ifu_icb_cmd_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 8, "code": "module e203_exu_alu_bjp (\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_is_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_is_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_is_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_is_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_is_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_is_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_is_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_is_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_is_fencei= bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_is_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_is_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_is_rv32  = bjp_i_info[E203_DECINFO_RV32];\n  wire bjp_i_bprdt    = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\n  assign bjp_req_alu_op1 = bjp_i_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_is_jump ? (bjp_i_is_rv32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq = bjp_i_is_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_is_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_is_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_is_bgtu;\n  assign bjp_req_alu_add = bjp_i_is_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_is_bxx | bjp_i_is_jump;\n  assign bjp_o_cmt_mret = bjp_i_is_mret;\n  assign bjp_o_cmt_dret = bjp_i_is_dret;\n  assign bjp_o_cmt_fencei = bjp_i_is_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 9, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire bjp_is_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_is_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_is_bxx | bjp_is_jump;\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 3, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'b00000);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'b00001);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = ~oitf_empty | (~ir_empty & ir_rs1en);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1x1_dep = ~oitf_empty | jalr_rs1idx_cam_irrdidx;\n\n  assign bpu_wait = dec_jalr & (\n    (dec_jalr_rs1x1 & jalr_rs1x1_dep) |\n    (dec_jalr_rs1xn & jalr_rs1xn_dep)\n  );\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_jal | dec_bxx}} & pc) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}}) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 2, "code": "module e203_exu_disp (\n  input  wire                     wfi_halt_exu_req,\n  output wire                     wfi_halt_exu_ack,\n  input  wire                     oitf_empty,\n  input  wire                     amo_wait,\n  input  wire                     disp_i_valid,\n  output wire                     disp_i_ready,\n  input  wire                     disp_i_rs1x0,\n  input  wire                     disp_i_rs2x0,\n  input  wire                     disp_i_rs1en,\n  input  wire                     disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]     disp_i_rs1,\n  input  wire [E203_XLEN-1:0]     disp_i_rs2,\n  input  wire                     disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]     disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0]  disp_i_pc,\n  input  wire                     disp_i_misalgn,\n  input  wire                     disp_i_buserr,\n  input  wire                     disp_i_ilegl,\n  output wire                     disp_o_alu_valid,\n  input  wire                     disp_o_alu_ready,\n  input  wire                     disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs2,\n  output wire                     disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]     disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0]  disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                     disp_o_alu_misalgn,\n  output wire                     disp_o_alu_buserr,\n  output wire                     disp_o_alu_ilegl,\n  input  wire                     oitfrd_match_disprs1,\n  input  wire                     oitfrd_match_disprs2,\n  input  wire                     oitfrd_match_disprs3,\n  input  wire                     oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                     disp_oitf_ena,\n  input  wire                     disp_oitf_ready,\n  output wire                     disp_oitf_rs1fpu,\n  output wire                     disp_oitf_rs2fpu,\n  output wire                     disp_oitf_rs3fpu,\n  output wire                     disp_oitf_rdfpu,\n  output wire                     disp_oitf_rs1en,\n  output wire                     disp_oitf_rs2en,\n  output wire                     disp_oitf_rs3en,\n  output wire                     disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0]  disp_oitf_pc,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire dep = raw_dep | waw_dep;\n  wire fence = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) && disp_i_info[E203_DECINFO_BJP_FENCE];\n  wire fencei = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) && disp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire csr = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n  wire agu = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_AGU);\n  wire bjp = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP);\n  wire longpipe = disp_o_alu_longpipe;\n  wire oitf_ready = disp_oitf_ready & ~dep;\n  wire alu_ready = disp_o_alu_ready & ~dep;\n  wire disp_ready = alu_ready & oitf_ready & ~fence & ~fencei & ~csr & ~wfi_halt_exu_req & ~amo_wait;\n  wire disp_valid = disp_i_valid & disp_ready;\n\n  // ALU Dispatch\n  assign disp_o_alu_valid = disp_valid;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? 0 : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? 0 : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF Dispatch\n  assign disp_oitf_ena = disp_valid & longpipe;\n  assign disp_oitf_rs1fpu = 0;\n  assign disp_oitf_rs2fpu = 0;\n  assign disp_oitf_rs3fpu = 0;\n  assign disp_oitf_rdfpu = 0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = 0;\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI Handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\n  // Ready signal\n  assign disp_i_ready = disp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 1, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1, op2;\n  reg [32:0] sbf_0, sbf_1;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op1, alu_op2;\n  reg alu_add, alu_sub;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH = 5'b00001;\n  localparam MULDIV_STATE_EXEC = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // State machine\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      case (state)\n        MULDIV_STATE_0TH: begin\n          if (muldiv_i_valid && !flush_pulse) begin\n            state <= MULDIV_STATE_EXEC;\n          end\n        end\n        MULDIV_STATE_EXEC: begin\n          if (/* condition for execution completion */) begin\n            state <= MULDIV_STATE_REMD_CHCK;\n          end\n        end\n        MULDIV_STATE_REMD_CHCK: begin\n          if (/* condition for remainder check */) begin\n            state <= MULDIV_STATE_QUOT_CORR;\n          end else begin\n            state <= MULDIV_STATE_0TH;\n          end\n        end\n        MULDIV_STATE_QUOT_CORR: begin\n          state <= MULDIV_STATE_REMD_CORR;\n        end\n        MULDIV_STATE_REMD_CORR: begin\n          state <= MULDIV_STATE_0TH;\n        end\n        default: state <= MULDIV_STATE_0TH;\n      endcase\n    end\n  end\n\n  // ALU operation logic\n  always @(*) begin\n    alu_op1 = op1;\n    alu_op2 = op2;\n    alu_add = 1'b0;\n    alu_sub = 1'b0;\n    case (state)\n      MULDIV_STATE_EXEC: begin\n        // Booth encoding logic for multiplication\n        // Non-restoring division logic\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        // Quotient correction logic\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        // Remainder correction logic\n      end\n    endcase\n  end\n\n  // Output assignments\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_REMD_CORR);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = sbf_0;\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = sbf_1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 4, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_idle_to_exit = agu_i_algnamo & oitf_empty;\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // Flush block logic\n  wire flush_block = flush_req & icb_sta_is_idle;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else if (state_idle_exit_ena) begin\n      icb_state <= 4'd1;\n    end else if (state_1st_exit_ena) begin\n      icb_state <= 4'd4;\n    end else if (state_amoalu_exit_ena) begin\n      icb_state <= 4'd5;\n    end else if (state_amordy_exit_ena) begin\n      icb_state <= 4'd2;\n    end else if (state_wait2nd_exit_ena) begin\n      icb_state <= 4'd3;\n    end else if (state_2nd_exit_ena) begin\n      icb_state <= 4'd6;\n    end else if (state_wbck_exit_ena) begin\n      icb_state <= 4'd0;\n    end\n  end\n\n  // Additional logic for AGU operations, exception handling, and LSU interface\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 12, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals for arbitration\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 18, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Instantiate the e203_cpu core module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the e203_srams module for ITCM and DTCM\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0), // Assuming low-power mode is not used\n    .itcm_ram_cs(ext2itcm_icb_cmd_valid),\n    .itcm_ram_we(~ext2itcm_icb_cmd_read),\n    .itcm_ram_addr(ext2itcm_icb_cmd_addr),\n    .itcm_ram_wem(ext2itcm_icb_cmd_wmask),\n    .itcm_ram_din(ext2itcm_icb_cmd_wdata),\n    .itcm_ram_dout(ext2itcm_icb_rsp_rdata),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(1'b0), // Assuming DTCM shutdown is not used\n    .dtcm_ram_ds(1'b0), // Assuming DTCM deep sleep is not used\n    .dtcm_ram_ls(1'b0), // Assuming DTCM low-power mode is not used\n    .dtcm_ram_cs(1'b0), // Assuming DTCM is not accessed\n    .dtcm_ram_we(1'b0), // Assuming DTCM is not accessed\n    .dtcm_ram_addr({E203_DTCM_RAM_AW{1'b0}}), // Assuming DTCM is not accessed\n    .dtcm_ram_wem({E203_DTCM_RAM_MW{1'b0}}), // Assuming DTCM is not accessed\n    .dtcm_ram_din({E203_DTCM_RAM_DW{1'b0}}), // Assuming DTCM is not accessed\n    .dtcm_ram_dout(), // Assuming DTCM is not accessed\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(1'b0) // Assuming test mode is not used\n  );\n\n  // External ITCM interface logic\n  assign ext2itcm_icb_cmd_ready = ext2itcm_icb_rsp_ready;\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_rsp_err = 1'b0; // Assuming no error\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 10, "code": "module e203_exu_branchslv(\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_req;\n  assign cmt_i_ready = ~flush_need | (flush_req & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_rv32 ? 32'h4 : 32'h2;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = \n      (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n      (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n      cmt_i_dret ? csr_dpc_r :\n      csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 5, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  reg unalgn_flg;\n  reg [E203_XLEN-1:0] leftover;\n  \n  // State machine states\n  localparam ICB_STATE_IDLE   = 4'd0;\n  localparam ICB_STATE_1ST    = 4'd1;\n  localparam ICB_STATE_AMOALU = 4'd4;\n  localparam ICB_STATE_AMORDY = 4'd5;\n  localparam ICB_STATE_WAIT2ND= 4'd2;\n  localparam ICB_STATE_2ND    = 4'd3;\n  localparam ICB_STATE_WBCK   = 4'd6;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else begin\n      case (icb_state)\n        ICB_STATE_IDLE: if (state_idle_exit_ena) icb_state <= ICB_STATE_1ST;\n        ICB_STATE_1ST: if (state_1st_exit_ena) icb_state <= ICB_STATE_AMOALU;\n        ICB_STATE_AMOALU: if (state_amoalu_exit_ena) icb_state <= ICB_STATE_AMORDY;\n        ICB_STATE_AMORDY: if (state_amordy_exit_ena) icb_state <= ICB_STATE_WAIT2ND;\n        ICB_STATE_WAIT2ND: if (state_wait2nd_exit_ena) icb_state <= ICB_STATE_2ND;\n        ICB_STATE_2ND: if (state_2nd_exit_ena) icb_state <= ICB_STATE_WBCK;\n        ICB_STATE_WBCK: if (state_wbck_exit_ena) icb_state <= ICB_STATE_IDLE;\n      endcase\n    end\n  end\n\n  // State transition conditions\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // Additional logic for AGU operations, exception handling, and LSU interface\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 10, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei= bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_prdt  = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (E203_XLEN_IS_32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp    = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret   = bjp_i_mret;\n  assign bjp_o_cmt_dret   = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt   = bjp_i_prdt;\n  assign bjp_o_cmt_rslv   = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 13, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n  `ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n  `endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 2, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 14, "code": "module e203_dtcm_ctrl (\n  input  wire                        clk,\n  input  wire                        rst_n,\n  input  wire                        test_mode,\n  input  wire                        tcm_cgstop,\n  output wire                        dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire                        lsu2dtcm_icb_cmd_valid,\n  output wire                        lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                        lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                 lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                  lsu2dtcm_icb_cmd_wmask,\n  output wire                        lsu2dtcm_icb_rsp_valid,\n  input  wire                        lsu2dtcm_icb_rsp_ready,\n  output wire                        lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                 lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                        ext2dtcm_icb_cmd_valid,\n  output wire                        ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                        ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                 ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                  ext2dtcm_icb_cmd_wmask,\n  output wire                        ext2dtcm_icb_rsp_valid,\n  input  wire                        ext2dtcm_icb_rsp_ready,\n  output wire                        ext2dtcm_icb_rsp_err,\n  output wire [31:0]                 ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire                        dtcm_ram_cs,\n  output wire                        dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire                        clk_dtcm_ram\n);\n\n  // Internal signals for arbitration\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr  ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 3, "code": "module e203_exu_disp(\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire raw_dep = (oitfrd_match_disprs1 & disp_i_rs1en) |\n                 (oitfrd_match_disprs2 & disp_i_rs2en);\n  wire waw_dep = oitfrd_match_disprd & disp_i_rdwen;\n  wire dep = raw_dep | waw_dep;\n\n  wire fence = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) &\n               (disp_i_info[E203_DECINFO_BJP_FENCE] |\n                disp_i_info[E203_DECINFO_BJP_FENCEI]);\n\n  wire csr = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n\n  wire disp_condition = ~dep & ~fence & ~wfi_halt_exu_req &\n                        (oitf_empty | ~csr) &\n                        (disp_o_alu_ready | ~disp_o_alu_longpipe);\n\n  assign disp_i_ready = disp_condition;\n\n  assign disp_o_alu_valid = disp_i_valid & disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_o_alu_valid & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = oitf_empty & ~amo_wait;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 2, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  // Submodule instances and internal logic here\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 4, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n`include \"e203_defines.v\"\n\ngenerate\n    if (MASTER) begin : master_mode\n        `ifdef E203_HAS_LOCKSTEP\n            // Lockstep mode: no operation\n        `else\n            `ifdef E203_IRQ_NEED_SYNC\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_ext_irq_sync (\n                    .din_a(ext_irq_a),\n                    .dout(ext_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_sft_irq_sync (\n                    .din_a(sft_irq_a),\n                    .dout(sft_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_tmr_irq_sync (\n                    .din_a(tmr_irq_a),\n                    .dout(tmr_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_dbg_irq_sync (\n                    .din_a(dbg_irq_a),\n                    .dout(dbg_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n            `else\n                assign ext_irq_r = ext_irq_a;\n                assign sft_irq_r = sft_irq_a;\n                assign tmr_irq_r = tmr_irq_a;\n                assign dbg_irq_r = dbg_irq_a;\n            `endif\n        `endif\n    end else begin : slave_mode\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n    end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 3, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n\n  // Internal signals and logic for the e203_exu module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 17, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n\n  // MEM ICB Interface\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = (E203_HAS_MEM_ITF ? 2 : 1);\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = (E203_HAS_FIO ? (E203_HAS_MEM_ITF ? 6 : 5) : (E203_HAS_MEM_ITF ? 5 : 4));\n\n  // Instantiate ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 15, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_dtcm_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_dtcm_sram_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 3, "code": "module e203_exu_nice (\n  input  wire nice_i_xs_off,\n  input  wire nice_i_valid,\n  output wire nice_i_ready,\n  input  wire [E203_XLEN-1:0] nice_i_instr,\n  input  wire [E203_XLEN-1:0] nice_i_rs1,\n  input  wire [E203_XLEN-1:0] nice_i_rs2,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input  wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input  wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request handling\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // Long pipeline indication\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 1, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_req;\n  wire flush_pulse;\n  wire pipe_flush_req;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Exception and Interrupt Handling\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(flush_req),\n    .nonalu_excpirq_flush_req_raw(pipe_flush_req),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Branch Resolution\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(pipe_flush_req),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~flush_req;\n  assign flush_pulse = flush_req & flush_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 3, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 : \n                                 bjp_req_alu ? bjp_req_alu_op1 : \n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 : \n                                 bjp_req_alu ? bjp_req_alu_op2 : \n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_res;\n  assign alu_res = (alu_req_alu_add | bjp_req_alu) ? (alu_op1 + alu_op2) :\n                   alu_req_alu_sub ? (alu_op1 - alu_op2) :\n                   alu_req_alu_xor ? (alu_op1 ^ alu_op2) :\n                   alu_req_alu_sll ? (alu_op1 << alu_op2[4:0]) :\n                   alu_req_alu_srl ? (alu_op1 >> alu_op2[4:0]) :\n                   alu_req_alu_sra ? (alu_op1 >>> alu_op2[4:0]) :\n                   alu_req_alu_or  ? (alu_op1 | alu_op2) :\n                   alu_req_alu_and ? (alu_op1 & alu_op2) :\n                   {E203_XLEN{1'b0}};\n\n  assign alu_req_alu_res = alu_res;\n  assign bjp_req_alu_add_res = alu_res;\n  assign bjp_req_alu_cmp_res = (alu_op1 == alu_op2);\n\n  // AGU operation logic\n  assign agu_req_alu_res = alu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  assign muldiv_res = muldiv_req_alu_add ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                      muldiv_req_alu_sub ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                      {E203_ALU_ADDER_WIDTH{1'b0}};\n\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared Buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 4, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n  wire jalr_rs1xn_dep_clr = jalr_rs1xn_dep_ir_clr;\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n  wire jalr_rs1xn_dep_clr = jalr_rs1xn_dep_ir_clr;\n\n  wire jalr_rs1x1_dep = (~oitf_empty) | jalr_rs1idx_cam_irrdidx;\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign bpu_wait = dec_jalr & (\n    (dec_jalr_rs1x1 & jalr_rs1x1_dep)\n  | (dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_clr))\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 7, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals and submodule instantiations would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 4, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  \n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal signals\n  wire [E203_XLEN-1:0] alu_res;\n  wire [E203_XLEN-1:0] bjp_add_res;\n  wire bjp_cmp_res;\n  wire [E203_XLEN-1:0] agu_res;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  reg [32:0] sbf_0_r;\n  reg [32:0] sbf_1_r;\n\n  // ALU operations\n  assign alu_res = (alu_req_alu_add) ? (alu_req_alu_op1 + alu_req_alu_op2) :\n                   (alu_req_alu_sub) ? (alu_req_alu_op1 - alu_req_alu_op2) :\n                   (alu_req_alu_xor) ? (alu_req_alu_op1 ^ alu_req_alu_op2) :\n                   (alu_req_alu_sll) ? (alu_req_alu_op1 << alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_srl) ? (alu_req_alu_op1 >> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_sra) ? ($signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_or)  ? (alu_req_alu_op1 | alu_req_alu_op2) :\n                   (alu_req_alu_and) ? (alu_req_alu_op1 & alu_req_alu_op2) :\n                   alu_req_alu_op1;\n\n  // BJP operations\n  assign bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operations\n  assign agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  // MULDIV operations\n  assign muldiv_res = (muldiv_req_alu_add) ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                      (muldiv_req_alu_sub) ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                      muldiv_req_alu_op1;\n\n  // Shared buffer 0\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 33'b0;\n    end else if (muldiv_sbf_0_ena) begin\n      sbf_0_r <= muldiv_sbf_0_nxt;\n    end\n  end\n\n  // Shared buffer 1\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_1_r <= 33'b0;\n    end else if (muldiv_sbf_1_ena) begin\n      sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  // Output assignments\n  assign alu_req_alu_res = alu_res;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n  assign agu_req_alu_res = agu_res;\n  assign muldiv_req_alu_res = muldiv_res;\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 15, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 1, "code": "module e203_lsu (\n  input  wire                     commit_mret,\n  input  wire                     commit_trap,\n  input  wire                     excp_active,\n  output wire                     lsu_active,\n\n  output wire                     lsu_o_valid,\n  input  wire                     lsu_o_ready,\n  output wire [XLEN-1:0]          lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0]    lsu_o_wbck_itag,\n  output wire                     lsu_o_wbck_err,\n  output wire                     lsu_o_cmt_ld,\n  output wire                     lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0]     lsu_o_cmt_badaddr,\n  output wire                     lsu_o_cmt_buserr,\n\n  input  wire                     agu_icb_cmd_valid,\n  output wire                     agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]     agu_icb_cmd_addr,\n  input  wire                     agu_icb_cmd_read,\n  input  wire [XLEN-1:0]          agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]        agu_icb_cmd_wmask,\n  input  wire                     agu_icb_cmd_lock,\n  input  wire                     agu_icb_cmd_excl,\n  input  wire [1:0]               agu_icb_cmd_size,\n  input  wire                     agu_icb_cmd_back2agu,\n  input  wire                     agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0]    agu_icb_cmd_itag,\n  output wire                     agu_icb_rsp_valid,\n  input  wire                     agu_icb_rsp_ready,\n  output wire                     agu_icb_rsp_err,\n  output wire                     agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0]          agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  wire                     nice_mem_holdup,\n  input  wire                     nice_icb_cmd_valid,\n  output wire                     nice_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]     nice_icb_cmd_addr,\n  input  wire                     nice_icb_cmd_read,\n  input  wire [XLEN-1:0]          nice_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]        nice_icb_cmd_wmask,\n  output wire                     nice_icb_rsp_valid,\n  input  wire                     nice_icb_rsp_ready,\n  output wire                     nice_icb_rsp_err,\n  output wire [XLEN-1:0]          nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire [ADDR_SIZE-1:0]     itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  wire [ADDR_SIZE-1:0]     dtcm_region_indic,\n`endif\n\n  output wire                     biu_icb_cmd_valid,\n  input  wire                     biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0]     biu_icb_cmd_addr,\n  output wire                     biu_icb_cmd_read,\n  output wire [XLEN-1:0]          biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0]        biu_icb_cmd_wmask,\n  output wire                     biu_icb_cmd_lock,\n  output wire                     biu_icb_cmd_excl,\n  output wire [1:0]               biu_icb_cmd_size,\n  input  wire                     biu_icb_rsp_valid,\n  output wire                     biu_icb_rsp_ready,\n  input  wire                     biu_icb_rsp_err,\n  input  wire                     biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0]          biu_icb_rsp_rdata\n);\n\n  // Internal logic for LSU control, arbitration, and exception handling\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 6, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine logic\n  // Define state machine states\n  localparam ICB_STATE_IDLE   = 4'd0;\n  localparam ICB_STATE_1ST    = 4'd1;\n  localparam ICB_STATE_AMOALU = 4'd4;\n  localparam ICB_STATE_AMORDY = 4'd5;\n  localparam ICB_STATE_WAIT2ND= 4'd2;\n  localparam ICB_STATE_2ND    = 4'd3;\n  localparam ICB_STATE_WBCK   = 4'd6;\n\n  // State machine registers\n  reg [3:0] icb_state;\n  wire state_idle_exit_ena;\n  wire state_1st_exit_ena;\n  wire state_amoalu_exit_ena;\n  wire state_amordy_exit_ena;\n  wire state_wait2nd_exit_ena;\n  wire state_2nd_exit_ena;\n  wire state_wbck_exit_ena;\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else begin\n      case (icb_state)\n        ICB_STATE_IDLE: if (state_idle_exit_ena) icb_state <= ICB_STATE_1ST;\n        ICB_STATE_1ST: if (state_1st_exit_ena) icb_state <= ICB_STATE_AMOALU;\n        ICB_STATE_AMOALU: if (state_amoalu_exit_ena) icb_state <= ICB_STATE_AMORDY;\n        ICB_STATE_AMORDY: if (state_amordy_exit_ena) icb_state <= ICB_STATE_WAIT2ND;\n        ICB_STATE_WAIT2ND: if (state_wait2nd_exit_ena) icb_state <= ICB_STATE_2ND;\n        ICB_STATE_2ND: if (state_2nd_exit_ena) icb_state <= ICB_STATE_WBCK;\n        ICB_STATE_WBCK: if (state_wbck_exit_ena) icb_state <= ICB_STATE_IDLE;\n        default: icb_state <= ICB_STATE_IDLE;\n      endcase\n    end\n  end\n\n  // Define state transition conditions\n  assign state_idle_exit_ena = icb_state == ICB_STATE_IDLE && agu_i_valid && agu_icb_cmd_ready && !flush_pulse;\n  assign state_1st_exit_ena = icb_state == ICB_STATE_1ST && agu_icb_rsp_valid && agu_icb_rsp_ready;\n  assign state_amoalu_exit_ena = icb_state == ICB_STATE_AMOALU;\n  assign state_amordy_exit_ena = icb_state == ICB_STATE_AMORDY;\n  assign state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && agu_icb_cmd_ready;\n  assign state_2nd_exit_ena = icb_state == ICB_STATE_2ND && agu_icb_rsp_valid && agu_icb_rsp_ready;\n  assign state_wbck_exit_ena = icb_state == ICB_STATE_WBCK && agu_o_ready;\n\n  // AGU operation logic\n  // Address generation and AMO operation handling\n\n  // Output assignments\n  assign agu_i_ready = (icb_state == ICB_STATE_IDLE);\n  assign agu_o_valid = (icb_state == ICB_STATE_WBCK);\n  assign agu_icb_cmd_valid = (icb_state == ICB_STATE_IDLE || icb_state == ICB_STATE_WAIT2ND);\n  assign agu_icb_rsp_ready = (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_2ND);\n\n  // Implement additional logic for address generation, AMO operations, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 1, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire alu_excp_flush_req_wfi;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n  wire [E203_XLEN-1:0] excpirq_flush_cause;\n  wire [E203_ADDR_SIZE-1:0] excpirq_flush_badaddr;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_epc;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_dpc;\n  wire [2:0] excpirq_flush_dcause;\n  wire excpirq_flush_dcause_ena;\n  wire excpirq_flush_dpc_ena;\n  wire excpirq_flush_cause_ena;\n  wire excpirq_flush_epc_ena;\n  wire excpirq_flush_badaddr_ena;\n  wire excpirq_flush_status_ena;\n  wire excpirq_flush_req_raw;\n  wire excpirq_flush_req_ena;\n  wire excpirq_flush_req_ack;\n\n  // WFI Handling\n  assign wfi_flag = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_req = wfi_flag & ~wfi_halt_ifu_ack & ~wfi_halt_exu_ack;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception Handling\n  assign excpirq_flush_req = excpirq_flush_req_raw & excpirq_flush_req_ena;\n  assign excpirq_flush_req_raw = longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req | alu_excp_flush_req;\n  assign excpirq_flush_req_ena = oitf_empty & alu_excp_i_pc_vld;\n  assign excpirq_flush_req_ack = excpirq_flush_ack;\n\n  // PC Switching\n  assign excpirq_flush_add_op1 = dbg_mode_entry_req ? 32'h800 : (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 32'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // Register Update\n  assign cmt_badaddr = excpirq_flush_badaddr;\n  assign cmt_epc = excpirq_flush_epc;\n  assign cmt_cause = excpirq_flush_cause;\n  assign cmt_badaddr_ena = excpirq_flush_badaddr_ena;\n  assign cmt_epc_ena = excpirq_flush_epc_ena;\n  assign cmt_cause_ena = excpirq_flush_cause_ena;\n  assign cmt_status_ena = excpirq_flush_status_ena;\n  assign cmt_dpc = excpirq_flush_dpc;\n  assign cmt_dpc_ena = excpirq_flush_dpc_ena;\n  assign cmt_dcause = excpirq_flush_dcause;\n  assign cmt_dcause_ena = excpirq_flush_dcause_ena;\n\n  // Exception Active Signal\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 16, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signal declarations\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 19, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_internal;\n  wire core_wfi_internal;\n  wire tm_stop_internal;\n  wire dbg_irq_r_internal;\n  wire ext_irq_a_internal;\n  wire sft_irq_a_internal;\n  wire tmr_irq_a_internal;\n  wire tcm_sd_internal;\n  wire tcm_ds_internal;\n  wire ext2itcm_icb_cmd_valid_internal;\n  wire ext2itcm_icb_cmd_ready_internal;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr_internal;\n  wire ext2itcm_icb_cmd_read_internal;\n  wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata_internal;\n  wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask_internal;\n  wire ext2itcm_icb_rsp_valid_internal;\n  wire ext2itcm_icb_rsp_ready_internal;\n  wire ext2itcm_icb_rsp_err_internal;\n  wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata_internal;\n\n  // Instantiate the e203_cpu module\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_internal),\n    .core_wfi(core_wfi_internal),\n    .tm_stop(tm_stop_internal),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r_internal),\n    .ext_irq_a(ext_irq_a_internal),\n    .sft_irq_a(sft_irq_a_internal),\n    .tmr_irq_a(tmr_irq_a_internal),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the e203_srams module\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd_internal),\n    .itcm_ram_ds(tcm_ds_internal),\n    .itcm_ram_ls(),\n    .itcm_ram_cs(),\n    .itcm_ram_we(),\n    .itcm_ram_addr(),\n    .itcm_ram_wem(),\n    .itcm_ram_din(),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(),\n    .rst_itcm(),\n    .dtcm_ram_sd(),\n    .dtcm_ram_ds(),\n    .dtcm_ram_ls(),\n    .dtcm_ram_cs(),\n    .dtcm_ram_we(),\n    .dtcm_ram_addr(),\n    .dtcm_ram_wem(),\n    .dtcm_ram_din(),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(),\n    .rst_dtcm(),\n    .test_mode()\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk_internal;\n  assign core_wfi = core_wfi_internal;\n  assign tm_stop = tm_stop_internal;\n  assign dbg_irq_r = dbg_irq_r_internal;\n  assign ext2itcm_icb_cmd_ready = ext2itcm_icb_cmd_ready_internal;\n  assign ext2itcm_icb_rsp_valid = ext2itcm_icb_rsp_valid_internal;\n  assign ext2itcm_icb_rsp_err = ext2itcm_icb_rsp_err_internal;\n  assign ext2itcm_icb_rsp_rdata = ext2itcm_icb_rsp_rdata_internal;\n\n  // Assign inputs\n  assign ext_irq_a_internal = ext_irq_a;\n  assign sft_irq_a_internal = sft_irq_a;\n  assign tmr_irq_a_internal = tmr_irq_a;\n  assign tcm_sd_internal = tcm_sd;\n  assign tcm_ds_internal = tcm_ds;\n  assign ext2itcm_icb_cmd_valid_internal = ext2itcm_icb_cmd_valid;\n  assign ext2itcm_icb_cmd_addr_internal = ext2itcm_icb_cmd_addr;\n  assign ext2itcm_icb_cmd_read_internal = ext2itcm_icb_cmd_read;\n  assign ext2itcm_icb_cmd_wdata_internal = ext2itcm_icb_cmd_wdata;\n  assign ext2itcm_icb_cmd_wmask_internal = ext2itcm_icb_cmd_wmask;\n  assign ext2itcm_icb_rsp_ready_internal = ext2itcm_icb_rsp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 2, "code": "module e203_exu_alu_muldiv(\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input [32:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] result;\n  reg [32:0] sbf_0;\n  reg [32:0] sbf_1;\n  reg muldiv_valid;\n  reg muldiv_ready;\n  reg muldiv_longpipe;\n  reg muldiv_wbck_err;\n\n  // State Machine Definitions\n  localparam MULDIV_STATE_0TH = 5'd0;\n  localparam MULDIV_STATE_EXEC = 5'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 5'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 5'd3;\n  localparam MULDIV_STATE_REMD_CORR = 5'd4;\n\n  // State Machine Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution completion */) begin\n          next_state = MULDIV_STATE_0TH;\n        end else if (/* condition for remainder check */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end else begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Handshake Logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && muldiv_valid;\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = muldiv_wbck_err;\n\n  // ALU Request Logic\n  assign muldiv_req_alu_op1 = op1;\n  assign muldiv_req_alu_op2 = op2;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = (state == MULDIV_STATE_EXEC);\n\n  // Shared Buffer Logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = sbf_0;\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = sbf_1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 4, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  // Submodule instances and internal logic\n);\n  // Internal signals and submodule instantiations\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 8, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [11:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 1, "code": "module e203_lsu_ctrl (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  output wire lsu_ctrl_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input  wire [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  wire nice_icb_cmd_read,\n  input  wire [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  wire [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input  wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output wire dcache_icb_cmd_valid,\n  input  wire dcache_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output wire dcache_icb_cmd_read,\n  output wire [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output wire dcache_icb_cmd_lock,\n  output wire dcache_icb_cmd_excl,\n  output wire [1:0] dcache_icb_cmd_size,\n  input  wire dcache_icb_rsp_valid,\n  output wire dcache_icb_rsp_ready,\n  input  wire dcache_icb_rsp_err,\n  input  wire dcache_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output wire dtcm_icb_cmd_valid,\n  input  wire dtcm_icb_cmd_ready,\n  output wire [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output wire dtcm_icb_cmd_read,\n  output wire [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output wire dtcm_icb_cmd_lock,\n  output wire dtcm_icb_cmd_excl,\n  output wire [1:0] dtcm_icb_cmd_size,\n  input  wire dtcm_icb_rsp_valid,\n  output wire dtcm_icb_rsp_ready,\n  input  wire dtcm_icb_rsp_err,\n  input  wire dtcm_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals and logic for the LSU control module\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 5, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  // Additional internal signals and submodule instantiations\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 17, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 11, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  assign bjp_req_alu_cmp_ne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  assign bjp_req_alu_cmp_lt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  assign bjp_req_alu_cmp_gt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  assign bjp_req_alu_cmp_ltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  assign bjp_req_alu_cmp_gtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp    = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n  assign bjp_o_cmt_rslv   = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 4, "code": "module e203_exu_disp(\n  input  wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input  oitf_empty,\n  input  amo_wait,\n  input  disp_i_valid,\n  output disp_i_ready,\n  input  disp_i_rs1x0,\n  input  disp_i_rs2x0,\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [E203_XLEN-1:0] disp_i_rs1,\n  input  [E203_XLEN-1:0] disp_i_rs2,\n  input  disp_i_rdwen,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  [E203_XLEN-1:0] disp_i_imm,\n  input  [E203_PC_SIZE-1:0] disp_i_pc,\n  input  disp_i_misalgn,\n  input  disp_i_buserr,\n  input  disp_i_ilegl,\n  output disp_o_alu_valid,\n  input  disp_o_alu_ready,\n  input  disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input  oitfrd_match_disprs1,\n  input  oitfrd_match_disprs2,\n  input  oitfrd_match_disprs3,\n  input  oitfrd_match_disprd,\n  input  [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input  disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals\n  wire csr_empty = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & oitf_empty;\n  wire fence_empty = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & oitf_empty;\n  wire wfi_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire no_dep = ~raw_dep & ~waw_dep;\n  wire alu_disp = disp_i_valid & disp_o_alu_ready & no_dep;\n  wire oitf_disp = disp_o_alu_longpipe & disp_oitf_ready;\n\n  // ALU Dispatch Logic\n  assign disp_o_alu_valid = alu_disp;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? 0 : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? 0 : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF Dispatch Logic\n  assign disp_oitf_ena = oitf_disp;\n  assign disp_oitf_rs1fpu = 0;\n  assign disp_oitf_rs2fpu = 0;\n  assign disp_oitf_rs3fpu = 0;\n  assign disp_oitf_rdfpu = 0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = 0;\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI Handling\n  assign wfi_halt_exu_ack = wfi_ack;\n\n  // Dispatch Ready Signal\n  assign disp_i_ready = alu_disp & oitf_disp & csr_empty & fence_empty & ~wfi_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 18, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  input clk,\n  input rst_n\n);\n\n// Submodule instantiations and internal logic would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 5, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n`include \"e203_defines.v\"\n\ngenerate\n    if (MASTER) begin\n        if (`ifdef E203_HAS_LOCKSTEP `endif) begin\n            // Lockstep mode: No operation\n        end else begin\n            if (`ifdef E203_IRQ_NEED_SYNC `endif) begin\n                // Non-Lockstep mode with synchronization\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_ext_sync (\n                    .din_a(ext_irq_a),\n                    .dout(ext_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_sft_sync (\n                    .din_a(sft_irq_a),\n                    .dout(sft_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_tmr_sync (\n                    .din_a(tmr_irq_a),\n                    .dout(tmr_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_dbg_sync (\n                    .din_a(dbg_irq_a),\n                    .dout(dbg_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n            end else begin\n                // Non-Lockstep mode without synchronization\n                assign ext_irq_r = ext_irq_a;\n                assign sft_irq_r = sft_irq_a;\n                assign tmr_irq_r = tmr_irq_a;\n                assign dbg_irq_r = dbg_irq_a;\n            end\n        end\n    end else begin\n        // Slave mode: Signal pass-through\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n    end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 2, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n\n  // WFI handling\n  assign wfi_halt_ifu_req = alu_excp_i_wfi & ~dbg_mode & ~wfi_flag;\n  assign wfi_halt_exu_req = alu_excp_i_wfi & ~dbg_mode & ~wfi_flag;\n  assign core_wfi = wfi_flag & wfi_halt_ifu_ack & wfi_halt_exu_ack;\n\n  // Exception handling\n  assign excpirq_flush_req = longp_excp_i_valid | alu_excp_i_valid | dbg_irq_r | (status_mie_r & (ext_irq_r | sft_irq_r | tmr_irq_r));\n  assign nonalu_excpirq_flush_req_raw = excpirq_flush_req & ~alu_excp_i_valid;\n  assign excpirq_flush_add_op1 = (dbg_mode ? 32'h800 : csr_mtvec_r);\n  assign excpirq_flush_add_op2 = 32'b0;\n\n  // Register updates\n  assign cmt_badaddr_ena = longp_excp_i_valid | alu_excp_i_misalgn | alu_excp_i_buserr;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n  assign cmt_dpc_ena = dbg_mode & excpirq_flush_req;\n  assign cmt_dcause_ena = dbg_mode & excpirq_flush_req;\n\n  // Exception cause determination\n  always @(*) begin\n    if (longp_excp_i_valid) begin\n      cmt_cause = longp_excp_i_buserr ? 5'd7 : 5'd16;\n    end else if (alu_excp_i_valid) begin\n      if (alu_excp_i_misalgn) cmt_cause = 5'd0;\n      else if (alu_excp_i_buserr) cmt_cause = 5'd1;\n      else if (alu_excp_i_ilegl) cmt_cause = 5'd2;\n      else if (alu_excp_i_ebreak) cmt_cause = 5'd3;\n      else if (alu_excp_i_ecall) cmt_cause = 5'd11;\n      else cmt_cause = 5'd0;\n    end else begin\n      cmt_cause = 5'd0;\n    end\n  end\n\n  // Exception PC determination\n  always @(*) begin\n    if (longp_excp_i_valid) begin\n      cmt_epc = longp_excp_i_pc;\n    end else if (alu_excp_i_valid) begin\n      cmt_epc = alu_excp_i_pc;\n    end else begin\n      cmt_epc = 32'b0;\n    end\n  end\n\n  // WFI flag logic\n  sirv_gnrl_dfflr #(.DW(1)) wfi_flag_dfflr (\n    .lden(alu_excp_i_wfi & cmt_ena),\n    .dnxt(1'b1),\n    .qout(wfi_flag),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // WFI halt request logic\n  sirv_gnrl_dfflr #(.DW(1)) wfi_halt_req_dfflr (\n    .lden(wfi_halt_ifu_req & wfi_halt_exu_req),\n    .dnxt(1'b1),\n    .qout(wfi_halt_req),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Step request logic\n  sirv_gnrl_dfflr #(.DW(1)) step_req_dfflr (\n    .lden(dbg_step_r),\n    .dnxt(1'b1),\n    .qout(step_req),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 20, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  // Additional interfaces omitted for brevity\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and module instantiations\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk;\n  wire core_wfi;\n  wire core_tm_stop;\n  wire [E203_PC_SIZE-1:0] core_pc_rtvec;\n  wire core_dbg_irq_r;\n  wire core_ext_irq_a;\n  wire core_sft_irq_a;\n  wire core_tmr_irq_a;\n  wire core_tcm_sd;\n  wire core_tcm_ds;\n  wire core_ext2itcm_icb_cmd_valid;\n  wire core_ext2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] core_ext2itcm_icb_cmd_addr;\n  wire core_ext2itcm_icb_cmd_read;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] core_ext2itcm_icb_cmd_wmask;\n  wire core_ext2itcm_icb_rsp_valid;\n  wire core_ext2itcm_icb_rsp_ready;\n  wire core_ext2itcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n\n  // Instantiate e203_cpu core\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(core_tm_stop),\n    .pc_rtvec(core_pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(core_ext_irq_a),\n    .sft_irq_a(core_sft_irq_a),\n    .tmr_irq_a(core_tmr_irq_a),\n    .tcm_sd(core_tcm_sd),\n    .tcm_ds(core_tcm_ds),\n    .ext2itcm_icb_cmd_valid(core_ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(core_ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(core_ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(core_ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(core_ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(core_ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(core_ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(core_ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk;\n  assign core_wfi = core_wfi;\n  assign tm_stop = core_tm_stop;\n  assign dbg_irq_r = core_dbg_irq_r;\n\n  // Connect inputs\n  assign core_pc_rtvec = pc_rtvec;\n  assign core_ext_irq_a = ext_irq_a;\n  assign core_sft_irq_a = sft_irq_a;\n  assign core_tmr_irq_a = tmr_irq_a;\n  assign core_tcm_sd = tcm_sd;\n  assign core_tcm_ds = tcm_ds;\n  assign core_ext2itcm_icb_cmd_valid = ext2itcm_icb_cmd_valid;\n  assign core_ext2itcm_icb_cmd_ready = ext2itcm_icb_cmd_ready;\n  assign core_ext2itcm_icb_cmd_addr = ext2itcm_icb_cmd_addr;\n  assign core_ext2itcm_icb_cmd_read = ext2itcm_icb_cmd_read;\n  assign core_ext2itcm_icb_cmd_wdata = ext2itcm_icb_cmd_wdata;\n  assign core_ext2itcm_icb_cmd_wmask = ext2itcm_icb_cmd_wmask;\n  assign core_ext2itcm_icb_rsp_valid = ext2itcm_icb_rsp_valid;\n  assign core_ext2itcm_icb_rsp_ready = ext2itcm_icb_rsp_ready;\n  assign core_ext2itcm_icb_rsp_err = ext2itcm_icb_rsp_err;\n  assign core_ext2itcm_icb_rsp_rdata = ext2itcm_icb_rsp_rdata;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 19, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interfaces (Optional)\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n  // DTCM Interfaces (Optional)\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n// Submodules instantiation and connections\ne203_reset_ctrl u_e203_reset_ctrl (\n  .clk(clk),\n  .rst_n(rst_n),\n  .test_mode(1'b0), // Assuming test_mode is not used\n  .rst_core(),\n  .rst_itcm(),\n  .rst_dtcm(),\n  .rst_aon()\n);\n\ne203_clk_ctrl u_e203_clk_ctrl (\n  .clk(clk),\n  .rst_n(rst_n),\n  .test_mode(1'b0), // Assuming test_mode is not used\n  .core_cgstop(1'b0), // Assuming core_cgstop is not used\n  .core_ifu_active(1'b0), // Assuming core_ifu_active is not used\n  .core_exu_active(1'b0), // Assuming core_exu_active is not used\n  .core_lsu_active(1'b0), // Assuming core_lsu_active is not used\n  .core_biu_active(1'b0), // Assuming core_biu_active is not used\n  .core_wfi(core_wfi),\n  .clk_aon(),\n  .clk_core_ifu(),\n  .clk_core_exu(),\n  .clk_core_lsu(),\n  .clk_core_biu()\n`ifdef E203_HAS_ITCM\n  ,.itcm_active(1'b0), // Assuming itcm_active is not used\n  .itcm_ls(itcm_ls),\n  .clk_itcm(clk_itcm_ram)\n`endif\n`ifdef E203_HAS_DTCM\n  ,.dtcm_active(1'b0), // Assuming dtcm_active is not used\n  .dtcm_ls(dtcm_ls),\n  .clk_dtcm()\n`endif\n);\n\ne203_irq_sync u_e203_irq_sync (\n  .clk(clk),\n  .rst_n(rst_n),\n  .dbg_irq_a(dbg_irq_a),\n  .ext_irq_a(ext_irq_a),\n  .sft_irq_a(sft_irq_a),\n  .tmr_irq_a(tmr_irq_a),\n  .dbg_irq_r(dbg_irq_r),\n  .ext_irq_r(),\n  .sft_irq_r(),\n  .tmr_irq_r()\n);\n\ne203_core u_e203_core (\n  .inspect_pc(inspect_pc),\n  .core_wfi(core_wfi),\n  .tm_stop(tm_stop),\n  .core_cgstop(),\n  .tcm_cgstop(),\n  .pc_rtvec(pc_rtvec),\n  .core_mhartid(core_mhartid),\n  .dbg_irq_r(dbg_irq_r),\n  .lcl_irq_r(),\n  .evt_r(),\n  .ext_irq_r(),\n  .sft_irq_r(),\n  .tmr_irq_r(),\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 7, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  reg unalgn_flg;\n  reg [E203_XLEN-1:0] leftover;\n\n  // State machine states\n  localparam ICB_STATE_IDLE = 4'd0;\n  localparam ICB_STATE_1ST = 4'd1;\n  localparam ICB_STATE_AMOALU = 4'd4;\n  localparam ICB_STATE_AMORDY = 4'd5;\n  localparam ICB_STATE_WAIT2ND = 4'd2;\n  localparam ICB_STATE_2ND = 4'd3;\n  localparam ICB_STATE_WBCK = 4'd6;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else begin\n      case (icb_state)\n        ICB_STATE_IDLE: begin\n          if (agu_i_valid & oitf_empty & ~flush_pulse) begin\n            icb_state <= ICB_STATE_1ST;\n          end\n        end\n        ICB_STATE_1ST: begin\n          if (agu_icb_rsp_valid | flush_pulse) begin\n            icb_state <= ICB_STATE_AMOALU;\n          end\n        end\n        ICB_STATE_AMOALU: begin\n          icb_state <= ICB_STATE_AMORDY;\n        end\n        ICB_STATE_AMORDY: begin\n          icb_state <= ICB_STATE_WAIT2ND;\n        end\n        ICB_STATE_WAIT2ND: begin\n          if (agu_icb_cmd_ready | flush_pulse) begin\n            icb_state <= ICB_STATE_2ND;\n          end\n        end\n        ICB_STATE_2ND: begin\n          if (agu_icb_rsp_valid | flush_pulse) begin\n            icb_state <= ICB_STATE_WBCK;\n          end\n        end\n        ICB_STATE_WBCK: begin\n          if (agu_o_ready | flush_pulse) begin\n            icb_state <= ICB_STATE_IDLE;\n          end\n        end\n      endcase\n    end\n  end\n\n  // Output logic\n  assign agu_i_ready = (icb_state == ICB_STATE_IDLE);\n  assign agu_o_valid = (icb_state == ICB_STATE_WBCK);\n  assign agu_icb_cmd_valid = (icb_state == ICB_STATE_1ST) | (icb_state == ICB_STATE_2ND);\n  assign agu_icb_rsp_ready = (icb_state == ICB_STATE_1ST) | (icb_state == ICB_STATE_2ND);\n  assign agu_o_wbck_wdat = agu_icb_rsp_rdata;\n  assign agu_o_wbck_err = agu_icb_rsp_err;\n  assign agu_o_cmt_misalgn = unalgn_flg;\n  assign agu_o_cmt_ld = agu_i_info[E203_DECINFO_AGU_LOAD];\n  assign agu_o_cmt_stamo = agu_i_info[E203_DECINFO_AGU_STORE] | agu_i_info[E203_DECINFO_AGU_AMO];\n  assign agu_o_cmt_buserr = agu_icb_rsp_err;\n  assign agu_o_cmt_badaddr = agu_icb_cmd_addr;\n\n  // ALU operation control\n  assign agu_req_alu_op1 = agu_i_rs1;\n  assign agu_req_alu_op2 = agu_i_imm;\n  assign agu_req_alu_swap = agu_i_info[E203_DECINFO_AGU_AMOSWAP];\n  assign agu_req_alu_add = agu_i_info[E203_DECINFO_AGU_AMOADD];\n  assign agu_req_alu_and = agu_i_info[E203_DECINFO_AGU_AMOAND];\n  assign agu_req_alu_or = agu_i_info[E203_DECINFO_AGU_AMOOR];\n  assign agu_req_alu_xor = agu_i_info[E203_DECINFO_AGU_AMOXOR];\n  assign agu_req_alu_max = agu_i_info[E203_DECINFO_AGU_AMOMAX];\n  assign agu_req_alu_min = agu_i_info[E203_DECINFO_AGU_AMOMIN];\n  assign agu_req_alu_maxu = agu_i_info[E203_DECINFO_AGU_AMOMAXU];\n  assign agu_req_alu_minu = agu_i_info[E203_DECINFO_AGU_AMOMINU];\n\n  // Shared buffer logic\n  assign agu_sbf_0_ena = (icb_state == ICB_STATE_AMOALU);\n  assign agu_sbf_0_nxt = agu_req_alu_res;\n  assign agu_sbf_1_ena = (icb_state == ICB_STATE_AMORDY);\n  assign agu_sbf_1_nxt = agu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 1, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // CSR Access Illegal Flag\n  assign csr_access_ilgl = 1'b0;\n\n  // Privilege Mode\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'h0;\n      mie <= 32'h0;\n      mip <= 32'h0;\n      mtvec <= 32'h0;\n      mscratch <= 32'h0;\n      mepc <= 32'h0;\n      mcause <= 32'h0;\n      mbadaddr <= 32'h0;\n      mcycle <= 32'h0;\n      minstret <= 32'h0;\n      mvendorid <= 32'h0;\n      marchid <= 32'h0;\n      mimpid <= 32'h0;\n      mhartid <= 32'h0;\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat;\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat;\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hF11: mvendorid <= wbck_csr_dat;\n        12'hF12: marchid <= wbck_csr_dat;\n        12'hF13: mimpid <= wbck_csr_dat;\n        12'hF14: mhartid <= wbck_csr_dat;\n        default: ;\n      endcase\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = 32'h0;\n    endcase\n  end\n\n  // Other Outputs\n  assign tm_stop = 1'b0;\n  assign core_cgstop = 1'b0;\n  assign tcm_cgstop = 1'b0;\n  assign itcm_nohold = 1'b0;\n  assign mdv_nob2b = 1'b0;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = 1'b0;\n  assign wr_dpc_ena = 1'b0;\n  assign wr_dscratch_ena = 1'b0;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 8, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire state_idle_exit_ena;\n  wire state_1st_exit_ena;\n  wire state_amoalu_exit_ena;\n  wire state_amordy_exit_ena;\n  wire state_wait2nd_exit_ena;\n  wire state_2nd_exit_ena;\n  wire state_wbck_exit_ena;\n  wire flush_block;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0; // ICB_STATE_IDLE\n    end else begin\n      if (state_idle_exit_ena) begin\n        icb_state <= 4'd1; // ICB_STATE_1ST\n      end else if (state_1st_exit_ena) begin\n        icb_state <= 4'd4; // ICB_STATE_AMOALU\n      end else if (state_amoalu_exit_ena) begin\n        icb_state <= 4'd5; // ICB_STATE_AMORDY\n      end else if (state_amordy_exit_ena) begin\n        icb_state <= 4'd2; // ICB_STATE_WAIT2ND\n      end else if (state_wait2nd_exit_ena) begin\n        icb_state <= 4'd3; // ICB_STATE_2ND\n      end else if (state_2nd_exit_ena) begin\n        icb_state <= 4'd6; // ICB_STATE_WBCK\n      end else if (state_wbck_exit_ena) begin\n        icb_state <= 4'd0; // ICB_STATE_IDLE\n      end\n    end\n  end\n\n  // State transition conditions\n  assign state_idle_exit_ena = icb_state == 4'd0 && agu_icb_cmd_hsked && !flush_pulse;\n  assign state_1st_exit_ena = icb_state == 4'd1 && (agu_icb_rsp_hsked || flush_pulse);\n  assign state_amoalu_exit_ena = icb_state == 4'd4 && (1'b1 || flush_pulse);\n  assign state_amordy_exit_ena = icb_state == 4'd5 && (1'b1 || flush_pulse);\n  assign state_wait2nd_exit_ena = icb_state == 4'd2 && (agu_icb_cmd_ready || flush_pulse);\n  assign state_2nd_exit_ena = icb_state == 4'd3 && (agu_icb_rsp_hsked || flush_pulse);\n  assign state_wbck_exit_ena = icb_state == 4'd6 && (agu_o_ready || flush_pulse);\n\n  // Flush block logic\n  assign flush_block = flush_req && icb_state == 4'd0;\n\n  // Output assignments\n  assign agu_i_ready = !flush_block && (icb_state == 4'd0);\n  assign agu_o_valid = icb_state == 4'd6;\n  assign agu_icb_cmd_valid = (icb_state == 4'd0 || icb_state == 4'd2) && !flush_block;\n  assign agu_icb_rsp_ready = (icb_state == 4'd1 || icb_state == 4'd3) && !flush_block;\n\n  // Additional logic for address generation, AMO operations, etc.\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 9, "code": "module e203_exu_alu_lsuagu (\n  input  wire                  agu_i_valid,\n  output wire                  agu_i_ready,\n  input  wire [E203_XLEN-1:0]  agu_i_rs1,\n  input  wire [E203_XLEN-1:0]  agu_i_rs2,\n  input  wire [E203_XLEN-1:0]  agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                  agu_i_longpipe,\n  input  wire                  flush_req,\n  input  wire                  flush_pulse,\n  output wire                  amo_wait,\n  input  wire                  oitf_empty,\n  output wire                  agu_o_valid,\n  input  wire                  agu_o_ready,\n  output wire [E203_XLEN-1:0]  agu_o_wbck_wdat,\n  output wire                  agu_o_wbck_err,\n  output wire                  agu_o_cmt_misalgn,\n  output wire                  agu_o_cmt_ld,\n  output wire                  agu_o_cmt_stamo,\n  output wire                  agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                  agu_icb_cmd_valid,\n  input  wire                  agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                  agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]  agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                  agu_icb_cmd_back2agu,\n  output wire                  agu_icb_cmd_lock,\n  output wire                  agu_icb_cmd_excl,\n  output wire [1:0]            agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                  agu_icb_cmd_usign,\n  input  wire                  agu_icb_rsp_valid,\n  output wire                  agu_icb_rsp_ready,\n  input  wire                  agu_icb_rsp_err,\n  input  wire                  agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]  agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  output wire                  agu_req_alu_swap,\n  output wire                  agu_req_alu_add,\n  output wire                  agu_req_alu_and,\n  output wire                  agu_req_alu_or,\n  output wire                  agu_req_alu_xor,\n  output wire                  agu_req_alu_max,\n  output wire                  agu_req_alu_min,\n  output wire                  agu_req_alu_maxu,\n  output wire                  agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire                  agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_0_r,\n  output wire                  agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals and logic for the AGU module\n\n  // State machine for AMO operations\n  localparam ICB_STATE_IDLE   = 4'd0;\n  localparam ICB_STATE_1ST    = 4'd1;\n  localparam ICB_STATE_AMOALU = 4'd4;\n  localparam ICB_STATE_AMORDY = 4'd5;\n  localparam ICB_STATE_WAIT2ND = 4'd2;\n  localparam ICB_STATE_2ND    = 4'd3;\n  localparam ICB_STATE_WBCK   = 4'd6;\n\n  // State transition logic\n  reg [3:0] icb_state;\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && agu_icb_cmd_hsked && ~flush_pulse;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && (agu_icb_rsp_hsked || flush_pulse);\n  wire state_amoalu_exit_ena = icb_state == ICB_STATE_AMOALU && (1'b1 || flush_pulse);\n  wire state_amordy_exit_ena = icb_state == ICB_STATE_AMORDY && (1'b1 || flush_pulse);\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && (agu_icb_cmd_ready || flush_pulse);\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && (agu_icb_rsp_hsked || flush_pulse);\n  wire state_wbck_exit_ena = icb_state == ICB_STATE_WBCK && (agu_o_ready || flush_pulse);\n\n  // State machine update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else begin\n      if (state_idle_exit_ena) begin\n        icb_state <= ICB_STATE_1ST;\n      end else if (state_1st_exit_ena) begin\n        icb_state <= ICB_STATE_AMOALU;\n      end else if (state_amoalu_exit_ena) begin\n        icb_state <= ICB_STATE_AMORDY;\n      end else if (state_amordy_exit_ena) begin\n        icb_state <= ICB_STATE_WAIT2ND;\n      end else if (state_wait2nd_exit_ena) begin\n        icb_state <= ICB_STATE_2ND;\n      end else if (state_2nd_exit_ena) begin\n        icb_state <= ICB_STATE_WBCK;\n      end else if (state_wbck_exit_ena) begin\n        icb_state <= ICB_STATE_IDLE;\n      end\n    end\n  end\n\n  // Additional logic for address generation, AMO operations, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 6, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 2, "code": "module e203_exu_csr (\n  input  wire         nonflush_cmt_ena, // not used\n  input  wire         csr_ena,\n  input  wire         csr_wr_en,\n  input  wire         csr_rd_en,\n  input  wire [11:0]  csr_idx,\n  output wire         csr_access_ilgl,\n  output wire         tm_stop,\n  output wire         core_cgstop,\n  output wire         tcm_cgstop,\n  output wire         itcm_nohold,\n  output wire         mdv_nob2b,\n  output wire [31:0]  read_csr_dat,\n  input  wire [31:0]  wbck_csr_dat,\n  input  wire [0:0]   core_mhartid,\n  input  wire         ext_irq_r,\n  input  wire         sft_irq_r,\n  input  wire         tmr_irq_r,\n  output wire         status_mie_r,\n  output wire         mtie_r,\n  output wire         msie_r,\n  output wire         meie_r,\n  output wire         wr_dcsr_ena,\n  output wire         wr_dpc_ena,\n  output wire         wr_dscratch_ena,\n  input  wire [31:0]  dcsr_r,\n  input  wire [31:0]  dpc_r,\n  input  wire [31:0]  dscratch_r,\n  output wire         u_mode,\n  output wire         s_mode,\n  output wire         h_mode,\n  output wire         m_mode,\n  input  wire [31:0]  cmt_badaddr,\n  input  wire         cmt_badaddr_ena,\n  input  wire [31:0]  cmt_epc,\n  input  wire         cmt_epc_ena,\n  input  wire [31:0]  cmt_cause,\n  input  wire         cmt_cause_ena,\n  input  wire         cmt_status_ena,\n  input  wire         cmt_instret_ena,\n  input  wire         cmt_mret_ena,\n  output wire [31:0]  csr_epc_r,\n  output wire [31:0]  csr_dpc_r,\n  output wire [31:0]  csr_mtvec_r,\n  input  wire         clk_aon,\n  input  wire         clk,\n  input  wire         rst_n\n);\n\n  // CSR registers\n  reg [31:0] mstatus;\n  reg [31:0] mie;\n  reg [31:0] mip;\n  reg [31:0] mtvec;\n  reg [31:0] mscratch;\n  reg [31:0] mepc;\n  reg [31:0] mcause;\n  reg [31:0] mbadaddr;\n  reg [31:0] mcycle;\n  reg [31:0] mcycleh;\n  reg [31:0] minstret;\n  reg [31:0] minstreth;\n  reg [31:0] mvendorid;\n  reg [31:0] marchid;\n  reg [31:0] mimpid;\n  reg [31:0] mhartid;\n  reg [31:0] mcounterstop;\n\n  // Default values for read-only CSRs\n  assign mvendorid = 32'h00000214; // Vendor ID\n  assign marchid = 32'hE203; // Architecture ID\n  assign mimpid = 32'h1; // Implementation ID\n  assign mhartid = {31'b0, core_mhartid}; // Hart ID\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'h00001800; // Default mstatus\n      mie <= 32'h0; // Default mie\n      mip <= 32'h0; // Default mip\n      mtvec <= 32'h0; // Default mtvec\n      mscratch <= 32'h0; // Default mscratch\n      mepc <= 32'h0; // Default mepc\n      mcause <= 32'h0; // Default mcause\n      mbadaddr <= 32'h0; // Default mbadaddr\n      mcycle <= 32'h0; // Default mcycle\n      mcycleh <= 32'h0; // Default mcycleh\n      minstret <= 32'h0; // Default minstret\n      minstreth <= 32'h0; // Default minstreth\n      mcounterstop <= 32'h0; // Default mcounterstop\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= {wbck_csr_dat[31:1], 1'b0};\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: mcounterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = mcounterstop;\n      default: read_csr_dat = 32'h0;\n    endcase\n  end\n\n  // CSR access illegal flag\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt enable status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR write enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR EPC and DPC read\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Custom control signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 3, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_PC_SIZE-1:0] excpirq_flush_pc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_ADDR_SIZE-1:0] mtval;\n  reg wfi_flag;\n  reg wfi_halt_req;\n  reg step_req;\n\n  // Exception and Interrupt Handling Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n      mcause <= 0;\n      mepc <= 0;\n      mtval <= 0;\n      wfi_flag <= 0;\n      wfi_halt_req <= 0;\n      step_req <= 0;\n    end else begin\n      // Exception handling logic\n      if (alu_excp_i_valid) begin\n        // Handle ALU exceptions\n        if (alu_excp_i_misalgn || alu_excp_i_buserr || alu_excp_i_ebreak || alu_excp_i_ecall ||\n            alu_excp_i_ifu_misalgn || alu_excp_i_ifu_buserr || alu_excp_i_ifu_ilegl) begin\n          mcause <= determine_mcause();\n          mepc <= alu_excp_i_pc;\n          mtval <= determine_mtval();\n          excpirq_flush_req <= 1;\n        end\n      end else if (longp_excp_i_valid) begin\n        // Handle long-pipe exceptions\n        mcause <= determine_longp_mcause();\n        mepc <= longp_excp_i_pc;\n        mtval <= longp_excp_i_badaddr;\n        excpirq_flush_req <= 1;\n      end else if (dbg_irq_r || lcl_irq_r || ext_irq_r || sft_irq_r || tmr_irq_r) begin\n        // Handle interrupts\n        mcause <= determine_irq_mcause();\n        mepc <= alu_excp_i_pc;\n        excpirq_flush_req <= 1;\n      end else if (alu_excp_i_wfi) begin\n        // Handle WFI instruction\n        wfi_flag <= 1;\n        wfi_halt_req <= 1;\n      end\n    end\n  end\n\n  // Determine mcause based on exception type\n  function [E203_XLEN-1:0] determine_mcause;\n    // Logic to determine mcause\n  endfunction\n\n  // Determine mtval based on exception type\n  function [E203_ADDR_SIZE-1:0] determine_mtval;\n    // Logic to determine mtval\n  endfunction\n\n  // Determine mcause for long-pipe exceptions\n  function [E203_XLEN-1:0] determine_longp_mcause;\n    // Logic to determine mcause for long-pipe exceptions\n  endfunction\n\n  // Determine mcause for interrupts\n  function [E203_XLEN-1:0] determine_irq_mcause;\n    // Logic to determine mcause for interrupts\n  endfunction\n\n  // WFI Handling Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      core_wfi <= 0;\n      wfi_halt_ifu_req <= 0;\n      wfi_halt_exu_req <= 0;\n    end else if (wfi_flag) begin\n      if (wfi_halt_ifu_ack && wfi_halt_exu_ack) begin\n        core_wfi <= 1;\n      end\n      if (dbg_irq_r || lcl_irq_r || ext_irq_r || sft_irq_r || tmr_irq_r) begin\n        core_wfi <= 0;\n        wfi_halt_ifu_req <= 0;\n        wfi_halt_exu_req <= 0;\n      end\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 4, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld, fifo_i_rdy, fifo_o_vld, fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat, fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // Instantiate FIFO\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 2, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) &\n                        (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign lsu_wbck_i_ready = wbck_i_ready & lsu_wbck_i_valid;\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & nice_longp_wbck_i_valid;\n`endif\n\n  assign oitf_ret_ena = wbck_i_ready & wbck_i_valid & ~oitf_empty & (wbck_i_itag == oitf_ret_ptr);\n\n  assign longp_wbck_o_valid = oitf_ret_rdwen & wbck_i_valid & ~wbck_i_err & oitf_ret_ena;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_err & wbck_i_valid & oitf_ret_ena;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 5, "code": "module e203_exu_disp(\n  input  wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input  oitf_empty,\n  input  amo_wait,\n  input  disp_i_valid,\n  output disp_i_ready,\n  input  disp_i_rs1x0,\n  input  disp_i_rs2x0,\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [E203_XLEN-1:0] disp_i_rs1,\n  input  [E203_XLEN-1:0] disp_i_rs2,\n  input  disp_i_rdwen,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  [E203_XLEN-1:0] disp_i_imm,\n  input  [E203_PC_SIZE-1:0] disp_i_pc,\n  input  disp_i_misalgn,\n  input  disp_i_buserr,\n  input  disp_i_ilegl,\n  output disp_o_alu_valid,\n  input  disp_o_alu_ready,\n  input  disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input  oitfrd_match_disprs1,\n  input  oitfrd_match_disprs2,\n  input  oitfrd_match_disprs3,\n  input  oitfrd_match_disprd,\n  input  [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input  disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire dep = raw_dep | waw_dep;\n\n  wire csr = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n  wire agu = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_AGU);\n  wire bjp = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP);\n\n  wire fence = bjp & disp_i_info[E203_DECINFO_BJP_FENCE];\n  wire fencei = bjp & disp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  wire disp_condition = \n      (~csr | oitf_empty) & \n      (~fence | oitf_empty) &\n      (~wfi_halt_exu_req | oitf_empty) &\n      (~dep) &\n      (~disp_o_alu_longpipe | disp_oitf_ready);\n\n  assign disp_i_ready = disp_condition & disp_o_alu_ready;\n\n  assign disp_o_alu_valid = disp_i_valid & disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? 0 : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? 0 : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_o_alu_valid & disp_o_alu_longpipe & disp_o_alu_ready;\n  assign disp_oitf_rs1fpu = 0;\n  assign disp_oitf_rs2fpu = 0;\n  assign disp_oitf_rs3fpu = 0;\n  assign disp_oitf_rdfpu = 0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = 0;\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = oitf_empty & ~amo_wait;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 3, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic for instruction fields\n  // ...\n\n  // Instruction decoding\n  assign dec_rs1x0 = (dec_rs1idx == 5'b00000);\n  assign dec_rs2x0 = (dec_rs2idx == 5'b00000);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd is written */;\n  assign dec_rs1idx = /* logic to extract rs1 index */;\n  assign dec_rs2idx = /* logic to extract rs2 index */;\n  assign dec_rdidx = /* logic to extract rd index */;\n  assign dec_info = /* logic to generate decode information bus */;\n  assign dec_imm = /* logic to extract immediate value */;\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = /* logic to determine if instruction is illegal */;\n  assign dec_mulhsu = /* logic to determine if instruction is mulhsu */;\n  assign dec_mul = /* logic to determine if instruction is mul */;\n  assign dec_div = /* logic to determine if instruction is div */;\n  assign dec_rem = /* logic to determine if instruction is rem */;\n  assign dec_divu = /* logic to determine if instruction is divu */;\n  assign dec_remu = /* logic to determine if instruction is remu */;\n  assign dec_rv32 = /* logic to determine if instruction is 32-bit */;\n  assign dec_bjp = /* logic to determine if instruction is branch/jump */;\n  assign dec_jal = /* logic to determine if instruction is jal */;\n  assign dec_jalr = /* logic to determine if instruction is jalr */;\n  assign dec_bxx = /* logic to determine if instruction is branch */;\n  assign dec_jalr_rs1idx = /* logic to extract jalr rs1 index */;\n  assign dec_bjp_imm = /* logic to extract branch/jump immediate */;\n\n  `ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if instruction is NICE */;\n  assign nice_cmt_off_ilgl_o = nice_xs_off & dec_nice;\n  `endif\n\n  // Additional decode logic\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 4, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire nonalu_excpirq_flush_req;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n  wire [E203_XLEN-1:0] mcause_value;\n  wire [E203_PC_SIZE-1:0] mepc_value;\n  wire [E203_ADDR_SIZE-1:0] mtval_value;\n\n  // WFI handling\n  assign wfi_halt_ifu_req = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_exu_req = wfi_halt_ifu_req & ~wfi_irq_mask;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n\n  // Exception handling\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_entry_req | nonalu_excpirq_flush_req | alu_excp_flush_req;\n  assign excpirq_flush_add_op1 = dbg_entry_req ? 32'h800 : (longp_excp_flush_req | alu_excp_flush_req) ? 32'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // mcause register update\n  assign mcause_value = (longp_excp_flush_req) ? {1'b0, longp_excp_i_insterr} :\n                        (alu_excp_flush_req) ? {1'b0, alu_excp_i_ifu_ilegl} :\n                        {1'b1, dbg_irq_r};\n\n  // mepc register update\n  assign mepc_value = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n\n  // mtval register update\n  assign mtval_value = longp_excp_flush_req ? longp_excp_i_badaddr :\n                       alu_excp_flush_req ? alu_excp_i_pc : 32'h0;\n\n  // Register enable signals\n  assign cmt_badaddr_ena = excpirq_flush_req;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n\n  // Debug handling\n  assign dbg_entry_req = ~dbg_mode & (dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r);\n\n  // Exception active signal\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 3, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // CSR Access Control\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Privilege Mode\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n\n  // Custom Registers\n  reg [E203_XLEN-1:0] mcounterstop;\n\n  // Debug Registers\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcounterstop;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_ADDR_SIZE{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mcounterstop <= {E203_XLEN{1'b0}};\n      mvendorid <= 32'h536;\n      marchid <= 32'hE203;\n      mimpid <= 32'h1;\n      mhartid <= core_mhartid;\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'h344: mip <= wbck_csr_dat;\n        12'hB00: mcounterstop <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Register Write Enable\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // Debug Register Read\n  assign csr_dpc_r = dpc;\n  assign csr_epc_r = mepc;\n  assign csr_mtvec_r = mtvec;\n\n  // Clock Gating Control\n  assign core_cgstop = mcounterstop[0];\n  assign tcm_cgstop = mcounterstop[1];\n  assign itcm_nohold = mcounterstop[2];\n  assign mdv_nob2b = mcounterstop[3];\n\n  // Timer Stop\n  assign tm_stop = mcounterstop[4];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 8, "code": "module e203_srams (\n  input  wire                         clk_itcm_ram,\n  input  wire                         rst_itcm,\n  input  wire                         itcm_ram_sd,\n  input  wire                         itcm_ram_ds,\n  input  wire                         itcm_ram_ls,\n  input  wire                         itcm_ram_cs,\n  input  wire                         itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0]  itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0]  itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0]  itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0]  itcm_ram_dout,\n\n  input  wire                         clk_dtcm_ram,\n  input  wire                         rst_dtcm,\n  input  wire                         dtcm_ram_sd,\n  input  wire                         dtcm_ram_ds,\n  input  wire                         dtcm_ram_ls,\n  input  wire                         dtcm_ram_cs,\n  input  wire                         dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm),\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm),\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 3, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] operand1;\n  reg [E203_XLEN-1:0] operand2;\n  reg [E203_XLEN-1:0] quotient;\n  reg [E203_XLEN-1:0] remainder;\n  reg [5:0] cycle_count;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH = 5'b00001;\n  localparam MULDIV_STATE_EXEC = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n      cycle_count <= 6'b0;\n    end else begin\n      state <= next_state;\n      if (state == MULDIV_STATE_EXEC) begin\n        cycle_count <= cycle_count + 1;\n      end else begin\n        cycle_count <= 6'b0;\n      end\n    end\n  end\n\n  // Next state logic\n  always @(*) begin\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (cycle_count == 6'd16) begin\n          if (/* condition for division correction */) begin\n            next_state = MULDIV_STATE_REMD_CHCK;\n          end else begin\n            next_state = MULDIV_STATE_0TH;\n          end\n        end else begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for quotient correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && (cycle_count == 6'd16);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = operand1;\n  assign muldiv_req_alu_op2 = operand2;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = (state == MULDIV_STATE_EXEC);\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = {1'b0, result};\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = {1'b0, result};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 9, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(~rst_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(~rst_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 7, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  // Additional ports for submodules\n  // ...\n);\n\n// Instantiate submodules and connect them\n// ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 4, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n  `ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n  `endif\n);\n\n  // CSR registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcounterstop;\n\n  // CSR access logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h301: read_csr_dat = misa;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = mcounterstop;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_ADDR_SIZE{1'b0}};\n      misa <= {E203_XLEN{1'b0}};\n      mvendorid <= 536;\n      marchid <= \"E203\";\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcounterstop <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hBFF: mcounterstop <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Debug CSR logic\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Clock gating and stop signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\n  // CSR read outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  `ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 8, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 5, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n;\n    wire sync_rst_n;\n\n    assign async_rst_n = test_mode ? rst_n : 1'b1;\n\n    generate\n        if (MASTER) begin : gen_master_reset\n            reg [RST_SYNC_LEVEL-1:0] rst_sync;\n            always @(posedge clk or negedge async_rst_n) begin\n                if (!async_rst_n) begin\n                    rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n                end else begin\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n                end\n            end\n            assign sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin : gen_slave_reset\n            assign sync_rst_n = async_rst_n;\n        end\n    endgenerate\n\n    assign rst_core = ~sync_rst_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = ~sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~sync_rst_n;\n`endif\n    assign rst_aon = ~sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 9, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  `ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  `endif\n  `ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n  `endif\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 18, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n`endif\n);\n\n  // Local Parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO `ifdef E203_HAS_MEM_ITF 6 `else 5 `endif `else `ifdef E203_HAS_MEM_ITF 5 `else 4 `endif `endif;\n\n  // Instantiate ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 2, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_req;\n  wire flush_pulse;\n  wire pipe_flush_req;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp submodule\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(pipe_flush_req),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv submodule\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(pipe_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena;\n  assign flush_req = pipe_flush_req;\n  assign flush_pulse = flush_req & flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 3, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate the exception handling module\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the branch resolution module\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Generate flush request and pulse\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n\n  // Generate commit enable signals\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 4, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Flush Logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n\n  // Commit Logic\n  assign commit_mret = alu_cmt_i_mret & alu_cmt_i_valid & alu_cmt_i_ready;\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 5, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg wfi_flag;\n  reg wfi_halt_req;\n  reg step_req;\n  reg [E203_PC_SIZE-1:0] flush_pc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_ADDR_SIZE-1:0] mtval;\n\n  // WFI handling\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      wfi_flag <= 1'b0;\n      wfi_halt_req <= 1'b0;\n    end else begin\n      if (alu_excp_i_wfi & cmt_ena & ~dbg_mode) begin\n        wfi_halt_req <= 1'b1;\n      end else if (wfi_halt_ifu_ack & wfi_halt_exu_ack) begin\n        wfi_flag <= 1'b1;\n      end else if (dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r | ext_irq_r | sft_irq_r | tmr_irq_r) begin\n        wfi_flag <= 1'b0;\n        wfi_halt_req <= 1'b0;\n      end\n    end\n  end\n\n  assign core_wfi = wfi_flag;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception handling\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mcause <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mtval <= {E203_ADDR_SIZE{1'b0}};\n    end else if (excpirq_flush_req) begin\n      if (longp_excp_i_valid) begin\n        mcause <= {1'b0, longp_excp_i_buserr ? 5'd7 : 5'd16};\n        mepc <= longp_excp_i_pc;\n        mtval <= longp_excp_i_badaddr;\n      end else if (alu_excp_i_valid) begin\n        mcause <= {1'b0, alu_excp_i_misalgn ? 5'd0 : alu_excp_i_buserr ? 5'd1 : alu_excp_i_ilegl ? 5'd2 : alu_excp_i_ebreak ? 5'd3 : alu_excp_i_ecall ? 5'd11 : 5'd0};\n        mepc <= alu_excp_i_pc;\n        mtval <= alu_excp_i_instr;\n      end\n    end\n  end\n\n  assign excpirq_flush_req = longp_excp_i_valid | alu_excp_i_valid;\n  assign excpirq_flush_add_op1 = (dbg_mode ? 32'h800 : csr_mtvec_r);\n  assign excpirq_flush_add_op2 = 32'h0;\n  assign cmt_badaddr = mtval;\n  assign cmt_epc = mepc;\n  assign cmt_cause = mcause;\n  assign cmt_badaddr_ena = excpirq_flush_req;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n  assign cmt_dpc = mepc;\n  assign cmt_dpc_ena = excpirq_flush_req;\n  assign cmt_dcause = mcause[2:0];\n  assign cmt_dcause_ena = excpirq_flush_req;\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 2, "code": "`include \"e203_defines.v\"\n\nmodule e203_ifu (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  output wire [E203_PC_SIZE-1:0]  inspect_pc,\n  output wire                     ifu_active,\n  input  wire                     itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]  pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]    ifu_o_pc,\n  output wire                       ifu_o_pc_vld,\n  output wire                       ifu_o_misalgn,\n  output wire                       ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire                       ifu_o_prdt_taken,\n  output wire                       ifu_o_muldiv_b2b,\n  output wire                       ifu_o_valid,\n  input  wire                       ifu_o_ready,\n\n  input  wire                       pipe_flush_req,\n  output wire                       pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]    pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]    pipe_flush_add_op2,\n\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]    pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire                       ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]  itcm_region_indic,\n  output wire                       ifu2itcm_icb_cmd_valid,\n  input  wire                       ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                       ifu2itcm_icb_rsp_valid,\n  output wire                       ifu2itcm_icb_rsp_ready,\n  input  wire                       ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire                       ifu2biu_icb_cmd_valid,\n  input  wire                       ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]  ifu2biu_icb_cmd_addr,\n  input  wire                       ifu2biu_icb_rsp_valid,\n  output wire                       ifu2biu_icb_rsp_ready,\n  input  wire                       ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire                       ifu_halt_req,\n  output wire                       ifu_halt_ack,\n\n  input  wire                       oitf_empty,\n  input  wire [E203_XLEN-1:0]       rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]       rf2ifu_rs1,\n  input  wire                       dec2ifu_rs1en,\n  input  wire                       dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire                       dec2ifu_mulhsu,\n  input  wire                       dec2ifu_div,\n  input  wire                       dec2ifu_rem,\n  input  wire                       dec2ifu_divu,\n  input  wire                       dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 6, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n`endif\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 5, "code": "module e203_exu_commit(\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire flush_req;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(pipe_flush_req),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(pipe_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena;\n  assign flush_pulse = pipe_flush_req & flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 5, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]          muldiv_sbf_0_r,\n  output wire [32:0]          muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_res_add = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sub = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_xor = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sll = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_srl = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_sra = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_or  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_and = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_res_add) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_res_sub) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_res_xor) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_res_sll) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_res_srl) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_res_sra) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_res_or)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_res_and);\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_res_add = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_res_add;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_res_add = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_res_add;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_add = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_sub = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n  assign muldiv_req_alu_res = (muldiv_req_alu_add ? muldiv_res_add : muldiv_res_sub);\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 1, "code": "module itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [1:0] sram_sel;\n  wire ifu_holdup_set, ifu_holdup_clr, ifu_holdup_ena;\n  reg ifu_holdup_r;\n\n  // Clock gating logic\n  assign clk_itcm_ram = test_mode ? clk : (tcm_cgstop ? clk : (itcm_active ? clk : 1'b0));\n\n  // IFU holdup logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ifu_holdup_r <= 1'b0;\n    end else if (ifu_holdup_ena) begin\n      ifu_holdup_r <= ifu_holdup_set ? 1'b1 : (ifu_holdup_clr ? 1'b0 : ifu_holdup_r);\n    end\n  end\n\n  // Data width conversion and arbitration logic\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bus arbitration logic\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM control logic\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 6, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Exception and Interrupt Handling\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Branch Resolution\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 5, "code": "module e203_exu_csr (\n  input  wire nonflush_cmt_ena, // not used\n  input  wire csr_ena,\n  input  wire csr_wr_en,\n  input  wire csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input  wire [E203_XLEN-1:0] wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire ext_irq_r,\n  input  wire sft_irq_r,\n  input  wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0] cmt_epc,\n  input  wire cmt_epc_ena,\n  input  wire [E203_XLEN-1:0] cmt_cause,\n  input  wire cmt_cause_ena,\n  input  wire cmt_status_ena,\n  input  wire cmt_instret_ena,\n  input  wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input  wire clk_aon,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal registers for CSR\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n\n  // CSR Access Logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h301: read_csr_dat = misa;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'b0;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mtvec <= 32'b0;\n      mscratch <= 32'b0;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      misa <= 32'b0;\n      mvendorid <= 32'b0;\n      marchid <= 32'b0;\n      mimpid <= 32'b0;\n      mhartid <= 32'b0;\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat;\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat;\n        12'h301: misa <= wbck_csr_dat;\n        12'hF11: mvendorid <= wbck_csr_dat;\n        12'hF12: marchid <= wbck_csr_dat;\n        12'hF13: mimpid <= wbck_csr_dat;\n        12'hF14: mhartid <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt Enable Signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR EPC and DPC Read\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n\n  // Machine Trap Vector\n  assign csr_mtvec_r = mtvec;\n\n  // Custom Control Signals\n  assign tm_stop = 1'b0; // Example implementation\n  assign core_cgstop = 1'b0; // Example implementation\n  assign tcm_cgstop = 1'b0; // Example implementation\n  assign itcm_nohold = 1'b0; // Example implementation\n  assign mdv_nob2b = 1'b0; // Example implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 7, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(pipe_flush_req),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(pipe_flush_req),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 5, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1x1_dep = ~oitf_empty;\n  wire jalr_rs1xn_dep = ~oitf_empty | (~ir_empty & ir_rs1en);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | ~jalr_rs1idx_cam_irrdidx;\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  wire rs1xn_rdrf_r;\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1x1_rdrf_r = dec_jalr_rs1x1;\n  wire jalr_rs1xn_rdrf_r = dec_jalr_rs1xn & rs1xn_rdrf_r;\n\n  assign prdt_pc_add_op1 = ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n                         | ({E203_PC_SIZE{dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n                         | ({E203_PC_SIZE{jalr_rs1x1_rdrf_r}} & rf2bpu_x1)\n                         | ({E203_PC_SIZE{jalr_rs1xn_rdrf_r}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign bpu_wait = dec_jalr & ((dec_jalr_rs1x1 & jalr_rs1x1_dep) | (dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr)));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 8, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire flush_req;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(pipe_flush_req),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(pipe_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena;\n  assign flush_pulse = pipe_flush_req & flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 6, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n`ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n`endif\n);\n\n  // CSR Registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mcounterstop;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // Default values for CSR registers\n  initial begin\n    mstatus = 32'h00001800; // Default mstatus with MPP set to 11\n    mie = 0;\n    mip = 0;\n    mtvec = `ifdef E203_SUPPORT_MTVEC E203_MTVEC_TRAP_BASE `else 0 `endif;\n    mscratch = `ifdef E203_SUPPORT_MSCRATCH 0 `else 0 `endif;\n    mepc = 0;\n    mcause = 0;\n    mbadaddr = 0;\n    mcycle = 0;\n    minstret = 0;\n    mcounterstop = 0;\n    dcsr = 0;\n    dpc = 0;\n    dscratch = 0;\n  end\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset all CSR registers\n      mstatus <= 32'h00001800;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= `ifdef E203_SUPPORT_MTVEC E203_MTVEC_TRAP_BASE `else 0 `endif;\n      mscratch <= `ifdef E203_SUPPORT_MSCRATCH 0 `else 0 `endif;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      minstret <= 0;\n      mcounterstop <= 0;\n      dcsr <= 0;\n      dpc <= 0;\n      dscratch <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hBFF: mcounterstop <= wbck_csr_dat;\n          12'h7b0: if (dbg_mode) dcsr <= wbck_csr_dat;\n          12'h7b1: if (dbg_mode) dpc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n          12'h7b2: if (dbg_mode) dscratch <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = {mepc, {E203_XLEN-E203_PC_SIZE{1'b0}}};\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = {mbadaddr, {E203_XLEN-E203_ADDR_SIZE{1'b0}}};\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      12'hBFF: read_csr_dat = mcounterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = {dpc, {E203_XLEN-E203_PC_SIZE{1'b0}}};\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // CSR Access Illegal\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt Enable Signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Write Enable Signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en && dbg_mode;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en && dbg_mode;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en && dbg_mode;\n\n  // CSR EPC and DPC\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n\n  // CSR MTVEC\n  assign csr_mtvec_r = mtvec;\n\n  // Custom Control Signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\n`ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0; // NICE is always enabled\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 6, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]          muldiv_sbf_0_r,\n  output wire [32:0]          muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res)\n                         | ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res)\n                         | ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res)\n                         | ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res)\n                         | ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res)\n                         | ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res)\n                         | ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)\n                         | ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n  assign muldiv_req_alu_res = ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res)\n                            | ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden (muldiv_sbf_0_ena),\n    .dnxt (muldiv_sbf_0_nxt),\n    .qout (muldiv_sbf_0_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden (muldiv_sbf_1_ena),\n    .dnxt (muldiv_sbf_1_nxt),\n    .qout (muldiv_sbf_1_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 2, "code": "module e203_lsu(\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  wire nice_mem_holdup,\n  input  wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  wire nice_icb_cmd_read,\n  input  wire [XLEN-1:0] nice_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input  wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Internal logic and state machine implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 8, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ppi_icb_enable,\n  input clint_icb_enable,\n  input plic_icb_enable,\n  input mem_icb_enable,\n  input fio_icb_enable,\n  input nice_mem_holdup,\n  input nice_req_ready,\n  input nice_rsp_multicyc_valid,\n  input nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n  input nice_icb_cmd_valid,\n  input nice_icb_cmd_addr,\n  input nice_icb_cmd_read,\n  input nice_icb_cmd_wdata,\n  input nice_icb_cmd_size,\n  input nice_icb_rsp_ready,\n  input nice_icb_rsp_rdata,\n  input nice_icb_rsp_err,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input [E203_ADDR_SIZE-1:0] dtcm_region_indic,\n  input [E203_ADDR_SIZE-1:0] itcm_region_indic\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .fio_region_indic(fio_region_indic),\n    .fio_icb_enable(fio_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 1, "code": "module e203_ifu_ift2icb (\n  input  wire                         itcm_nohold,\n  input  wire                         ifu_req_valid,\n  input  wire [PC_SIZE-1:0]           ifu_req_pc,\n  input  wire                         ifu_req_seq,\n  input  wire                         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0]           ifu_req_last_pc,\n  input  wire                         ifu_rsp_ready,\n  input  wire                         clk,\n  input  wire                         rst_n,\n\n  output wire                         ifu_req_ready,\n  output wire                         ifu_rsp_valid,\n  output wire                         ifu_rsp_err,\n  output wire [31:0]                  ifu_rsp_instr,\n\n  output wire                         ifu2itcm_icb_cmd_valid,\n  input  wire                         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0]   ifu2itcm_icb_cmd_addr,\n  input  wire                         ifu2itcm_icb_rsp_valid,\n  output wire                         ifu2itcm_icb_rsp_ready,\n  input  wire                         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0]   ifu2itcm_icb_rsp_rdata,\n\n  output wire                         ifu2biu_icb_cmd_valid,\n  input  wire                         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0]         ifu2biu_icb_cmd_addr,\n  input  wire                         ifu2biu_icb_rsp_valid,\n  output wire                         ifu2biu_icb_rsp_ready,\n  input  wire                         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_valid && ifu_req_ready;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_rsp_ready;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu2itcm_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && ifu_rsp_ready;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (ifu_req_seq ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         state_2nd_exit_ena ? ICB_STATE_IDLE : icb_state;\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {ifu_rsp_err, ifu_rsp_instr};\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_i_vld = ifu_rsp_valid;\n  wire ifu_rsp_bypbuf_o_rdy = ifu_rsp_ready;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(ifu_rsp_bypbuf_i_vld),\n    .i_rdy(ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // ICB Command Generation\n  wire ifu_icb_cmd_valid = ifu_req_valid && ifu_req_ready;\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = ifu_req_pc;\n\n  assign ifu2itcm_icb_cmd_valid = ifu_icb_cmd_valid && (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE);\n  assign ifu2itcm_icb_cmd_addr = ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0];\n\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && !ifu2itcm_icb_cmd_valid;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n\n  // ICB Response Handling\n  wire ifu_icb_rsp_valid = ifu2itcm_icb_rsp_valid || ifu2biu_icb_rsp_valid;\n  wire ifu_icb_rsp_err = (ifu2itcm_icb_rsp_valid && ifu2itcm_icb_rsp_err) || (ifu2biu_icb_rsp_valid && ifu2biu_icb_rsp_err);\n  wire [31:0] ifu_icb_rsp_rdata = ifu2itcm_icb_rsp_valid ? ifu2itcm_icb_rsp_rdata[31:0] : ifu2biu_icb_rsp_rdata[31:0];\n\n  assign ifu_rsp_valid = ifu_icb_rsp_valid;\n  assign ifu_rsp_err = ifu_icb_rsp_err;\n  assign ifu_rsp_instr = ifu_icb_rsp_rdata;\n\n  assign ifu2itcm_icb_rsp_ready = ifu_rsp_ready;\n  assign ifu2biu_icb_rsp_ready = ifu_rsp_ready;\n\n  // Handshake Control\n  assign ifu_req_ready = ifu2itcm_icb_cmd_ready || ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 9, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 7, "code": "module e203_exu_alu_dpath (\n  input  wire                  alu_req_alu,\n  input  wire                  alu_req_alu_add,\n  input  wire                  alu_req_alu_sub,\n  input  wire                  alu_req_alu_xor,\n  input  wire                  alu_req_alu_sll,\n  input  wire                  alu_req_alu_srl,\n  input  wire                  alu_req_alu_sra,\n  input  wire                  alu_req_alu_or,\n  input  wire                  alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  input  wire                  bjp_req_alu,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  input  wire                  agu_req_alu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  input  wire                  muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                  muldiv_req_alu_add,\n  input  wire                  muldiv_req_alu_sub,\n  input  wire                  muldiv_sbf_0_ena,\n  input  wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire                  muldiv_sbf_1_ena,\n  input  wire [32:0]           muldiv_sbf_1_nxt,\n  input  wire                  clk,\n  input  wire                  rst_n,\n\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  output wire                  bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]           muldiv_sbf_0_r,\n  output wire [32:0]           muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_res;\n  assign alu_res = (alu_req_alu_add) ? (alu_req_alu_op1 + alu_req_alu_op2) :\n                   (alu_req_alu_sub) ? (alu_req_alu_op1 - alu_req_alu_op2) :\n                   (alu_req_alu_xor) ? (alu_req_alu_op1 ^ alu_req_alu_op2) :\n                   (alu_req_alu_sll) ? (alu_req_alu_op1 << alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_srl) ? (alu_req_alu_op1 >> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_sra) ? (alu_req_alu_op1 >>> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_or)  ? (alu_req_alu_op1 | alu_req_alu_op2) :\n                   (alu_req_alu_and) ? (alu_req_alu_op1 & alu_req_alu_op2) :\n                   0;\n\n  assign alu_req_alu_res = alu_res;\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res;\n  assign bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_res;\n  assign agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  assign muldiv_res = (muldiv_req_alu_add) ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                      (muldiv_req_alu_sub) ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                      0;\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden (muldiv_sbf_0_ena),\n    .dnxt (muldiv_sbf_0_nxt),\n    .qout (muldiv_sbf_0_r),\n    .clk  (clk)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden (muldiv_sbf_1_ena),\n    .dnxt (muldiv_sbf_1_nxt),\n    .qout (muldiv_sbf_1_r),\n    .clk  (clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 7, "code": "module e203_exu_csr(\n  input  wire nonflush_cmt_ena, // not used\n  input  wire csr_ena,\n  input  wire csr_wr_en,\n  input  wire csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input  wire [E203_XLEN-1:0] wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire ext_irq_r,\n  input  wire sft_irq_r,\n  input  wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0] cmt_epc,\n  input  wire cmt_epc_ena,\n  input  wire [E203_XLEN-1:0] cmt_cause,\n  input  wire cmt_cause_ena,\n  input  wire cmt_status_ena,\n  input  wire cmt_instret_ena,\n  input  wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input  wire clk_aon,\n  input  wire clk,\n  input  wire rst_n\n`ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n`endif\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mcounterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR Access Logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h301: read_csr_dat = misa;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      12'hBFF: read_csr_dat = mcounterstop;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      misa <= {E203_XLEN{1'b0}};\n      mvendorid <= 536;\n      marchid <= \"E203\";\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcycle <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n      mcounterstop <= {E203_XLEN{1'b0}};\n      mcgstop <= {E203_XLEN{1'b0}};\n      itcmnohold <= {E203_XLEN{1'b0}};\n      mdvnob2b <= {E203_XLEN{1'b0}};\n      dcsr <= {E203_XLEN{1'b0}};\n      dpc <= {E203_PC_SIZE{1'b0}};\n      dscratch <= {E203_XLEN{1'b0}};\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h344: mip <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hBFF: mcounterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Debug CSR Write Enable\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // Debug CSR Read\n  assign csr_dpc_r = dpc_r;\n  assign csr_epc_r = mepc;\n  assign csr_mtvec_r = mtvec;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Clock Gating Control\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\n`ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 10, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // ICB Protocol Interface\n  input *_icb_enable;\n  output *_icb_cmd_valid;\n  input *_icb_cmd_ready;\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  output *_icb_cmd_read;\n  output [E203_XLEN-1:0] *_icb_cmd_wdata;\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  output *_icb_cmd_lock;\n  output *_icb_cmd_excl;\n  output [1:0] *_icb_cmd_size;\n  input *_icb_rsp_valid;\n  output *_icb_rsp_ready;\n  input *_icb_rsp_err;\n  input *_icb_rsp_excl_ok;\n  input [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic;\n\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic;\n\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic;\n\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic;\n\n  // NICE Interface\n  input nice_mem_holdup;\n  output nice_req_valid;\n  input nice_req_ready;\n  output [E203_XLEN-1:0] nice_req_inst;\n  output [E203_XLEN-1:0] nice_req_rs1;\n  output [E203_XLEN-1:0] nice_req_rs2;\n  input nice_rsp_multicyc_valid;\n  output nice_rsp_multicyc_ready;\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  input nice_rsp_multicyc_err;\n  input nice_icb_cmd_valid;\n  output nice_icb_cmd_ready;\n  input [E203_XLEN-1:0] nice_icb_cmd_addr;\n  input nice_icb_cmd_read;\n  input [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  input [1:0] nice_icb_cmd_size;\n  output nice_icb_rsp_valid;\n  input nice_icb_rsp_ready;\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  output nice_icb_rsp_err;\n\n  // Submodules\n  e203_ifu ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 11, "code": "module e203_core(\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // ICB Protocol Interface\n  input *_icb_enable;\n  output *_icb_cmd_valid;\n  input *_icb_cmd_ready;\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  output *_icb_cmd_read;\n  output [E203_XLEN-1:0] *_icb_cmd_wdata;\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  output *_icb_cmd_lock;\n  output *_icb_cmd_excl;\n  output [1:0] *_icb_cmd_size;\n  input *_icb_rsp_valid;\n  output *_icb_rsp_ready;\n  input *_icb_rsp_err;\n  input *_icb_rsp_excl_ok;\n  input [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // NICE Interface (if E203_HAS_NICE is defined)\n  input nice_mem_holdup;\n  output nice_req_valid;\n  input nice_req_ready;\n  output [E203_XLEN-1:0] nice_req_inst;\n  output [E203_XLEN-1:0] nice_req_rs1;\n  output [E203_XLEN-1:0] nice_req_rs2;\n  input nice_rsp_multicyc_valid;\n  output nice_rsp_multicyc_ready;\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  input nice_rsp_multicyc_err;\n  input nice_icb_cmd_valid;\n  output nice_icb_cmd_ready;\n  input [E203_XLEN-1:0] nice_icb_cmd_addr;\n  input nice_icb_cmd_read;\n  input [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  input [1:0] nice_icb_cmd_size;\n  output nice_icb_rsp_valid;\n  input nice_icb_rsp_ready;\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  output nice_icb_rsp_err;\n\n  // Submodules\n  e203_ifu u_e203_ifu(\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu(\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu(\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu(\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 8, "code": "module e203_exu_csr(\n  input  wire         nonflush_cmt_ena, // not used\n  input  wire         csr_ena,\n  input  wire         csr_wr_en,\n  input  wire         csr_rd_en,\n  input  wire [11:0]  csr_idx,\n  output wire         csr_access_ilgl,\n  output wire         tm_stop,\n  output wire         core_cgstop,\n  output wire         tcm_cgstop,\n  output wire         itcm_nohold,\n  output wire         mdv_nob2b,\n  output wire [31:0]  read_csr_dat,\n  input  wire [31:0]  wbck_csr_dat,\n  input  wire [31:0]  core_mhartid,\n  input  wire         ext_irq_r,\n  input  wire         sft_irq_r,\n  input  wire         tmr_irq_r,\n  output wire         status_mie_r,\n  output wire         mtie_r,\n  output wire         msie_r,\n  output wire         meie_r,\n  output wire         wr_dcsr_ena,\n  output wire         wr_dpc_ena,\n  output wire         wr_dscratch_ena,\n  input  wire [31:0]  dcsr_r,\n  input  wire [31:0]  dpc_r,\n  input  wire [31:0]  dscratch_r,\n  output wire         u_mode,\n  output wire         s_mode,\n  output wire         h_mode,\n  output wire         m_mode,\n  input  wire [31:0]  cmt_badaddr,\n  input  wire         cmt_badaddr_ena,\n  input  wire [31:0]  cmt_epc,\n  input  wire         cmt_epc_ena,\n  input  wire [31:0]  cmt_cause,\n  input  wire         cmt_cause_ena,\n  input  wire         cmt_status_ena,\n  input  wire         cmt_instret_ena,\n  input  wire         cmt_mret_ena,\n  output wire [31:0]  csr_epc_r,\n  output wire [31:0]  csr_dpc_r,\n  output wire [31:0]  csr_mtvec_r,\n  input  wire         clk_aon,\n  input  wire         clk,\n  input  wire         rst_n\n);\n\n  // Internal registers\n  reg [31:0] mstatus;\n  reg [31:0] mie;\n  reg [31:0] mip;\n  reg [31:0] mtvec;\n  reg [31:0] mscratch;\n  reg [31:0] mepc;\n  reg [31:0] mcause;\n  reg [31:0] mbadaddr;\n  reg [31:0] mcycle;\n  reg [31:0] minstret;\n  reg [31:0] mcycleh;\n  reg [31:0] minstreth;\n  reg [31:0] mvendorid;\n  reg [31:0] marchid;\n  reg [31:0] mimpid;\n  reg [31:0] mhartid;\n  reg [31:0] mcounterstop;\n\n  // Default values\n  initial begin\n    mstatus = 32'h00001800; // Default mstatus with MPP set to 11\n    mie = 32'h0;\n    mip = 32'h0;\n    mtvec = `E203_MTVEC_TRAP_BASE;\n    mscratch = 32'h0;\n    mepc = 32'h0;\n    mcause = 32'h0;\n    mbadaddr = 32'h0;\n    mcycle = 32'h0;\n    minstret = 32'h0;\n    mcycleh = 32'h0;\n    minstreth = 32'h0;\n    mvendorid = 32'h00000214; // Vendor ID\n    marchid = 32'hE203; // Architecture ID\n    mimpid = 32'h1; // Implementation ID\n    mhartid = core_mhartid;\n    mcounterstop = 32'h0;\n  end\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n      mstatus <= 32'h00001800;\n      mie <= 32'h0;\n      mip <= 32'h0;\n      mtvec <= `E203_MTVEC_TRAP_BASE;\n      mscratch <= 32'h0;\n      mepc <= 32'h0;\n      mcause <= 32'h0;\n      mbadaddr <= 32'h0;\n      mcycle <= 32'h0;\n      minstret <= 32'h0;\n      mcycleh <= 32'h0;\n      minstreth <= 32'h0;\n      mvendorid <= 32'h00000214;\n      marchid <= 32'hE203;\n      mimpid <= 32'h1;\n      mhartid <= core_mhartid;\n      mcounterstop <= 32'h0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= {wbck_csr_dat[31:1], 1'b0};\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'h344: mip <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: mcounterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = mcounterstop;\n      default: read_csr_dat = 32'h0;\n    endcase\n  end\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR write enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR read signals\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Illegal access flag\n  assign csr_access_ilgl = 1'b0;\n\n  // Custom control signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 19, "code": "module e203_biu (\n  output biu_active,\n  input  clk,\n  input  rst_n,\n\n  // LSU ICB Interface\n  input  lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input  lsu_icb_cmd_read,\n  input  [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input  [1:0] lsu_icb_cmd_burst,\n  input  [1:0] lsu_icb_cmd_beat,\n  input  lsu_icb_cmd_lock,\n  input  lsu_icb_cmd_excl,\n  input  [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input  lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface (if E203_HAS_MEM_ITF is defined)\n`ifdef E203_HAS_MEM_ITF\n  input  ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input  ifu_icb_cmd_read,\n  input  [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input  [1:0] ifu_icb_cmd_burst,\n  input  [1:0] ifu_icb_cmd_beat,\n  input  ifu_icb_cmd_lock,\n  input  ifu_icb_cmd_excl,\n  input  [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input  ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input  ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input  ppi_icb_cmd_read,\n  input  [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input  [1:0] ppi_icb_cmd_burst,\n  input  [1:0] ppi_icb_cmd_beat,\n  input  ppi_icb_cmd_lock,\n  input  ppi_icb_cmd_excl,\n  input  [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input  ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input  [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input  ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input  clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input  clint_icb_cmd_read,\n  input  [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input  [1:0] clint_icb_cmd_burst,\n  input  [1:0] clint_icb_cmd_beat,\n  input  clint_icb_cmd_lock,\n  input  clint_icb_cmd_excl,\n  input  [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input  clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input  [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input  clint_icb_enable,\n\n  // PLIC ICB Interface\n  input  plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input  plic_icb_cmd_read,\n  input  [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input  [1:0] plic_icb_cmd_burst,\n  input  [1:0] plic_icb_cmd_beat,\n  input  plic_icb_cmd_lock,\n  input  plic_icb_cmd_excl,\n  input  [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input  plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input  [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input  plic_icb_enable,\n\n  // FIO ICB Interface (if E203_HAS_FIO is defined)\n`ifdef E203_HAS_FIO\n  input  fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input  fio_icb_cmd_read,\n  input  [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input  [1:0] fio_icb_cmd_burst,\n  input  [1:0] fio_icb_cmd_beat,\n  input  fio_icb_cmd_lock,\n  input  fio_icb_cmd_excl,\n  input  [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input  fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input  [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input  fio_icb_enable,\n`endif\n\n  // MEM ICB Interface (if E203_HAS_MEM_ITF is defined)\n`ifdef E203_HAS_MEM_ITF\n  input  mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input  mem_icb_cmd_read,\n  input  [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input  [1:0] mem_icb_cmd_burst,\n  input  [1:0] mem_icb_cmd_beat,\n  input  mem_icb_cmd_lock,\n  input  mem_icb_cmd_excl,\n  input  [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input  mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input  mem_icb_enable,\n`endif\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // Arbitration logic\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, ifu_icb_cmd_valid}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, ifu_icb_cmd_ready}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Buffer logic\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Splitter logic\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_sirv_gnrl_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 2, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n  // Implement the logic for memory access request processing, arbitration, and response handling\n  // Implement the logic for exclusive access mechanism, data alignment, and size conversion\n  // Implement the logic for error handling and write-back interface\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 9, "code": "module e203_exu_commit(\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire nonalu_excpirq_flush_req_raw;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire brchmis_flush_req;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_pc;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire flush_req;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(excpirq_flush_add_op1),\n    .excpirq_flush_add_op2(excpirq_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(brchmis_flush_add_op1),\n    .brchmis_flush_add_op2(brchmis_flush_add_op2),\n    .brchmis_flush_pc(brchmis_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena;\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & flush_req;\n  assign flush_req = pipe_flush_req;\n\n  // PC Computation\n  assign pipe_flush_add_op1 = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_add_op1;\n  assign pipe_flush_add_op2 = excpirq_flush_req ? excpirq_flush_add_op2 : brchmis_flush_add_op2;\n\n`ifdef E203_TIMING_BOOST\n  assign pipe_flush_pc = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_pc;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 6, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | ((~ir_empty) & ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}}) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign bpu_wait = dec_jalr & dec_jalr_rs1x1 & (~oitf_empty) |\n                    dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 10, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp module\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv module\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n\n  // Commit enable logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 11, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & alu_cmt_i_ready;\n\n  // Non-flush commit enable\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n\n  // Commit signals\n  assign commit_mret = alu_cmt_i_mret & nonflush_cmt_ena;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 10, "code": "module e203_exu_alu_lsuagu (\n  input  wire                  agu_i_valid,\n  output wire                  agu_i_ready,\n  input  wire [E203_XLEN-1:0]  agu_i_rs1,\n  input  wire [E203_XLEN-1:0]  agu_i_rs2,\n  input  wire [E203_XLEN-1:0]  agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                  agu_i_longpipe,\n  input  wire                  flush_req,\n  input  wire                  flush_pulse,\n  output wire                  amo_wait,\n  input  wire                  oitf_empty,\n  output wire                  agu_o_valid,\n  input  wire                  agu_o_ready,\n  output wire [E203_XLEN-1:0]  agu_o_wbck_wdat,\n  output wire                  agu_o_wbck_err,\n  output wire                  agu_o_cmt_misalgn,\n  output wire                  agu_o_cmt_ld,\n  output wire                  agu_o_cmt_stamo,\n  output wire                  agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                  agu_icb_cmd_valid,\n  input  wire                  agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                  agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]  agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                  agu_icb_cmd_back2agu,\n  output wire                  agu_icb_cmd_lock,\n  output wire                  agu_icb_cmd_excl,\n  output wire [1:0]            agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                  agu_icb_cmd_usign,\n  input  wire                  agu_icb_rsp_valid,\n  output wire                  agu_icb_rsp_ready,\n  input  wire                  agu_icb_rsp_err,\n  input  wire                  agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]  agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  output wire                  agu_req_alu_swap,\n  output wire                  agu_req_alu_add,\n  output wire                  agu_req_alu_and,\n  output wire                  agu_req_alu_or,\n  output wire                  agu_req_alu_xor,\n  output wire                  agu_req_alu_max,\n  output wire                  agu_req_alu_min,\n  output wire                  agu_req_alu_maxu,\n  output wire                  agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire                  agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_0_r,\n  output wire                  agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals and logic for the AGU module\n  // Implement the state machine and logic for address generation, AMO operations, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 4, "code": "module e203_exu_alu_muldiv (\n  input  wire             mdv_nob2b,\n  input  wire             muldiv_i_valid,\n  output wire             muldiv_i_ready,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs1,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs2,\n  input  wire [E203_XLEN-1:0] muldiv_i_imm,\n  input  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire             muldiv_i_longpipe,\n  input  wire             flush_pulse,\n  output wire             muldiv_o_valid,\n  input  wire             muldiv_o_ready,\n  output wire [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output wire             muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire             muldiv_req_alu_add,\n  output wire             muldiv_req_alu_sub,\n  input  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire             muldiv_sbf_0_ena,\n  output wire [32:0]      muldiv_sbf_0_nxt,\n  input  wire [32:0]      muldiv_sbf_0_r,\n  output wire             muldiv_sbf_1_ena,\n  output wire [32:0]      muldiv_sbf_1_nxt,\n  input  wire [32:0]      muldiv_sbf_1_r,\n  input  wire             clk,\n  input  wire             rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] imm;\n  reg [E203_DECINFO_MULDIV_WIDTH-1:0] info;\n  reg [E203_ITAG_WIDTH-1:0] itag;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op1;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op2;\n  reg alu_add;\n  reg alu_sub;\n  reg [32:0] sbf_0;\n  reg [32:0] sbf_1;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH = 5'd0;\n  localparam MULDIV_STATE_EXEC = 5'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 5'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 5'd3;\n  localparam MULDIV_STATE_REMD_CORR = 5'd4;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution complete */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for remainder check */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_REMD_CORR);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = sbf_0;\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = sbf_1;\n\n  // Additional logic for multiplication and division operations\n  // Booth encoding, partial product accumulation, division correction, etc.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 20, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu_icb_cmd_valid,\n  output lsu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu_icb_cmd_addr,\n  input lsu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu_icb_cmd_wmask,\n  input [1:0] lsu_icb_cmd_burst,\n  input [1:0] lsu_icb_cmd_beat,\n  input lsu_icb_cmd_lock,\n  input lsu_icb_cmd_excl,\n  input [1:0] lsu_icb_cmd_size,\n  output lsu_icb_rsp_valid,\n  input lsu_icb_rsp_ready,\n  output lsu_icb_rsp_err,\n  output lsu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input ifu_icb_cmd_valid,\n  output ifu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu_icb_cmd_addr,\n  input ifu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu_icb_cmd_wmask,\n  input [1:0] ifu_icb_cmd_burst,\n  input [1:0] ifu_icb_cmd_beat,\n  input ifu_icb_cmd_lock,\n  input ifu_icb_cmd_excl,\n  input [1:0] ifu_icb_cmd_size,\n  output ifu_icb_rsp_valid,\n  input ifu_icb_rsp_ready,\n  output ifu_icb_rsp_err,\n  output ifu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu_icb_rsp_rdata,\n`endif\n\n  // PPI ICB Interface\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n\n  // CLINT ICB Interface\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n\n  // PLIC ICB Interface\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n\n  // FIO ICB Interface\n`ifdef E203_HAS_FIO\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n`endif\n\n  // MEM ICB Interface\n`ifdef E203_HAS_MEM_ITF\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input mem_icb_enable\n`endif\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = `ifdef E203_HAS_MEM_ITF 2 `else 1 `endif;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = `ifdef E203_HAS_FIO `ifdef E203_HAS_MEM_ITF 6 `else 5 `endif `else `ifdef E203_HAS_MEM_ITF 5 `else 4 `endif `endif;\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_bus_icb_cmd_valid({lsu_icb_cmd_valid, `ifdef E203_HAS_MEM_ITF ifu_icb_cmd_valid `endif}),\n    .i_bus_icb_cmd_ready({lsu_icb_cmd_ready, `ifdef E203_HAS_MEM_ITF ifu_icb_cmd_ready `endif}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(biu_active),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_sirv_gnrl_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 12, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // System Interface\n  wire [E203_PC_SIZE-1:0] inspect_pc;\n  wire core_wfi;\n  wire tm_stop;\n  wire core_cgstop;\n  wire tcm_cgstop;\n  wire [E203_PC_SIZE-1:0] pc_rtvec;\n  wire [E203_HART_ID_W-1:0] core_mhartid;\n  wire dbg_irq_r;\n  wire [E203_LIRQ_NUM-1:0] lcl_irq_r;\n  wire [E203_EVT_NUM-1:0] evt_r;\n  wire ext_irq_r;\n  wire sft_irq_r;\n  wire tmr_irq_r;\n  wire wr_dcsr_ena;\n  wire wr_dpc_ena;\n  wire wr_dscratch_ena;\n  wire [31:0] wr_csr_nxt;\n  wire [31:0] dcsr_r;\n  wire [E203_PC_SIZE-1:0] dpc_r;\n  wire [31:0] dscratch_r;\n  wire [E203_PC_SIZE-1:0] cmt_dpc;\n  wire cmt_dpc_ena;\n  wire [2:0] cmt_dcause;\n  wire cmt_dcause_ena;\n  wire dbg_mode;\n  wire dbg_halt_r;\n  wire dbg_step_r;\n  wire dbg_ebreakm_r;\n  wire dbg_stopcycle;\n\n  // ICB Protocol Interface\n  wire *_icb_enable;\n  wire *_icb_cmd_valid;\n  wire *_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  wire *_icb_cmd_read;\n  wire [E203_XLEN-1:0] *_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  wire *_icb_cmd_lock;\n  wire *_icb_cmd_excl;\n  wire [1:0] *_icb_cmd_size;\n  wire *_icb_rsp_valid;\n  wire *_icb_rsp_ready;\n  wire *_icb_rsp_err;\n  wire *_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // NICE Interface\n  wire nice_mem_holdup;\n  wire nice_req_valid;\n  wire nice_req_ready;\n  wire [E203_XLEN-1:0] nice_req_inst;\n  wire [E203_XLEN-1:0] nice_req_rs1;\n  wire [E203_XLEN-1:0] nice_req_rs2;\n  wire nice_rsp_multicyc_valid;\n  wire nice_rsp_multicyc_ready;\n  wire [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  wire nice_rsp_multicyc_err;\n  wire nice_icb_cmd_valid;\n  wire nice_icb_cmd_ready;\n  wire [E203_XLEN-1:0] nice_icb_cmd_addr;\n  wire nice_icb_cmd_read;\n  wire [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  wire [1:0] nice_icb_cmd_size;\n  wire nice_icb_rsp_valid;\n  wire nice_icb_rsp_ready;\n  wire [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  wire nice_icb_rsp_err;\n\n  // Submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 13, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // ICB Protocol Interface\n  input *_icb_enable;\n  output *_icb_cmd_valid;\n  input *_icb_cmd_ready;\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  output *_icb_cmd_read;\n  output [E203_XLEN-1:0] *_icb_cmd_wdata;\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  output *_icb_cmd_lock;\n  output *_icb_cmd_excl;\n  output [1:0] *_icb_cmd_size;\n  input *_icb_rsp_valid;\n  output *_icb_rsp_ready;\n  input *_icb_rsp_err;\n  input *_icb_rsp_excl_ok;\n  input [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic;\n\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic;\n\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic;\n\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic;\n\n  // NICE Interface\n  input nice_mem_holdup;\n  output nice_req_valid;\n  input nice_req_ready;\n  output [E203_XLEN-1:0] nice_req_inst;\n  output [E203_XLEN-1:0] nice_req_rs1;\n  output [E203_XLEN-1:0] nice_req_rs2;\n  input nice_rsp_multicyc_valid;\n  output nice_rsp_multicyc_ready;\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  input nice_rsp_multicyc_err;\n  input nice_icb_cmd_valid;\n  output nice_icb_cmd_ready;\n  input [E203_XLEN-1:0] nice_icb_cmd_addr;\n  input nice_icb_cmd_read;\n  input [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  input [1:0] nice_icb_cmd_size;\n  output nice_icb_rsp_valid;\n  input nice_icb_rsp_ready;\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  output nice_icb_rsp_err;\n\n  // Submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 11, "code": "module e203_extend_csr (\n  input  wire        clk,\n  input  wire        rst_n,\n  input  wire        nice_csr_valid,\n  output wire        nice_csr_ready,\n  input  wire [31:0] nice_csr_addr,\n  input  wire        nice_csr_wr,\n  input  wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The CSR module is always ready to accept requests\n  assign nice_csr_ready = 1'b1;\n\n  // The CSR read data is always zero\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 10, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  `ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  `endif\n  `ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n  `endif\n  output [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  output [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  input [E203_XLEN-1:0] read_src1_dat,\n  input [E203_XLEN-1:0] read_src2_dat,\n  output wbck_dest_wen,\n  output [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  output [E203_XLEN-1:0] wbck_dest_dat,\n  input [E203_XLEN-1:0] x1_r,\n  output [E203_INSTR_SIZE-1:0] i_instr,\n  output [E203_PC_SIZE-1:0] i_pc,\n  output i_prdt_taken,\n  output i_misalgn,\n  output i_buserr,\n  output i_muldiv_b2b,\n  output dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  `ifdef E203_HAS_NICE\n  input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o,\n  `endif\n  input wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input oitf_empty,\n  input amo_wait,\n  input disp_i_valid,\n  output disp_i_ready,\n  input disp_i_rs1x0,\n  input disp_i_rs2x0,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_XLEN-1:0] disp_i_rs1,\n  input [E203_XLEN-1:0] disp_i_rs2,\n  input disp_i_rdwen,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input [E203_XLEN-1:0] disp_i_imm,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  input disp_i_misalgn,\n  input disp_i_buserr,\n  input disp_i_ilegl,\n  output disp_o_alu_valid,\n  input disp_o_alu_ready,\n  input disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input oitfrd_match_disprs1,\n  input oitfrd_match_disprs2,\n  input oitfrd_match_disprs3,\n  input oitfrd_match_disprd,\n  input [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 2, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_valid && ifu_req_ready;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_rsp_ready;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu2itcm_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && ifu_rsp_ready;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (ifu_req_seq ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         ICB_STATE_IDLE;\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {ifu_rsp_err, ifu_rsp_instr};\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_o_rdy;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(ifu_rsp_valid),\n    .i_rdy(ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0);\n  wire ifu_req_lane_same = ifu_req_seq && ifu_req_lane_cross;\n  wire ifu_req_lane_holdup = ifu2itcm_icb_cmd_ready && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_valid && ifu_req_ready) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_holdup;\n      req_need_2uop_r <= ifu_req_lane_cross && ~ifu_req_lane_holdup;\n      req_need_0uop_r <= ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu2itcm_icb_cmd_valid && ifu2itcm_icb_cmd_ready) begin\n      icb_cmd2itcm_r <= 1'b1;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu2biu_icb_cmd_valid && ifu2biu_icb_cmd_ready) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b1;\n    end\n  end\n\n  // Address Alignment Information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu2itcm_icb_cmd_valid && ifu2itcm_icb_cmd_ready) begin\n      icb_cmd_addr_2_1_r <= ifu_req_pc[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_valid && ifu_req_ready && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu2itcm_icb_rsp_valid && ifu2itcm_icb_rsp_ready && icb_cmd2itcm_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena) begin\n      leftover_r <= ifu2itcm_icb_rsp_rdata[31:16];\n      leftover_err_r <= 1'b0;\n    end else if (uop1st2leftover_ena) begin\n      leftover_r <= ifu2itcm_icb_rsp_rdata[31:16];\n      leftover_err_r <= ifu2itcm_icb_rsp_err;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_data = rsp_instr_sel_leftover ? {ifu2itcm_icb_rsp_rdata[15:0], leftover_r} : ifu2itcm_icb_rsp_rdata[31:0];\n  wire rsp_err_data = rsp_instr_sel_leftover ? (ifu2itcm_icb_rsp_err || leftover_err_r) : ifu2itcm_icb_rsp_err;\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_ready = ifu_rsp_bypbuf_o_rdy;\n  assign ifu_rsp_instr = rsp_instr_data;\n  assign ifu_rsp_err = rsp_err_data;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_valid && ifu_req_ready && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = ifu_req_pc;\n\n  assign ifu2itcm_icb_cmd_valid = ifu_icb_cmd_valid && icb_cmd2itcm_r;\n  assign ifu2itcm_icb_cmd_addr = ifu_icb_cmd_addr;\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && icb_cmd2biu_r;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu2itcm_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu2itcm_icb_rsp_ready = ifu_rsp_ready;\n  assign ifu2biu_icb_rsp_ready = ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = ifu2itcm_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu2itcm_icb_rsp_valid = icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid;\n  assign ifu2biu_icb_rsp_valid = icb_cmd2biu_r && ifu2biu_icb_rsp_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 3, "code": "module e203_ifu(\n  input  wire                         clk,\n  input  wire                         rst_n,\n  output wire [E203_PC_SIZE-1:0]      inspect_pc,\n  output wire                         ifu_active,\n  input  wire                         itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]      pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0]   ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]      ifu_o_pc,\n  output wire                         ifu_o_pc_vld,\n  output wire                         ifu_o_misalgn,\n  output wire                         ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs2idx,\n  output wire                         ifu_o_prdt_taken,\n  output wire                         ifu_o_muldiv_b2b,\n  output wire                         ifu_o_valid,\n  input  wire                         ifu_o_ready,\n  input  wire                         pipe_flush_req,\n  output wire                         pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire                         ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]    itcm_region_indic,\n  output wire                         ifu2itcm_icb_cmd_valid,\n  input  wire                         ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                         ifu2itcm_icb_rsp_valid,\n  output wire                         ifu2itcm_icb_rsp_ready,\n  input  wire                         ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire                         ifu2biu_icb_cmd_valid,\n  input  wire                         ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]    ifu2biu_icb_cmd_addr,\n  input  wire                         ifu2biu_icb_rsp_valid,\n  output wire                         ifu2biu_icb_rsp_ready,\n  input  wire                         ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire                         ifu_halt_req,\n  output wire                         ifu_halt_ack,\n  input  wire                         oitf_empty,\n  input  wire [E203_XLEN-1:0]         rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]         rf2ifu_rs1,\n  input  wire                         dec2ifu_rs1en,\n  input  wire                         dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]  dec2ifu_rdidx,\n  input  wire                         dec2ifu_mulhsu,\n  input  wire                         dec2ifu_div,\n  input  wire                         dec2ifu_rem,\n  input  wire                         dec2ifu_divu,\n  input  wire                         dec2ifu_remu\n);\n\n  // Instantiate the e203_ifu_ifetch submodule\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate the e203_ifu_ift2icb submodule\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 3, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine States\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  // State Machine Registers\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena  = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena  = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r && !ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_WAIT2ND;\n          else if (req_need_2uop_r && ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n          else if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(.DW(2)) icb_state_dfflr (\n    .lden(icb_state_ena),\n    .dnxt(icb_state_nxt),\n    .qout(icb_state),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(.DP(1), .DW(33)) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  assign ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n    end\n  end\n\n  // Address Alignment Information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_icb_cmd_hsked || ifu_req_hsked) begin\n      icb_cmd_addr_2_1_r <= ifu_req_pc[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_err : ifu2biu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  wire i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  wire i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire icb_addr_sel_1stnxtalgn = holdup2leftover_sel;\n  wire icb_addr_sel_2ndnxtalgn = req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n  wire icb_addr_sel_cur = ~(icb_addr_sel_1stnxtalgn || icb_addr_sel_2ndnxtalgn);\n\n  wire [ADDR_SIZE-1:0] icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 2 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (icb_cmd_addr >= ITCM_BASE_ADDR) && (icb_cmd_addr < ITCM_END_ADDR);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  wire ifu_req_ready_condi = (icb_state == ICB_STATE_IDLE) || ((req_need_0uop_r || req_need_1uop_r) && (icb_state == ICB_STATE_1ST)) || (req_need_2uop_r && (icb_state == ICB_STATE_2ND));\n  assign ifu_req_ready = ifu_icb_cmd_ready && ifu_req_ready_condi;\n\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  assign ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready_pre);\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 14, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // Define the ICB protocol signals\n  input *_icb_enable;\n  output *_icb_cmd_valid;\n  input *_icb_cmd_ready;\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  output *_icb_cmd_read;\n  output [E203_XLEN-1:0] *_icb_cmd_wdata;\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  output *_icb_cmd_lock;\n  output *_icb_cmd_excl;\n  output [1:0] *_icb_cmd_size;\n  input *_icb_rsp_valid;\n  output *_icb_rsp_ready;\n  input *_icb_rsp_err;\n  input *_icb_rsp_excl_ok;\n  input [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // Define the PPI interface signals\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic;\n\n  // Define the CLINT interface signals\n  input [E203_ADDR_SIZE-1:0] clint_region_indic;\n\n  // Define the PLIC interface signals\n  input [E203_ADDR_SIZE-1:0] plic_region_indic;\n\n  // Define the FIO interface signals if E203_HAS_FIO is defined\n  input [E203_ADDR_SIZE-1:0] fio_region_indic;\n\n  // Define the NICE interface signals if E203_HAS_NICE is defined\n  input nice_mem_holdup;\n  output nice_req_valid;\n  input nice_req_ready;\n  output [E203_XLEN-1:0] nice_req_inst;\n  output [E203_XLEN-1:0] nice_req_rs1;\n  output [E203_XLEN-1:0] nice_req_rs2;\n  input nice_rsp_multicyc_valid;\n  output nice_rsp_multicyc_ready;\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  input nice_rsp_multicyc_err;\n  input nice_icb_cmd_valid;\n  output nice_icb_cmd_ready;\n  input [E203_XLEN-1:0] nice_icb_cmd_addr;\n  input nice_icb_cmd_read;\n  input [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  input [1:0] nice_icb_cmd_size;\n  output nice_icb_rsp_valid;\n  input nice_icb_rsp_ready;\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  output nice_icb_rsp_err;\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_cmd_read(ifu2biu_icb_cmd_read),\n    .ifu2biu_icb_cmd_wdata(ifu2biu_icb_cmd_wdata),\n    .ifu2biu_icb_cmd_wmask(ifu2biu_icb_cmd_wmask),\n    .ifu2biu_icb_cmd_lock(ifu2biu_icb_cmd_lock),\n    .ifu2biu_icb_cmd_excl(ifu2biu_icb_cmd_excl),\n    .ifu2biu_icb_cmd_size(ifu2biu_icb_cmd_size),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_excl_ok(ifu2biu_icb_rsp_excl_ok),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .fio_region_indic(fio_region_indic),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 1, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_valid,\n  input wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_rsp_err),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  wire [E203_PC_SIZE-1:0] pc_r;\n\n  assign pc_add_op1 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op1 :\n                      dly_pipe_flush_req ? pc_r :\n                      `endif\n                      ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec :\n                      pc_r;\n\n  assign pc_add_op2 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op2 :\n                      dly_pipe_flush_req ? 0 :\n                      `endif\n                      ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 :\n                      pc_incr_ofst;\n\n  assign pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  assign pc_nxt = `ifndef E203_TIMING_BOOST\n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                  `else\n                  pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n                  dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                  `endif\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_req_pc = pc_r;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Outstanding request control\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset condition\n    end else begin\n      // Check ifu_req_valid signal for X value\n      if (^ifu_req_valid === 1'bx) begin\n        $fatal(\"ifu_req_valid has X value\");\n      end\n    end\n  end\n  `endif\n  `endif\n\n  // Special case handling for FPU-related and timing optimization\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 11, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  input nice_xs_off,\n  input nice_cmt_off_ilgl_o\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 15, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n// System Interface\nwire [E203_PC_SIZE-1:0] inspect_pc;\nwire core_wfi;\nwire tm_stop;\nwire core_cgstop;\nwire tcm_cgstop;\nwire [E203_PC_SIZE-1:0] pc_rtvec;\nwire [E203_HART_ID_W-1:0] core_mhartid;\nwire dbg_irq_r;\nwire [E203_LIRQ_NUM-1:0] lcl_irq_r;\nwire [E203_EVT_NUM-1:0] evt_r;\nwire ext_irq_r;\nwire sft_irq_r;\nwire tmr_irq_r;\nwire wr_dcsr_ena;\nwire wr_dpc_ena;\nwire wr_dscratch_ena;\nwire [31:0] wr_csr_nxt;\nwire [31:0] dcsr_r;\nwire [E203_PC_SIZE-1:0] dpc_r;\nwire [31:0] dscratch_r;\nwire [E203_PC_SIZE-1:0] cmt_dpc;\nwire cmt_dpc_ena;\nwire [2:0] cmt_dcause;\nwire cmt_dcause_ena;\nwire dbg_mode;\nwire dbg_halt_r;\nwire dbg_step_r;\nwire dbg_ebreakm_r;\nwire dbg_stopcycle;\n\n// ICB Protocol Interface\nwire *_icb_enable;\nwire *_icb_cmd_valid;\nwire *_icb_cmd_ready;\nwire [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\nwire *_icb_cmd_read;\nwire [E203_XLEN-1:0] *_icb_cmd_wdata;\nwire [E203_XLEN/8-1:0] *_icb_cmd_wmask;\nwire *_icb_cmd_lock;\nwire *_icb_cmd_excl;\nwire [1:0] *_icb_cmd_size;\nwire *_icb_rsp_valid;\nwire *_icb_rsp_ready;\nwire *_icb_rsp_err;\nwire *_icb_rsp_excl_ok;\nwire [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n// PPI Interface\nwire [E203_ADDR_SIZE-1:0] ppi_region_indic;\n\n// CLINT Interface\nwire [E203_ADDR_SIZE-1:0] clint_region_indic;\n\n// PLIC Interface\nwire [E203_ADDR_SIZE-1:0] plic_region_indic;\n\n// FIO Interface\nwire [E203_ADDR_SIZE-1:0] fio_region_indic;\n\n// NICE Interface\nwire nice_mem_holdup;\nwire nice_req_valid;\nwire nice_req_ready;\nwire [E203_XLEN-1:0] nice_req_inst;\nwire [E203_XLEN-1:0] nice_req_rs1;\nwire [E203_XLEN-1:0] nice_req_rs2;\nwire nice_rsp_multicyc_valid;\nwire nice_rsp_multicyc_ready;\nwire [E203_XLEN-1:0] nice_rsp_multicyc_dat;\nwire nice_rsp_multicyc_err;\nwire nice_icb_cmd_valid;\nwire nice_icb_cmd_ready;\nwire [E203_XLEN-1:0] nice_icb_cmd_addr;\nwire nice_icb_cmd_read;\nwire [E203_XLEN-1:0] nice_icb_cmd_wdata;\nwire [1:0] nice_icb_cmd_size;\nwire nice_icb_rsp_valid;\nwire nice_icb_rsp_ready;\nwire [E203_XLEN-1:0] nice_icb_rsp_rdata;\nwire nice_icb_rsp_err;\n\n// Submodules\ne203_ifu u_e203_ifu (\n  .clk(clk),\n  .rst_n(rst_n),\n  .inspect_pc(inspect_pc),\n  .ifu_active(ifu_active),\n  .itcm_nohold(itcm_nohold),\n  .pc_rtvec(pc_rtvec),\n  .ifu_o_ir(ifu_o_ir),\n  .ifu_o_pc(ifu_o_pc),\n  .ifu_o_pc_vld(ifu_o_pc_vld),\n  .ifu_o_misalgn(ifu_o_misalgn),\n  .ifu_o_buserr(ifu_o_buserr),\n  .ifu_o_rs1idx(ifu_o_rs1idx),\n  .ifu_o_rs2idx(ifu_o_rs2idx),\n  .ifu_o_prdt_taken(ifu_o_prdt_taken),\n  .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n  .ifu_o_valid(ifu_o_valid),\n  .ifu_o_ready(ifu_o_ready),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .ifu2itcm_holdup(ifu2itcm_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n  .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n  .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n  .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n  .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n  .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n  .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n  .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n  .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n  .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n  .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n  .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n  .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n  .ifu_halt_req(ifu_halt_req),\n  .ifu_halt_ack(ifu_halt_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu)\n);\n\ne203_exu u_e203_exu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .exu_active(exu_active),\n  .excp_active(excp_active),\n  .core_wfi(core_wfi),\n  .tm_stop(tm_stop),\n  .itcm_nohold(itcm_nohold),\n  .core_cgstop(core_cgstop),\n  .tcm_cgstop(tcm_cgstop),\n  .core_mhartid(core_mhartid),\n  .dbg_irq_r(dbg_irq_r),\n  .lcl_irq_r(lcl_irq_r),\n  .evt_r(evt_r),\n  .ext_irq_r(ext_irq_r),\n  .sft_irq_r(sft_irq_r),\n  .tmr_irq_r(tmr_irq_r),\n  .wfi_halt_ifu_req(wfi_halt_ifu_req),\n  .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu),\n  .test_mode(test_mode),\n  .clk_aon(clk_aon),\n  .clk(clk),\n  .rst_n(rst_n),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle),\n  .i_valid(i_valid),\n  .i_ready(i_ready),\n  .i_ir(i_ir),\n  .i_pc(i_pc),\n  .i_pc_vld(i_pc_vld),\n  .i_misalgn(i_misalgn),\n  .i_buserr(i_buserr),\n  .i_prdt_taken(i_prdt_taken),\n  .i_muldiv_b2b(i_muldiv_b2b),\n  .i_rs1idx(i_rs1idx),\n  .i_rs2idx(i_rs2idx),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_csr_valid(nice_csr_valid),\n  .nice_csr_ready(nice_csr_ready),\n  .nice_csr_addr(nice_csr_addr),\n  .nice_csr_wr(nice_csr_wr),\n  .nice_csr_wdata(nice_csr_wdata),\n  .nice_csr_rdata(nice_csr_rdata),\n  .nice_req_valid(nice_req_valid),\n  .nice_req_ready(nice_req_ready),\n  .nice_req_inst(nice_req_inst),\n  .nice_req_rs1(nice_req_rs1),\n  .nice_req_rs2(nice_req_rs2),\n  .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n  .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n  .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n  .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n);\n\ne203_lsu u_e203_lsu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .excp_active(excp_active),\n  .lsu_active(lsu_active),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_mem_holdup(nice_mem_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .dtcm_region_indic(dtcm_region_indic),\n  .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n  .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n  .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n  .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n  .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n  .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n  .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n  .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n  .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n  .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n  .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n  .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n  .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n  .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n  .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n  .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n  .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n  .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n  .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n  .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n  .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n  .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n  .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n  .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n  .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n  .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n  .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n  .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n  .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n  .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n  .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n  .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n  .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n  .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n  .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n  .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n  .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n  .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n  .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n  .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n  .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n  .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n);\n\ne203_biu u_e203_biu (\n  .biu_active(biu_active),\n  .clk(clk),\n  .rst_n(rst_n),\n  .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n  .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n  .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n  .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n  .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n  .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n  .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n  .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n  .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n  .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n  .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n  .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n  .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n  .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n  .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n  .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n  .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n  .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n  .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n  .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n  .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n  .ppi_region_indic(ppi_region_indic),\n  .ppi_icb_enable(ppi_icb_enable),\n  .clint_region_indic(clint_region_indic),\n  .clint_icb_enable(clint_icb_enable),\n  .plic_region_indic(plic_region_indic),\n  .plic_icb_enable(plic_icb_enable),\n  .mem_icb_enable(mem_icb_enable)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 4, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  \n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  \n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  \n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  reg [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked)\n          icb_state_nxt = ICB_STATE_1ST;\n        else\n          icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r)\n            icb_state_nxt = ICB_STATE_WAIT2ND;\n          else\n            icb_state_nxt = ICB_STATE_IDLE;\n        end else\n          icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready)\n          icb_state_nxt = ICB_STATE_2ND;\n        else\n          icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked)\n          icb_state_nxt = ICB_STATE_IDLE;\n        else\n          icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n\n  // State Update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      icb_state <= ICB_STATE_IDLE;\n    else if (icb_state_ena)\n      icb_state <= icb_state_nxt;\n  end\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_i_vld;\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_o_rdy;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(\n    .DP(1),\n    .DW(33)\n  ) u_ift2icb_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0);\n  assign ifu_req_lane_same = ifu_req_seq & req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup & (~itcm_nohold);\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same & ifu_req_lane_cross & ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same & ifu_req_lane_cross & ~ifu_req_lane_holdup) | (~ifu_req_lane_same & ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same & ~ifu_req_lane_cross & ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n    end\n  end\n\n  // Address Alignment Information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      icb_cmd_addr_2_1_r <= 2'b00;\n    else if (ifu_icb_cmd_hsked || ifu_req_hsked)\n      icb_cmd_addr_2_1_r <= ifu_req_pc[2:1];\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked & req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked & ifu_icb_rsp2leftover;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena) begin\n      leftover_r <= ifu_icb_rsp_rdata[31:16];\n      leftover_err_r <= 1'b0;\n    end else if (uop1st2leftover_ena) begin\n      leftover_r <= ifu_icb_rsp_rdata[31:16];\n      leftover_err_r <= ifu_icb_rsp_err;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err | leftover_err_r) : ifu_icb_rsp_err;\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? {ifu_icb_rsp_rdata_lsb16, leftover_r} : ifu_icb_rsp_rdata;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr;\n  wire icb_addr_sel_1stnxtalgn = holdup2leftover_sel;\n  wire icb_addr_sel_2ndnxtalgn = req_need_2uop_r & (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n  wire icb_addr_sel_cur = ~(icb_addr_sel_1stnxtalgn || icb_addr_sel_2ndnxtalgn);\n\n  assign ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : (icb_addr_sel_2ndnxtalgn ? ifu_req_last_pc + 8 : ifu_req_pc);\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = ifu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready);\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 3, "code": "module e203_exu_regfile(\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  `ifdef E203_CFG_REGNUM_IS_32\n    localparam RFREG_NUM = 32;\n  `endif\n  `ifdef E203_CFG_REGNUM_IS_16\n    localparam RFREG_NUM = 16;\n  `endif\n\n  reg [E203_XLEN-1:0] rf_r[0:RFREG_NUM-1];\n\n  wire x0_unused = wbck_dest_wen & (wbck_dest_idx == 5'b0);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      rf_r[0] <= {E203_XLEN{1'b0}};\n    end else if (wbck_dest_wen & (wbck_dest_idx != 5'b0)) begin\n      rf_r[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  assign read_src1_dat = rf_r[read_src1_idx];\n  assign read_src2_dat = rf_r[read_src2_idx];\n  assign x1_r = rf_r[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 10, "code": "`include \"e203_defines.v\"\n\nmodule e203_srams (\n  // ITCM RAM Interface\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  // DTCM RAM Interface\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  // DTCM RAM instantiation\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 5, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  // State machine registers\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  reg [1:0] icb_state_nxt;\n\n  // State transition logic\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end else begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r) begin\n            icb_state_nxt = ICB_STATE_WAIT2ND;\n          end else begin\n            icb_state_nxt = ICB_STATE_IDLE;\n          end\n        end else begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end else begin\n          icb_state_nxt = ICB_STATE_WAIT2ND;\n        end\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end else begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  // State update control\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass buffer implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_i_vld;\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_o_rdy;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane operation implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0);\n  assign ifu_req_lane_same = ifu_req_seq & req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup & (~itcm_nohold);\n\n  // Request feature registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same & ifu_req_lane_cross & ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_cross & ~ifu_req_lane_holdup) | (~ifu_req_lane_same & ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same & ~ifu_req_lane_cross & ifu_req_lane_holdup;\n    end\n  end\n\n  // Leftover buffer implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n  wire holdup2leftover_ena;\n  wire uop1st2leftover_ena;\n  wire [15:0] leftover_nxt;\n  wire leftover_err_nxt;\n\n  assign holdup2leftover_ena = ifu_req_hsked & req_same_cross_holdup_r;\n  assign uop1st2leftover_ena = ifu_icb_rsp_hsked & ifu_icb_rsp2leftover;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena) begin\n      leftover_r <= ifu_icb_rsp_rdata_lsb16;\n      leftover_err_r <= 1'b0;\n    end else if (uop1st2leftover_ena) begin\n      leftover_r <= ifu_icb_rsp_rdata_lsb16;\n      leftover_err_r <= ifu_icb_rsp_err;\n    end\n  end\n\n  // Response generation implementation\n  wire rsp_instr_sel_leftover;\n  wire rsp_instr_sel_icb_rsp;\n  wire [31:0] rsp_instr;\n\n  assign rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST) & req_same_cross_holdup_r | (icb_state == ICB_STATE_2ND);\n  assign rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  assign rsp_instr = rsp_instr_sel_leftover ? {ifu_icb_rsp_rdata_lsb16, leftover_r} : ifu_icb_rsp_rdata;\n\n  // ICB command generation implementation\n  wire ifu_icb_cmd_valid;\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_valid = ifu_req_valid & ~req_need_0uop_r | req_need_2uop_r & (icb_state == ICB_STATE_1ST | icb_state == ICB_STATE_WAIT2ND);\n  assign ifu_icb_cmd_addr = ifu_req_pc;\n\n  // ICB request distribution implementation\n  wire ifu_icb_cmd2biu;\n  wire ifu_icb_cmd2itcm;\n\n  assign ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE);\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake control implementation\n  wire ifu_req_hsked;\n  wire ifu_icb_cmd_hsked;\n  wire ifu_icb_rsp_hsked;\n  wire i_ifu_rsp_hsked;\n\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  assign ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  assign i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // Data alignment implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16;\n\n  assign ifu_icb_rsp_rdata_lsb16 = ifu_icb_rsp_rdata[15:0];\n\n  // ICB response merge implementation\n  wire ifu_icb_rsp_err;\n  wire ifu_icb_rsp_valid;\n\n  assign ifu_icb_rsp_err = ifu_icb_rsp_err;\n  assign ifu_icb_rsp_valid = ifu_icb_rsp_valid;\n\n  // System memory interface implementation\n  wire ifu2biu_icb_cmd_valid_pre;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre;\n\n  assign ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 6, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena  = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena  = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r && !ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_WAIT2ND;\n          else if (req_need_2uop_r && ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n          else if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_bypbuf_o_vld;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_o_rdy = ifu_rsp_ready;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire icb_addr_sel_1stnxtalgn = holdup2leftover_sel;\n  wire icb_addr_sel_2ndnxtalgn = req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n  wire icb_addr_sel_cur = ~(icb_addr_sel_1stnxtalgn || icb_addr_sel_2ndnxtalgn);\n\n  wire [ADDR_SIZE-1:0] icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc : ifu_req_pc;\n\n  assign ifu_icb_cmd2itcm = (icb_cmd_addr >= ITCM_BASE_ADDR) && (icb_cmd_addr < ITCM_BASE_ADDR + ITCM_SIZE);\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = icb_cmd_addr;\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 16, "code": "module e203_core(\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // System Interface\n  wire [E203_ADDR_SIZE-1:0] ppi_region_indic;\n  wire [E203_ADDR_SIZE-1:0] clint_region_indic;\n  wire [E203_ADDR_SIZE-1:0] plic_region_indic;\n  wire [E203_ADDR_SIZE-1:0] fio_region_indic;\n  wire [E203_ADDR_SIZE-1:0] dtcm_region_indic;\n\n  // ICB Protocol\n  wire ifu2itcm_icb_cmd_valid;\n  wire ifu2itcm_icb_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr;\n  wire ifu2itcm_icb_rsp_valid;\n  wire ifu2itcm_icb_rsp_ready;\n  wire ifu2itcm_icb_rsp_err;\n  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata;\n\n  // NICE Interface\n  wire nice_mem_holdup;\n  wire nice_req_valid;\n  wire nice_req_ready;\n  wire [E203_XLEN-1:0] nice_req_inst;\n  wire [E203_XLEN-1:0] nice_req_rs1;\n  wire [E203_XLEN-1:0] nice_req_rs2;\n  wire nice_rsp_multicyc_valid;\n  wire nice_rsp_multicyc_ready;\n  wire [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  wire nice_rsp_multicyc_err;\n  wire nice_icb_cmd_valid;\n  wire nice_icb_cmd_ready;\n  wire [E203_XLEN-1:0] nice_icb_cmd_addr;\n  wire nice_icb_cmd_read;\n  wire [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  wire [1:0] nice_icb_cmd_size;\n  wire nice_icb_rsp_valid;\n  wire nice_icb_rsp_ready;\n  wire [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  wire nice_icb_rsp_err;\n\n  // Submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_burst(lsu2biu_icb_cmd_burst),\n    .lsu2biu_icb_cmd_beat(lsu2biu_icb_cmd_beat),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 3, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 7, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  // State machine variables\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n\n  // State transition logic\n  always @(*) begin\n    icb_state_nxt = icb_state;\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_valid && ifu_req_ready) begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_rsp_ready && ifu_rsp_valid) begin\n          if (req_need_2uop_r) begin\n            icb_state_nxt = ICB_STATE_WAIT2ND;\n          end else begin\n            icb_state_nxt = ICB_STATE_IDLE;\n          end\n        end\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end\n      end\n      ICB_STATE_2ND: begin\n        if (ifu_rsp_ready && ifu_rsp_valid) begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end\n      end\n    endcase\n  end\n\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  // Bypass buffer implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_i_vld;\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_i_rdy;\n  wire ifu_rsp_bypbuf_o_rdy;\n\n  assign ifu_rsp_bypbuf_i_data = {ifu_rsp_err, ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(\n    .DP(1),\n    .DW(33)\n  ) u_sirv_gnrl_bypbuf (\n    .i_vld(ifu_rsp_bypbuf_i_vld),\n    .i_rdy(ifu_rsp_bypbuf_i_rdy),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane operation implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0);\n  assign ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request feature registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover buffer implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= (icb_cmd2itcm_r) ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n      leftover_err_r <= (holdup2leftover_ena) ? 1'b0 : ifu_icb_rsp_err;\n    end\n  end\n\n  // Response generation implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  assign ifu_rsp_instr = (rsp_instr_sel_leftover) ? {ifu_icb_rsp_rdata_lsb16, leftover_r} : ifu_icb_rsp_rdata;\n  assign ifu_rsp_err = (rsp_instr_sel_leftover) ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB command generation implementation\n  assign ifu_icb_cmd_valid = (ifu_req_valid && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n  assign ifu_icb_cmd_addr = (icb_addr_sel_1stnxtalgn) ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  assign ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[31:28] == 4'b1000);\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake control implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  assign ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  assign ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  assign ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  assign i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data alignment implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16;\n  assign ifu_icb_rsp_rdata_lsb16 = (icb_cmd2itcm_r) ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB response merge implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB request distribution implementation\n  assign ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready_pre);\n\n  // System memory interface implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 8, "code": "module e203_exu_alu_csrctrl(\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  // Operand preparation\n  wire [E203_XLEN-1:0] csr_op1 = csr_i_info[E203_DECINFO_CSR_RS1IMM] ? \n                                 {{(E203_XLEN-5){1'b0}}, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : \n                                 csr_i_rs1;\n\n  // CSR read enable logic\n  assign csr_rd_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  // CSR write enable logic\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  // CSR index\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // CSR enable\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  // Write-back CSR data preparation\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  // Error handling\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // Valid-ready handshake\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 17, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n// ICB Protocol Interface\ninput *_icb_enable;\noutput *_icb_cmd_valid;\ninput *_icb_cmd_ready;\noutput [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\noutput *_icb_cmd_read;\noutput [E203_XLEN-1:0] *_icb_cmd_wdata;\noutput [E203_XLEN/8-1:0] *_icb_cmd_wmask;\noutput *_icb_cmd_lock;\noutput *_icb_cmd_excl;\noutput [1:0] *_icb_cmd_size;\ninput *_icb_rsp_valid;\noutput *_icb_rsp_ready;\ninput *_icb_rsp_err;\ninput *_icb_rsp_excl_ok;\ninput [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n// PPI Interface\ninput [E203_ADDR_SIZE-1:0] ppi_region_indic;\n\n// CLINT Interface\ninput [E203_ADDR_SIZE-1:0] clint_region_indic;\n\n// PLIC Interface\ninput [E203_ADDR_SIZE-1:0] plic_region_indic;\n\n// FIO Interface (if E203_HAS_FIO is defined)\ninput [E203_ADDR_SIZE-1:0] fio_region_indic;\n\n// NICE Interface (if E203_HAS_NICE is defined)\ninput nice_mem_holdup;\noutput nice_req_valid;\ninput nice_req_ready;\noutput [E203_XLEN-1:0] nice_req_inst;\noutput [E203_XLEN-1:0] nice_req_rs1;\noutput [E203_XLEN-1:0] nice_req_rs2;\ninput nice_rsp_multicyc_valid;\noutput nice_rsp_multicyc_ready;\ninput [E203_XLEN-1:0] nice_rsp_multicyc_dat;\ninput nice_rsp_multicyc_err;\ninput nice_icb_cmd_valid;\noutput nice_icb_cmd_ready;\ninput [E203_XLEN-1:0] nice_icb_cmd_addr;\ninput nice_icb_cmd_read;\ninput [E203_XLEN-1:0] nice_icb_cmd_wdata;\ninput [1:0] nice_icb_cmd_size;\noutput nice_icb_rsp_valid;\ninput nice_icb_rsp_ready;\noutput [E203_XLEN-1:0] nice_icb_rsp_rdata;\noutput nice_icb_rsp_err;\n\n// Submodule: e203_ifu\ne203_ifu u_e203_ifu (\n  .clk(clk),\n  .rst_n(rst_n),\n  .inspect_pc(inspect_pc),\n  .ifu_active(ifu_active),\n  .itcm_nohold(itcm_nohold),\n  .pc_rtvec(pc_rtvec),\n  .ifu_o_ir(ifu_o_ir),\n  .ifu_o_pc(ifu_o_pc),\n  .ifu_o_pc_vld(ifu_o_pc_vld),\n  .ifu_o_misalgn(ifu_o_misalgn),\n  .ifu_o_buserr(ifu_o_buserr),\n  .ifu_o_rs1idx(ifu_o_rs1idx),\n  .ifu_o_rs2idx(ifu_o_rs2idx),\n  .ifu_o_prdt_taken(ifu_o_prdt_taken),\n  .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n  .ifu_o_valid(ifu_o_valid),\n  .ifu_o_ready(ifu_o_ready),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .ifu2itcm_holdup(ifu2itcm_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n  .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n  .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n  .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n  .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n  .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n  .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n  .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n  .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n  .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n  .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n  .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n  .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n  .ifu_halt_req(ifu_halt_req),\n  .ifu_halt_ack(ifu_halt_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu)\n);\n\n// Submodule: e203_exu\ne203_exu u_e203_exu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .exu_active(exu_active),\n  .excp_active(excp_active),\n  .core_wfi(core_wfi),\n  .tm_stop(tm_stop),\n  .itcm_nohold(itcm_nohold),\n  .core_cgstop(core_cgstop),\n  .tcm_cgstop(tcm_cgstop),\n  .core_mhartid(core_mhartid),\n  .dbg_irq_r(dbg_irq_r),\n  .lcl_irq_r(lcl_irq_r),\n  .evt_r(evt_r),\n  .ext_irq_r(ext_irq_r),\n  .sft_irq_r(sft_irq_r),\n  .tmr_irq_r(tmr_irq_r),\n  .wfi_halt_ifu_req(wfi_halt_ifu_req),\n  .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu),\n  .test_mode(test_mode),\n  .clk_aon(clk_aon),\n  .clk(clk),\n  .rst_n(rst_n),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle),\n  .i_valid(i_valid),\n  .i_ready(i_ready),\n  .i_ir(i_ir),\n  .i_pc(i_pc),\n  .i_pc_vld(i_pc_vld),\n  .i_misalgn(i_misalgn),\n  .i_buserr(i_buserr),\n  .i_prdt_taken(i_prdt_taken),\n  .i_muldiv_b2b(i_muldiv_b2b),\n  .i_rs1idx(i_rs1idx),\n  .i_rs2idx(i_rs2idx),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_csr_valid(nice_csr_valid),\n  .nice_csr_ready(nice_csr_ready),\n  .nice_csr_addr(nice_csr_addr),\n  .nice_csr_wr(nice_csr_wr),\n  .nice_csr_wdata(nice_csr_wdata),\n  .nice_csr_rdata(nice_csr_rdata),\n  .nice_req_valid(nice_req_valid),\n  .nice_req_ready(nice_req_ready),\n  .nice_req_inst(nice_req_inst),\n  .nice_req_rs1(nice_req_rs1),\n  .nice_req_rs2(nice_req_rs2),\n  .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n  .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n  .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n  .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n);\n\n// Submodule: e203_lsu\ne203_lsu u_e203_lsu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .excp_active(excp_active),\n  .lsu_active(lsu_active),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_mem_holdup(nice_mem_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .dtcm_region_indic(dtcm_region_indic),\n  .*_icb_cmd_valid(*_icb_cmd_valid),\n  .*_icb_cmd_ready(*_icb_cmd_ready),\n  .*_icb_cmd_addr(*_icb_cmd_addr),\n  .*_icb_cmd_read(*_icb_cmd_read),\n  .*_icb_cmd_wdata(*_icb_cmd_wdata),\n  .*_icb_cmd_wmask(*_icb_cmd_wmask),\n  .*_icb_cmd_lock(*_icb_cmd_lock),\n  .*_icb_cmd_excl(*_icb_cmd_excl),\n  .*_icb_cmd_size(*_icb_cmd_size),\n  .*_icb_rsp_valid(*_icb_rsp_valid),\n  .*_icb_rsp_ready(*_icb_rsp_ready),\n  .*_icb_rsp_err(*_icb_rsp_err),\n  .*_icb_rsp_excl_ok(*_icb_rsp_excl_ok),\n  .*_icb_rsp_rdata(*_icb_rsp_rdata)\n);\n\n// Submodule: e203_biu\ne203_biu u_e203_biu (\n  .biu_active(biu_active),\n  .clk(clk),\n  .rst_n(rst_n),\n  .*_icb_cmd_valid(*_icb_cmd_valid),\n  .*_icb_cmd_ready(*_icb_cmd_ready),\n  .*_icb_cmd_addr(*_icb_cmd_addr),\n  .*_icb_cmd_read(*_icb_cmd_read),\n  .*_icb_cmd_wdata(*_icb_cmd_wdata),\n  .*_icb_cmd_wmask(*_icb_cmd_wmask),\n  .*_icb_cmd_burst(*_icb_cmd_burst),\n  .*_icb_cmd_beat(*_icb_cmd_beat),\n  .*_icb_cmd_lock(*_icb_cmd_lock),\n  .*_icb_cmd_excl(*_icb_cmd_excl),\n  .*_icb_cmd_size(*_icb_cmd_size),\n  .*_icb_rsp_valid(*_icb_rsp_valid),\n  .*_icb_rsp_ready(*_icb_rsp_ready),\n  .*_icb_rsp_err(*_icb_rsp_err),\n  .*_icb_rsp_excl_ok(*_icb_rsp_excl_ok),\n  .*_icb_rsp_rdata(*_icb_rsp_rdata),\n  .ppi_region_indic(ppi_region_indic),\n  .ppi_icb_enable(ppi_icb_enable),\n  .clint_region_indic(clint_region_indic),\n  .clint_icb_enable(clint_icb_enable),\n  .plic_region_indic(plic_region_indic),\n  .plic_icb_enable(plic_icb_enable),\n  .fio_region_indic(fio_region_indic),\n  .mem_icb_enable(mem_icb_enable)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 8, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r && !ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_WAIT2ND;\n          else if (req_need_2uop_r && ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n          else if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass buffer implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_o_rdy;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane operation implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request feature registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target indication registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n    end\n  end\n\n  // Address alignment information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_icb_cmd_hsked || ifu_req_hsked) begin\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover buffer implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response generation implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  wire i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  wire i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n  wire [31:0] i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  // ICB command generation implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[31:ITCM_ADDR_WIDTH] == ITCM_BASE_ADDR[31:ITCM_ADDR_WIDTH]);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake control implementation\n  wire ifu_req_ready_condi = (icb_state == ICB_STATE_IDLE) || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND);\n  assign ifu_req_ready = ifu_icb_cmd_ready && ifu_req_ready_condi;\n\n  wire ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data alignment implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB response merge implementation\n  wire ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  wire ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB request distribution implementation\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready_pre);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 12, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Exception handling submodule\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Branch resolution submodule\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & alu_cmt_i_valid & alu_cmt_i_ready;\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 18, "code": "module e203_dtcm_ctrl(\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  // LSU ICB Interface\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals for arbitration\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Arbitration logic\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read (arbt_icb_cmd_read),\n    .o_icb_cmd_addr (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk (clk),\n    .rst_n (rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_dtcm_sram_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop (tcm_cgstop),\n    .i_icb_cmd_valid (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready (arbt_icb_cmd_ready),\n    .i_icb_cmd_read (arbt_icb_cmd_read),\n    .i_icb_cmd_addr (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .ram_cs (dtcm_ram_cs),\n    .ram_we (dtcm_ram_we),\n    .ram_addr (dtcm_ram_addr),\n    .ram_wem (dtcm_ram_wem),\n    .ram_din (dtcm_ram_din),\n    .ram_dout (dtcm_ram_dout),\n    .clk_ram (clk_dtcm_ram),\n    .test_mode (test_mode),\n    .clk (clk),\n    .rst_n (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 1, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Define the FIFO depth and pointers\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg [E203_OITF_DEPTH-1:0] fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_OITF_DEPTH-1:0] rdwen_fifo, rdfpu_fifo;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] pc_fifo [0:E203_OITF_DEPTH-1];\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_r == ret_ptr_r && !oitf_empty);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdidx_fifo[dis_ptr_r] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_r] <= disp_i_pc;\n      rdwen_fifo[dis_ptr_r] <= disp_i_rdwen;\n      rdfpu_fifo[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = rdidx_fifo[ret_ptr_r];\n  assign ret_pc = pc_fifo[ret_ptr_r];\n  assign ret_rdwen = rdwen_fifo[ret_ptr_r];\n  assign ret_rdfpu = rdfpu_fifo[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_r <= ret_ptr_r + 1;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (rdwen_fifo[ret_ptr_r] == 0);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 2, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  reg [E203_OITF_DEPTH-1:0] rdwen;\n  reg [E203_OITF_DEPTH-1:0] rdfpu;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] pc [E203_OITF_DEPTH-1:0];\n\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  wire oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  assign dis_ready = !oitf_full;\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      ret_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n      ret_ptr_flag <= 0;\n    end else begin\n      if (dis_ena && dis_ready) begin\n        rdwen[dis_ptr_r] <= disp_i_rdwen;\n        rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n        rdidx[dis_ptr_r] <= disp_i_rdidx;\n        pc[dis_ptr_r] <= disp_i_pc;\n        dis_ptr_r <= dis_ptr_r + 1;\n        if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n      end\n      if (ret_ena && !oitf_empty) begin\n        ret_rdidx <= rdidx[ret_ptr_r];\n        ret_rdwen <= rdwen[ret_ptr_r];\n        ret_rdfpu <= rdfpu[ret_ptr_r];\n        ret_pc <= pc[ret_ptr_r];\n        ret_ptr_r <= ret_ptr_r + 1;\n        if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n      end\n    end\n  end\n\n  assign oitfrd_match_disprs1 = disp_i_rs1en && (|({E203_OITF_DEPTH{disp_i_rs1fpu}} & rdfpu) & (rdidx == disp_i_rs1idx));\n  assign oitfrd_match_disprs2 = disp_i_rs2en && (|({E203_OITF_DEPTH{disp_i_rs2fpu}} & rdfpu) & (rdidx == disp_i_rs2idx));\n  assign oitfrd_match_disprs3 = disp_i_rs3en && (|({E203_OITF_DEPTH{disp_i_rs3fpu}} & rdfpu) & (rdidx == disp_i_rs3idx));\n  assign oitfrd_match_disprd = disp_i_rdwen && (|({E203_OITF_DEPTH{disp_i_rdfpu}} & rdfpu) & (rdidx == disp_i_rdidx));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 4, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 9, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_sta_is_idle & ifu_req_hsked;\n  wire state_1st_exit_ena = icb_sta_is_1st & ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_sta_is_2nd & i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r & ~ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_WAIT2ND;\n          else if (req_need_2uop_r & ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n          else if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass buffer implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane operation implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) | (ifu_req_pc[2:1] == 2'b11);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) | (ifu_req_pc[2:1] == 2'b00);\n  assign ifu_req_lane_same = ifu_req_seq & req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup & (~itcm_nohold);\n\n  // Request feature registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same & ifu_req_lane_cross & ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same & ifu_req_lane_cross & ~ifu_req_lane_holdup) | (~ifu_req_lane_same & ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same & ~ifu_req_lane_cross & ifu_req_lane_holdup;\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover buffer implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked & req_same_cross_holdup;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked & ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = uop1st2leftover_ena ? ifu_icb_rsp_err : 1'b0;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena | uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response generation implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST & req_same_cross_holdup_r) | (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  wire holdup_gen_fake_rsp_valid = (icb_state == ICB_STATE_1ST) & req_need_0uop_r;\n  wire ifu_icb_rsp2ir_valid = ifu_icb_rsp_valid & ~ifu_icb_rsp2leftover;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid | ifu_icb_rsp2ir_valid;\n\n  wire i_ifu_rsp_err_leftover = leftover_err_r | ifu_icb_rsp_err;\n  wire i_ifu_rsp_err_icb_rsp = ifu_icb_rsp_err;\n\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? i_ifu_rsp_err_leftover : i_ifu_rsp_err_icb_rsp;\n\n  // ICB command generation implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked & ~req_need_0uop_r) | (req_need_2uop_r & ((icb_state == ICB_STATE_1ST & ifu_icb_rsp_hsked) | (icb_state == ICB_STATE_WAIT2ND)));\n\n  wire icb_addr_sel_1stnxtalgn = holdup2leftover_sel;\n  wire icb_addr_sel_2ndnxtalgn = req_need_2uop_r & (icb_state == ICB_STATE_1ST | icb_state == ICB_STATE_WAIT2ND);\n  wire icb_addr_sel_cur = ~(icb_addr_sel_1stnxtalgn | icb_addr_sel_2ndnxtalgn);\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 2 : (icb_addr_sel_2ndnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc);\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_BASE_ADDR[ITCM_ADDR_WIDTH-1:0]);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake control implementation\n  wire ifu_req_ready_condi = (icb_state == ICB_STATE_IDLE) | ((icb_state == ICB_STATE_1ST) & (req_need_0uop_r | req_need_1uop_r) & ifu_icb_rsp_hsked) | ((icb_state == ICB_STATE_2ND) & ifu_icb_rsp_hsked);\n\n  assign ifu_req_ready = ifu_icb_cmd_ready & ifu_req_ready_condi;\n\n  wire ifu_icb_rsp_ready = ifu_icb_rsp2leftover ? 1'b1 : i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // Data alignment implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB response merge implementation\n  wire ifu_icb_rsp_err = (icb_cmd2itcm_r & ifu2itcm_icb_rsp_err) | (icb_cmd2biu_r & ifu2biu_icb_rsp_err);\n  wire ifu_icb_rsp_valid = (icb_cmd2itcm_r & ifu2itcm_icb_rsp_valid) | (icb_cmd2biu_r & ifu2biu_icb_rsp_valid);\n\n  // ICB request distribution implementation\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  wire ifu_icb_cmd_ready = (ifu_icb_cmd2itcm & ifu2itcm_icb_cmd_ready) | (ifu_icb_cmd2biu & ifu2biu_icb_cmd_ready_pre);\n\n  // System memory interface implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 5, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 3, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch and retirement pointers\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  // OITF full and empty conditions\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  // Dispatch logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Output signals for retiring instruction\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 10, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: icb_state_nxt = ICB_STATE_1ST;\n      ICB_STATE_1ST: icb_state_nxt = (req_need_2uop_r && !ifu_icb_cmd_ready) ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE;\n      ICB_STATE_WAIT2ND: icb_state_nxt = ICB_STATE_2ND;\n      ICB_STATE_2ND: icb_state_nxt = ICB_STATE_IDLE;\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr(icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  wire [31:0] ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf(\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && !ifu_req_lane_holdup) || (!ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && !ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n    end\n  end\n\n  // Address Alignment Information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_icb_cmd_hsked || ifu_req_hsked) begin\n      icb_cmd_addr_2_1_r <= ifu_req_pc[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr = rsp_instr_sel_leftover ? {ifu_icb_rsp_rdata_lsb16, leftover_r} : ifu_icb_rsp_rdata;\n  wire rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_err;\n  assign i_ifu_rsp_instr = rsp_instr;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && !req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE[ITCM_ADDR_WIDTH-1:0]);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready_pre);\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 4, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_OITF_DEPTH-1:0] rdwen_fifo;\n  reg [E203_OITF_DEPTH-1:0] rdfpu_fifo;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] pc_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg dis_flag, ret_flag;\n\n  wire oitf_full = (dis_ptr_reg == ret_ptr_reg) && (dis_flag != ret_flag);\n  assign oitf_empty = (dis_ptr_reg == ret_ptr_reg) && (dis_flag == ret_flag);\n  assign dis_ready = !oitf_full;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      dis_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdwen_fifo[dis_ptr_reg] <= disp_i_rdwen;\n      rdfpu_fifo[dis_ptr_reg] <= disp_i_rdfpu;\n      rdidx_fifo[dis_ptr_reg] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_reg] <= disp_i_pc;\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == (E203_OITF_DEPTH-1))\n        dis_flag <= ~dis_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      ret_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= rdidx_fifo[ret_ptr_reg];\n      ret_pc <= pc_fifo[ret_ptr_reg];\n      ret_rdwen <= rdwen_fifo[ret_ptr_reg];\n      ret_rdfpu <= rdfpu_fifo[ret_ptr_reg];\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == (E203_OITF_DEPTH-1))\n        ret_flag <= ~ret_flag;\n    end\n  end\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs1idx) & (rdfpu_fifo == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs2idx) & (rdfpu_fifo == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs3idx) & (rdfpu_fifo == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(rdwen_fifo & (rdidx_fifo == disp_i_rdidx) & (rdfpu_fifo == disp_i_rdfpu));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 11, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n\n  input  [`E203_XLEN-1:0] agu_i_rs1,\n  input  [`E203_XLEN-1:0] agu_i_rs2,\n  input  [`E203_XLEN-1:0] agu_i_imm,\n  input  [`E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [`E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n\n  input  flush_req,\n  input  flush_pulse,\n\n  output amo_wait,\n  input  oitf_empty,\n\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [`E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [`E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [`E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [`E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  output [`E203_XLEN-1:0] agu_req_alu_op1,\n  output [`E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [`E203_XLEN-1:0] agu_req_alu_res,\n\n  output agu_sbf_0_ena,\n  output [`E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [`E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [`E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [`E203_XLEN-1:0] agu_sbf_1_r,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  wire flush_block = flush_req & icb_sta_is_idle;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) begin\n        icb_state <= 4'd1;\n      end else if (state_1st_exit_ena) begin\n        icb_state <= 4'd4;\n      end else if (state_amoalu_exit_ena) begin\n        icb_state <= 4'd5;\n      end else if (state_amordy_exit_ena) begin\n        icb_state <= 4'd2;\n      end else if (state_wait2nd_exit_ena) begin\n        icb_state <= 4'd3;\n      end else if (state_2nd_exit_ena) begin\n        icb_state <= 4'd6;\n      end else if (state_wbck_exit_ena) begin\n        icb_state <= 4'd0;\n      end\n    end\n  end\n\n  // Additional logic for AGU operations, exception handling, and LSU interface\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 4, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire ifu_halt_req,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rden,\n  input  wire dec2ifu_rs1en,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack\n);\n\n  // Internal signals for ifetch and ift2icb modules\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_ready;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n  wire ifu_req_ready;\n\n  // Instantiate the e203_ifu_ifetch module\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate the e203_ifu_ift2icb module\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr)\n  );\n\n  // Define the active signal for the IFU\n  assign ifu_active = ifu_req_valid || ifu_rsp_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 7, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n  wire jalr_rs1xn_dep_clr = jalr_rs1xn_dep_ir_clr | (~jalr_rs1xn_dep);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep_clr;\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  wire bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire [E203_PC_SIZE-1:0] jalr_rs1_add_op1 = \n    ({E203_PC_SIZE{dec_jalr_rs1x0}} & 32'b0) |\n    ({E203_PC_SIZE{dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({E203_PC_SIZE{dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc) |\n    ({E203_PC_SIZE{dec_jalr}} & jalr_rs1_add_op1);\n\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  wire prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  wire jalr_rs1x1_dep = (~oitf_empty) | jalr_rs1idx_cam_irrdidx;\n  wire jalr_rs1x1_dep_clr = (~jalr_rs1x1_dep);\n\n  wire bpu_wait = \n    (dec_jalr & dec_jalr_rs1x1 & (~jalr_rs1x1_dep_clr)) |\n    (dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep_clr));\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 2, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Define internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire ir_pc_vld_set;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} : \n                  dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} : \n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `endif\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertions and checks\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (~rst_n) begin\n      // Reset condition\n    end else begin\n      // Check ifu_req_valid is not X\n      if (^ifu_req_valid === 1'bx) begin\n        $fatal(\"ifu_req_valid has X value\");\n      end\n    end\n  end\n  `endif\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 12, "code": "module e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 13, "code": "module e203_extend_csr(\n  input  clk,\n  input  rst_n,\n  input  nice_csr_valid,\n  output nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input  nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 14, "code": "module e203_extend_csr(\n  input  clk,\n  input  rst_n,\n  input  nice_csr_valid,\n  output nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input  nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 9, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        (csr_op1 & ~read_csr_dat);\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_i_valid & csr_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 15, "code": "module e203_extend_csr (\n    input clk,\n    input rst_n,\n    input nice_csr_valid,\n    output nice_csr_ready,\n    input [31:0] nice_csr_addr,\n    input nice_csr_wr,\n    input [31:0] nice_csr_wdata,\n    output [31:0] nice_csr_rdata\n);\n\n`ifdef E203_HAS_CSR_NICE\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n`else\n    assign nice_csr_ready = 1'b0;\n    assign nice_csr_rdata = 32'b0;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 3, "code": "`include \"e203_defines.v\"\n\nmodule e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 16, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(1),\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 4, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file definition\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read operation\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write operation\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 5, "code": "module e203_exu_regfile (\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output wire [E203_XLEN-1:0] read_src1_dat,\n  output wire [E203_XLEN-1:0] read_src2_dat,\n  input  wire wbck_dest_wen,\n  input  wire [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  wire [E203_XLEN-1:0] wbck_dest_dat,\n  output wire [E203_XLEN-1:0] x1_r,\n  input  wire test_mode,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Define the number of registers based on configuration\n  `ifdef E203_CFG_REGNUM_IS_32\n    localparam RFREG_NUM = 32;\n  `elsif E203_CFG_REGNUM_IS_16\n    localparam RFREG_NUM = 16;\n  `else\n    `error \"Register number configuration is not defined!\"\n  `endif\n\n  // Register file storage\n  reg [E203_XLEN-1:0] regfile [0:RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 7, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n = test_mode ? rst_n : 1'b1;\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    always @(posedge clk or negedge async_rst_n) begin\n        if (!async_rst_n) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n        end else begin\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n        end\n    end\n\n    wire sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = sync_rst_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = sync_rst_n;\n`endif\n    assign rst_aon = sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 8, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n        end else if (test_mode) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n        end else begin\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    wire rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n`endif\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 9, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync_reg;\n\n    // Reset Synchronization\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync_reg <= {RST_SYNC_LEVEL{1'b1}};\n        end else begin\n            rst_sync_reg <= {rst_sync_reg[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    wire rst_sync = (MASTER == 1) ? rst_sync_reg[RST_SYNC_LEVEL-1] : rst_n;\n\n    // Test Mode Handling\n    wire rst_final = test_mode ? rst_n : rst_sync;\n\n    // Reset Signal Distribution\n    assign rst_core = rst_final;\n    `ifdef E203_HAS_ITCM\n    assign rst_itcm = rst_final;\n    `endif\n    `ifdef E203_HAS_DTCM\n    assign rst_dtcm = rst_final;\n    `endif\n    assign rst_aon = rst_final;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 10, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n        end else if (test_mode) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n        end else begin\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    wire rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = `ifdef E203_HAS_ITCM (test_mode ? rst_n : rst_sync_n) `else 1'b0 `endif;\n    assign rst_dtcm = `ifdef E203_HAS_DTCM (test_mode ? rst_n : rst_sync_n) `else 1'b0 `endif;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 20, "code": "module e203_cpu (\n  output [E203_PC-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC-1:0] pc_rtvec,\n  input [E203_HARD_ID_W-1:0] core_mhartid,\n  input dbg_irq_a,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n\n  // ITCM Interface\n`ifdef E203_HAS_ITCM\n  output itcm_ls,\n  output itcm_ram_cs,\n  output itcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output clk_itcm_ram,\n`endif\n\n  // DTCM Interface\n`ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  output dtcm_ls,\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  input [E203_ITCM_RAM_DW-1:0] dtcm_ram_dout,\n`endif\n\n  // Debug Related Interface\n  output [E203_PC-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output dbg_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  // External-agent ICB to ITCM\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n\n  // External-agent ICB to DTCM\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n\n  // Clock and Reset Signals\n  input clk,\n  input rst_n\n);\n\n// Submodule Instantiations\ne203_reset_ctrl u_e203_reset_ctrl (\n  .clk(clk),\n  .rst_n(rst_n),\n  .test_mode(1'b0), // Assuming test_mode is not used\n  .rst_core(),\n  .rst_itcm(),\n  .rst_dtcm(),\n  .rst_aon()\n);\n\ne203_clk_ctrl u_e203_clk_ctrl (\n  .clk(clk),\n  .rst_n(rst_n),\n  .test_mode(1'b0), // Assuming test_mode is not used\n  .core_cgstop(1'b0), // Assuming core_cgstop is not used\n  .core_ifu_active(1'b0), // Assuming core_ifu_active is not used\n  .core_exu_active(1'b0), // Assuming core_exu_active is not used\n  .core_lsu_active(1'b0), // Assuming core_lsu_active is not used\n  .core_biu_active(1'b0), // Assuming core_biu_active is not used\n  .core_wfi(core_wfi),\n  .clk_aon(),\n  .clk_core_ifu(),\n  .clk_core_exu(),\n  .clk_core_lsu(),\n  .clk_core_biu()\n);\n\ne203_irq_sync u_e203_irq_sync (\n  .clk(clk),\n  .rst_n(rst_n),\n  .dbg_irq_a(dbg_irq_a),\n  .ext_irq_a(ext_irq_a),\n  .sft_irq_a(sft_irq_a),\n  .tmr_irq_a(tmr_irq_a),\n  .dbg_irq_r(dbg_irq_r),\n  .ext_irq_r(),\n  .sft_irq_r(),\n  .tmr_irq_r()\n);\n\ne203_extend_csr u_e203_extend_csr (\n  .nice_csr_valid(1'b0), // Assuming nice_csr_valid is not used\n  .nice_csr_ready(),\n  .nice_csr_addr(32'b0), // Assuming nice_csr_addr is not used\n  .nice_csr_wr(1'b0), // Assuming nice_csr_wr is not used\n  .nice_csr_wdata(32'b0), // Assuming nice_csr_wdata is not used\n  .nice_csr_rdata(),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\ne203_subsys_nice_core u_e203_subsys_nice_core (\n  .nice_clk(clk),\n  .nice_rst_n(rst_n),\n  .nice_active(),\n  .nice_mem_holdup(1'b0), // Assuming nice_mem_holdup is not used\n  .nice_req_valid(1'b0), // Assuming nice_req_valid is not used\n  .nice_req_ready(),\n  .nice_req_inst(E203_XLEN'b0), // Assuming nice_req_inst is not used\n  .nice_req_rs1(E203_XLEN'b0), // Assuming nice_req_rs1 is not used\n  .nice_req_rs2(E203_XLEN'b0), // Assuming nice_req_rs2 is not used\n  .nice_rsp_valid(),\n  .nice_rsp_ready(1'b0), // Assuming nice_rsp_ready is not used\n  .nice_rsp_rdat(),\n  .nice_rsp_err(),\n  .nice_icb_cmd_valid(1'b0), // Assuming nice_icb_cmd_valid is not used\n  .nice_icb_cmd_ready(),\n  .nice_icb_cmd_addr(E203_XLEN'b0), // Assuming nice_icb_cmd_addr is not used\n  .nice_icb_cmd_read(1'b0), // Assuming nice_icb_cmd_read is not used\n  .nice_icb_cmd_wdata(E203_XLEN'b0), // Assuming nice_icb_cmd_wdata is not used\n  .nice_icb_cmd_size(2'b0), // Assuming nice_icb_cmd_size is not used\n  .nice_icb_rsp_valid(),\n  .nice_icb_rsp_ready(1'b0), // Assuming nice_icb_rsp_ready is not used\n  .nice_icb_rsp_rdata(),\n  .nice_icb_rsp_err()\n);\n\ne203_core u_e203_core (\n  .inspect_pc(inspect_pc),\n  .core_wfi(core_wfi),\n  .tm_stop(tm_stop),\n  .core_cgstop(),\n  .tcm_cgstop(),\n  .pc_rtvec(pc_rtvec),\n  .core_mhartid(core_mhartid),\n  .dbg_irq_r(dbg_irq_r),\n  .lcl_irq_r(),\n  .evt_r(),\n  .ext_irq_r(),\n  .sft_irq_r(),\n  .tmr_irq_r(),\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle)\n);\n\n`ifdef E203_HAS_ITCM\ne203_itcm_ctrl u_e203_itcm_ctrl (\n  .clk(clk),\n  .rst_n(rst_n),\n  .test_mode(1'b0), // Assuming test_mode is not used\n  .itcm_active(),\n  .tcm_cgstop(),\n  .ifu2itcm_icb_cmd_valid(1'b0), // Assuming ifu2itcm_icb_cmd_valid is not used\n  .ifu2itcm_icb_cmd_ready(),\n  .ifu2itcm_icb_cmd_addr(E203_ITCM_ADDR_WIDTH'b0), // Assuming ifu2itcm_icb_cmd_addr is not used\n  .ifu2itcm_icb_cmd_read(1'b0), // Assuming ifu2itcm_icb_cmd_read is not used\n  .ifu2itcm_icb_cmd_wdata(E203_XLEN'b0), // Assuming ifu2itcm_icb_cmd_wdata is not used\n  .ifu2itcm_icb_cmd_wmask(E203_XLEN/8'b0), // Assuming ifu2itcm_icb_cmd_wmask is not used\n  .ifu2itcm_icb_rsp_valid(),\n  .ifu2itcm_icb_rsp_ready(1'b0), // Assuming ifu2itcm_icb_rsp_ready is not used\n  .ifu2itcm_icb_rsp_err(),\n  .ifu2itcm_icb_rsp_rdata(),\n  .lsu2itcm_icb_cmd_valid(1'b0), // Assuming lsu2itcm_icb_cmd_valid is not used\n  .lsu2itcm_icb_cmd_ready(),\n  .lsu2itcm_icb_cmd_addr(E203_ITCM_ADDR_WIDTH'b0), // Assuming lsu2itcm_icb_cmd_addr is not used\n  .lsu2itcm_icb_cmd_read(1'b0), // Assuming lsu2itcm_icb_cmd_read is not used\n  .lsu2itcm_icb_cmd_wdata(E203_XLEN'b0), // Assuming lsu2itcm_icb_cmd_wdata is not used\n  .lsu2itcm_icb_cmd_wmask(E203_XLEN/8'b0), // Assuming lsu2itcm_icb_cmd_wmask is not used\n  .lsu2itcm_icb_rsp_valid(),\n  .lsu2itcm_icb_rsp_ready(1'b0), // Assuming lsu2itcm_icb_rsp_ready is not used\n  .lsu2itcm_icb_rsp_err(),\n  .lsu2itcm_icb_rsp_rdata(),\n  .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n  .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n  .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n  .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n  .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n  .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n  .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n  .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n  .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err),\n  .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata),\n  .itcm_ram_cs(itcm_ram_cs),\n  .itcm_ram_we(itcm_ram_we),\n  .itcm_ram_addr(itcm_ram_addr),\n  .itcm_ram_wem(itcm_ram_wem),\n  .itcm_ram_din(itcm_ram_din),\n  .itcm_ram_dout(itcm_ram_dout),\n  .clk_itcm_ram(clk_itcm_ram)\n);\n`endif\n\n`ifdef E203_HAS_DTCM\ne203_dtcm_ctrl u_e203_dtcm_ctrl (\n  .clk(clk),\n  .rst_n(rst_n),\n  .test_mode(1'b0), // Assuming test_mode is not used\n  .tcm_cgstop(),\n  .dtcm_active(),\n  .lsu2dtcm_icb_cmd_valid(1'b0), // Assuming lsu2dtcm_icb_cmd_valid is not used\n  .lsu2dtcm_icb_cmd_ready(),\n  .lsu2dtcm_icb_cmd_addr(E203_DTCM_ADDR_WIDTH'b0), // Assuming lsu2dtcm_icb_cmd_addr is not used\n  .lsu2dtcm_icb_cmd_read(1'b0), // Assuming lsu2dtcm_icb_cmd_read is not used\n  .lsu2dtcm_icb_cmd_wdata(E203_XLEN'b0), // Assuming lsu2dtcm_icb_cmd_wdata is not used\n  .lsu2dtcm_icb_cmd_wmask(E203_XLEN/8'b0), // Assuming lsu2dtcm_icb_cmd_wmask is not used\n  .lsu2dtcm_icb_rsp_valid(),\n  .lsu2dtcm_icb_rsp_ready(1'b0), // Assuming lsu2dtcm_icb_rsp_ready is not used\n  .lsu2dtcm_icb_rsp_err(),\n  .lsu2dtcm_icb_rsp_rdata(),\n  .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n  .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n  .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n  .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n  .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n  .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n  .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n  .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n  .ext2dtcm_icb_rsp_err(ext2dtcm_icb_rsp_err),\n  .ext2dtcm_icb_rsp_rdata(ext2dtcm_icb_rsp_rdata),\n  .dtcm_ram_cs(dtcm_ram_cs),\n  .dtcm_ram_we(dtcm_ram_we),\n  .dtcm_ram_addr(dtcm_ram_addr),\n  .dtcm_ram_wem(dtcm_ram_wem),\n  .dtcm_ram_din(dtcm_ram_din),\n  .dtcm_ram_dout(dtcm_ram_dout),\n  .clk_dtcm_ram()\n);\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 18, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // System Interface\n  wire [E203_PC_SIZE-1:0] inspect_pc;\n  wire core_wfi;\n  wire tm_stop;\n  wire core_cgstop;\n  wire tcm_cgstop;\n  wire [E203_PC_SIZE-1:0] pc_rtvec;\n  wire [E203_HART_ID_W-1:0] core_mhartid;\n  wire dbg_irq_r;\n  wire [E203_LIRQ_NUM-1:0] lcl_irq_r;\n  wire [E203_EVT_NUM-1:0] evt_r;\n  wire ext_irq_r;\n  wire sft_irq_r;\n  wire tmr_irq_r;\n  wire wr_dcsr_ena;\n  wire wr_dpc_ena;\n  wire wr_dscratch_ena;\n  wire [31:0] wr_csr_nxt;\n  wire [31:0] dcsr_r;\n  wire [E203_PC_SIZE-1:0] dpc_r;\n  wire [31:0] dscratch_r;\n  wire [E203_PC_SIZE-1:0] cmt_dpc;\n  wire cmt_dpc_ena;\n  wire [2:0] cmt_dcause;\n  wire cmt_dcause_ena;\n  wire dbg_mode;\n  wire dbg_halt_r;\n  wire dbg_step_r;\n  wire dbg_ebreakm_r;\n  wire dbg_stopcycle;\n\n  // ICB Protocol\n  wire *_icb_enable;\n  wire *_icb_cmd_valid;\n  wire *_icb_cmd_ready;\n  wire [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  wire *_icb_cmd_read;\n  wire [E203_XLEN-1:0] *_icb_cmd_wdata;\n  wire [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  wire *_icb_cmd_lock;\n  wire *_icb_cmd_excl;\n  wire [1:0] *_icb_cmd_size;\n  wire *_icb_rsp_valid;\n  wire *_icb_rsp_ready;\n  wire *_icb_rsp_err;\n  wire *_icb_rsp_excl_ok;\n  wire [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // NICE Interface\n  wire nice_mem_holdup;\n  wire nice_req_valid;\n  wire nice_req_ready;\n  wire [E203_XLEN-1:0] nice_req_inst;\n  wire [E203_XLEN-1:0] nice_req_rs1;\n  wire [E203_XLEN-1:0] nice_req_rs2;\n  wire nice_rsp_multicyc_valid;\n  wire nice_rsp_multicyc_ready;\n  wire [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  wire nice_rsp_multicyc_err;\n  wire nice_icb_cmd_valid;\n  wire nice_icb_cmd_ready;\n  wire [E203_XLEN-1:0] nice_icb_cmd_addr;\n  wire nice_icb_cmd_read;\n  wire [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  wire [1:0] nice_icb_cmd_size;\n  wire nice_icb_rsp_valid;\n  wire nice_icb_rsp_ready;\n  wire [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  wire nice_icb_rsp_err;\n\n  // Submodules\n  e203_ifu ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .*_icb_cmd_valid(*_icb_cmd_valid),\n    .*_icb_cmd_ready(*_icb_cmd_ready),\n    .*_icb_cmd_addr(*_icb_cmd_addr),\n    .*_icb_cmd_read(*_icb_cmd_read),\n    .*_icb_cmd_wdata(*_icb_cmd_wdata),\n    .*_icb_cmd_wmask(*_icb_cmd_wmask),\n    .*_icb_cmd_lock(*_icb_cmd_lock),\n    .*_icb_cmd_excl(*_icb_cmd_excl),\n    .*_icb_cmd_size(*_icb_cmd_size),\n    .*_icb_rsp_valid(*_icb_rsp_valid),\n    .*_icb_rsp_ready(*_icb_rsp_ready),\n    .*_icb_rsp_err(*_icb_rsp_err),\n    .*_icb_rsp_excl_ok(*_icb_rsp_excl_ok),\n    .*_icb_rsp_rdata(*_icb_rsp_rdata)\n  );\n\n  e203_biu biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .*_icb_cmd_valid(*_icb_cmd_valid),\n    .*_icb_cmd_ready(*_icb_cmd_ready),\n    .*_icb_cmd_addr(*_icb_cmd_addr),\n    .*_icb_cmd_read(*_icb_cmd_read),\n    .*_icb_cmd_wdata(*_icb_cmd_wdata),\n    .*_icb_cmd_wmask(*_icb_cmd_wmask),\n    .*_icb_cmd_burst(*_icb_cmd_burst),\n    .*_icb_cmd_beat(*_icb_cmd_beat),\n    .*_icb_cmd_lock(*_icb_cmd_lock),\n    .*_icb_cmd_excl(*_icb_cmd_excl),\n    .*_icb_cmd_size(*_icb_cmd_size),\n    .*_icb_rsp_valid(*_icb_rsp_valid),\n    .*_icb_rsp_ready(*_icb_rsp_ready),\n    .*_icb_rsp_err(*_icb_rsp_err),\n    .*_icb_rsp_excl_ok(*_icb_rsp_excl_ok),\n    .*_icb_rsp_rdata(*_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 11, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n = rst_n;\n    wire sync_rst_n;\n\n    generate\n        if (MASTER) begin: gen_master_reset\n            reg [RST_SYNC_LEVEL-1:0] rst_sync;\n            always @(posedge clk or negedge async_rst_n) begin\n                if (!async_rst_n) begin\n                    rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n                end else begin\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n                end\n            end\n            assign sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin: gen_slave_reset\n            assign sync_rst_n = async_rst_n;\n        end\n    endgenerate\n\n    wire rst_n_final = test_mode ? async_rst_n : sync_rst_n;\n\n    assign rst_core = rst_n_final;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = rst_n_final;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = rst_n_final;\n`endif\n    assign rst_aon = rst_n_final;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 19, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input  [E203_PC_SIZE-1:0] pc_rtvec,\n  input  [E203_HART_ID_W-1:0] core_mhartid,\n  input  dbg_irq_r,\n  input  [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  [E203_EVT_NUM-1:0] evt_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input  [31:0] dcsr_r,\n  input  [E203_PC_SIZE-1:0] dpc_r,\n  input  [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle\n);\n\n  // ICB Protocol Signals\n  input  *_icb_enable;\n  output *_icb_cmd_valid;\n  input  *_icb_cmd_ready;\n  output [E203_ADDR_SIZE-1:0] *_icb_cmd_addr;\n  output *_icb_cmd_read;\n  output [E203_XLEN-1:0] *_icb_cmd_wdata;\n  output [E203_XLEN/8-1:0] *_icb_cmd_wmask;\n  output *_icb_cmd_lock;\n  output *_icb_cmd_excl;\n  output [1:0] *_icb_cmd_size;\n  input  *_icb_rsp_valid;\n  output *_icb_rsp_ready;\n  input  *_icb_rsp_err;\n  input  *_icb_rsp_excl_ok;\n  input  [E203_XLEN-1:0] *_icb_rsp_rdata;\n\n  // PPI Interface\n  input  [E203_ADDR_SIZE-1:0] ppi_region_indic;\n\n  // CLINT Interface\n  input  [E203_ADDR_SIZE-1:0] clint_region_indic;\n\n  // PLIC Interface\n  input  [E203_ADDR_SIZE-1:0] plic_region_indic;\n\n  // FIO Interface (if E203_HAS_FIO is defined)\n  input  [E203_ADDR_SIZE-1:0] fio_region_indic;\n\n  // NICE Interface (if E203_HAS_NICE is defined)\n  input  nice_mem_holdup;\n  output nice_req_valid;\n  input  nice_req_ready;\n  output [E203_XLEN-1:0] nice_req_inst;\n  output [E203_XLEN-1:0] nice_req_rs1;\n  output [E203_XLEN-1:0] nice_req_rs2;\n  input  nice_rsp_multicyc_valid;\n  output nice_rsp_multicyc_ready;\n  input  [E203_XLEN-1:0] nice_rsp_multicyc_dat;\n  input  nice_rsp_multicyc_err;\n  input  nice_icb_cmd_valid;\n  output nice_icb_cmd_ready;\n  input  [E203_XLEN-1:0] nice_icb_cmd_addr;\n  input  nice_icb_cmd_read;\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata;\n  input  [1:0] nice_icb_cmd_size;\n  output nice_icb_rsp_valid;\n  input  nice_icb_rsp_ready;\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata;\n  output nice_icb_rsp_err;\n\n  // Submodule Instances\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 11, "code": "`include \"e203_defines.v\"\n\nmodule e203_srams (\n  // ITCM RAM Interface\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  // DTCM RAM Interface\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin : itcm_ram_block\n      e203_itcm_ram u_itcm_ram (\n        .sd(itcm_ram_sd),\n        .ds(itcm_ram_ds),\n        .ls(itcm_ram_ls),\n        .cs(itcm_ram_cs),\n        .we(itcm_ram_we),\n        .addr(itcm_ram_addr),\n        .wem(itcm_ram_wem),\n        .din(itcm_ram_din),\n        .dout(itcm_ram_dout),\n        .clk(clk_itcm_ram),\n        .rst_n(~rst_itcm)\n      );\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin : dtcm_ram_block\n      e203_dtcm_ram u_dtcm_ram (\n        .sd(dtcm_ram_sd),\n        .ds(dtcm_ram_ds),\n        .ls(dtcm_ram_ls),\n        .cs(dtcm_ram_cs),\n        .we(dtcm_ram_we),\n        .addr(dtcm_ram_addr),\n        .wem(dtcm_ram_wem),\n        .din(dtcm_ram_din),\n        .dout(dtcm_ram_dout),\n        .clk(clk_dtcm_ram),\n        .rst_n(~rst_dtcm)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 12, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n;\n    wire sync_rst_n;\n\n    // In test mode, directly use the asynchronous reset signal\n    assign async_rst_n = test_mode ? rst_n : 1'b1;\n\n    // Synchronize the asynchronous reset signal\n    generate\n        if (MASTER) begin: gen_master_reset\n            reg [RST_SYNC_LEVEL-1:0] rst_sync;\n            always @(posedge clk or negedge async_rst_n) begin\n                if (!async_rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n            end\n            assign sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin: gen_slave_reset\n            assign sync_rst_n = async_rst_n;\n        end\n    endgenerate\n\n    // Reset signal distribution\n    assign rst_core = ~sync_rst_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = ~sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~sync_rst_n;\n`endif\n    assign rst_aon = ~sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 12, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 13, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    `ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n    `endif\n    `ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n    `endif\n    output wire rst_aon\n);\n\n    wire async_rst_n;\n    wire sync_rst_n;\n\n    // Reset Synchronization Logic\n    generate\n        if (MASTER) begin : gen_master_reset\n            reg [RST_SYNC_LEVEL-1:0] rst_sync_reg;\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n) begin\n                    rst_sync_reg <= {RST_SYNC_LEVEL{1'b0}};\n                end else begin\n                    rst_sync_reg <= {rst_sync_reg[RST_SYNC_LEVEL-2:0], 1'b1};\n                end\n            end\n            assign sync_rst_n = rst_sync_reg[RST_SYNC_LEVEL-1];\n        end else begin : gen_slave_reset\n            assign sync_rst_n = rst_n;\n        end\n    endgenerate\n\n    // Test Mode Handling\n    assign async_rst_n = test_mode ? rst_n : sync_rst_n;\n\n    // Reset Signal Distribution\n    assign rst_core = async_rst_n;\n    `ifdef E203_HAS_ITCM\n    assign rst_itcm = async_rst_n;\n    `endif\n    `ifdef E203_HAS_DTCM\n    assign rst_dtcm = async_rst_n;\n    `endif\n    assign rst_aon = async_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 12, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_rv32 = bjp_i_info[E203_DECINFO_RV32];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_rv32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 6, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // No operations in lockstep mode\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 13, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 14, "code": "module e203_reset_ctrl #(\n  parameter MASTER = 1,\n  parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  output wire rst_core,\n`ifdef E203_HAS_ITCM\n  output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n  output wire rst_dtcm,\n`endif\n  output wire rst_aon\n);\n\n  wire async_rst_n = rst_n;\n  wire sync_rst_n;\n\n  generate\n    if (MASTER) begin: gen_master_reset\n      reg [RST_SYNC_LEVEL-1:0] rst_sync;\n      always @(posedge clk or negedge async_rst_n) begin\n        if (!async_rst_n)\n          rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n        else\n          rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n      end\n      assign sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n    end else begin: gen_slave_reset\n      assign sync_rst_n = async_rst_n;\n    end\n  endgenerate\n\n  assign rst_core = test_mode ? async_rst_n : sync_rst_n;\n`ifdef E203_HAS_ITCM\n  assign rst_itcm = test_mode ? async_rst_n : sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n  assign rst_dtcm = test_mode ? async_rst_n : sync_rst_n;\n`endif\n  assign rst_aon = test_mode ? async_rst_n : sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 15, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 7, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include necessary configuration definitions\n  `include \"e203_defines.v\"\n\n  // Generate block for Master-Slave Mode Control\n  generate\n    if (MASTER) begin : gen_master_mode\n      // Non-Lockstep Mode\n      `ifndef E203_HAS_LOCKSTEP\n        // Synchronization needed\n        `ifdef E203_IRQ_NEED_SYNC\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // Direct pass-through\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : gen_slave_mode\n      // Slave Mode: Direct pass-through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 16, "code": "`ifdef E203_HAS_CSR_NICE\n\nmodule e203_extend_csr (\n  input  wire        clk,\n  input  wire        rst_n,\n  input  wire        nice_csr_valid,\n  output wire        nice_csr_ready,\n  input  wire [31:0] nice_csr_addr,\n  input  wire        nice_csr_wr,\n  input  wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n\n`endif // E203_HAS_CSR_NICE", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 9, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [11:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals and submodule instantiations would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 17, "code": "module e203_extend_csr (\n  input  clk,\n  input  rst_n,\n  input  nice_csr_valid,\n  output nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input  nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  // The CSR module is always ready\n  assign nice_csr_ready = 1'b1;\n\n  // The CSR read data is always zero\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 12, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine logic\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 11, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_req;\n  assign cmt_i_ready = ~flush_req | flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm[E203_PC_SIZE-1:0] : (cmt_i_rv32 ? 32'd4 : 32'd2);\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = \n      (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'd4 : 32'd2)) :\n      (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n      cmt_i_dret ? csr_dpc_r :\n      csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 2, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (optional)\n  `ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  `endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [ADDR_WIDTH-1:0] arb_cmd_addr;\n  wire [DATA_WIDTH-1:0] arb_cmd_wdata;\n  wire [WMSK_WIDTH-1:0] arb_cmd_wmask;\n  wire arb_cmd_valid, arb_cmd_ready, arb_cmd_read;\n  wire arb_rsp_valid, arb_rsp_ready, arb_rsp_err;\n  wire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(ADDR_WIDTH),\n    .DW(DATA_WIDTH),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(3),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready({ifu2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_ready `endif}),\n    .i_bus_icb_cmd_valid({ifu2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid `endif}),\n    .i_bus_icb_cmd_read({ifu2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_read `endif}),\n    .i_bus_icb_cmd_addr({ifu2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_addr `endif}),\n    .i_bus_icb_cmd_wdata({ifu2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_wdata `endif}),\n    .i_bus_icb_cmd_wmask({ifu2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_wmask `endif}),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid({ifu2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_valid `endif}),\n    .i_bus_icb_rsp_ready({ifu2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_ready `endif}),\n    .i_bus_icb_rsp_err({ifu2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_err `endif}),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata({ifu2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_rdata `endif}),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(DATA_WIDTH),\n    .MW(WMSK_WIDTH),\n    .AW(ADDR_WIDTH),\n    .AW_LSB(3),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 5, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // Instantiate FIFO for instruction tags\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 3, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR (Instruction Register) control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} :\n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} :\n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx))\n    else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\n  `ifdef E203_TIMING_BOOST\n  // Timing optimization-related handling\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 13, "code": "module e203_exu_commit(\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp(\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv(\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n  assign commit_mret = cmt_mret_ena;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 8, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // ALU operation request signals\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection logic\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Special instruction handling\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n  assign alu_o_wbck_err   = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result retrieval\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 11, "code": "module e203_ifu_ift2icb (\n  input  wire        itcm_nohold,\n  input  wire        ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire        ifu_req_seq,\n  input  wire        ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire        ifu_rsp_ready,\n  input  wire        clk,\n  input  wire        rst_n,\n\n  output wire        ifu_req_ready,\n  output wire        ifu_rsp_valid,\n  output wire        ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n\n  output wire        ifu2itcm_icb_cmd_valid,\n  input  wire        ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire        ifu2itcm_icb_rsp_valid,\n  output wire        ifu2itcm_icb_rsp_ready,\n  input  wire        ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire        ifu2biu_icb_cmd_valid,\n  input  wire        ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire        ifu2biu_icb_rsp_valid,\n  output wire        ifu2biu_icb_rsp_ready,\n  input  wire        ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND) : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         state_2nd_exit_ena ? (ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         icb_state;\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_bypbuf_o_vld, ifu_rsp_bypbuf_o_rdy;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r, req_need_2uop_r, req_need_0uop_r;\n  wire req_same_cross_holdup_set = ifu_req_hsked && req_same_cross_holdup;\n  wire req_need_2uop_set = ifu_req_hsked && (req_same_cross_holdup || req_cross_lane);\n  wire req_need_0uop_set = ifu_req_hsked && req_same_no_cross_holdup;\n\n  sirv_gnrl_dfflr #(1) req_same_cross_holdup_dfflr (req_same_cross_holdup_set, req_same_cross_holdup, req_same_cross_holdup_r, clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_need_2uop_dfflr (req_need_2uop_set, req_need_2uop, req_need_2uop_r, clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_need_0uop_dfflr (req_need_0uop_set, req_need_0uop, req_need_0uop_r, clk, rst_n);\n\n  // ICB Command Generation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (state_1st_exit_ena || state_wait2nd_exit_ena));\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 :\n                                           icb_addr_sel_2ndnxtalgn ? ifu_req_last_pc + 8 :\n                                           ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  assign ifu2itcm_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2itcm;\n  assign ifu2itcm_icb_cmd_addr = ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0];\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n\n  // Handshake Control\n  wire ifu_req_ready_condi = (icb_state == ICB_STATE_IDLE) || \n                             (icb_state == ICB_STATE_1ST && ~req_need_2uop_r) || \n                             (icb_state == ICB_STATE_2ND);\n\n  assign ifu_req_ready = ifu_icb_cmd_ready && ifu_req_ready_condi;\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_icb_rsp_valid = (ifu_icb_rsp_valid && ifu_icb_rsp2ir_valid);\n  wire ifu_icb_rsp_err = (ifu_icb_rsp_err && ifu_icb_rsp2ir_valid);\n\n  // ICB Response Merge\n  assign ifu_icb_rsp_err = (ifu_icb_rsp_err && ifu_icb_rsp2ir_valid);\n  assign ifu_icb_rsp_valid = (ifu_icb_rsp_valid && ifu_icb_rsp2ir_valid);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 10, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        (read_csr_dat & ~csr_op1);\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 18, "code": "`ifdef E203_HAS_CSR_NICE\n\nmodule e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR access requests\n  assign nice_csr_ready = 1'b1;\n\n  // The module always returns zero for CSR read data\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 10, "code": "module e203_exu_alu(\n  input  i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input  nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input  [31:0] nice_csr_rdata,\n  input  nice_xs_off,\n  output amo_wait,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] i_itag,\n  input  [E203_XLEN-1:0] i_rs1,\n  input  [E203_XLEN-1:0] i_rs2,\n  input  [E203_XLEN-1:0] i_imm,\n  input  [E203_DECINFO_WIDTH-1:0] i_info,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  i_pc_vld,\n  input  [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  i_rdwen,\n  input  i_ilegl,\n  input  i_buserr,\n  input  i_misalgn,\n  input  flush_req,\n  input  flush_pulse,\n  output cmt_o_valid,\n  input  cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input  wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input  nonflush_cmt_ena,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input  nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input  nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input  nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  i_nice_cmt_off_ilgl,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 14, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 8, "code": "module e203_exu_alu_dpath (\n  input  alu_req_alu,\n  input  alu_req_alu_add,\n  input  alu_req_alu_sub,\n  input  alu_req_alu_xor,\n  input  alu_req_alu_sll,\n  input  alu_req_alu_srl,\n  input  alu_req_alu_sra,\n  input  alu_req_alu_or,\n  input  alu_req_alu_and,\n  input  [E203_XLEN-1:0] alu_req_alu_op1,\n  input  [E203_XLEN-1:0] alu_req_alu_op2,\n  input  bjp_req_alu,\n  input  [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  agu_req_alu,\n  input  [E203_XLEN-1:0] agu_req_alu_op1,\n  input  [E203_XLEN-1:0] agu_req_alu_op2,\n  input  muldiv_req_alu,\n  input  [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  muldiv_req_alu_add,\n  input  muldiv_req_alu_sub,\n  input  muldiv_sbf_0_ena,\n  input  [32:0] muldiv_sbf_0_nxt,\n  input  muldiv_sbf_1_ena,\n  input  [32:0] muldiv_sbf_1_nxt,\n  input  clk,\n  input  rst_n,\n  output [E203_XLEN-1:0] alu_req_alu_res,\n  output [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output bjp_req_alu_cmp_res,\n  output [E203_XLEN-1:0] agu_req_alu_res,\n  output [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output [32:0] muldiv_sbf_0_r,\n  output [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = \n    ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n    ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n    ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n    ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n    ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n    ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res) |\n    ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n    ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = \n    ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res) |\n    ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 9, "code": "module e203_exu_alu_dpath (\n  input  alu_req_alu,\n  input  alu_req_alu_add,\n  input  alu_req_alu_sub,\n  input  alu_req_alu_xor,\n  input  alu_req_alu_sll,\n  input  alu_req_alu_srl,\n  input  alu_req_alu_sra,\n  input  alu_req_alu_or,\n  input  alu_req_alu_and,\n  input  [E203_XLEN-1:0] alu_req_alu_op1,\n  input  [E203_XLEN-1:0] alu_req_alu_op2,\n  input  bjp_req_alu,\n  input  [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  agu_req_alu,\n  input  [E203_XLEN-1:0] agu_req_alu_op1,\n  input  [E203_XLEN-1:0] agu_req_alu_op2,\n  input  muldiv_req_alu,\n  input  [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  muldiv_req_alu_add,\n  input  muldiv_req_alu_sub,\n  input  muldiv_sbf_0_ena,\n  input  [32:0] muldiv_sbf_0_nxt,\n  input  muldiv_sbf_1_ena,\n  input  [32:0] muldiv_sbf_1_nxt,\n  input  clk,\n  input  rst_n,\n  output [E203_XLEN-1:0] alu_req_alu_res,\n  output [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output bjp_req_alu_cmp_res,\n  output [E203_XLEN-1:0] agu_req_alu_res,\n  output [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output [32:0] muldiv_sbf_0_r,\n  output [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 : \n                                 bjp_req_alu ? bjp_req_alu_op1 : \n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 muldiv_req_alu ? muldiv_req_alu_op1[E203_XLEN-1:0] : \n                                 {E203_XLEN{1'b0}};\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 : \n                                 bjp_req_alu ? bjp_req_alu_op2 : \n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 muldiv_req_alu ? muldiv_req_alu_op2[E203_XLEN-1:0] : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_add_res = alu_op1 + alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_op1 - alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_op1 ^ alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_op1 << alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_op1 >> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_op1) >>> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_op1 | alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_op1 & alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operation logic\n  assign bjp_req_alu_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  assign agu_req_alu_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res) |\n                              ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 6, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the LSU control module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 19, "code": "module e203_extend_csr(\n  input  clk,\n  input  rst_n,\n  input  nice_csr_valid,\n  output nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input  nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  // The module is always ready to accept CSR requests\n  assign nice_csr_ready = 1'b1;\n\n  // The CSR read data is always zero\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 4, "code": "module e203_ifu_ifetch (\n  input clk,\n  input rst_n,\n\n  output ifu_req_valid,\n  input ifu_req_ready,\n  output [E203_PC_SIZE-1:0] ifu_req_pc,\n  output ifu_req_seq,\n  output ifu_req_seq_rv32,\n  output [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input ifu_rsp_valid,\n  output ifu_rsp_ready,\n  input ifu_rsp_err,\n  input [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input pipe_flush_req,\n  output pipe_flush_ack,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  input ifu_o_ready,\n\n  input ifu_halt_req,\n  output ifu_halt_ack,\n\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [31:16] ifu_hi_ir_r;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_hi_ir_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_lo_ir_r;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_lo_ir_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 :\n                      dly_pipe_flush_req ? pc_r :\n                      ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec :\n                      pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 :\n                      dly_pipe_flush_req ? 0 :\n                      ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 :\n                      pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec :\n                      pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 :\n                      pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} :\n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} :\n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  wire [E203_PC_SIZE-1:0] pc;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 5, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(.DW(1)) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(.DW(1)) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(.DW(1)) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(.DW(1)) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(.DW(1)) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  sirv_gnrl_dfflr #(.DW(1)) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : \n                      dly_pipe_flush_req ? pc_r : \n                      ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : \n                      pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : \n                      dly_pipe_flush_req ? 0 : \n                      ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : \n                      pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : \n                      pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : \n                      pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : \n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : \n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  sirv_gnrl_dfflr #(.DW(1)) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(.DW(1)) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 8, "code": "module e203_ifu_litebpu #(\n    parameter E203_PC_SIZE = 32,\n    parameter E203_XLEN = 32,\n    parameter E203_RFIDX_WIDTH = 5\n)(\n    input clk,\n    input rst_n,\n    input [E203_PC_SIZE-1:0] pc,\n    input dec_jal,\n    input dec_jalr,\n    input dec_bxx,\n    input [E203_XLEN-1:0] dec_bjp_imm,\n    input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n    input oitf_empty,\n    input ir_empty,\n    input ir_rs1en,\n    input jalr_rs1idx_cam_irrdidx,\n    input dec_i_valid,\n    input ir_valid_clr,\n    input [E203_XLEN-1:0] rf2bpu_x1,\n    input [E203_XLEN-1:0] rf2bpu_rs1,\n    output reg prdt_taken,\n    output reg [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n    output reg [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n    output reg bpu_wait,\n    output reg bpu2rf_rs1_ena\n);\n\n    // Internal signals\n    wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n    wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n    wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n    wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n    wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n    wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n    wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n    wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n    wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n    sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n    wire jalr_rs1xn_rdrf = rs1xn_rdrf_set;\n\n    always @(*) begin\n        if (dec_jal) begin\n            prdt_taken = 1'b1;\n            prdt_pc_add_op1 = pc;\n            prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n        end else if (dec_jalr) begin\n            prdt_taken = 1'b1;\n            if (dec_jalr_rs1x0) begin\n                prdt_pc_add_op1 = 0;\n            end else if (dec_jalr_rs1x1) begin\n                prdt_pc_add_op1 = rf2bpu_x1;\n            end else begin\n                prdt_pc_add_op1 = rf2bpu_rs1;\n            end\n            prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n        end else if (dec_bxx) begin\n            prdt_taken = dec_bjp_imm[E203_XLEN-1];\n            prdt_pc_add_op1 = pc;\n            prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n        end else begin\n            prdt_taken = 1'b0;\n            prdt_pc_add_op1 = 0;\n            prdt_pc_add_op2 = 0;\n        end\n    end\n\n    assign bpu_wait = dec_jalr & dec_jalr_rs1x1 & (~oitf_empty) & jalr_rs1idx_cam_irrdidx |\n                      dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr);\n\n    assign bpu2rf_rs1_ena = jalr_rs1xn_rdrf;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 4, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals and registers\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic\n  // Decode instruction type, operand indices, and other control signals\n  // ...\n\n  // Assign decoded outputs\n  assign dec_rs1x0 = (dec_rs1idx == 5'b00000);\n  assign dec_rs2x0 = (dec_rs2idx == 5'b00000);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd writeback is enabled */;\n  assign dec_rs1idx = /* logic to extract rs1 index */;\n  assign dec_rs2idx = /* logic to extract rs2 index */;\n  assign dec_rdidx = /* logic to extract rd index */;\n  assign dec_info = /* logic to generate instruction info bus */;\n  assign dec_imm = /* logic to extract immediate value */;\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = /* logic to determine if instruction is illegal */;\n  assign dec_mulhsu = /* logic to determine if instruction is mulhsu */;\n  assign dec_mul = /* logic to determine if instruction is mul */;\n  assign dec_div = /* logic to determine if instruction is div */;\n  assign dec_rem = /* logic to determine if instruction is rem */;\n  assign dec_divu = /* logic to determine if instruction is divu */;\n  assign dec_remu = /* logic to determine if instruction is remu */;\n  assign dec_rv32 = /* logic to determine if instruction is 32-bit */;\n  assign dec_bjp = /* logic to determine if instruction is branch/jump */;\n  assign dec_jal = /* logic to determine if instruction is jal */;\n  assign dec_jalr = /* logic to determine if instruction is jalr */;\n  assign dec_bxx = /* logic to determine if instruction is branch */;\n  assign dec_jalr_rs1idx = /* logic to extract jalr rs1 index */;\n  assign dec_bjp_imm = /* logic to extract branch/jump immediate value */;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if instruction is NICE */;\n  assign nice_cmt_off_ilgl_o = /* logic to determine if NICE instruction is illegal when NICE is off */;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 3, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [1:0] sram_sel;\n  wire ifu_holdup_set, ifu_holdup_clr, ifu_holdup_r;\n  wire [1:0] arbt_scheme;\n  wire [1:0] fifo_outs_num;\n  wire [1:0] fifo_cut_ready;\n  wire [1:0] arbt_num;\n  wire [1:0] allow_0cycl_rsp;\n  wire [1:0] arbt_ptr_w;\n  wire [1:0] o_icb_cmd_valid;\n  wire [1:0] o_icb_cmd_ready;\n  wire [1:0] o_icb_cmd_read;\n  wire [1:0] o_icb_cmd_addr;\n  wire [1:0] o_icb_cmd_wdata;\n  wire [1:0] o_icb_cmd_wmask;\n  wire [1:0] o_icb_cmd_lock;\n  wire [1:0] o_icb_cmd_excl;\n  wire [1:0] o_icb_cmd_size;\n  wire [1:0] o_icb_cmd_burst;\n  wire [1:0] o_icb_cmd_beat;\n  wire [1:0] o_icb_cmd_usr;\n  wire [1:0] o_icb_rsp_valid;\n  wire [1:0] o_icb_rsp_ready;\n  wire [1:0] o_icb_rsp_err;\n  wire [1:0] o_icb_rsp_excl_ok;\n  wire [1:0] o_icb_rsp_rdata;\n  wire [1:0] o_icb_rsp_usr;\n\n  // Instantiate Data Width Conversion Module\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(o_icb_cmd_valid),\n    .o_icb_cmd_ready(o_icb_cmd_ready),\n    .o_icb_cmd_read(o_icb_cmd_read),\n    .o_icb_cmd_addr(o_icb_cmd_addr),\n    .o_icb_cmd_wdata(o_icb_cmd_wdata),\n    .o_icb_cmd_wmask(o_icb_cmd_wmask),\n    .o_icb_cmd_lock(o_icb_cmd_lock),\n    .o_icb_cmd_excl(o_icb_cmd_excl),\n    .o_icb_cmd_size(o_icb_cmd_size),\n    .o_icb_cmd_burst(o_icb_cmd_burst),\n    .o_icb_cmd_beat(o_icb_cmd_beat),\n    .o_icb_cmd_usr(o_icb_cmd_usr),\n    .o_icb_rsp_valid(o_icb_rsp_valid),\n    .o_icb_rsp_ready(o_icb_rsp_ready),\n    .o_icb_rsp_err(o_icb_rsp_err),\n    .o_icb_rsp_excl_ok(o_icb_rsp_excl_ok),\n    .o_icb_rsp_rdata(o_icb_rsp_rdata),\n    .o_icb_rsp_usr(o_icb_rsp_usr),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate Bus Arbiter Module\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(o_icb_cmd_valid),\n    .o_icb_cmd_ready(o_icb_cmd_ready),\n    .o_icb_cmd_read(o_icb_cmd_read),\n    .o_icb_cmd_addr(o_icb_cmd_addr),\n    .o_icb_cmd_wdata(o_icb_cmd_wdata),\n    .o_icb_cmd_wmask(o_icb_cmd_wmask),\n    .o_icb_cmd_burst(o_icb_cmd_burst),\n    .o_icb_cmd_beat(o_icb_cmd_beat),\n    .o_icb_cmd_lock(o_icb_cmd_lock),\n    .o_icb_cmd_excl(o_icb_cmd_excl),\n    .o_icb_cmd_size(o_icb_cmd_size),\n    .o_icb_cmd_usr(o_icb_cmd_usr),\n    .o_icb_rsp_valid(o_icb_rsp_valid),\n    .o_icb_rsp_ready(o_icb_rsp_ready),\n    .o_icb_rsp_err(o_icb_rsp_err),\n    .o_icb_rsp_excl_ok(o_icb_rsp_excl_ok),\n    .o_icb_rsp_rdata(o_icb_rsp_rdata),\n    .o_icb_rsp_usr(o_icb_rsp_usr),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate SRAM Controller Module\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(o_icb_cmd_valid),\n    .i_icb_cmd_ready(o_icb_cmd_ready),\n    .i_icb_cmd_read(o_icb_cmd_read),\n    .i_icb_cmd_addr(o_icb_cmd_addr),\n    .i_icb_cmd_wdata(o_icb_cmd_wdata),\n    .i_icb_cmd_wmask(o_icb_cmd_wmask),\n    .i_icb_cmd_usr(o_icb_cmd_usr),\n    .i_icb_rsp_valid(o_icb_rsp_valid),\n    .i_icb_rsp_ready(o_icb_rsp_ready),\n    .i_icb_rsp_rdata(o_icb_rsp_rdata),\n    .i_icb_rsp_usr(o_icb_rsp_usr),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Holdup Mechanism\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ifu_holdup_r <= 1'b0;\n    end else if (ifu_holdup_clr) begin\n      ifu_holdup_r <= 1'b0;\n    end else if (ifu_holdup_set) begin\n      ifu_holdup_r <= 1'b1;\n    end\n  end\n\n  assign ifu_holdup_set = (sram_sel == 2'b00) && itcm_ram_cs;\n  assign ifu_holdup_clr = (sram_sel != 2'b00) && itcm_ram_cs;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 5, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input wire itcm_nohold,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu2itcm_holdup,\n  input wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Instantiate the e203_ifu_ifetch module\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate the e203_ifu_ift2icb module\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 17, "code": "module e203_dtcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 9, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | ((~ir_empty) & ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1xn_rdrf_r = rs1xn_rdrf_r;\n  wire jalr_rs1xn_rdrf_ena = rs1xn_rdrf_ena;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign bpu_wait = dec_jalr & dec_jalr_rs1x1 & (~oitf_empty)\n                  | dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 6, "code": "module e203_ifu (\n  input  wire                          clk,\n  input  wire                          rst_n,\n  output wire [E203_PC_SIZE-1:0]       inspect_pc,\n  output wire                          ifu_active,\n  input  wire                          itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]       pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0]    ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]       ifu_o_pc,\n  output wire                          ifu_o_pc_vld,\n  output wire                          ifu_o_misalgn,\n  output wire                          ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]   ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]   ifu_o_rs2idx,\n  output wire                          ifu_o_prdt_taken,\n  output wire                          ifu_o_muldiv_b2b,\n  output wire                          ifu_o_valid,\n  input  wire                          ifu_o_ready,\n\n  input  wire                          pipe_flush_req,\n  output wire                          pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]       pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]       pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]       pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire                          ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]     itcm_region_indic,\n  output wire                          ifu2itcm_icb_cmd_valid,\n  input  wire                          ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                          ifu2itcm_icb_rsp_valid,\n  output wire                          ifu2itcm_icb_rsp_ready,\n  input  wire                          ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire                          ifu2biu_icb_cmd_valid,\n  input  wire                          ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]     ifu2biu_icb_cmd_addr,\n  input  wire                          ifu2biu_icb_rsp_valid,\n  output wire                          ifu2biu_icb_rsp_ready,\n  input  wire                          ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire                          ifu_halt_req,\n  output wire                          ifu_halt_ack,\n\n  input  wire                          oitf_empty,\n  input  wire [E203_XLEN-1:0]          rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]          rf2ifu_rs1,\n  input  wire                          dec2ifu_rs1en,\n  input  wire                          dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]   dec2ifu_rdidx,\n  input  wire                          dec2ifu_mulhsu,\n  input  wire                          dec2ifu_div,\n  input  wire                          dec2ifu_rem,\n  input  wire                          dec2ifu_divu,\n  input  wire                          dec2ifu_remu\n);\n\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 12, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  `ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  `endif\n  `ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n  `endif\n  // Submodule instances and internal logic go here\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 9, "code": "module e203_exu_alu_rglr(\n  input  wire                 alu_i_valid,\n  output wire                 alu_i_ready,\n  input  wire [E203_XLEN-1:0] alu_i_rs1,\n  input  wire [E203_XLEN-1:0] alu_i_rs2,\n  input  wire [E203_XLEN-1:0] alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                 alu_o_valid,\n  input  wire                 alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire                 alu_o_wbck_err,\n  output wire                 alu_o_cmt_ecall,\n  output wire                 alu_o_cmt_ebreak,\n  output wire                 alu_o_cmt_wfi,\n  output wire                 alu_req_alu_add,\n  output wire                 alu_req_alu_sub,\n  output wire                 alu_req_alu_xor,\n  output wire                 alu_req_alu_sll,\n  output wire                 alu_req_alu_srl,\n  output wire                 alu_req_alu_sra,\n  output wire                 alu_req_alu_or,\n  output wire                 alu_req_alu_and,\n  output wire                 alu_req_alu_slt,\n  output wire                 alu_req_alu_sltu,\n  output wire                 alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 5, "code": "module e203_exu_alu_muldiv (\n  input  wire               mdv_nob2b,\n  input  wire               muldiv_i_valid,\n  output wire               muldiv_i_ready,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs1,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs2,\n  input  wire [E203_XLEN-1:0] muldiv_i_imm,\n  input  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire               muldiv_i_longpipe,\n  input  wire               flush_pulse,\n  output wire               muldiv_o_valid,\n  input  wire               muldiv_o_ready,\n  output wire [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output wire               muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire               muldiv_req_alu_add,\n  output wire               muldiv_req_alu_sub,\n  input  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire               muldiv_sbf_0_ena,\n  output wire [32:0]        muldiv_sbf_0_nxt,\n  input  wire [32:0]        muldiv_sbf_0_r,\n  output wire               muldiv_sbf_1_ena,\n  output wire [32:0]        muldiv_sbf_1_nxt,\n  input  wire [32:0]        muldiv_sbf_1_r,\n  input  wire               clk,\n  input  wire               rst_n\n);\n\n  // Internal signals and state machine declarations\n  localparam MULDIV_STATE_0TH = 3'b000;\n  localparam MULDIV_STATE_EXEC = 3'b001;\n  localparam MULDIV_STATE_REMD_CHCK = 3'b010;\n  localparam MULDIV_STATE_QUOT_CORR = 3'b011;\n  localparam MULDIV_STATE_REMD_CORR = 3'b100;\n\n  reg [2:0] state;\n  reg [4:0] cycle_cnt;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n      cycle_cnt <= 5'b0;\n    end else begin\n      case (state)\n        MULDIV_STATE_0TH: begin\n          if (muldiv_i_valid && !flush_pulse) begin\n            state <= MULDIV_STATE_EXEC;\n          end\n        end\n        MULDIV_STATE_EXEC: begin\n          if (cycle_cnt == 5'd16) begin\n            state <= MULDIV_STATE_REMD_CHCK;\n          end else begin\n            cycle_cnt <= cycle_cnt + 1;\n          end\n        end\n        MULDIV_STATE_REMD_CHCK: begin\n          if (/* condition for correction */) begin\n            state <= MULDIV_STATE_QUOT_CORR;\n          end else begin\n            state <= MULDIV_STATE_0TH;\n          end\n        end\n        MULDIV_STATE_QUOT_CORR: begin\n          state <= MULDIV_STATE_REMD_CORR;\n        end\n        MULDIV_STATE_REMD_CORR: begin\n          state <= MULDIV_STATE_0TH;\n        end\n        default: state <= MULDIV_STATE_0TH;\n      endcase\n    end\n  end\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_REMD_CORR);\n\n  // Output logic\n  assign muldiv_o_wbck_wdat = /* result computation */;\n  assign muldiv_o_wbck_err = 1'b0;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = /* operand 1 */;\n  assign muldiv_req_alu_op2 = /* operand 2 */;\n  assign muldiv_req_alu_add = /* add operation */;\n  assign muldiv_req_alu_sub = /* subtract operation */;\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = /* enable condition */;\n  assign muldiv_sbf_0_nxt = /* next value */;\n  assign muldiv_sbf_1_ena = /* enable condition */;\n  assign muldiv_sbf_1_nxt = /* next value */;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 20, "code": "`ifdef E203_HAS_CSR_NICE\nmodule e203_extend_csr (\n  input  wire         clk,\n  input  wire         rst_n,\n  input  wire         nice_csr_valid,\n  output wire         nice_csr_ready,\n  input  wire [31:0]  nice_csr_addr,\n  input  wire         nice_csr_wr,\n  input  wire [31:0]  nice_csr_wdata,\n  output wire [31:0]  nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 18, "code": "module e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 6, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic, if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 6, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire longp_excp_flush_req_insterr;\n  wire [E203_XLEN-1:0] mcause;\n  wire [E203_PC_SIZE-1:0] mepc;\n  wire [E203_ADDR_SIZE-1:0] mtval;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n\n  // WFI Handling\n  sirv_gnrl_dfflr #(1) wfi_flag_dfflr (\n    .lden(alu_excp_i_wfi & cmt_ena),\n    .dnxt(1'b1),\n    .qout(wfi_flag),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign wfi_halt_ifu_req = wfi_flag & ~dbg_mode;\n  assign wfi_halt_exu_req = wfi_flag & ~dbg_mode;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n\n  // Exception Handling\n  assign alu_excp_flush_req_ifu_misalgn = alu_excp_i_ifu_misalgn;\n  assign alu_excp_flush_req_ifu_buserr = alu_excp_i_ifu_buserr;\n  assign alu_excp_flush_req_ifu_ilegl = alu_excp_i_ifu_ilegl;\n  assign alu_excp_flush_req_ebreak = alu_excp_i_ebreak;\n  assign alu_excp_flush_req_ld_misalgn = alu_excp_i_misalgn & alu_excp_i_ld;\n  assign longp_excp_flush_req_ld_buserr = longp_excp_i_buserr & longp_excp_i_ld;\n  assign alu_excp_flush_req_stamo_misalgn = alu_excp_i_misalgn & alu_excp_i_stamo;\n  assign longp_excp_flush_req_st_buserr = longp_excp_i_buserr & longp_excp_i_st;\n  assign alu_excp_flush_req_ecall = alu_excp_i_ecall;\n  assign longp_excp_flush_req_insterr = longp_excp_i_insterr;\n\n  assign alu_excp_flush_req = alu_excp_flush_req_ifu_misalgn |\n                              alu_excp_flush_req_ifu_buserr |\n                              alu_excp_flush_req_ifu_ilegl |\n                              alu_excp_flush_req_ebreak |\n                              alu_excp_flush_req_ld_misalgn |\n                              alu_excp_flush_req_stamo_misalgn |\n                              alu_excp_flush_req_ecall;\n\n  assign longp_excp_flush_req = longp_excp_flush_req_ld_buserr |\n                                longp_excp_flush_req_st_buserr |\n                                longp_excp_flush_req_insterr;\n\n  assign dbg_mode_entry_req = ~dbg_mode & (dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r & alu_excp_i_valid);\n\n  assign irq_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_req & alu_excp_i_pc_vld & oitf_empty & (\n                          (sft_irq_r & msie_r) |\n                          (tmr_irq_r & mtie_r) |\n                          (ext_irq_r & meie_r)\n                        );\n\n  assign excpirq_flush_req = longp_excp_flush_req |\n                             dbg_mode_entry_req |\n                             irq_flush_req |\n                             alu_excp_flush_req;\n\n  assign nonalu_excpirq_flush_req_raw = longp_excp_flush_req |\n                                        dbg_mode_entry_req |\n                                        irq_flush_req;\n\n  assign excpirq_flush_add_op1 = dbg_mode_entry_req ? 32'h800 :\n                                 (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 32'h808 :\n                                 csr_mtvec_r;\n\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  assign mcause = irq_flush_req ? {1'b1, 3'b0, (sft_irq_r & msie_r) ? 4'd3 :\n                                   (tmr_irq_r & mtie_r) ? 4'd7 :\n                                   (ext_irq_r & meie_r) ? 4'd11 : 4'd0} :\n                  alu_excp_flush_req_ifu_misalgn ? 32'd0 :\n                  alu_excp_flush_req_ifu_buserr ? 32'd1 :\n                  alu_excp_flush_req_ifu_ilegl ? 32'd2 :\n                  alu_excp_flush_req_ebreak ? 32'd3 :\n                  alu_excp_flush_req_ld_misalgn ? 32'd4 :\n                  longp_excp_flush_req_ld_buserr ? 32'd5 :\n                  alu_excp_flush_req_stamo_misalgn ? 32'd6 :\n                  longp_excp_flush_req_st_buserr ? 32'd7 :\n                  alu_excp_flush_req_ecall & u_mode ? 32'd8 :\n                  alu_excp_flush_req_ecall & s_mode ? 32'd9 :\n                  alu_excp_flush_req_ecall & h_mode ? 32'd10 :\n                  alu_excp_flush_req_ecall & m_mode ? 32'd11 :\n                  longp_excp_flush_req_insterr ? 32'd16 : 32'd0;\n\n  assign mepc = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n\n  assign mtval = longp_excp_flush_req_ld_buserr | longp_excp_flush_req_st_buserr ? longp_excp_i_badaddr :\n                 alu_excp_flush_req_ebreak | alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr ? alu_excp_i_pc :\n                 alu_excp_flush_req_ifu_ilegl ? alu_excp_i_instr : 32'h0;\n\n  assign cmt_badaddr = mtval;\n  assign cmt_epc = mepc;\n  assign cmt_cause = mcause;\n  assign cmt_badaddr_ena = excpirq_flush_req;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n  assign cmt_dpc = mepc;\n  assign cmt_dpc_ena = dbg_mode_entry_req;\n  assign cmt_dcause = mcause[2:0];\n  assign cmt_dcause_ena = dbg_mode_entry_req;\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 6, "code": "module e203_exu_alu_muldiv (\n  input  wire                 mdv_nob2b,\n  input  wire                 muldiv_i_valid,\n  output wire                 muldiv_i_ready,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs1,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs2,\n  input  wire [E203_XLEN-1:0] muldiv_i_imm,\n  input  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire                 muldiv_i_longpipe,\n  input  wire                 flush_pulse,\n  output wire                 muldiv_o_valid,\n  input  wire                 muldiv_o_ready,\n  output wire [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output wire                 muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire                 muldiv_req_alu_add,\n  output wire                 muldiv_req_alu_sub,\n  input  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire                 muldiv_sbf_0_ena,\n  output wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire [32:0]          muldiv_sbf_0_r,\n  output wire                 muldiv_sbf_1_ena,\n  output wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire [32:0]          muldiv_sbf_1_r,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [31:0] cycle_counter;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] remainder;\n  reg [E203_XLEN-1:0] quotient;\n  reg [E203_XLEN-1:0] dividend;\n  reg [E203_XLEN-1:0] divisor;\n  reg [E203_XLEN-1:0] multiplicand;\n  reg [E203_XLEN-1:0] multiplier;\n\n  // State Machine Definitions\n  localparam MULDIV_STATE_0TH       = 5'd0;\n  localparam MULDIV_STATE_EXEC      = 5'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 5'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 5'd3;\n  localparam MULDIV_STATE_REMD_CORR = 5'd4;\n\n  // State Machine Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (cycle_counter == 32) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end else begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Cycle Counter Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      cycle_counter <= 0;\n    end else if (state == MULDIV_STATE_EXEC) begin\n      cycle_counter <= cycle_counter + 1;\n    end else begin\n      cycle_counter <= 0;\n    end\n  end\n\n  // Output Logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_REMD_CORR);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n\n  // ALU Request Logic\n  assign muldiv_req_alu_op1 = (state == MULDIV_STATE_EXEC) ? multiplicand : 0;\n  assign muldiv_req_alu_op2 = (state == MULDIV_STATE_EXEC) ? multiplier : 0;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = 0;\n\n  // Shared Buffer Logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = {1'b0, result};\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = {1'b0, remainder};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 6, "code": "module e203_exu_disp (\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Operand forwarding and masking logic\n  wire [E203_XLEN-1:0] disp_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  wire [E203_XLEN-1:0] disp_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n\n  // Dependency checking logic\n  wire raw_dep = (oitfrd_match_disprs1 & disp_i_rs1en) |\n                 (oitfrd_match_disprs2 & disp_i_rs2en);\n  wire waw_dep = oitfrd_match_disprd & disp_i_rdwen;\n\n  // Dispatch condition logic\n  wire disp_condition = ~raw_dep & ~waw_dep & disp_i_valid & \n                        (disp_o_alu_ready | ~disp_o_alu_longpipe) &\n                        (oitf_empty | ~disp_i_info[E203_DECINFO_GRP_CSR]);\n\n  // ALU dispatch logic\n  assign disp_o_alu_valid = disp_condition;\n  assign disp_o_alu_rs1 = disp_rs1;\n  assign disp_o_alu_rs2 = disp_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF dispatch logic\n  assign disp_oitf_ena = disp_condition & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling logic\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\n  // Ready signal logic\n  assign disp_i_ready = disp_condition;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 4, "code": "module e203_itcm_ram(\n  input  sd,\n  input  ds,\n  input  ls,\n  input  cs,\n  input  we,\n  input  [E203_ITCM_RAM_AW-1:0] addr,\n  input  [E203_ITCM_RAM_MW-1:0] wem,\n  input  [E203_ITCM_RAM_DW-1:0] din,\n  input  rst_n,\n  input  clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd   (sd),\n    .ds   (ds),\n    .ls   (ls),\n    .rst_n(rst_n),\n    .clk  (clk),\n    .cs   (cs),\n    .we   (we),\n    .addr (addr),\n    .din  (din),\n    .wem  (wem),\n    .dout (dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 5, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off\n  ,output dec_nice\n  ,output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n`ifdef E203_HAS_NICE\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n`endif\n\n  // Decode logic\n  // ... (Implement the decoding logic here based on the instruction format and types)\n\n  assign dec_rs1x0 = (dec_rs1idx == 5'b00000);\n  assign dec_rs2x0 = (dec_rs2idx == 5'b00000);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd is written */;\n  assign dec_info = /* logic to generate the instruction info bus */;\n  assign dec_imm = /* logic to extract the immediate value */;\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = /* logic to determine if the instruction is illegal */;\n  assign dec_mulhsu = /* logic to determine if the instruction is mulhsu */;\n  assign dec_mul = /* logic to determine if the instruction is mul */;\n  assign dec_div = /* logic to determine if the instruction is div */;\n  assign dec_rem = /* logic to determine if the instruction is rem */;\n  assign dec_divu = /* logic to determine if the instruction is divu */;\n  assign dec_remu = /* logic to determine if the instruction is remu */;\n  assign dec_rv32 = /* logic to determine if the instruction is 32-bit */;\n  assign dec_bjp = /* logic to determine if the instruction is a branch/jump */;\n  assign dec_jal = /* logic to determine if the instruction is jal */;\n  assign dec_jalr = /* logic to determine if the instruction is jalr */;\n  assign dec_bxx = /* logic to determine if the instruction is a branch */;\n  assign dec_jalr_rs1idx = /* logic to extract rs1 index for jalr */;\n  assign dec_bjp_imm = /* logic to extract immediate for branch/jump */;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if the instruction is a NICE instruction */;\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 7, "code": "module e203_exu_regfile (\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output wire [E203_XLEN-1:0] read_src1_dat,\n  output wire [E203_XLEN-1:0] read_src2_dat,\n  input  wire wbck_dest_wen,\n  input  wire [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  wire [E203_XLEN-1:0] wbck_dest_dat,\n  output wire [E203_XLEN-1:0] x1_r,\n  input  wire test_mode,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 3, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n\n  input  clk,\n  input  rst_n\n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = lsu_wbck_i_ready\n`ifdef E203_HAS_NICE\n                      & nice_longp_wbck_i_ready\n`endif\n                      ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                     : nice_longp_wbck_i_wdat\n`endif\n                     ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                     : nice_longp_wbck_i_itag\n`endif\n                     ;\n\n  assign wbck_i_err = lsu_wbck_i_valid ? lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    : nice_longp_wbck_i_err\n`endif\n                    ;\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign lsu_wbck_i_ready = wbck_i_ready & (oitf_ret_ptr == lsu_wbck_i_itag) & ~oitf_empty;\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & (oitf_ret_ptr == nice_longp_wbck_i_itag) & ~oitf_empty;\n`endif\n\n  assign longp_wbck_o_valid = wbck_need & wbck_i_valid & (~excp_need | longp_excp_o_ready);\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = excp_need & wbck_i_valid & (~wbck_need | longp_wbck_o_ready);\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 4, "code": "module itcm_ctrl (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  input  wire                     test_mode,\n  output wire                     itcm_active,\n  input  wire                     tcm_cgstop,\n\n  // IFU Interface\n  input  wire                     ifu2itcm_icb_cmd_valid,\n  output wire                     ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0]    ifu2itcm_icb_cmd_addr,\n  input  wire                     ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0]    ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0]    ifu2itcm_icb_cmd_wmask,\n  output wire                     ifu2itcm_icb_rsp_valid,\n  input  wire                     ifu2itcm_icb_rsp_ready,\n  output wire                     ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0]    ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input  wire                     lsu2itcm_icb_cmd_valid,\n  output wire                     lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0]    lsu2itcm_icb_cmd_addr,\n  input  wire                     lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0]    lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0]    lsu2itcm_icb_cmd_wmask,\n  output wire                     lsu2itcm_icb_rsp_valid,\n  input  wire                     lsu2itcm_icb_rsp_ready,\n  output wire                     lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0]    lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (optional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input  wire                     ext2itcm_icb_cmd_valid,\n  output wire                     ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0]    ext2itcm_icb_cmd_addr,\n  input  wire                     ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0]    ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0]    ext2itcm_icb_cmd_wmask,\n  output wire                     ext2itcm_icb_rsp_valid,\n  input  wire                     ext2itcm_icb_rsp_ready,\n  output wire                     ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0]    ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire                     itcm_ram_cs,\n  output wire                     itcm_ram_we,\n  output wire [RAM_AW-1:0]        itcm_ram_addr,\n  output wire [RAM_MW-1:0]        itcm_ram_wem,\n  output wire [RAM_DW-1:0]        itcm_ram_din,\n  input  wire [RAM_DW-1:0]        itcm_ram_dout,\n  output wire                     clk_itcm_ram\n);\n\n  // Internal signals\n  wire [ADDR_WIDTH-1:0]           arb_cmd_addr;\n  wire                            arb_cmd_read;\n  wire [DATA_WIDTH-1:0]           arb_cmd_wdata;\n  wire [WMSK_WIDTH-1:0]           arb_cmd_wmask;\n  wire                            arb_cmd_valid;\n  wire                            arb_cmd_ready;\n  wire                            arb_rsp_valid;\n  wire                            arb_rsp_ready;\n  wire                            arb_rsp_err;\n  wire [DATA_WIDTH-1:0]           arb_rsp_rdata;\n\n  // Instantiate the arbitration module\n  sirv_gnrl_icb_arbt #(\n    .AW(ADDR_WIDTH),\n    .DW(DATA_WIDTH),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(3),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ifu2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_ready `endif}),\n    .i_bus_icb_cmd_valid({ifu2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid `endif}),\n    .i_bus_icb_cmd_read({ifu2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_read `endif}),\n    .i_bus_icb_cmd_addr({ifu2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_addr `endif}),\n    .i_bus_icb_cmd_wdata({ifu2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_wdata `endif}),\n    .i_bus_icb_cmd_wmask({ifu2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_wmask `endif}),\n    .i_bus_icb_rsp_valid({ifu2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_valid `endif}),\n    .i_bus_icb_rsp_ready({ifu2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_ready `endif}),\n    .i_bus_icb_rsp_err({ifu2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_err `endif}),\n    .i_bus_icb_rsp_rdata({ifu2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_rdata `endif}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(DATA_WIDTH),\n    .MW(WMSK_WIDTH),\n    .AW(ADDR_WIDTH),\n    .AW_LSB(3),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 13, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 16, "code": "module e203_reset_ctrl #(\n  parameter MASTER = 1,\n  parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  output wire rst_core,\n`ifdef E203_HAS_ITCM\n  output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n  output wire rst_dtcm,\n`endif\n  output wire rst_aon\n);\n\n  wire rst_sync_n;\n  generate\n    if (MASTER) begin: gen_master_reset\n      reg [RST_SYNC_LEVEL-1:0] rst_sync_r;\n      always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n          rst_sync_r <= {RST_SYNC_LEVEL{1'b0}};\n        end else begin\n          rst_sync_r <= {rst_sync_r[RST_SYNC_LEVEL-2:0], 1'b1};\n        end\n      end\n      assign rst_sync_n = rst_sync_r[RST_SYNC_LEVEL-1];\n    end else begin: gen_slave_reset\n      assign rst_sync_n = rst_n;\n    end\n  endgenerate\n\n  wire rst_final_n = test_mode ? rst_n : rst_sync_n;\n\n  assign rst_core = ~rst_final_n;\n`ifdef E203_HAS_ITCM\n  assign rst_itcm = ~rst_final_n;\n`endif\n`ifdef E203_HAS_DTCM\n  assign rst_dtcm = ~rst_final_n;\n`endif\n  assign rst_aon = ~rst_final_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 11, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n// Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 19, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata\n\n`ifdef E203_HAS_DTCM_EXTITF\n  ,\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata\n`endif\n\n  ,\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signal declarations\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_dtcm_sram_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 6, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 12, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 7, "code": "module e203_ifu(\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input  wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire ifu2biu_icb_cmd_valid,\n  input  wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n`ifdef E203_HAS_ITCM\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n`endif\n`ifdef E203_HAS_MEM_ITF\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n`endif\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n`ifdef E203_HAS_ITCM\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n`endif\n`ifdef E203_HAS_MEM_ITF\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n`endif\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 8, "code": "module e203_ifu (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  output wire [E203_PC_SIZE-1:0]      inspect_pc,\n  output wire                         ifu_active,\n  input  wire                         itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]      pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0]   ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]      ifu_o_pc,\n  output wire                         ifu_o_pc_vld,\n  output wire                         ifu_o_misalgn,\n  output wire                         ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs2idx,\n  output wire                         ifu_o_prdt_taken,\n  output wire                         ifu_o_muldiv_b2b,\n  output wire                         ifu_o_valid,\n  input  wire                         ifu_o_ready,\n\n  input  wire                         pipe_flush_req,\n  output wire                         pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op2,\n\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire                         ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]    itcm_region_indic,\n  output wire                         ifu2itcm_icb_cmd_valid,\n  input  wire                         ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                         ifu2itcm_icb_rsp_valid,\n  output wire                         ifu2itcm_icb_rsp_ready,\n  input  wire                         ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire                         ifu2biu_icb_cmd_valid,\n  input  wire                         ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]    ifu2biu_icb_cmd_addr,\n  input  wire                         ifu2biu_icb_rsp_valid,\n  output wire                         ifu2biu_icb_rsp_ready,\n  input  wire                         ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire                         ifu_halt_req,\n  output wire                         ifu_halt_ack,\n\n  input  wire                         oitf_empty,\n  input  wire [E203_XLEN-1:0]         rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]         rf2ifu_rs1,\n  input  wire                         dec2ifu_rs1en,\n  input  wire                         dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]  dec2ifu_rdidx,\n  input  wire                         dec2ifu_mulhsu,\n  input  wire                         dec2ifu_div,\n  input  wire                         dec2ifu_rem,\n  input  wire                         dec2ifu_divu,\n  input  wire                         dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 8, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // In lockstep mode, no operations are performed\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          // Synchronizers for each interrupt type\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // Direct pass-through if synchronization is not needed\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      // In slave mode, signals are directly passed through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 19, "code": "`ifdef E203_HAS_DTCM\n\nmodule e203_dtcm_ram(\n  input  sd,\n  input  ds,\n  input  ls,\n  input  cs,\n  input  we,\n  input  [E203_DTCM_RAM_AW-1:0] addr,\n  input  [E203_DTCM_RAM_MW-1:0] wem,\n  input  [E203_DTCM_RAM_DW-1:0] din,\n  output [E203_DTCM_RAM_DW-1:0] dout,\n  input  rst_n,\n  input  clk\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(1),\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW) \n  ) u_203_dtcm_gnrl_ram (\n    .sd  (sd  ),\n    .ds  (ds  ),\n    .ls  (ls  ),\n    .rst_n (rst_n),\n    .clk (clk),\n    .cs  (cs  ),\n    .we  (we  ),\n    .addr(addr),\n    .din (din ),\n    .wem (wem ),\n    .dout(dout)\n  );\n\nendmodule\n\n`endif", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 17, "code": "`include \"e203_defines.v\"\n\nmodule e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n = test_mode ? rst_n : 1'b1;\n    wire sync_rst_n;\n\n    generate\n        if (MASTER) begin : gen_master_reset\n            reg [RST_SYNC_LEVEL-1:0] rst_sync;\n            always @(posedge clk or negedge async_rst_n) begin\n                if (!async_rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n            end\n            assign sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin : gen_slave_reset\n            assign sync_rst_n = async_rst_n;\n        end\n    endgenerate\n\n    assign rst_core = ~sync_rst_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = ~sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~sync_rst_n;\n`endif\n    assign rst_aon = ~sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 14, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  // Additional ports for submodules\n  // ...\n);\n\n// Submodule instantiations and internal logic\n// ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 15, "code": "module e203_srams (\n  input  wire itcm_ram_sd,\n  input  wire itcm_ram_ds,\n  input  wire itcm_ram_ls,\n  input  wire itcm_ram_cs,\n  input  wire itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire clk_itcm_ram,\n  input  wire rst_itcm,\n\n  input  wire dtcm_ram_sd,\n  input  wire dtcm_ram_ds,\n  input  wire dtcm_ram_ls,\n  input  wire dtcm_ram_cs,\n  input  wire dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire clk_dtcm_ram,\n  input  wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(~rst_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(~rst_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 8, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  wire [E203_XLEN-1:0] rf_r [E203_RFREG_NUM-1:0];\n\n  generate\n    if (E203_REGFILE_LATCH_BASED) begin: regfile_latch_based\n      for (genvar i = 0; i < E203_RFREG_NUM; i = i + 1) begin: regfile_latch\n        sirv_gnrl_ltch #(.DW(E203_XLEN)) u_sirv_gnrl_ltch (\n          .lden(wbck_dest_wen & (wbck_dest_idx == i)),\n          .dnxt(wbck_dest_dat),\n          .qout(rf_r[i])\n        );\n      end\n    end else begin: regfile_dff_based\n      for (genvar i = 0; i < E203_RFREG_NUM; i = i + 1) begin: regfile_dff\n        sirv_gnrl_dffl #(.DW(E203_XLEN)) u_sirv_gnrl_dffl (\n          .lden(wbck_dest_wen & (wbck_dest_idx == i)),\n          .dnxt(wbck_dest_dat),\n          .qout(rf_r[i]),\n          .clk(clk)\n        );\n      end\n    end\n  endgenerate\n\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : rf_r[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : rf_r[read_src2_idx];\n  assign x1_r = rf_r[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 6, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_valid,\n  input wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Define internal signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(.DW(1)) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(.DW(1)) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(.DW(1)) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(.DW(1)) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire ir_pc_vld_set;\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1 = \n    `ifndef E203_TIMING_BOOST\n    pipe_flush_req ? pipe_flush_add_op1 :\n    dly_pipe_flush_req ? pc_r :\n    `endif\n    ifetch_replay_req ? pc_r :\n    bjp_req ? prdt_pc_add_op1 :\n    ifu_reset_req ? pc_rtvec :\n    pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op2 = \n    `ifndef E203_TIMING_BOOST\n    pipe_flush_req ? pipe_flush_add_op2 :\n    dly_pipe_flush_req ? 0 :\n    `endif\n    ifetch_replay_req ? 0 :\n    bjp_req ? prdt_pc_add_op2 :\n    ifu_reset_req ? 0 :\n    pc_incr_ofst;\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt = \n    `ifndef E203_TIMING_BOOST\n    {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n    `else\n    pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1],1'b0} :\n    dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1],1'b0} :\n    {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n    `endif\n\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(.DW(1)) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire rf2bpu_x1;\n  wire rf2bpu_rs1;\n\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(.DW(1)) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 10, "code": "module e203_exu_alu_dpath (\n  input  alu_req_alu,\n  input  alu_req_alu_add,\n  input  alu_req_alu_sub,\n  input  alu_req_alu_xor,\n  input  alu_req_alu_sll,\n  input  alu_req_alu_srl,\n  input  alu_req_alu_sra,\n  input  alu_req_alu_or,\n  input  alu_req_alu_and,\n  input  [E203_XLEN-1:0] alu_req_alu_op1,\n  input  [E203_XLEN-1:0] alu_req_alu_op2,\n  input  bjp_req_alu,\n  input  [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  agu_req_alu,\n  input  [E203_XLEN-1:0] agu_req_alu_op1,\n  input  [E203_XLEN-1:0] agu_req_alu_op2,\n  input  muldiv_req_alu,\n  input  [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  muldiv_req_alu_add,\n  input  muldiv_req_alu_sub,\n  input  muldiv_sbf_0_ena,\n  input  [32:0] muldiv_sbf_0_nxt,\n  input  muldiv_sbf_1_ena,\n  input  [32:0] muldiv_sbf_1_nxt,\n  input  clk,\n  input  rst_n,\n  output [E203_XLEN-1:0] alu_req_alu_res,\n  output [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output bjp_req_alu_cmp_res,\n  output [E203_XLEN-1:0] agu_req_alu_res,\n  output [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output [32:0] muldiv_sbf_0_r,\n  output [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 :\n                                 bjp_req_alu ? bjp_req_alu_op1 :\n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 {E203_XLEN{1'b0}};\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 :\n                                 bjp_req_alu ? bjp_req_alu_op2 :\n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_add_res = alu_op1 + alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_op1 - alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_op1 ^ alu_op2;\n  wire [E203_XLEN-1:0] alu_or_res  = alu_op1 | alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_op1 & alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_op1 << alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_op1 >> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_op1) >>> alu_op2[4:0];\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_and_res) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res);\n\n  assign bjp_req_alu_add_res = alu_add_res;\n  assign bjp_req_alu_cmp_res = (alu_op1 == alu_op2);\n\n  assign agu_req_alu_res = alu_add_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = muldiv_req_alu_add ? muldiv_add_res :\n                              muldiv_req_alu_sub ? muldiv_sub_res :\n                              {E203_ALU_ADDER_WIDTH{1'b0}};\n\n  // Shared Buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 6, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused signals are not connected\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 13, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // Flush block logic\n  wire flush_block = flush_req & icb_sta_is_idle;\n\n  // AGU operations\n  assign agu_req_alu_op1 = agu_i_rs1;\n  assign agu_req_alu_op2 = agu_i_imm;\n  assign agu_req_alu_add = agu_i_info[E203_DECINFO_AGU_AMOADD];\n  assign agu_req_alu_and = agu_i_info[E203_DECINFO_AGU_AMOAND];\n  assign agu_req_alu_or = agu_i_info[E203_DECINFO_AGU_AMOOR];\n  assign agu_req_alu_xor = agu_i_info[E203_DECINFO_AGU_AMOXOR];\n  assign agu_req_alu_max = agu_i_info[E203_DECINFO_AGU_AMOMAX];\n  assign agu_req_alu_min = agu_i_info[E203_DECINFO_AGU_AMOMIN];\n  assign agu_req_alu_maxu = agu_i_info[E203_DECINFO_AGU_AMOMAXU];\n  assign agu_req_alu_minu = agu_i_info[E203_DECINFO_AGU_AMOMINU];\n\n  // Shared buffer logic\n  assign agu_sbf_0_ena = icb_sta_is_amoalu;\n  assign agu_sbf_0_nxt = agu_req_alu_res;\n  assign agu_sbf_1_ena = icb_sta_is_amordy;\n  assign agu_sbf_1_nxt = agu_req_alu_res;\n\n  // ICB command interface\n  assign agu_icb_cmd_valid = agu_i_valid & icb_sta_is_idle;\n  assign agu_icb_cmd_addr = agu_req_alu_res;\n  assign agu_icb_cmd_read = agu_i_info[E203_DECINFO_AGU_LOAD];\n  assign agu_icb_cmd_wdata = agu_i_rs2;\n  assign agu_icb_cmd_wmask = {E203_XLEN/8{1'b1}};\n  assign agu_icb_cmd_back2agu = 1'b1;\n  assign agu_icb_cmd_lock = 1'b0;\n  assign agu_icb_cmd_excl = agu_i_info[E203_DECINFO_AGU_EXCL];\n  assign agu_icb_cmd_size = agu_i_info[E203_DECINFO_AGU_SIZE];\n  assign agu_icb_cmd_itag = agu_i_itag;\n  assign agu_icb_cmd_usign = agu_i_info[E203_DECINFO_AGU_USIGN];\n\n  // ICB response interface\n  assign agu_icb_rsp_ready = icb_sta_is_1st | icb_sta_is_2nd;\n\n  // Write-back interface\n  assign agu_o_valid = icb_sta_is_wbck;\n  assign agu_o_wbck_wdat = agu_icb_rsp_rdata;\n  assign agu_o_wbck_err = agu_icb_rsp_err;\n  assign agu_o_cmt_misalgn = 1'b0; // Placeholder for misalignment logic\n  assign agu_o_cmt_ld = agu_i_info[E203_DECINFO_AGU_LOAD];\n  assign agu_o_cmt_stamo = agu_i_info[E203_DECINFO_AGU_STORE] | agu_i_info[E203_DECINFO_AGU_AMO];\n  assign agu_o_cmt_buserr = agu_icb_rsp_err;\n  assign agu_o_cmt_badaddr = agu_icb_cmd_addr;\n\n  // AMO wait logic\n  assign amo_wait = icb_sta_is_amoalu | icb_sta_is_amordy;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) icb_state <= 4'd1;\n      else if (state_1st_exit_ena) icb_state <= 4'd4;\n      else if (state_amoalu_exit_ena) icb_state <= 4'd5;\n      else if (state_amordy_exit_ena) icb_state <= 4'd2;\n      else if (state_wait2nd_exit_ena) icb_state <= 4'd3;\n      else if (state_2nd_exit_ena) icb_state <= 4'd6;\n      else if (state_wbck_exit_ena) icb_state <= 4'd0;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 3, "code": "module e203_lsu (\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [XLEN-1:0] nice_icb_cmd_wdata,\n  input  [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [XLEN-1:0] biu_icb_cmd_wdata,\n  output [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Implementation of the LSU logic goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 7, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc;\n  wire i_prdt_taken;\n  wire i_muldiv_b2b;\n  wire i_misalgn;\n  wire i_buserr;\n  wire dbg_mode;\n\n  assign i_instr = instr;\n  assign i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  assign i_prdt_taken = 1'b0;\n  assign i_muldiv_b2b = 1'b0;\n  assign i_misalgn = 1'b0;\n  assign i_buserr = 1'b0;\n  assign dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 15, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 6, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] rdidx;\n  wire [E203_DECINFO_WIDTH-1:0] info_bus;\n  wire [E203_XLEN-1:0] imm;\n  wire [E203_PC_SIZE-1:0] pc;\n  wire misalgn;\n  wire buserr;\n  wire ilegl;\n  wire mulhsu;\n  wire mul;\n  wire div;\n  wire rem;\n  wire divu;\n  wire remu;\n  wire rv32;\n  wire bjp;\n  wire jal;\n  wire jalr;\n  wire bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Decode logic\n  // ...\n\n  assign dec_rs1x0 = (rs1idx == 0);\n  assign dec_rs2x0 = (rs2idx == 0);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd is written */;\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_rdidx = rdidx;\n  assign dec_info = info_bus;\n  assign dec_imm = imm;\n  assign dec_pc = pc;\n  assign dec_misalgn = misalgn;\n  assign dec_buserr = buserr;\n  assign dec_ilegl = ilegl;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if instruction is NICE */;\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 7, "code": "module e203_exu_decode(\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  `ifdef E203_HAS_NICE\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n  `endif\n\n  // Decode logic for instruction fields\n  // Example for R-type instruction decoding\n  wire [6:0] opcode = i_instr[6:0];\n  wire [2:0] funct3 = i_instr[14:12];\n  wire [6:0] funct7 = i_instr[31:25];\n  wire [4:0] rs1 = i_instr[19:15];\n  wire [4:0] rs2 = i_instr[24:20];\n  wire [4:0] rd = i_instr[11:7];\n\n  // Decode R-type instructions\n  assign dec_rs1x0 = (rs1 == 5'b00000);\n  assign dec_rs2x0 = (rs2 == 5'b00000);\n  assign dec_rs1en = (opcode == 7'b0110011); // Example for R-type\n  assign dec_rs2en = (opcode == 7'b0110011); // Example for R-type\n  assign dec_rdwen = (opcode == 7'b0110011); // Example for R-type\n  assign dec_rs1idx = rs1;\n  assign dec_rs2idx = rs2;\n  assign dec_rdidx = rd;\n\n  // Example for ALU operation decoding\n  assign alu_info_bus[E203_DECINFO_ALU_ADD] = (opcode == 7'b0110011) && (funct3 == 3'b000) && (funct7 == 7'b0000000);\n  assign alu_info_bus[E203_DECINFO_ALU_SUB] = (opcode == 7'b0110011) && (funct3 == 3'b000) && (funct7 == 7'b0100000);\n\n  // Assign decoded information to output\n  assign dec_info = alu_info_bus | agu_info_bus | bjp_info_bus | csr_info_bus | muldiv_info_bus;\n  `ifdef E203_HAS_NICE\n  assign dec_info = dec_info | nice_info_bus;\n  `endif\n\n  // Immediate value extraction\n  assign dec_imm = { {20{i_instr[31]}}, i_instr[31:20] }; // Example for I-type immediate\n\n  // PC value assignment\n  assign dec_pc = i_pc;\n\n  // Misalignment and bus error propagation\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n\n  // Illegal instruction detection\n  assign dec_ilegl = (opcode == 7'b0000000) || (opcode == 7'b1111111); // Example for illegal opcode\n\n  // Multiply/Divide instruction decoding\n  assign dec_mulhsu = (opcode == 7'b0110011) && (funct3 == 3'b010) && (funct7 == 7'b0000001);\n  assign dec_mul = (opcode == 7'b0110011) && (funct3 == 3'b000) && (funct7 == 7'b0000001);\n  assign dec_div = (opcode == 7'b0110011) && (funct3 == 3'b100) && (funct7 == 7'b0000001);\n  assign dec_rem = (opcode == 7'b0110011) && (funct3 == 3'b110) && (funct7 == 7'b0000001);\n  assign dec_divu = (opcode == 7'b0110011) && (funct3 == 3'b101) && (funct7 == 7'b0000001);\n  assign dec_remu = (opcode == 7'b0110011) && (funct3 == 3'b111) && (funct7 == 7'b0000001);\n\n  // Instruction type detection\n  assign dec_rv32 = (opcode[1:0] != 2'b11); // Example for 32-bit instruction\n  assign dec_bjp = (opcode == 7'b1101111) || (opcode == 7'b1100111) || (opcode == 7'b1100011);\n  assign dec_jal = (opcode == 7'b1101111);\n  assign dec_jalr = (opcode == 7'b1100111);\n  assign dec_bxx = (opcode == 7'b1100011);\n\n  // JALR specific decoding\n  assign dec_jalr_rs1idx = rs1;\n\n  // Branch and jump immediate extraction\n  assign dec_bjp_imm = { {12{i_instr[31]}}, i_instr[19:12], i_instr[20], i_instr[30:21], 1'b0 };\n\n  `ifdef E203_HAS_NICE\n  // NICE instruction decoding\n  assign dec_nice = (opcode == 7'b0001011); // Example for NICE opcode\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 7, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_ready = longp_wbck_i_valid ? longp_wbck_i_ready : alu_wbck_i_ready;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 9, "code": "`include \"e203_defines.v\"\n\nmodule e203_exu_regfile(\n  input  [`E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [`E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [`E203_XLEN-1:0] read_src1_dat,\n  output [`E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [`E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [`E203_XLEN-1:0] wbck_dest_dat,\n  output [`E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  wire [`E203_XLEN-1:0] rf_r [`E203_RFREG_NUM-1:0];\n  wire [`E203_RFREG_NUM-1:0] rf_wen;\n  wire [`E203_RFIDX_WIDTH-1:0] rf_waddr;\n  wire [`E203_XLEN-1:0] rf_wdata;\n\n  assign rf_wen = wbck_dest_wen & (|wbck_dest_idx);\n  assign rf_waddr = wbck_dest_idx;\n  assign rf_wdata = wbck_dest_dat;\n\n  genvar i;\n  generate\n    for (i = 0; i < `E203_RFREG_NUM; i = i + 1) begin: regfile\n      if (i == 0) begin: reg0\n        assign rf_r[i] = `E203_XLEN'b0;\n      end else begin: regn\n        if (`E203_REGFILE_LATCH_BASED) begin: latch_based\n          sirv_gnrl_ltch #(`E203_XLEN) reg_latch (\n            .lden(rf_wen & (rf_waddr == i)),\n            .dnxt(rf_wdata),\n            .qout(rf_r[i])\n          );\n        end else begin: dff_based\n          sirv_gnrl_dffl #(`E203_XLEN) reg_dff (\n            .lden(rf_wen & (rf_waddr == i)),\n            .dnxt(rf_wdata),\n            .qout(rf_r[i]),\n            .clk(clk)\n          );\n        end\n      end\n    end\n  endgenerate\n\n  assign read_src1_dat = rf_r[read_src1_idx];\n  assign read_src2_dat = rf_r[read_src2_idx];\n  assign x1_r = rf_r[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 8, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 12, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                    cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  wire [E203_PC_SIZE-1:0] next_pc = cmt_i_pc + (cmt_i_rv32 ? 4 : 2);\n  wire [E203_PC_SIZE-1:0] bjp_target = cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0];\n\n  assign brchmis_flush_add_op1 = (cmt_i_dret ? csr_dpc_r : \n                                  cmt_i_mret ? csr_epc_r : \n                                  cmt_i_bjp & cmt_i_bjp_prdt ? next_pc : \n                                  cmt_i_bjp & ~cmt_i_bjp_prdt ? cmt_i_pc : \n                                  csr_epc_r);\n\n  assign brchmis_flush_add_op2 = (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm[E203_PC_SIZE-1:0] : 0;\n\n  `ifdef E203_TIMING_BOOST\n  assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? next_pc :\n                            (cmt_i_bjp & ~cmt_i_bjp_prdt) ? bjp_target :\n                            cmt_i_dret ? csr_dpc_r :\n                            csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 7, "code": "module e203_exu_disp (\n  input  wire                     wfi_halt_exu_req,\n  output wire                     wfi_halt_exu_ack,\n  input  wire                     oitf_empty,\n  input  wire                     amo_wait,\n  input  wire                     disp_i_valid,\n  output wire                     disp_i_ready,\n  input  wire                     disp_i_rs1x0,\n  input  wire                     disp_i_rs2x0,\n  input  wire                     disp_i_rs1en,\n  input  wire                     disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]     disp_i_rs1,\n  input  wire [E203_XLEN-1:0]     disp_i_rs2,\n  input  wire                     disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]     disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0]  disp_i_pc,\n  input  wire                     disp_i_misalgn,\n  input  wire                     disp_i_buserr,\n  input  wire                     disp_i_ilegl,\n  output wire                     disp_o_alu_valid,\n  input  wire                     disp_o_alu_ready,\n  input  wire                     disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs2,\n  output wire                     disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]     disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0]  disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                     disp_o_alu_misalgn,\n  output wire                     disp_o_alu_buserr,\n  output wire                     disp_o_alu_ilegl,\n  input  wire                     oitfrd_match_disprs1,\n  input  wire                     oitfrd_match_disprs2,\n  input  wire                     oitfrd_match_disprs3,\n  input  wire                     oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                     disp_oitf_ena,\n  input  wire                     disp_oitf_ready,\n  output wire                     disp_oitf_rs1fpu,\n  output wire                     disp_oitf_rs2fpu,\n  output wire                     disp_oitf_rs3fpu,\n  output wire                     disp_oitf_rdfpu,\n  output wire                     disp_oitf_rs1en,\n  output wire                     disp_oitf_rs2en,\n  output wire                     disp_oitf_rs3en,\n  output wire                     disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0]  disp_oitf_pc,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals for dispatch logic\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire csr_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  wire fence_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  wire wfi_halt_ack = oitf_empty & ~amo_wait;\n\n  // Dispatch ready condition\n  assign disp_i_ready = disp_o_alu_ready & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & ~wfi_halt_exu_req;\n\n  // ALU dispatch signals\n  assign disp_o_alu_valid = disp_i_valid & disp_i_ready;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF dispatch signals\n  assign disp_oitf_ena = disp_o_alu_valid & disp_o_alu_longpipe & disp_oitf_ready;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 13, "code": "module e203_exu_alu(\n  input  i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input  nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input  [31:0] nice_csr_rdata,\n  input  nice_xs_off,\n  output amo_wait,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] i_itag,\n  input  [E203_XLEN-1:0] i_rs1,\n  input  [E203_XLEN-1:0] i_rs2,\n  input  [E203_XLEN-1:0] i_imm,\n  input  [E203_DECINFO_WIDTH-1:0] i_info,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  i_pc_vld,\n  input  [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  i_rdwen,\n  input  i_ilegl,\n  input  i_buserr,\n  input  i_misalgn,\n  input  flush_req,\n  input  flush_pulse,\n  output cmt_o_valid,\n  input  cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input  wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input  nonflush_cmt_ena,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input  nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input  nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input  nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  i_nice_cmt_off_ilgl,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals for submodules\n  wire csr_i_valid, csr_i_ready;\n  wire [E203_XLEN-1:0] csr_i_rs1;\n  wire [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info;\n  wire csr_i_rdwen;\n  wire csr_o_valid, csr_o_ready;\n  wire [E203_XLEN-1:0] csr_o_wbck_wdat;\n  wire csr_o_wbck_err;\n\n  wire bjp_i_valid, bjp_i_ready;\n  wire [E203_XLEN-1:0] bjp_i_rs1, bjp_i_rs2, bjp_i_imm;\n  wire [E203_PC_SIZE-1:0] bjp_i_pc;\n  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info;\n  wire bjp_o_valid, bjp_o_ready;\n  wire [E203_XLEN-1:0] bjp_o_wbck_wdat;\n  wire bjp_o_wbck_err;\n  wire bjp_o_cmt_bjp, bjp_o_cmt_mret, bjp_o_cmt_dret, bjp_o_cmt_fencei;\n  wire bjp_o_cmt_prdt, bjp_o_cmt_rslv;\n  wire [E203_XLEN-1:0] bjp_req_alu_op1, bjp_req_alu_op2;\n  wire bjp_req_alu_cmp_eq, bjp_req_alu_cmp_ne, bjp_req_alu_cmp_lt, bjp_req_alu_cmp_gt;\n  wire bjp_req_alu_cmp_ltu, bjp_req_alu_cmp_gtu, bjp_req_alu_add;\n  wire bjp_req_alu_cmp_res;\n  wire [E203_XLEN-1:0] bjp_req_alu_add_res;\n\n  wire agu_i_valid, agu_i_ready;\n  wire [E203_XLEN-1:0] agu_i_rs1, agu_i_rs2, agu_i_imm;\n  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info;\n  wire [E203_ITAG_WIDTH-1:0] agu_i_itag;\n  wire agu_i_longpipe;\n  wire agu_o_valid, agu_o_ready;\n  wire [E203_XLEN-1:0] agu_o_wbck_wdat;\n  wire agu_o_wbck_err;\n  wire agu_o_cmt_misalgn, agu_o_cmt_ld, agu_o_cmt_stamo, agu_o_cmt_buserr;\n  wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr;\n  wire [E203_XLEN-1:0] agu_req_alu_op1, agu_req_alu_op2;\n  wire agu_req_alu_swap, agu_req_alu_add, agu_req_alu_and, agu_req_alu_or, agu_req_alu_xor;\n  wire agu_req_alu_max, agu_req_alu_min, agu_req_alu_maxu, agu_req_alu_minu;\n  wire [E203_XLEN-1:0] agu_req_alu_res;\n  wire agu_sbf_0_ena, agu_sbf_1_ena;\n  wire [E203_XLEN-1:0] agu_sbf_0_nxt, agu_sbf_1_nxt;\n  wire [E203_XLEN-1:0] agu_sbf_0_r, agu_sbf_1_r;\n\n  wire alu_i_valid, alu_i_ready;\n  wire [E203_XLEN-1:0] alu_i_rs1, alu_i_rs2, alu_i_imm;\n  wire [E203_PC_SIZE-1:0] alu_i_pc;\n  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info;\n  wire alu_o_valid, alu_o_ready;\n  wire [E203_XLEN-1:0] alu_o_wbck_wdat;\n  wire alu_o_wbck_err;\n  wire alu_o_cmt_ecall, alu_o_cmt_ebreak, alu_o_cmt_wfi;\n  wire alu_req_alu_add, alu_req_alu_sub, alu_req_alu_xor, alu_req_alu_sll;\n  wire alu_req_alu_srl, alu_req_alu_sra, alu_req_alu_or, alu_req_alu_and;\n  wire alu_req_alu_slt, alu_req_alu_sltu, alu_req_alu_lui;\n  wire [E203_XLEN-1:0] alu_req_alu_op1, alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_req_alu_res;\n\n  wire muldiv_i_valid, muldiv_i_ready;\n  wire [E203_XLEN-1:0] muldiv_i_rs1, muldiv_i_rs2, muldiv_i_imm;\n  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info;\n  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag;\n  wire muldiv_i_longpipe;\n  wire muldiv_o_valid, muldiv_o_ready;\n  wire [E203_XLEN-1:0] muldiv_o_wbck_wdat;\n  wire muldiv_o_wbck_err;\n  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1, muldiv_req_alu_op2;\n  wire muldiv_req_alu_add, muldiv_req_alu_sub;\n  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res;\n  wire muldiv_sbf_0_ena, muldiv_sbf_1_ena;\n  wire [32:0] muldiv_sbf_0_nxt, muldiv_sbf_1_nxt;\n  wire [32:0] muldiv_sbf_0_r, muldiv_sbf_1_r;\n\n  wire nice_i_valid, nice_i_ready;\n  wire [E203_XLEN-1:0] nice_i_instr, nice_i_rs1, nice_i_rs2;\n  wire [E203_ITAG_WIDTH-1:0] nice_i_itag;\n  wire nice_o_longpipe, nice_o_valid, nice_o_ready;\n  wire nice_o_itag_valid, nice_o_itag_ready;\n  wire [E203_ITAG_WIDTH-1:0] nice_o_itag;\n  wire nice_rsp_multicyc_valid, nice_rsp_multicyc_ready;\n  wire nice_req_valid, nice_req_ready;\n  wire [E203_XLEN-1:0] nice_req_instr, nice_req_rs1, nice_req_rs2;\n\n  // Instantiate submodules\n  e203_exu_alu_csrctrl u_e203_exu_alu_csrctrl (\n    .csr_i_valid(csr_i_valid),\n    .csr_i_ready(csr_i_ready),\n    .csr_i_rs1(csr_i_rs1),\n    .csr_i_info(csr_i_info),\n    .csr_i_rdwen(csr_i_rdwen),\n    .csr_ena(csr_ena),\n    .csr_wr_en(csr_wr_en),\n    .csr_rd_en(csr_rd_en),\n    .csr_idx(csr_idx),\n    .csr_access_ilgl(csr_access_ilgl),\n    .read_csr_dat(read_csr_dat),\n    .wbck_csr_dat(wbck_csr_dat),\n    .csr_o_valid(csr_o_valid),\n    .csr_o_ready(csr_o_ready),\n    .csr_o_wbck_wdat(csr_o_wbck_wdat),\n    .csr_o_wbck_err(csr_o_wbck_err),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_alu_bjp u_e203_exu_alu_bjp (\n    .bjp_i_valid(bjp_i_valid),\n    .bjp_i_ready(bjp_i_ready),\n    .bjp_i_rs1(bjp_i_rs1),\n    .bjp_i_rs2(bjp_i_rs2),\n    .bjp_i_imm(bjp_i_imm),\n    .bjp_i_pc(bjp_i_pc),\n    .bjp_i_info(bjp_i_info),\n    .bjp_o_valid(bjp_o_valid),\n    .bjp_o_ready(bjp_o_ready),\n    .bjp_o_wbck_wdat(bjp_o_wbck_wdat),\n    .bjp_o_wbck_err(bjp_o_wbck_err),\n    .bjp_o_cmt_bjp(bjp_o_cmt_bjp),\n    .bjp_o_cmt_mret(bjp_o_cmt_mret),\n    .bjp_o_cmt_dret(bjp_o_cmt_dret),\n    .bjp_o_cmt_fencei(bjp_o_cmt_fencei),\n    .bjp_o_cmt_prdt(bjp_o_cmt_prdt),\n    .bjp_o_cmt_rslv(bjp_o_cmt_rslv),\n    .bjp_req_alu_op1(bjp_req_alu_op1),\n    .bjp_req_alu_op2(bjp_req_alu_op2),\n    .bjp_req_alu_cmp_eq(bjp_req_alu_cmp_eq),\n    .bjp_req_alu_cmp_ne(bjp_req_alu_cmp_ne),\n    .bjp_req_alu_cmp_lt(bjp_req_alu_cmp_lt),\n    .bjp_req_alu_cmp_gt(bjp_req_alu_cmp_gt),\n    .bjp_req_alu_cmp_ltu(bjp_req_alu_cmp_ltu),\n    .bjp_req_alu_cmp_gtu(bjp_req_alu_cmp_gtu),\n    .bjp_req_alu_add(bjp_req_alu_add),\n    .bjp_req_alu_cmp_res(bjp_req_alu_cmp_res),\n    .bjp_req_alu_add_res(bjp_req_alu_add_res),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_alu_lsuagu u_e203_exu_alu_lsuagu (\n    .agu_i_valid(agu_i_valid),\n    .agu_i_ready(agu_i_ready),\n    .agu_i_rs1(agu_i_rs1),\n    .agu_i_rs2(agu_i_rs2),\n    .agu_i_imm(agu_i_imm),\n    .agu_i_info(agu_i_info),\n    .agu_i_itag(agu_i_itag),\n    .agu_i_longpipe(agu_i_longpipe),\n    .flush_req(flush_req),\n    .flush_pulse(flush_pulse),\n    .amo_wait(amo_wait),\n    .oitf_empty(oitf_empty),\n    .agu_o_valid(agu_o_valid),\n    .agu_o_ready(agu_o_ready),\n    .agu_o_wbck_wdat(agu_o_wbck_wdat),\n    .agu_o_wbck_err(agu_o_wbck_err),\n    .agu_o_cmt_misalgn(agu_o_cmt_misalgn),\n    .agu_o_cmt_ld(agu_o_cmt_ld),\n    .agu_o_cmt_stamo(agu_o_cmt_stamo),\n    .agu_o_cmt_buserr(agu_o_cmt_buserr),\n    .agu_o_cmt_badaddr(agu_o_cmt_badaddr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .agu_req_alu_op1(agu_req_alu_op1),\n    .agu_req_alu_op2(agu_req_alu_op2),\n    .agu_req_alu_swap(agu_req_alu_swap),\n    .agu_req_alu_add(agu_req_alu_add),\n    .agu_req_alu_and(agu_req_alu_and),\n    .agu_req_alu_or(agu_req_alu_or),\n    .agu_req_alu_xor(agu_req_alu_xor),\n    .agu_req_alu_max(agu_req_alu_max),\n    .agu_req_alu_min(agu_req_alu_min),\n    .agu_req_alu_maxu(agu_req_alu_maxu),\n    .agu_req_alu_minu(agu_req_alu_minu),\n    .agu_req_alu_res(agu_req_alu_res),\n    .agu_sbf_0_ena(agu_sbf_0_ena),\n    .agu_sbf_0_nxt(agu_sbf_0_nxt),\n    .agu_sbf_0_r(agu_sbf_0_r),\n    .agu_sbf_1_ena(agu_sbf_1_ena),\n    .agu_sbf_1_nxt(agu_sbf_1_nxt),\n    .agu_sbf_1_r(agu_sbf_1_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_alu_rglr u_e203_exu_alu_rglr (\n    .alu_i_valid(alu_i_valid),\n    .alu_i_ready(alu_i_ready),\n    .alu_i_rs1(alu_i_rs1),\n    .alu_i_rs2(alu_i_rs2),\n    .alu_i_imm(alu_i_imm),\n    .alu_i_pc(alu_i_pc),\n    .alu_i_info(alu_i_info),\n    .alu_o_valid(alu_o_valid),\n    .alu_o_ready(alu_o_ready),\n    .alu_o_wbck_wdat(alu_o_wbck_wdat),\n    .alu_o_wbck_err(alu_o_wbck_err),\n    .alu_o_cmt_ecall(alu_o_cmt_ecall),\n    .alu_o_cmt_ebreak(alu_o_cmt_ebreak),\n    .alu_o_cmt_wfi(alu_o_cmt_wfi),\n    .alu_req_alu_add(alu_req_alu_add),\n    .alu_req_alu_sub(alu_req_alu_sub),\n    .alu_req_alu_xor(alu_req_alu_xor),\n    .alu_req_alu_sll(alu_req_alu_sll),\n    .alu_req_alu_srl(alu_req_alu_srl),\n    .alu_req_alu_sra(alu_req_alu_sra),\n    .alu_req_alu_or(alu_req_alu_or),\n    .alu_req_alu_and(alu_req_alu_and),\n    .alu_req_alu_slt(alu_req_alu_slt),\n    .alu_req_alu_sltu(alu_req_alu_sltu),\n    .alu_req_alu_lui(alu_req_alu_lui),\n    .alu_req_alu_op1(alu_req_alu_op1),\n    .alu_req_alu_op2(alu_req_alu_op2),\n    .alu_req_alu_res(alu_req_alu_res),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_alu_muldiv u_e203_exu_alu_muldiv (\n    .mdv_nob2b(mdv_nob2b),\n    .muldiv_i_valid(muldiv_i_valid),\n    .muldiv_i_ready(muldiv_i_ready),\n    .muldiv_i_rs1(muldiv_i_rs1),\n    .muldiv_i_rs2(muldiv_i_rs2),\n    .muldiv_i_imm(muldiv_i_imm),\n    .muldiv_i_info(muldiv_i_info),\n    .muldiv_i_itag(muldiv_i_itag),\n    .muldiv_i_longpipe(muldiv_i_longpipe),\n    .flush_pulse(flush_pulse),\n    .muldiv_o_valid(muldiv_o_valid),\n    .muldiv_o_ready(muldiv_o_ready),\n    .muldiv_o_wbck_wdat(muldiv_o_wbck_wdat),\n    .muldiv_o_wbck_err(muldiv_o_wbck_err),\n    .muldiv_req_alu_op1(muldiv_req_alu_op1),\n    .muldiv_req_alu_op2(muldiv_req_alu_op2),\n    .muldiv_req_alu_add(muldiv_req_alu_add),\n    .muldiv_req_alu_sub(muldiv_req_alu_sub),\n    .muldiv_req_alu_res(muldiv_req_alu_res),\n    .muldiv_sbf_0_ena(muldiv_sbf_0_ena),\n    .muldiv_sbf_0_nxt(muldiv_sbf_0_nxt),\n    .muldiv_sbf_0_r(muldiv_sbf_0_r),\n    .muldiv_sbf_1_ena(muldiv_sbf_1_ena),\n    .muldiv_sbf_1_nxt(muldiv_sbf_1_nxt),\n    .muldiv_sbf_1_r(muldiv_sbf_1_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_nice u_e203_exu_nice (\n    .nice_i_xs_off(nice_xs_off),\n    .nice_i_valid(nice_i_valid),\n    .nice_i_ready(nice_i_ready),\n    .nice_i_instr(nice_i_instr),\n    .nice_i_rs1(nice_i_rs1),\n    .nice_i_rs2(nice_i_rs2),\n    .nice_i_itag(nice_i_itag),\n    .nice_o_longpipe(nice_o_longpipe),\n    .nice_o_valid(nice_o_valid),\n    .nice_o_ready(nice_o_ready),\n    .nice_o_itag_valid(nice_o_itag_valid),\n    .nice_o_itag_ready(nice_o_itag_ready),\n    .nice_o_itag(nice_o_itag),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_instr(nice_req_instr),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_alu_dpath u_e203_exu_alu_dpath (\n    .alu_req_alu(alu_req_alu),\n    .alu_req_alu_add(alu_req_alu_add),\n    .alu_req_alu_sub(alu_req_alu_sub),\n    .alu_req_alu_xor(alu_req_alu_xor),\n    .alu_req_alu_sll(alu_req_alu_sll),\n    .alu_req_alu_srl(alu_req_alu_srl),\n    .alu_req_alu_sra(alu_req_alu_sra),\n    .alu_req_alu_or(alu_req_alu_or),\n    .alu_req_alu_and(alu_req_alu_and),\n    .alu_req_alu_op1(alu_req_alu_op1),\n    .alu_req_alu_op2(alu_req_alu_op2),\n    .bjp_req_alu(bjp_req_alu),\n    .bjp_req_alu_op1(bjp_req_alu_op1),\n    .bjp_req_alu_op2(bjp_req_alu_op2),\n    .agu_req_alu(agu_req_alu),\n    .agu_req_alu_op1(agu_req_alu_op1),\n    .agu_req_alu_op2(agu_req_alu_op2),\n    .muldiv_req_alu(muldiv_req_alu),\n    .muldiv_req_alu_op1(muldiv_req_alu_op1),\n    .muldiv_req_alu_op2(muldiv_req_alu_op2),\n    .muldiv_req_alu_add(muldiv_req_alu_add),\n    .muldiv_req_alu_sub(muldiv_req_alu_sub),\n    .muldiv_sbf_0_ena(muldiv_sbf_0_ena),\n    .muldiv_sbf_0_nxt(muldiv_sbf_0_nxt),\n    .muldiv_sbf_1_ena(muldiv_sbf_1_ena),\n    .muldiv_sbf_1_nxt(muldiv_sbf_1_nxt),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 5, "code": "`include \"e203_defines.v\"\n\nmodule e203_itcm_ram (\n    input sd,\n    input ds,\n    input ls,\n    input cs,\n    input we,\n    input [E203_ITCM_RAM_AW-1:0] addr,\n    input [E203_ITCM_RAM_MW-1:0] wem,\n    input [E203_ITCM_RAM_DW-1:0] din,\n    input rst_n,\n    input clk,\n    output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 10, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 13, "code": "module e203_exu_branchslv(\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_req;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret | (~nonalu_excpirq_flush_req_raw & ~flush_need) | (flush_ack & ~nonalu_excpirq_flush_req_raw);\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & flush_ack;\n\n  wire [E203_PC_SIZE-1:0] next_pc = cmt_i_pc + (cmt_i_rv32 ? 4 : 2);\n  wire [E203_PC_SIZE-1:0] bjp_target = cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0];\n\n  assign brchmis_flush_add_op1 = cmt_i_dret ? csr_dpc_r : (cmt_i_mret ? csr_epc_r : (cmt_i_bjp & cmt_i_bjp_prdt ? next_pc : bjp_target));\n  assign brchmis_flush_add_op2 = 0;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? next_pc :\n                              (cmt_i_bjp & ~cmt_i_bjp_prdt) ? bjp_target :\n                              cmt_i_dret ? csr_dpc_r : csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 14, "code": "module e203_exu_commit(\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire nonalu_excpirq_flush_req_raw;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire brchmis_flush_req;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_pc;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire flush_req;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp(\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(excpirq_flush_add_op1),\n    .excpirq_flush_add_op2(excpirq_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv(\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(brchmis_flush_add_op1),\n    .brchmis_flush_add_op2(brchmis_flush_add_op2),\n    .brchmis_flush_pc(brchmis_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & flush_req;\n  assign flush_req = pipe_flush_req;\n\n  // PC computation\n  assign pipe_flush_add_op1 = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_add_op1;\n  assign pipe_flush_add_op2 = excpirq_flush_req ? excpirq_flush_add_op2 : brchmis_flush_add_op2;\n\n  // Non-flush commit enable\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 10, "code": "module e203_exu_regfile(\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  wire [E203_XLEN-1:0] rf_r [0:E203_RFREG_NUM-1];\n  wire [E203_RFREG_NUM-1:0] rf_wen;\n  wire [E203_RFREG_NUM-1:0] rf_wen_masked;\n\n  generate\n    if(E203_CFG_REGNUM_IS_32) begin: regfile_32\n      assign rf_wen = (wbck_dest_wen & (wbck_dest_idx != 0)) ? (1 << wbck_dest_idx) : 0;\n    end else if(E203_CFG_REGNUM_IS_16) begin: regfile_16\n      assign rf_wen = (wbck_dest_wen & (wbck_dest_idx != 0)) ? (1 << wbck_dest_idx[3:0]) : 0;\n    end\n  endgenerate\n\n  assign rf_wen_masked = rf_wen & ~({E203_RFREG_NUM{1'b1}} << 1);\n\n  generate\n    if(E203_REGFILE_LATCH_BASED) begin: latch_based\n      for (genvar i = 1; i < E203_RFREG_NUM; i = i + 1) begin: rf_latch\n        sirv_gnrl_ltch #(.DW(E203_XLEN)) rf_ltch(\n          .lden(rf_wen_masked[i]),\n          .dnxt(wbck_dest_dat),\n          .qout(rf_r[i])\n        );\n      end\n    end else begin: dff_based\n      for (genvar i = 1; i < E203_RFREG_NUM; i = i + 1) begin: rf_dff\n        sirv_gnrl_dffl #(.DW(E203_XLEN)) rf_dff(\n          .lden(rf_wen_masked[i]),\n          .dnxt(wbck_dest_dat),\n          .qout(rf_r[i]),\n          .clk(clk)\n        );\n      end\n    end\n  endgenerate\n\n  assign read_src1_dat = rf_r[read_src1_idx];\n  assign read_src2_dat = rf_r[read_src2_idx];\n  assign x1_r = rf_r[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 6, "code": "module e203_exu_nice (\n  input nice_i_xs_off,\n  input nice_i_valid,\n  output nice_i_ready,\n  input [E203_XLEN-1:0] nice_i_instr,\n  input [E203_XLEN-1:0] nice_i_rs1,\n  input [E203_XLEN-1:0] nice_i_rs2,\n  input [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output nice_o_longpipe,\n  output nice_o_valid,\n  input nice_o_ready,\n  output nice_o_itag_valid,\n  input nice_o_itag_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // Instantiate FIFO\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 9, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include the necessary definitions\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER == 1) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // In lockstep mode, no operations are performed\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          // Synchronize interrupt signals\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // Direct pass-through of signals\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      // In slave mode, always use signal pass-through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 7, "code": "module e203_exu_nice (\n  input  wire nice_i_xs_off,\n  input  wire nice_i_valid,\n  output wire nice_i_ready,\n  input  wire [E203_XLEN-1:0] nice_i_instr,\n  input  wire [E203_XLEN-1:0] nice_i_rs1,\n  input  wire [E203_XLEN-1:0] nice_i_rs2,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input  wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input  wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // NICE response logic\n  assign nice_o_longpipe = ~nice_i_xs_off;\n  assign nice_o_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy & nice_o_itag_ready;\n  assign nice_o_itag = fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // FIFO control logic\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_ready & nice_o_itag_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 10, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n  wire jalr_rs1xn_dep = ~oitf_empty | (~ir_empty & ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr & (~ir_rs1en | ~jalr_rs1idx_cam_irrdidx);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}}) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign bpu_wait = dec_jalr & dec_jalr_rs1x1 & (~oitf_empty) |\n                    dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 4, "code": "module e203_lsu (\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [XLEN-1:0] nice_icb_cmd_wdata,\n  input  [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [XLEN-1:0] biu_icb_cmd_wdata,\n  output [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for the LSU module\n  // Address routing, arbitration, write-back, and exception handling logic\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 11, "code": "module e203_exu_regfile (\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output wire [E203_XLEN-1:0]        read_src1_dat,\n  output wire [E203_XLEN-1:0]        read_src2_dat,\n  input  wire                        wbck_dest_wen,\n  input  wire [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  wire [E203_XLEN-1:0]        wbck_dest_dat,\n  output wire [E203_XLEN-1:0]        x1_r,\n  input  wire                        test_mode,\n  input  wire                        clk,\n  input  wire                        rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic, if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 8, "code": "module e203_exu_nice (\n  input  wire        nice_i_xs_off,\n  input  wire        nice_i_valid,\n  output wire        nice_i_ready,\n  input  wire [31:0] nice_i_instr,\n  input  wire [31:0] nice_i_rs1,\n  input  wire [31:0] nice_i_rs2,\n  input  wire [1:0]  nice_i_itag,\n  output wire        nice_o_longpipe,\n  output wire        nice_o_valid,\n  input  wire        nice_o_ready,\n  output wire        nice_o_itag_valid,\n  input  wire        nice_o_itag_ready,\n  output wire [1:0]  nice_o_itag,\n  input  wire        nice_rsp_multicyc_valid,\n  output wire        nice_rsp_multicyc_ready,\n  output wire        nice_req_valid,\n  input  wire        nice_req_ready,\n  output wire [31:0] nice_req_instr,\n  output wire [31:0] nice_req_rs1,\n  output wire [31:0] nice_req_rs2,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld;\n\n  // Instruction tag write-back logic\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign fifo_o_rdy = nice_o_itag_ready;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface logic\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(2)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 9, "code": "module e203_ifu (\n  input  wire                          clk,\n  input  wire                          rst_n,\n  output wire [E203_PC_SIZE-1:0]       inspect_pc,\n  output wire                          ifu_active,\n  input  wire                          itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]       pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0]    ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]       ifu_o_pc,\n  output wire                          ifu_o_pc_vld,\n  output wire                          ifu_o_misalgn,\n  output wire                          ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]   ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]   ifu_o_rs2idx,\n  output wire                          ifu_o_prdt_taken,\n  output wire                          ifu_o_muldiv_b2b,\n  output wire                          ifu_o_valid,\n  input  wire                          ifu_o_ready,\n  input  wire                          pipe_flush_req,\n  output wire                          pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]       pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]       pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]       pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire                          ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]     itcm_region_indic,\n  output wire                          ifu2itcm_icb_cmd_valid,\n  input  wire                          ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                          ifu2itcm_icb_rsp_valid,\n  output wire                          ifu2itcm_icb_rsp_ready,\n  input  wire                          ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire                          ifu2biu_icb_cmd_valid,\n  input  wire                          ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]     ifu2biu_icb_cmd_addr,\n  input  wire                          ifu2biu_icb_rsp_valid,\n  output wire                          ifu2biu_icb_rsp_ready,\n  input  wire                          ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire                          ifu_halt_req,\n  output wire                          ifu_halt_ack,\n  input  wire                          oitf_empty,\n  input  wire [E203_XLEN-1:0]          rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]          rf2ifu_rs1,\n  input  wire                          dec2ifu_rs1en,\n  input  wire                          dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]   dec2ifu_rdidx,\n  input  wire                          dec2ifu_mulhsu,\n  input  wire                          dec2ifu_div,\n  input  wire                          dec2ifu_rem,\n  input  wire                          dec2ifu_divu,\n  input  wire                          dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 11, "code": "module e203_exu_alu_rglr(\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 11, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 6, "code": "module e203_itcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 8, "code": "module e203_exu_disp (\n  input  wire                     wfi_halt_exu_req,\n  output wire                     wfi_halt_exu_ack,\n  input  wire                     oitf_empty,\n  input  wire                     amo_wait,\n  input  wire                     disp_i_valid,\n  output wire                     disp_i_ready,\n  input  wire                     disp_i_rs1x0,\n  input  wire                     disp_i_rs2x0,\n  input  wire                     disp_i_rs1en,\n  input  wire                     disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]     disp_i_rs1,\n  input  wire [E203_XLEN-1:0]     disp_i_rs2,\n  input  wire                     disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]     disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0]  disp_i_pc,\n  input  wire                     disp_i_misalgn,\n  input  wire                     disp_i_buserr,\n  input  wire                     disp_i_ilegl,\n  output wire                     disp_o_alu_valid,\n  input  wire                     disp_o_alu_ready,\n  input  wire                     disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs2,\n  output wire                     disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]     disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0]  disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                     disp_o_alu_misalgn,\n  output wire                     disp_o_alu_buserr,\n  output wire                     disp_o_alu_ilegl,\n  input  wire                     oitfrd_match_disprs1,\n  input  wire                     oitfrd_match_disprs2,\n  input  wire                     oitfrd_match_disprs3,\n  input  wire                     oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                     disp_oitf_ena,\n  input  wire                     disp_oitf_ready,\n  output wire                     disp_oitf_rs1fpu,\n  output wire                     disp_oitf_rs2fpu,\n  output wire                     disp_oitf_rs3fpu,\n  output wire                     disp_oitf_rdfpu,\n  output wire                     disp_oitf_rs1en,\n  output wire                     disp_oitf_rs2en,\n  output wire                     disp_oitf_rs3en,\n  output wire                     disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0]  disp_oitf_pc,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire dep = raw_dep | waw_dep;\n\n  wire csr = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n  wire agu = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_AGU);\n  wire bjp = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP);\n  wire fence = bjp & disp_i_info[E203_DECINFO_BJP_FENCE];\n  wire fencei = bjp & disp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire wfi = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_ALU) & disp_i_info[E203_DECINFO_ALU_WFI];\n\n  wire disp_condition = \n    ~dep & \n    ~wfi_halt_exu_req & \n    ~amo_wait & \n    ~fence & \n    ~fencei & \n    ~csr & \n    (disp_o_alu_ready | ~disp_o_alu_longpipe);\n\n  assign disp_i_ready = disp_condition & disp_oitf_ready;\n\n  assign disp_o_alu_valid = disp_i_valid & disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_i_valid & disp_condition & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = oitf_empty & ~amo_wait & wfi;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 9, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcounterstop;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR Access Illegal Flag\n  assign csr_access_ilgl = 1'b0; // Always 0, assuming no illegal access\n\n  // Privilege Mode Status\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h301: read_csr_dat = misa;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcounterstop;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      misa <= {E203_XLEN{1'b0}};\n      mvendorid <= 536;\n      marchid <= \"E203\";\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcounterstop <= {E203_XLEN{1'b0}};\n      dcsr <= {E203_XLEN{1'b0}};\n      dpc <= {E203_PC_SIZE{1'b0}};\n      dscratch <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= {wbck_csr_dat[E203_PC_SIZE-1:1], 1'b0};\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'h344: mip <= wbck_csr_dat;\n        12'hB00: mcounterstop <= wbck_csr_dat;\n        12'h7b0: if (dbg_mode) dcsr <= wbck_csr_dat;\n        12'h7b1: if (dbg_mode) dpc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h7b2: if (dbg_mode) dscratch <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // CSR Update Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n    end else begin\n      if (cmt_status_ena) begin\n        mstatus[7] <= mstatus[3];\n        mstatus[3] <= 1'b0;\n      end\n      if (cmt_mret_ena) begin\n        mstatus[3] <= mstatus[7];\n        mstatus[7] <= 1'b1;\n      end\n      if (cmt_epc_ena) begin\n        mepc <= {cmt_epc[E203_PC_SIZE-1:1], 1'b0};\n      end\n      if (cmt_cause_ena) begin\n        mcause <= cmt_cause;\n      end\n      if (cmt_badaddr_ena) begin\n        mbadaddr <= cmt_badaddr;\n      end\n    end\n  end\n\n  // Output Assignments\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en && dbg_mode;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en && dbg_mode;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en && dbg_mode;\n\n  // Clock Gating and Stop Signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 16, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 12, "code": "module e203_exu_regfile (\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output wire [E203_XLEN-1:0] read_src1_dat,\n  output wire [E203_XLEN-1:0] read_src2_dat,\n  input  wire wbck_dest_wen,\n  input  wire [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  wire [E203_XLEN-1:0] wbck_dest_dat,\n  output wire [E203_XLEN-1:0] x1_r,\n  input  wire test_mode,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Register file definition\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read operation\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src2_idx];\n\n  // Write operation\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic, if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 13, "code": "module e203_exu_alu_bjp(\n  input  wire                 bjp_i_valid,  \n  output wire                 bjp_i_ready,  \n  input  wire [E203_XLEN-1:0] bjp_i_rs1,    \n  input  wire [E203_XLEN-1:0] bjp_i_rs2,    \n  input  wire [E203_XLEN-1:0] bjp_i_imm,    \n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,  \n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info, \n  output wire                 bjp_o_valid,  \n  input  wire                 bjp_o_ready,  \n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat, \n  output wire                 bjp_o_wbck_err, \n  output wire                 bjp_o_cmt_bjp,  \n  output wire                 bjp_o_cmt_mret, \n  output wire                 bjp_o_cmt_dret, \n  output wire                 bjp_o_cmt_fencei, \n  output wire                 bjp_o_cmt_prdt, \n  output wire                 bjp_o_cmt_rslv, \n  output wire [E203_XLEN-1:0] bjp_req_alu_op1, \n  output wire [E203_XLEN-1:0] bjp_req_alu_op2, \n  output wire                 bjp_req_alu_cmp_eq, \n  output wire                 bjp_req_alu_cmp_ne, \n  output wire                 bjp_req_alu_cmp_lt, \n  output wire                 bjp_req_alu_cmp_gt, \n  output wire                 bjp_req_alu_cmp_ltu, \n  output wire                 bjp_req_alu_cmp_gtu, \n  output wire                 bjp_req_alu_add, \n  input  wire                 bjp_req_alu_cmp_res, \n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res, \n  input  wire                 clk,          \n  input  wire                 rst_n         \n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp    = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret   = bjp_i_mret;\n  assign bjp_o_cmt_dret   = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt   = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv   = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 10, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n`ifdef E203_HAS_NICE\n  , output nice_xs_off\n`endif\n);\n\n  // Internal registers for CSR\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcounterstop;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset all CSR registers to default values\n      mstatus <= 32'h00001800; // Default mstatus value\n      mie <= 32'h0;\n      mip <= 32'h0;\n      mtvec <= `E203_MTVEC_TRAP_BASE;\n      mscratch <= 32'h0;\n      mepc <= 32'h0;\n      mcause <= 32'h0;\n      mbadaddr <= 32'h0;\n      misa <= {2'b01, 30'h0}; // Default misa value\n      mvendorid <= 32'h536; // Vendor ID\n      marchid <= 32'hE203; // Architecture ID\n      mimpid <= 32'h1; // Implementation ID\n      mhartid <= {E203_HART_ID_W{1'b0}}; // Hart ID\n      mcounterstop <= 32'h0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat; // mstatus\n          12'h304: mie <= wbck_csr_dat; // mie\n          12'h305: mtvec <= wbck_csr_dat; // mtvec\n          12'h340: mscratch <= wbck_csr_dat; // mscratch\n          12'h341: mepc <= wbck_csr_dat; // mepc\n          12'h342: mcause <= wbck_csr_dat; // mcause\n          12'h343: mbadaddr <= wbck_csr_dat; // mbadaddr\n          12'hBFF: mcounterstop <= wbck_csr_dat; // mcounterstop\n          default: ; // No action for other CSR addresses\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus; // mstatus\n      12'h304: read_csr_dat = mie; // mie\n      12'h305: read_csr_dat = mtvec; // mtvec\n      12'h340: read_csr_dat = mscratch; // mscratch\n      12'h341: read_csr_dat = mepc; // mepc\n      12'h342: read_csr_dat = mcause; // mcause\n      12'h343: read_csr_dat = mbadaddr; // mbadaddr\n      12'hBFF: read_csr_dat = mcounterstop; // mcounterstop\n      default: read_csr_dat = 32'h0; // Default read value\n    endcase\n  end\n\n  // CSR Access Illegal Logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR Write Enable\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // Clock Gating Control\n  assign core_cgstop = mcounterstop[0];\n  assign tcm_cgstop = mcounterstop[1];\n  assign itcm_nohold = mcounterstop[2];\n  assign mdv_nob2b = mcounterstop[3];\n\n  // Timer Stop\n  assign tm_stop = mcounterstop[4];\n\n  // CSR EPC and DPC Read\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n\n  // CSR MTVEC Read\n  assign csr_mtvec_r = mtvec;\n\n`ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0; // NICE is not closed\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 13, "code": "module e203_exu_regfile(\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 14, "code": "module e203_exu_regfile (\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output wire [E203_XLEN-1:0] read_src1_dat,\n  output wire [E203_XLEN-1:0] read_src2_dat,\n  input  wire wbck_dest_wen,\n  input  wire [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  wire [E203_XLEN-1:0] wbck_dest_dat,\n  output wire [E203_XLEN-1:0] x1_r,\n  input  wire test_mode,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read ports\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src2_idx];\n\n  // Write port\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 7, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 8, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 5, "code": "module e203_lsu (\n  input  wire                     commit_mret,\n  input  wire                     commit_trap,\n  input  wire                     excp_active,\n  output wire                     lsu_active,\n\n  output wire                     lsu_o_valid,\n  input  wire                     lsu_o_ready,\n  output wire [XLEN-1:0]          lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0]    lsu_o_wbck_itag,\n  output wire                     lsu_o_wbck_err,\n  output wire                     lsu_o_cmt_ld,\n  output wire                     lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0]     lsu_o_cmt_badaddr,\n  output wire                     lsu_o_cmt_buserr,\n\n  input  wire                     agu_icb_cmd_valid,\n  output wire                     agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]     agu_icb_cmd_addr,\n  input  wire                     agu_icb_cmd_read,\n  input  wire [XLEN-1:0]          agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]        agu_icb_cmd_wmask,\n  input  wire                     agu_icb_cmd_lock,\n  input  wire                     agu_icb_cmd_excl,\n  input  wire [1:0]               agu_icb_cmd_size,\n  input  wire                     agu_icb_cmd_back2agu,\n  input  wire                     agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0]    agu_icb_cmd_itag,\n  output wire                     agu_icb_rsp_valid,\n  input  wire                     agu_icb_rsp_ready,\n  output wire                     agu_icb_rsp_err,\n  output wire                     agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0]          agu_icb_rsp_rdata\n\n`ifdef E203_HAS_NICE\n  ,input  wire                     nice_mem_holdup\n  ,input  wire                     nice_icb_cmd_valid\n  ,output wire                     nice_icb_cmd_ready\n  ,input  wire [ADDR_SIZE-1:0]     nice_icb_cmd_addr\n  ,input  wire                     nice_icb_cmd_read\n  ,input  wire [XLEN-1:0]          nice_icb_cmd_wdata\n  ,input  wire [XLEN/8-1:0]        nice_icb_cmd_wmask\n  ,output wire                     nice_icb_rsp_valid\n  ,input  wire                     nice_icb_rsp_ready\n  ,output wire                     nice_icb_rsp_err\n  ,output wire [XLEN-1:0]          nice_icb_rsp_rdata\n`endif\n\n`ifdef E203_HAS_ITCM\n  ,input  wire [ADDR_SIZE-1:0]     itcm_region_indic\n`endif\n\n`ifdef E203_HAS_DTCM\n  ,input  wire [ADDR_SIZE-1:0]     dtcm_region_indic\n`endif\n\n  ,output wire                     biu_icb_cmd_valid\n  ,input  wire                     biu_icb_cmd_ready\n  ,output wire [ADDR_SIZE-1:0]     biu_icb_cmd_addr\n  ,output wire                     biu_icb_cmd_read\n  ,output wire [XLEN-1:0]          biu_icb_cmd_wdata\n  ,output wire [XLEN/8-1:0]        biu_icb_cmd_wmask\n  ,output wire                     biu_icb_cmd_lock\n  ,output wire                     biu_icb_cmd_excl\n  ,output wire [1:0]               biu_icb_cmd_size\n  ,input  wire                     biu_icb_rsp_valid\n  ,output wire                     biu_icb_rsp_ready\n  ,input  wire                     biu_icb_rsp_err\n  ,input  wire                     biu_icb_rsp_excl_ok\n  ,input  wire [XLEN-1:0]          biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 8, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1_idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2_idx;\n  wire [E203_RFIDX_WIDTH-1:0] rd_idx;\n  wire [E203_DECINFO_WIDTH-1:0] info_bus;\n  wire [E203_XLEN-1:0] imm_val;\n  wire [E203_PC_SIZE-1:0] pc_val;\n  wire misalgn_err;\n  wire bus_err;\n  wire illegal_instr;\n  wire mulhsu_instr;\n  wire mul_instr;\n  wire div_instr;\n  wire rem_instr;\n  wire divu_instr;\n  wire remu_instr;\n  wire rv32_instr;\n  wire bjp_instr;\n  wire jal_instr;\n  wire jalr_instr;\n  wire bxx_instr;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1_idx;\n  wire [E203_XLEN-1:0] bjp_imm_val;\n\n  // Decode logic\n  // (Add logic to decode the instruction and generate the control signals)\n\n  assign dec_rs1x0 = (rs1_idx == 0);\n  assign dec_rs2x0 = (rs2_idx == 0);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd is enabled */;\n  assign dec_rs1idx = rs1_idx;\n  assign dec_rs2idx = rs2_idx;\n  assign dec_rdidx = rd_idx;\n  assign dec_info = info_bus;\n  assign dec_imm = imm_val;\n  assign dec_pc = pc_val;\n  assign dec_misalgn = misalgn_err;\n  assign dec_buserr = bus_err;\n  assign dec_ilegl = illegal_instr;\n  assign dec_mulhsu = mulhsu_instr;\n  assign dec_mul = mul_instr;\n  assign dec_div = div_instr;\n  assign dec_rem = rem_instr;\n  assign dec_divu = divu_instr;\n  assign dec_remu = remu_instr;\n  assign dec_rv32 = rv32_instr;\n  assign dec_bjp = bjp_instr;\n  assign dec_jal = jal_instr;\n  assign dec_jalr = jalr_instr;\n  assign dec_bxx = bxx_instr;\n  assign dec_jalr_rs1idx = jalr_rs1_idx;\n  assign dec_bjp_imm = bjp_imm_val;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if it's a NICE instruction */;\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 11, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | ((~ir_empty) & ir_rs1en);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~jalr_rs1idx_cam_irrdidx);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  wire rs1xn_rdrf_r;\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1xn_rdrf = dec_jalr_rs1xn & rs1xn_rdrf_r;\n  assign bpu_wait = dec_jalr & dec_i_valid & dec_jalr_rs1xn & (~jalr_rs1xn_rdrf);\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n                         | ({E203_PC_SIZE{dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n                         | ({E203_PC_SIZE{dec_jalr_rs1x1}} & rf2bpu_x1)\n                         | ({E203_PC_SIZE{jalr_rs1xn_rdrf}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 9, "code": "module e203_lsu_ctrl (\n  input commit_mret,\n  input commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input agu_icb_cmd_read,\n  input [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input agu_icb_cmd_lock,\n  input agu_icb_cmd_excl,\n  input [1:0] agu_icb_cmd_size,\n  input agu_icb_cmd_back2agu,\n  input agu_icb_cmd_usign,\n  input [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input nice_mem_holdup,\n  input nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input nice_icb_cmd_read,\n  input [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input dcache_icb_rsp_err,\n  input dcache_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input dtcm_icb_rsp_err,\n  input dtcm_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input biu_icb_rsp_err,\n  input biu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 10, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic will be implemented here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 14, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [11:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 15, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [11:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals and logic for e203_exu_alu module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 10, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n`include \"e203_defines.v\"\n\ngenerate\n    if (MASTER) begin : master_mode\n        if (`ifdef E203_HAS_LOCKSTEP) begin : lockstep_mode\n            // No operation in lockstep mode\n        end else begin : non_lockstep_mode\n            if (`ifdef E203_IRQ_NEED_SYNC) begin : need_sync\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_ext_irq_sync (\n                    .din_a(ext_irq_a),\n                    .dout(ext_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_sft_irq_sync (\n                    .din_a(sft_irq_a),\n                    .dout(sft_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_tmr_irq_sync (\n                    .din_a(tmr_irq_a),\n                    .dout(tmr_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) u_dbg_irq_sync (\n                    .din_a(dbg_irq_a),\n                    .dout(dbg_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n            end else begin : no_sync\n                assign ext_irq_r = ext_irq_a;\n                assign sft_irq_r = sft_irq_a;\n                assign tmr_irq_r = tmr_irq_a;\n                assign dbg_irq_r = dbg_irq_a;\n            end\n        end\n    end else begin : slave_mode\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n    end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 12, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  // Define internal signals\n  wire csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1;\n  wire csr_sel_nice;\n  wire nice_csr_valid;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr;\n  wire nice_csr_wr;\n  wire [31:0] nice_csr_wdata;\n  wire [31:0] nice_csr_rdata;\n\n  // Determine if the operation uses an immediate value\n  assign csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n\n  // Select operand 1 based on whether it's an immediate or register value\n  assign csr_op1 = csr_op1_is_imm ? {{27{1'b0}}, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  // Generate CSR read enable signal\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  // Generate CSR write enable signal\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  // Assign CSR index\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // Determine CSR enable signal\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  // Prepare data for CSR write operations\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  // Handle CSR output valid-ready handshake\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n  assign csr_i_ready = csr_o_ready & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  // Handle CSR output write-back data and error\n  assign csr_o_wbck_wdat = csr_sel_nice ? nice_csr_rdata : read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 12, "code": "module e203_ifu_litebpu #(\n    parameter E203_PC_SIZE = 32,\n    parameter E203_XLEN = 32,\n    parameter E203_RFIDX_WIDTH = 5\n)(\n    input clk,\n    input rst_n,\n    input [E203_PC_SIZE-1:0] pc,\n    input dec_jal,\n    input dec_jalr,\n    input dec_bxx,\n    input [E203_XLEN-1:0] dec_bjp_imm,\n    input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n    input oitf_empty,\n    input ir_empty,\n    input ir_rs1en,\n    input jalr_rs1idx_cam_irrdidx,\n    input dec_i_valid,\n    input ir_valid_clr,\n    input [E203_XLEN-1:0] rf2bpu_x1,\n    input [E203_XLEN-1:0] rf2bpu_rs1,\n    output prdt_taken,\n    output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n    output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n    output bpu_wait,\n    output bpu2rf_rs1_ena\n);\n\n    wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n    wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n    wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n    wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n    wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n    wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n    wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n    wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n    wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n    sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n    assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n    wire jalr_rs1x1_dep = (~oitf_empty) | jalr_rs1idx_cam_irrdidx;\n    assign bpu_wait = dec_jalr & ((dec_jalr_rs1x1 & jalr_rs1x1_dep) | (dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr)));\n\n    assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n    assign prdt_pc_add_op1 = ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n                           | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n                           | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n                           | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n    assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 5, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  wire oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  assign dis_ready = !oitf_full;\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= oitf_rdidx[ret_ptr_r];\n      ret_pc <= oitf_pc[ret_ptr_r];\n      ret_rdwen <= oitf_rdwen[ret_ptr_r];\n      ret_rdfpu <= oitf_rdfpu[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = disp_i_rs1en && (disp_i_rs1idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r];\n  assign oitfrd_match_disprs2 = disp_i_rs2en && (disp_i_rs2idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r];\n  assign oitfrd_match_disprs3 = disp_i_rs3en && (disp_i_rs3idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r];\n  assign oitfrd_match_disprd = disp_i_rdwen && (disp_i_rdidx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 7, "code": "module e203_ifu_ifetch (\n  input  wire                     clk,\n  input  wire                     rst_n,\n\n  output wire                     ifu_req_valid,\n  input  wire                     ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0]  ifu_req_pc,\n  output wire                     ifu_req_seq,\n  output wire                     ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0]  ifu_req_last_pc,\n\n  input  wire                     ifu_rsp_valid,\n  output wire                     ifu_rsp_ready,\n  input  wire                     ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire                     pipe_flush_req,\n  output wire                     pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]    ifu_o_pc,\n  output wire                     ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire                     ifu_o_prdt_taken,\n  output wire                     ifu_o_misalgn,\n  output wire                     ifu_o_buserr,\n  output wire                     ifu_o_muldiv_b2b,\n  output wire                     ifu_o_valid,\n  input  wire                     ifu_o_ready,\n\n  input  wire                     ifu_halt_req,\n  output wire                     ifu_halt_ack,\n\n  input  wire                     oitf_empty,\n  input  wire [E203_XLEN-1:0]     rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]     rf2ifu_rs1,\n  input  wire                     dec2ifu_rs1en,\n  input  wire                     dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire                     dec2ifu_mulhsu,\n  input  wire                     dec2ifu_div,\n  input  wire                     dec2ifu_rem,\n  input  wire                     dec2ifu_divu,\n  input  wire                     dec2ifu_remu\n);\n\n  // Basic handshake signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (1'b0, reset_flag_r, clk, rst_n);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (reset_req_ena, reset_req_nxt, reset_req_r, clk, rst_n);\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (halt_ack_ena, halt_ack_nxt, halt_ack_r, clk, rst_n);\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (dly_flush_ena, dly_flush_nxt, dly_flush_r, clk, rst_n);\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR (Instruction Register) control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (ir_valid_ena, ir_valid_nxt, ir_valid_r, clk, rst_n);\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r, clk, rst_n);\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (ir_valid_set, ifu_err_nxt, ifu_err_r, clk, rst_n);\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (ir_valid_set, prdt_taken, ifu_prdt_taken_r, clk, rst_n);\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r, clk, rst_n);\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r_hi, clk, rst_n);\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (ir_lo_ena, ifu_ir_nxt[15:0], ifu_ir_r_lo, clk, rst_n);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r, clk, rst_n);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r, clk, rst_n);\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n                  dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (pc_ena, pc_nxt, pc_r, clk, rst_n);\n\n  wire inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (out_flag_ena, out_flag_nxt, out_flag_r, clk, rst_n);\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (pc_newpend_ena, pc_newpend_nxt, pc_newpend_r, clk, rst_n);\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 20, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n  `endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  `ifdef E203_HAS_ITCM\n  // ITCM clock control\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itcm_active_r <= 1'b0;\n    end else begin\n      itcm_active_r <= itcm_active;\n    end\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  // DTCM clock control\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dtcm_active_r <= 1'b0;\n    end else begin\n      dtcm_active_r <= dtcm_active;\n    end\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n  `endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 11, "code": "module e203_exu_alu_dpath (\n  input  wire                  alu_req_alu,\n  input  wire                  alu_req_alu_add,\n  input  wire                  alu_req_alu_sub,\n  input  wire                  alu_req_alu_xor,\n  input  wire                  alu_req_alu_sll,\n  input  wire                  alu_req_alu_srl,\n  input  wire                  alu_req_alu_sra,\n  input  wire                  alu_req_alu_or,\n  input  wire                  alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op2,\n\n  input  wire                  bjp_req_alu,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n\n  input  wire                  agu_req_alu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op2,\n\n  input  wire                  muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                  muldiv_req_alu_add,\n  input  wire                  muldiv_req_alu_sub,\n\n  input  wire                  muldiv_sbf_0_ena,\n  input  wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire                  muldiv_sbf_1_ena,\n  input  wire [32:0]           muldiv_sbf_1_nxt,\n\n  input  wire                  clk,\n  input  wire                  rst_n,\n\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  output wire                  bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n\n  output wire [32:0]           muldiv_sbf_0_r,\n  output wire [32:0]           muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_res;\n  assign alu_res = (alu_req_alu_add) ? (alu_req_alu_op1 + alu_req_alu_op2) :\n                   (alu_req_alu_sub) ? (alu_req_alu_op1 - alu_req_alu_op2) :\n                   (alu_req_alu_xor) ? (alu_req_alu_op1 ^ alu_req_alu_op2) :\n                   (alu_req_alu_sll) ? (alu_req_alu_op1 << alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_srl) ? (alu_req_alu_op1 >> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_sra) ? ($signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_or)  ? (alu_req_alu_op1 | alu_req_alu_op2) :\n                   (alu_req_alu_and) ? (alu_req_alu_op1 & alu_req_alu_op2) :\n                   {E203_XLEN{1'b0}};\n\n  assign alu_req_alu_res = alu_res;\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res;\n  assign bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_res;\n  assign agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  assign muldiv_res = (muldiv_req_alu_add) ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                      (muldiv_req_alu_sub) ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                      {E203_ALU_ADDER_WIDTH{1'b0}};\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 11, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n`include \"e203_defines.v\"\n\ngenerate\n  if (MASTER) begin : master_mode\n    `ifdef E203_HAS_LOCKSTEP\n      // Lockstep mode: No operation\n    `else\n      `ifdef E203_IRQ_NEED_SYNC\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) ext_irq_sync (\n          .din_a(ext_irq_a),\n          .dout(ext_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) sft_irq_sync (\n          .din_a(sft_irq_a),\n          .dout(sft_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) tmr_irq_sync (\n          .din_a(tmr_irq_a),\n          .dout(tmr_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) dbg_irq_sync (\n          .din_a(dbg_irq_a),\n          .dout(dbg_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n      `else\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n      `endif\n    `endif\n  end else begin : slave_mode\n    assign ext_irq_r = ext_irq_a;\n    assign sft_irq_r = sft_irq_a;\n    assign tmr_irq_r = tmr_irq_a;\n    assign dbg_irq_r = dbg_irq_a;\n  end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 12, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include the configuration definitions\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // Lockstep mode: No operations performed\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          // Synchronization needed\n          sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_ext_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_sft_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_tmr_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_dbg_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // No synchronization needed, pass-through\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      // Slave mode: Signal pass-through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 12, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]          muldiv_sbf_0_r,\n  output wire [32:0]          muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 : \n                                 bjp_req_alu ? bjp_req_alu_op1 : \n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 muldiv_req_alu ? muldiv_req_alu_op1[E203_XLEN-1:0] : {E203_XLEN{1'b0}};\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 : \n                                 bjp_req_alu ? bjp_req_alu_op2 : \n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 muldiv_req_alu ? muldiv_req_alu_op2[E203_XLEN-1:0] : {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] add_res = alu_op1 + alu_op2;\n  wire [E203_XLEN-1:0] sub_res = alu_op1 - alu_op2;\n  wire [E203_XLEN-1:0] xor_res = alu_op1 ^ alu_op2;\n  wire [E203_XLEN-1:0] or_res  = alu_op1 | alu_op2;\n  wire [E203_XLEN-1:0] and_res = alu_op1 & alu_op2;\n  wire [E203_XLEN-1:0] sll_res = alu_op1 << alu_op2[4:0];\n  wire [E203_XLEN-1:0] srl_res = alu_op1 >> alu_op2[4:0];\n  wire [E203_XLEN-1:0] sra_res = $signed(alu_op1) >>> alu_op2[4:0];\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & add_res) |\n                           ({E203_XLEN{alu_req_alu_sub}} & sub_res) |\n                           ({E203_XLEN{alu_req_alu_xor}} & xor_res) |\n                           ({E203_XLEN{alu_req_alu_or}}  & or_res)  |\n                           ({E203_XLEN{alu_req_alu_and}} & and_res) |\n                           ({E203_XLEN{alu_req_alu_sll}} & sll_res) |\n                           ({E203_XLEN{alu_req_alu_srl}} & srl_res) |\n                           ({E203_XLEN{alu_req_alu_sra}} & sra_res);\n\n  assign bjp_req_alu_add_res = add_res;\n  assign bjp_req_alu_cmp_res = (alu_op1 == alu_op2);\n\n  assign agu_req_alu_res = add_res;\n\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = (muldiv_req_alu_add ? muldiv_add_res : muldiv_sub_res);\n\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden (muldiv_sbf_0_ena),\n    .dnxt (muldiv_sbf_0_nxt),\n    .qout (muldiv_sbf_0_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden (muldiv_sbf_1_ena),\n    .dnxt (muldiv_sbf_1_nxt),\n    .qout (muldiv_sbf_1_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 7, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] imm;\n  reg [E203_DECINFO_MULDIV_WIDTH-1:0] info;\n  reg [E203_ITAG_WIDTH-1:0] itag;\n  reg longpipe;\n  reg wbck_err;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH = 5'b00001;\n  localparam MULDIV_STATE_EXEC = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution complete */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for remainder check */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_REMD_CORR);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = wbck_err;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = op1;\n  assign muldiv_req_alu_op2 = op2;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = (state == MULDIV_STATE_EXEC);\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = {op1, op2};\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = {op1, op2};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 9, "code": "module e203_exu_nice (\n  input nice_i_xs_off,\n  input nice_i_valid,\n  output nice_i_ready,\n  input [E203_XLEN-1:0] nice_i_instr,\n  input [E203_XLEN-1:0] nice_i_rs1,\n  input [E203_XLEN-1:0] nice_i_rs2,\n  input [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output nice_o_longpipe,\n  output nice_o_valid,\n  input nice_o_ready,\n  output nice_o_itag_valid,\n  input nice_o_itag_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // NICE ready logic\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // NICE output logic\n  assign nice_o_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy & nice_o_itag_ready;\n\n  // Long pipeline indication\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // FIFO input logic\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 4, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1)\n                      & (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign lsu_wbck_i_ready = wbck_i_ready & (lsu_wbck_i_valid & (oitf_ret_ptr == lsu_wbck_i_itag));\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & (nice_longp_wbck_i_valid & (oitf_ret_ptr == nice_longp_wbck_i_itag));\n`endif\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign longp_wbck_o_valid = wbck_i_valid & oitf_ret_rdwen & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 16, "code": "module e203_exu_alu(\n  input  i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input  nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input  [31:0] nice_csr_rdata,\n  input  nice_xs_off,\n  output amo_wait,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] i_itag,\n  input  [E203_XLEN-1:0] i_rs1,\n  input  [E203_XLEN-1:0] i_rs2,\n  input  [E203_XLEN-1:0] i_imm,\n  input  [E203_DECINFO_WIDTH-1:0] i_info,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  i_pc_vld,\n  input  [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  i_rdwen,\n  input  i_ilegl,\n  input  i_buserr,\n  input  i_misalgn,\n  input  flush_req,\n  input  flush_pulse,\n  output cmt_o_valid,\n  input  cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input  wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input  nonflush_cmt_ena,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input  nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input  nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input  nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  i_nice_cmt_off_ilgl,\n  input  clk,\n  input  rst_n\n);\n\n// Module implementation goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 10, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu,\n\n  input  wire ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input  wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire ifu2biu_icb_cmd_valid,\n  input  wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_ready;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 17, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n// Instantiate submodules and connect them according to the design specification\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 8, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [31:0] cycle_counter;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] imm;\n  reg [E203_DECINFO_MULDIV_WIDTH-1:0] info;\n  reg [E203_ITAG_WIDTH-1:0] itag;\n  reg valid;\n  reg ready;\n  reg longpipe;\n  reg wbck_err;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op1;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op2;\n  reg alu_add;\n  reg alu_sub;\n  reg sbf_0_ena;\n  reg [32:0] sbf_0_nxt;\n  reg sbf_1_ena;\n  reg [32:0] sbf_1_nxt;\n\n  // State machine definitions\n  localparam MULDIV_STATE_0TH = 5'b00001;\n  localparam MULDIV_STATE_EXEC = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n      cycle_counter <= 0;\n      result <= 0;\n      op1 <= 0;\n      op2 <= 0;\n      imm <= 0;\n      info <= 0;\n      itag <= 0;\n      valid <= 0;\n      ready <= 0;\n      longpipe <= 0;\n      wbck_err <= 0;\n      alu_op1 <= 0;\n      alu_op2 <= 0;\n      alu_add <= 0;\n      alu_sub <= 0;\n      sbf_0_ena <= 0;\n      sbf_0_nxt <= 0;\n      sbf_1_ena <= 0;\n      sbf_1_nxt <= 0;\n    end else begin\n      state <= next_state;\n      if (muldiv_i_valid && muldiv_i_ready) begin\n        op1 <= muldiv_i_rs1;\n        op2 <= muldiv_i_rs2;\n        imm <= muldiv_i_imm;\n        info <= muldiv_i_info;\n        itag <= muldiv_i_itag;\n        valid <= 1;\n      end\n      if (flush_pulse) begin\n        state <= MULDIV_STATE_0TH;\n        valid <= 0;\n      end\n    end\n  end\n\n  // Next state logic\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (valid) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (cycle_counter == 16) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_i_ready = ready;\n  assign muldiv_o_valid = valid;\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = wbck_err;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = sbf_0_ena;\n  assign muldiv_sbf_0_nxt = sbf_0_nxt;\n  assign muldiv_sbf_1_ena = sbf_1_ena;\n  assign muldiv_sbf_1_nxt = sbf_1_nxt;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 17, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n\n// Internal signals and submodule instantiations would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 11, "code": "module e203_ifu (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  output wire [E203_PC_SIZE-1:0]      inspect_pc,\n  output wire                         ifu_active,\n  input  wire                         itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]      pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0]   ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]      ifu_o_pc,\n  output wire                         ifu_o_pc_vld,\n  output wire                         ifu_o_misalgn,\n  output wire                         ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs2idx,\n  output wire                         ifu_o_prdt_taken,\n  output wire                         ifu_o_muldiv_b2b,\n  output wire                         ifu_o_valid,\n  input  wire                         ifu_o_ready,\n  input  wire                         pipe_flush_req,\n  output wire                         pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire                         ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]    itcm_region_indic,\n  output wire                         ifu2itcm_icb_cmd_valid,\n  input  wire                         ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                         ifu2itcm_icb_rsp_valid,\n  output wire                         ifu2itcm_icb_rsp_ready,\n  input  wire                         ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire                         ifu2biu_icb_cmd_valid,\n  input  wire                         ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]    ifu2biu_icb_cmd_addr,\n  input  wire                         ifu2biu_icb_rsp_valid,\n  output wire                         ifu2biu_icb_rsp_ready,\n  input  wire                         ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire                         ifu_halt_req,\n  output wire                         ifu_halt_ack,\n  input  wire                         oitf_empty,\n  input  wire [E203_XLEN-1:0]         rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]         rf2ifu_rs1,\n  input  wire                         dec2ifu_rs1en,\n  input  wire                         dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]  dec2ifu_rdidx,\n  input  wire                         dec2ifu_mulhsu,\n  input  wire                         dec2ifu_div,\n  input  wire                         dec2ifu_rem,\n  input  wire                         dec2ifu_divu,\n  input  wire                         dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch submodule\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb submodule\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 12, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input  wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire ifu2biu_icb_cmd_valid,\n  input  wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_ready;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 5, "code": "module e203_exu_longpwbck (\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_wbck_need;\n  wire wbck_i_excp_need;\n  wire wbck_i_ready_cond1;\n  wire wbck_i_ready_cond2;\n\n  assign wbck_i_valid = (!oitf_empty) && (\n    (lsu_wbck_i_valid && (lsu_wbck_i_itag == oitf_ret_ptr))\n`ifdef E203_HAS_NICE\n    || (nice_longp_wbck_i_valid && (nice_longp_wbck_i_itag == oitf_ret_ptr))\n`endif\n  );\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n    || nice_longp_wbck_i_err\n`endif\n  ;\n\n  assign wbck_i_wbck_need = oitf_ret_rdwen && (!wbck_i_err);\n  assign wbck_i_excp_need = wbck_i_err;\n\n  assign wbck_i_ready_cond1 = wbck_i_wbck_need ? longp_wbck_o_ready : 1'b1;\n  assign wbck_i_ready_cond2 = wbck_i_excp_need ? longp_excp_o_ready : 1'b1;\n  assign wbck_i_ready = wbck_i_ready_cond1 && wbck_i_ready_cond2;\n\n  assign lsu_wbck_i_ready = wbck_i_ready\n`ifdef E203_HAS_NICE\n    && (!nice_longp_wbck_i_valid || (nice_longp_wbck_i_itag != oitf_ret_ptr))\n`endif\n  ;\n\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready\n    && (!lsu_wbck_i_valid || (lsu_wbck_i_itag != oitf_ret_ptr));\n`endif\n\n  assign longp_wbck_o_valid = wbck_i_valid && wbck_i_wbck_need && (!wbck_i_excp_need || longp_excp_o_ready);\n  assign longp_excp_o_valid = wbck_i_valid && wbck_i_excp_need && (!wbck_i_wbck_need || longp_wbck_o_ready);\n\n  assign longp_wbck_o_wdat = lsu_wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid && wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 6, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n\n  input  clk,\n  input  rst_n\n\n`ifdef E203_HAS_NICE\n  ,input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = lsu_wbck_i_ready\n`ifdef E203_HAS_NICE\n                      & nice_longp_wbck_i_ready\n`endif\n                      ;\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_err\n`endif\n                      ;\n\n  assign wbck_i_wdat = lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign lsu_wbck_i_ready = wbck_i_ready\n`ifdef E203_HAS_NICE\n                          & nice_longp_wbck_i_ready\n`endif\n                          ;\n\n  assign longp_wbck_o_valid = wbck_need & wbck_i_valid & (~excp_need | longp_excp_o_ready);\n  assign longp_excp_o_valid = excp_need & wbck_i_valid & (~wbck_need | longp_wbck_o_ready);\n\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_flags = 5'b0;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 7, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                     | nice_longp_wbck_i_err\n`endif\n                     ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign wbck_i_ready = (wbck_need ? longp_wbck_o_ready : 1'b1) &\n                        (excp_need ? longp_excp_o_ready : 1'b1);\n\n  assign lsu_wbck_i_ready = wbck_i_ready\n`ifdef E203_HAS_NICE\n                          & ~nice_longp_wbck_i_valid\n`endif\n                          ;\n\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready\n                                 & ~lsu_wbck_i_valid;\n`endif\n\n  assign longp_wbck_o_valid = wbck_need & wbck_i_valid & \n                              (~excp_need | longp_excp_o_ready);\n\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = excp_need & wbck_i_valid & \n                              (~wbck_need | longp_wbck_o_ready);\n\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 9, "code": "module e203_exu_disp(\n  input  wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input  oitf_empty,\n  input  amo_wait,\n  input  disp_i_valid,\n  output disp_i_ready,\n  input  disp_i_rs1x0,\n  input  disp_i_rs2x0,\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [E203_XLEN-1:0] disp_i_rs1,\n  input  [E203_XLEN-1:0] disp_i_rs2,\n  input  disp_i_rdwen,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  [E203_XLEN-1:0] disp_i_imm,\n  input  [E203_PC_SIZE-1:0] disp_i_pc,\n  input  disp_i_misalgn,\n  input  disp_i_buserr,\n  input  disp_i_ilegl,\n  output disp_o_alu_valid,\n  input  disp_o_alu_ready,\n  input  disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input  oitfrd_match_disprs1,\n  input  oitfrd_match_disprs2,\n  input  oitfrd_match_disprs3,\n  input  oitfrd_match_disprd,\n  input  [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input  disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals\n  wire disp_condition;\n  wire raw_dependency;\n  wire waw_dependency;\n  wire csr_wait;\n  wire fence_wait;\n  wire wfi_wait;\n\n  // Dependency checks\n  assign raw_dependency = (oitfrd_match_disprs1 & disp_i_rs1en) |\n                          (oitfrd_match_disprs2 & disp_i_rs2en);\n  assign waw_dependency = oitfrd_match_disprd & disp_i_rdwen;\n\n  // Dispatch conditions\n  assign csr_wait = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  assign fence_wait = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  assign wfi_wait = wfi_halt_exu_req & ~oitf_empty & ~amo_wait;\n\n  // Dispatch condition\n  assign disp_condition = disp_i_valid & ~raw_dependency & ~waw_dependency &\n                          ~csr_wait & ~fence_wait & ~wfi_wait &\n                          (disp_o_alu_ready | ~disp_o_alu_longpipe);\n\n  // ALU dispatch\n  assign disp_o_alu_valid = disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF dispatch\n  assign disp_oitf_ena = disp_condition & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\n  // Ready signal\n  assign disp_i_ready = disp_condition;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 13, "code": "`include \"e203_defines.v\"\n\nmodule e203_ifu(\n  input  clk,\n  input  rst_n,\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  input  itcm_nohold,\n  input  [E203_PC_SIZE-1:0] pc_rtvec,\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  input  ifu_o_ready,\n  input  pipe_flush_req,\n  output pipe_flush_ack,\n  input  [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  ifu2itcm_holdup,\n  input  [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output ifu2itcm_icb_cmd_valid,\n  input  ifu2itcm_icb_cmd_ready,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input  ifu2itcm_icb_rsp_err,\n  input  [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output ifu2biu_icb_cmd_valid,\n  input  ifu2biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  ifu2biu_icb_rsp_valid,\n  output ifu2biu_icb_rsp_ready,\n  input  ifu2biu_icb_rsp_err,\n  input  [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  ifu_halt_req,\n  output ifu_halt_ack,\n  input  oitf_empty,\n  input  [E203_XLEN-1:0] rf2ifu_x1,\n  input  [E203_XLEN-1:0] rf2ifu_rs1,\n  input  dec2ifu_rs1en,\n  input  dec2ifu_rden,\n  input  [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  dec2ifu_mulhsu,\n  input  dec2ifu_div,\n  input  dec2ifu_rem,\n  input  dec2ifu_divu,\n  input  dec2ifu_remu\n);\n\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  e203_ifu_ifetch u_ifetch(\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  e203_ifu_ift2icb u_ift2icb(\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n`ifdef E203_HAS_ITCM\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n`endif\n`ifdef E203_HAS_MEM_ITF\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n`endif\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n`ifdef E203_HAS_ITCM\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n`endif\n`ifdef E203_HAS_MEM_ITF\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n`endif\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 10, "code": "module e203_exu_disp (\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire raw_dep, waw_dep, csr_dep, fence_dep, wfi_dep;\n  wire alu_ready, oitf_ready, disp_ready;\n\n  // Dependency checks\n  assign raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  assign waw_dep = oitfrd_match_disprd;\n  assign csr_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  assign fence_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  assign wfi_dep = wfi_halt_exu_req & ~oitf_empty & ~amo_wait;\n\n  // ALU dispatch logic\n  assign alu_ready = disp_o_alu_ready & ~disp_o_alu_longpipe;\n  assign disp_ready = disp_i_valid & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & ~wfi_dep & alu_ready;\n\n  // Outputs\n  assign disp_i_ready = disp_ready;\n  assign disp_o_alu_valid = disp_ready;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF dispatch logic\n  assign disp_oitf_ena = disp_ready & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 13, "code": "module e203_exu_alu_csrctrl(\n  input  csr_i_valid,\n  output csr_i_ready,\n  input  [E203_XLEN-1:0] csr_i_rs1,\n  input  [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input  csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input  csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input  clk,\n  input  rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n  assign csr_rd_en = csr_i_valid & csr_rd_en_raw;\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n  assign csr_wr_en = csr_i_valid & csr_wr_en_raw;\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire csr_ena_raw = csr_o_valid & csr_o_ready;\n  assign csr_ena = csr_ena_raw;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_i_valid & csr_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 13, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal signals\n  wire [E203_XLEN-1:0] alu_res;\n  wire [E203_XLEN-1:0] bjp_add_res;\n  wire bjp_cmp_res;\n  wire [E203_XLEN-1:0] agu_res;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  reg [32:0] sbf_0_r;\n  reg [32:0] sbf_1_r;\n\n  // ALU operation logic\n  always @(*) begin\n    if (alu_req_alu) begin\n      case (1'b1)\n        alu_req_alu_add: alu_res = alu_req_alu_op1 + alu_req_alu_op2;\n        alu_req_alu_sub: alu_res = alu_req_alu_op1 - alu_req_alu_op2;\n        alu_req_alu_xor: alu_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n        alu_req_alu_sll: alu_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n        alu_req_alu_srl: alu_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n        alu_req_alu_sra: alu_res = alu_req_alu_op1 >>> alu_req_alu_op2[4:0];\n        alu_req_alu_or:  alu_res = alu_req_alu_op1 | alu_req_alu_op2;\n        alu_req_alu_and: alu_res = alu_req_alu_op1 & alu_req_alu_op2;\n        default: alu_res = {E203_XLEN{1'b0}};\n      endcase\n    end else begin\n      alu_res = {E203_XLEN{1'b0}};\n    end\n  end\n\n  // BJP operation logic\n  always @(*) begin\n    if (bjp_req_alu) begin\n      bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n      bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n    end else begin\n      bjp_add_res = {E203_XLEN{1'b0}};\n      bjp_cmp_res = 1'b0;\n    end\n  end\n\n  // AGU operation logic\n  always @(*) begin\n    if (agu_req_alu) begin\n      agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n    end else begin\n      agu_res = {E203_XLEN{1'b0}};\n    end\n  end\n\n  // MULDIV operation logic\n  always @(*) begin\n    if (muldiv_req_alu) begin\n      if (muldiv_req_alu_add) begin\n        muldiv_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n      end else if (muldiv_req_alu_sub) begin\n        muldiv_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n      end else begin\n        muldiv_res = {E203_ALU_ADDER_WIDTH{1'b0}};\n      end\n    end else begin\n      muldiv_res = {E203_ALU_ADDER_WIDTH{1'b0}};\n    end\n  end\n\n  // Shared buffer logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 33'b0;\n      sbf_1_r <= 33'b0;\n    end else begin\n      if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  // Output assignments\n  assign alu_req_alu_res = alu_res;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n  assign agu_req_alu_res = agu_res;\n  assign muldiv_req_alu_res = muldiv_res;\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 14, "code": "`include \"e203_defines.v\"\n\nmodule e203_ifu(\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  `ifdef E203_HAS_ITCM\n  input  wire ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input  wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  `endif\n  `ifdef E203_HAS_MEM_ITF\n  output wire ifu2biu_icb_cmd_valid,\n  input  wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  `endif\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_ready;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  e203_ifu_ifetch u_e203_ifu_ifetch(\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    `ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n    `endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  e203_ifu_ift2icb u_e203_ifu_ift2icb(\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 12, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  \n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  \n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  \n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n  \n  // State transition logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE & ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST & ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND & i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND) : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         state_2nd_exit_ena ? (ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         icb_state;\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass buffer implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_bypbuf_i_vld = i_ifu_rsp_valid;\n  wire ifu_rsp_bypbuf_o_rdy = ifu_rsp_ready;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_i_rdy;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(ifu_rsp_bypbuf_i_vld),\n    .i_rdy(ifu_rsp_bypbuf_i_rdy),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane operation implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) | (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) | (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq & req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup & (~itcm_nohold);\n\n  // Request feature registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same & ifu_req_lane_cross & ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same & ifu_req_lane_cross & ~ifu_req_lane_holdup) | (~ifu_req_lane_same & ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same & ~ifu_req_lane_cross & ifu_req_lane_holdup;\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover buffer implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n  wire holdup2leftover_ena = ifu_req_hsked & req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked & ifu_icb_rsp2leftover;\n  wire leftover_ena = holdup2leftover_ena | uop1st2leftover_ena;\n  wire [15:0] leftover_nxt = holdup2leftover_ena ? ifu_icb_rsp_rdata[31:16] : ifu_icb_rsp_rdata[63:48];\n  wire leftover_err_nxt = holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response generation implementation\n  wire rsp_instr_sel_leftover = icb_state == ICB_STATE_1ST & req_same_cross_holdup_r | icb_state == ICB_STATE_2ND;\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu_icb_rsp_rdata[31:0] : ifu_icb_rsp_rdata[31:0];\n  wire [31:0] rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n  wire i_ifu_rsp_valid = holdup_gen_fake_rsp_valid | ifu_icb_rsp2ir_valid;\n  wire i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err | leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB command generation implementation\n  wire ifu_icb_cmd_valid = ifu_req_hsked & ~req_need_0uop_r | req_need_2uop_r & (icb_state == ICB_STATE_1ST & ifu_icb_rsp_hsked | icb_state == ICB_STATE_WAIT2ND);\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // ICB response merge implementation\n  wire ifu_icb_rsp_err = icb_cmd2itcm_r & ifu2itcm_icb_rsp_err | icb_cmd2biu_r & ifu2biu_icb_rsp_err;\n  wire ifu_icb_rsp_valid = icb_cmd2itcm_r & ifu2itcm_icb_rsp_valid | icb_cmd2biu_r & ifu2biu_icb_rsp_valid;\n\n  // ICB request distribution implementation\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n  wire ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n  wire ifu_icb_cmd_ready = ifu_icb_cmd2itcm & ifu2itcm_icb_cmd_ready | ifu_icb_cmd2biu & ifu2biu_icb_cmd_ready_pre;\n\n  // System memory interface implementation\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 7, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input  wfi_halt_ifu_ack,\n  input  wfi_halt_exu_ack,\n  input  amo_wait,\n  input  alu_excp_i_valid,\n  input  alu_excp_i_ld,\n  input  alu_excp_i_stamo,\n  input  alu_excp_i_misalgn,\n  input  alu_excp_i_buserr,\n  input  alu_excp_i_ecall,\n  input  alu_excp_i_ebreak,\n  input  alu_excp_i_wfi,\n  input  alu_excp_i_ifu_misalgn,\n  input  alu_excp_i_ifu_buserr,\n  input  alu_excp_i_ifu_ilegl,\n  input  [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input  [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input  alu_excp_i_pc_vld,\n  input  longp_excp_i_valid,\n  input  longp_excp_i_ld,\n  input  longp_excp_i_st,\n  input  longp_excp_i_buserr,\n  input  longp_excp_i_insterr,\n  input  [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input  [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input  excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input  [E203_XLEN-1:0] csr_mtvec_r,\n  input  cmt_dret_ena,\n  input  cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input  dbg_irq_r,\n  input  [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  input  status_mie_r,\n  input  mtie_r,\n  input  msie_r,\n  input  meie_r,\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  oitf_empty,\n  input  u_mode,\n  input  s_mode,\n  input  h_mode,\n  input  m_mode,\n  output excp_active,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_flush_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire alu_excp_flush_req_wfi;\n  wire [E203_XLEN-1:0] mcause;\n  wire [E203_PC_SIZE-1:0] mepc;\n  wire [E203_ADDR_SIZE-1:0] mtval;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n\n  // WFI Handling\n  assign wfi_halt_req = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req & ~excpirq_flush_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception Handling\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_flush_req | irq_flush_req | alu_excp_flush_req;\n  assign nonalu_excpirq_flush_req_raw = dbg_mode_entry_flush_req | irq_flush_req;\n  assign excpirq_flush_add_op1 = dbg_mode_entry_flush_req ? 32'h800 : (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 32'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // mcause Register Update\n  assign mcause = (irq_flush_req) ? {1'b1, 3'b0, (sft_irq_r & msie_r) ? 3'h3 : (tmr_irq_r & mtie_r) ? 3'h7 : (ext_irq_r & meie_r) ? 3'hB : 3'h0} :\n                  (alu_excp_flush_req_ifu_misalgn) ? 32'h0 :\n                  (alu_excp_flush_req_ifu_buserr) ? 32'h1 :\n                  (alu_excp_flush_req_ifu_ilegl) ? 32'h2 :\n                  (alu_excp_flush_req_ebreak) ? 32'h3 :\n                  (alu_excp_flush_req_ld_misalgn) ? 32'h4 :\n                  (longp_excp_flush_req_ld_buserr) ? 32'h5 :\n                  (alu_excp_flush_req_stamo_misalgn) ? 32'h6 :\n                  (longp_excp_flush_req_st_buserr) ? 32'h7 :\n                  (alu_excp_flush_req_ecall & u_mode) ? 32'h8 :\n                  (alu_excp_flush_req_ecall & s_mode) ? 32'h9 :\n                  (alu_excp_flush_req_ecall & h_mode) ? 32'hA :\n                  (alu_excp_flush_req_ecall & m_mode) ? 32'hB :\n                  (longp_excp_flush_req_insterr) ? 32'h10 : 32'h0;\n\n  // mepc Register Update\n  assign mepc = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n\n  // mtval Register Update\n  assign mtval = longp_excp_flush_req ? longp_excp_i_badaddr :\n                 (alu_excp_flush_req_ebreak | alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr) ? alu_excp_i_pc :\n                 (alu_excp_flush_req_ifu_ilegl) ? alu_excp_i_instr : 32'h0;\n\n  // Exception Active Signal\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 20, "code": "module e203_dtcm_ctrl(\n  input  clk,\n  input  rst_n,\n  input  test_mode,\n  input  tcm_cgstop,\n  output dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  lsu2dtcm_icb_cmd_valid,\n  output lsu2dtcm_icb_cmd_ready,\n  input  [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  lsu2dtcm_icb_cmd_read,\n  input  [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  [3:0] lsu2dtcm_icb_cmd_wmask,\n  output lsu2dtcm_icb_rsp_valid,\n  input  lsu2dtcm_icb_rsp_ready,\n  output lsu2dtcm_icb_rsp_err,\n  output [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input  [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  ext2dtcm_icb_cmd_read,\n  input  [31:0] ext2dtcm_icb_cmd_wdata,\n  input  [3:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input  ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output dtcm_ram_cs,\n  output dtcm_ram_we,\n  output [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter instantiation\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_sirv_gnrl_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller instantiation\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sirv_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 6, "code": "module e203_exu_oitf #(\n  parameter E203_ITAG_WIDTH = 2, // Width of the instruction tag\n  parameter E203_RFIDX_WIDTH = 5, // Width of the register file index\n  parameter E203_PC_SIZE = 32 // Size of the program counter\n)(\n  output dis_ready, // Ready to accept new dispatched instructions\n  input dis_ena, // Dispatch enable signal\n  input ret_ena, // Retirement enable signal\n  output [E203_ITAG_WIDTH-1:0] dis_ptr, // Pointer for dispatch\n  output [E203_ITAG_WIDTH-1:0] ret_ptr, // Pointer for retirement\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx, // Retiring instruction's destination register index\n  output ret_rdwen, // Write enable for retiring instruction's destination register\n  output ret_rdfpu, // Retiring instruction's destination is an FPU register\n  output [E203_PC_SIZE-1:0] ret_pc, // Program counter of retiring instruction\n  input disp_i_rs1en, // Source register 1 enable for dispatched instruction\n  input disp_i_rs2en, // Source register 2 enable for dispatched instruction\n  input disp_i_rs3en, // Source register 3 enable for dispatched instruction\n  input disp_i_rdwen, // Destination register write enable for dispatched instruction\n  input disp_i_rs1fpu, // Source register 1 is an FPU register\n  input disp_i_rs2fpu, // Source register 2 is an FPU register\n  input disp_i_rs3fpu, // Source register 3 is an FPU register\n  input disp_i_rdfpu, // Destination register is an FPU register\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx, // Source register 1 index\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx, // Source register 2 index\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx, // Source register 3 index\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx, // Destination register index\n  input [E203_PC_SIZE-1:0] disp_i_pc, // Program counter of dispatched instruction\n  output oitfrd_match_disprs1, // Match for source register 1\n  output oitfrd_match_disprs2, // Match for source register 2\n  output oitfrd_match_disprs3, // Match for source register 3\n  output oitfrd_match_disprd, // Match for destination register\n  output oitf_empty, // OITF is empty\n  input clk, // Clock signal\n  input rst_n // Reset signal (active low)\n);\n\n  // Internal registers and wires\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] pc_fifo [0:E203_OITF_DEPTH-1];\n  reg rdwen_fifo [0:E203_OITF_DEPTH-1];\n  reg rdfpu_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_flag, ret_flag;\n  wire oitf_full;\n\n  // Dispatch logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdidx_fifo[dis_ptr_r] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_r] <= disp_i_pc;\n      rdwen_fifo[dis_ptr_r] <= disp_i_rdwen;\n      rdfpu_fifo[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_flag <= ~dis_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= rdidx_fifo[ret_ptr_r];\n      ret_pc <= pc_fifo[ret_ptr_r];\n      ret_rdwen <= rdwen_fifo[ret_ptr_r];\n      ret_rdfpu <= rdfpu_fifo[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_flag <= ~ret_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && rdwen_fifo[ret_ptr_r] && (disp_i_rs1idx == rdidx_fifo[ret_ptr_r]) && (disp_i_rs1fpu == rdfpu_fifo[ret_ptr_r]));\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && rdwen_fifo[ret_ptr_r] && (disp_i_rs2idx == rdidx_fifo[ret_ptr_r]) && (disp_i_rs2fpu == rdfpu_fifo[ret_ptr_r]));\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && rdwen_fifo[ret_ptr_r] && (disp_i_rs3idx == rdidx_fifo[ret_ptr_r]) && (disp_i_rs3fpu == rdfpu_fifo[ret_ptr_r]));\n  assign oitfrd_match_disprd = (disp_i_rdwen && rdwen_fifo[ret_ptr_r] && (disp_i_rdidx == rdidx_fifo[ret_ptr_r]) && (disp_i_rdfpu == rdfpu_fifo[ret_ptr_r]));\n\n  // Full and empty conditions\n  assign oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_flag != ret_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_flag == ret_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 7, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] oitf_pc [E203_OITF_DEPTH-1:0];\n  reg oitf_rdwen [E203_OITF_DEPTH-1:0];\n  reg oitf_rdfpu [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = !((dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag));\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1)) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_rdidx <= oitf_rdidx[ret_ptr_r];\n      ret_pc <= oitf_pc[ret_ptr_r];\n      ret_rdwen <= oitf_rdwen[ret_ptr_r];\n      ret_rdfpu <= oitf_rdfpu[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1)) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 6, "code": "module e203_lsu (\n  input  wire                      commit_mret,\n  input  wire                      commit_trap,\n  input  wire                      excp_active,\n  output wire                      lsu_active,\n\n  output wire                      lsu_o_valid,\n  input  wire                      lsu_o_ready,\n  output wire [XLEN-1:0]           lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0]     lsu_o_wbck_itag,\n  output wire                      lsu_o_wbck_err,\n  output wire                      lsu_o_cmt_ld,\n  output wire                      lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0]      lsu_o_cmt_badaddr,\n  output wire                      lsu_o_cmt_buserr,\n\n  input  wire                      agu_icb_cmd_valid,\n  output wire                      agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]      agu_icb_cmd_addr,\n  input  wire                      agu_icb_cmd_read,\n  input  wire [XLEN-1:0]           agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]         agu_icb_cmd_wmask,\n  input  wire                      agu_icb_cmd_lock,\n  input  wire                      agu_icb_cmd_excl,\n  input  wire [1:0]                agu_icb_cmd_size,\n  input  wire                      agu_icb_cmd_back2agu,\n  input  wire                      agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0]     agu_icb_cmd_itag,\n  output wire                      agu_icb_rsp_valid,\n  input  wire                      agu_icb_rsp_ready,\n  output wire                      agu_icb_rsp_err,\n  output wire                      agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0]           agu_icb_rsp_rdata\n\n`ifdef E203_HAS_NICE\n  ,input  wire                     nice_mem_holdup\n  ,input  wire                     nice_icb_cmd_valid,\n  output wire                      nice_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]      nice_icb_cmd_addr,\n  input  wire                      nice_icb_cmd_read,\n  input  wire [XLEN-1:0]           nice_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]         nice_icb_cmd_wmask,\n  output wire                      nice_icb_rsp_valid,\n  input  wire                      nice_icb_rsp_ready,\n  output wire                      nice_icb_rsp_err,\n  output wire [XLEN-1:0]           nice_icb_rsp_rdata\n`endif\n\n`ifdef E203_HAS_ITCM\n  ,input  wire [ADDR_SIZE-1:0]     itcm_region_indic\n`endif\n\n`ifdef E203_HAS_DTCM\n  ,input  wire [ADDR_SIZE-1:0]     dtcm_region_indic\n`endif\n\n  ,output wire                     biu_icb_cmd_valid,\n  input  wire                      biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0]      biu_icb_cmd_addr,\n  output wire                      biu_icb_cmd_read,\n  output wire [XLEN-1:0]           biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0]         biu_icb_cmd_wmask,\n  output wire                      biu_icb_cmd_lock,\n  output wire                      biu_icb_cmd_excl,\n  output wire [1:0]                biu_icb_cmd_size,\n  input  wire                      biu_icb_rsp_valid,\n  output wire                      biu_icb_rsp_ready,\n  input  wire                      biu_icb_rsp_err,\n  input  wire                      biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0]           biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 11, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire alu_disp_cond;\n  wire oitf_disp_cond;\n  wire wfi_cond;\n  wire raw_dep;\n  wire waw_dep;\n  wire csr_dep;\n  wire fence_dep;\n  wire alu_longpipe;\n\n  // ALU Dispatch Condition\n  assign alu_disp_cond = disp_i_valid & disp_o_alu_ready & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & ~wfi_cond;\n\n  // OITF Dispatch Condition\n  assign oitf_disp_cond = alu_disp_cond & disp_o_alu_longpipe & disp_oitf_ready;\n\n  // WFI Condition\n  assign wfi_cond = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\n  // RAW Dependency Check\n  assign raw_dep = (oitfrd_match_disprs1 & disp_i_rs1en) | (oitfrd_match_disprs2 & disp_i_rs2en);\n\n  // WAW Dependency Check\n  assign waw_dep = oitfrd_match_disprd & disp_i_rdwen;\n\n  // CSR Dependency Check\n  assign csr_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n\n  // Fence Dependency Check\n  assign fence_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n\n  // ALU Long Pipeline Check\n  assign alu_longpipe = disp_o_alu_longpipe;\n\n  // Dispatch Ready Signal\n  assign disp_i_ready = alu_disp_cond;\n\n  // ALU Dispatch Outputs\n  assign disp_o_alu_valid = alu_disp_cond;\n  assign disp_o_alu_rs1 = disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF Dispatch Outputs\n  assign disp_oitf_ena = oitf_disp_cond;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI Acknowledge\n  assign wfi_halt_exu_ack = wfi_cond;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 11, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for LSU control module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 12, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Decode ALU operation type\n  wire is_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  wire is_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  wire is_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  wire is_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  wire is_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  wire is_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  wire is_or  = alu_i_info[E203_DECINFO_ALU_OR];\n  wire is_and = alu_i_info[E203_DECINFO_ALU_AND];\n  wire is_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  wire is_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  wire is_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // ALU operation request signals\n  assign alu_req_alu_add = is_add;\n  assign alu_req_alu_sub = is_sub;\n  assign alu_req_alu_xor = is_xor;\n  assign alu_req_alu_sll = is_sll;\n  assign alu_req_alu_srl = is_srl;\n  assign alu_req_alu_sra = is_sra;\n  assign alu_req_alu_or  = is_or;\n  assign alu_req_alu_and = is_and;\n  assign alu_req_alu_slt = is_slt;\n  assign alu_req_alu_sltu = is_sltu;\n  assign alu_req_alu_lui = is_lui;\n\n  // Operand selection logic\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // Special instruction handling\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 18, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 9, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0]    i_pc,\n  input                        i_prdt_taken,\n  input                        i_misalgn,\n  input                        i_buserr,\n  input                        i_muldiv_b2b,\n  input                        dbg_mode,\n  output                       dec_rs1x0,\n  output                       dec_rs2x0,\n  output                       dec_rs1en,\n  output                       dec_rs2en,\n  output                       dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0]       dec_imm,\n  output [E203_PC_SIZE-1:0]    dec_pc,\n  output                       dec_misalgn,\n  output                       dec_buserr,\n  output                       dec_ilegl,\n  output                       dec_mulhsu,\n  output                       dec_mul,\n  output                       dec_div,\n  output                       dec_rem,\n  output                       dec_divu,\n  output                       dec_remu,\n  output                       dec_rv32,\n  output                       dec_bjp,\n  output                       dec_jal,\n  output                       dec_jalr,\n  output                       dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0]       dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input                       nice_xs_off,\n  output                      dec_nice,\n  output                      nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Define internal signals for instruction decoding\n  wire [6:0] opcode = i_instr[6:0];\n  wire [2:0] funct3 = i_instr[14:12];\n  wire [6:0] funct7 = i_instr[31:25];\n  wire [4:0] rs1 = i_instr[19:15];\n  wire [4:0] rs2 = i_instr[24:20];\n  wire [4:0] rd = i_instr[11:7];\n  wire [11:0] imm12 = i_instr[31:20];\n  wire [19:0] imm20 = i_instr[31:12];\n\n  // Decode instruction type and generate control signals\n  assign dec_rs1x0 = (rs1 == 5'd0);\n  assign dec_rs2x0 = (rs2 == 5'd0);\n  assign dec_rs1en = (opcode != 7'b1101111) && (opcode != 7'b1100111); // Not JAL or JALR\n  assign dec_rs2en = (opcode == 7'b0110011) || (opcode == 7'b0100011); // R-type or S-type\n  assign dec_rdwen = (opcode != 7'b0100011) && (opcode != 7'b1100011); // Not S-type or B-type\n  assign dec_rs1idx = rs1;\n  assign dec_rs2idx = rs2;\n  assign dec_rdidx = rd;\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = (opcode == 7'b0000000) || (opcode == 7'b1111111); // All-0 or All-1\n  assign dec_rv32 = 1'b1; // Assuming 32-bit instructions\n\n  // Immediate value decoding\n  assign dec_imm = (opcode == 7'b0010011 || opcode == 7'b0000011 || opcode == 7'b1100111) ? {{20{imm12[11]}}, imm12} : // I-type\n                   (opcode == 7'b0100011) ? {{20{imm12[11]}}, i_instr[31:25], i_instr[11:7]} : // S-type\n                   (opcode == 7'b1100011) ? {{19{imm12[11]}}, i_instr[31], i_instr[7], i_instr[30:25], i_instr[11:8], 1'b0} : // B-type\n                   (opcode == 7'b1101111) ? {{11{imm20[19]}}, imm20, 1'b0} : // J-type\n                   32'b0;\n\n  // Decode specific instruction types\n  assign dec_mulhsu = (opcode == 7'b0110011) && (funct7 == 7'b0000001) && (funct3 == 3'b010);\n  assign dec_mul = (opcode == 7'b0110011) && (funct7 == 7'b0000001) && (funct3 == 3'b000);\n  assign dec_div = (opcode == 7'b0110011) && (funct7 == 7'b0000001) && (funct3 == 3'b100);\n  assign dec_rem = (opcode == 7'b0110011) && (funct7 == 7'b0000001) && (funct3 == 3'b110);\n  assign dec_divu = (opcode == 7'b0110011) && (funct7 == 7'b0000001) && (funct3 == 3'b101);\n  assign dec_remu = (opcode == 7'b0110011) && (funct7 == 7'b0000001) && (funct3 == 3'b111);\n\n  // Branch and jump instructions\n  assign dec_bjp = (opcode == 7'b1101111) || (opcode == 7'b1100111) || (opcode == 7'b1100011);\n  assign dec_jal = (opcode == 7'b1101111);\n  assign dec_jalr = (opcode == 7'b1100111);\n  assign dec_bxx = (opcode == 7'b1100011);\n  assign dec_jalr_rs1idx = rs1;\n  assign dec_bjp_imm = (opcode == 7'b1101111) ? {{11{imm20[19]}}, imm20, 1'b0} : // JAL\n                       (opcode == 7'b1100111) ? {{20{imm12[11]}}, imm12} : // JALR\n                       {{19{imm12[11]}}, i_instr[31], i_instr[7], i_instr[30:25], i_instr[11:8], 1'b0}; // B-type\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = (opcode == 7'b1010101); // Example NICE instruction opcode\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 14, "code": "module e203_exu_alu_bjp(\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Request Generation\n  wire bjp_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = bjp_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_bgtu;\n  assign bjp_req_alu_add     = bjp_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Error Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 9, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input [32:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] imm;\n  reg [E203_DECINFO_MULDIV_WIDTH-1:0] info;\n  reg [E203_ITAG_WIDTH-1:0] itag;\n  reg valid;\n  reg ready;\n  reg longpipe;\n  reg wbck_err;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op1;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op2;\n  reg alu_add;\n  reg alu_sub;\n  reg sbf_0_ena;\n  reg [32:0] sbf_0_nxt;\n  reg sbf_1_ena;\n  reg [32:0] sbf_1_nxt;\n\n  // State machine for multiplier/divider operations\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= 5'b00000;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      5'b00000: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = 5'b00001;\n        end\n      end\n      5'b00001: begin\n        if (/* condition for transition to next state */) begin\n          next_state = 5'b00010;\n        end\n      end\n      5'b00010: begin\n        if (/* condition for transition to next state */) begin\n          next_state = 5'b00011;\n        end\n      end\n      5'b00011: begin\n        if (/* condition for transition to next state */) begin\n          next_state = 5'b00100;\n        end\n      end\n      5'b00100: begin\n        if (/* condition for transition to next state */) begin\n          next_state = 5'b00000;\n        end\n      end\n      default: begin\n        next_state = 5'b00000;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_i_ready = ready;\n  assign muldiv_o_valid = valid;\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = wbck_err;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = sbf_0_ena;\n  assign muldiv_sbf_0_nxt = sbf_0_nxt;\n  assign muldiv_sbf_1_ena = sbf_1_ena;\n  assign muldiv_sbf_1_nxt = sbf_1_nxt;\n\n  // Additional logic for handling operations, results, and special cases\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 14, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_pre = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n\n  assign csr_rd_en = csr_i_valid & csr_rd_en_pre;\n  assign csr_wr_en = csr_i_valid & csr_wr_en_pre;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 8, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic for exception handling\n  // ...\n\n  // WFI handling logic\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n\n  // Instantiate submodules\n  sirv_gnrl_dfflr #(.DW(1)) wfi_flag_dfflr (\n    .lden(alu_excp_i_wfi & cmt_ena),\n    .dnxt(1'b1),\n    .qout(wfi_flag),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(.DW(1)) wfi_halt_req_dfflr (\n    .lden(wfi_flag & ~dbg_mode),\n    .dnxt(1'b1),\n    .qout(wfi_halt_req),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(.DW(1)) step_req_dfflr (\n    .lden(dbg_step_r),\n    .dnxt(1'b1),\n    .qout(step_req),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Additional logic for exception and interrupt handling\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 19, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n\n`ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n`endif\n\n`ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n`endif\n\n  // Submodule interfaces\n  // e203_exu_regfile\n  input [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input wbck_dest_wen,\n  input [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n\n  // e203_exu_decode\n  input [E203_INSTR_SIZE-1:0] i_instr,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_prdt_taken,\n  input i_misalgn,\n  input i_buserr,\n  input i_muldiv_b2b,\n  input dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n\n`ifdef E203_HAS_NICE\n  input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o,\n`endif\n\n  // e203_exu_disp\n  input wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input oitf_empty,\n  input amo_wait,\n  input disp_i_valid,\n  output disp_i_ready,\n  input disp_i_rs1x0,\n  input disp_i_rs2x0,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_XLEN-1:0] disp_i_rs1,\n  input [E203_XLEN-1:0] disp_i_rs2,\n  input disp_i_rdwen,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input [E203_XLEN-1:0] disp_i_imm,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  input disp_i_misalgn,\n  input disp_i_buserr,\n  input disp_i_ilegl,\n  output disp_o_alu_valid,\n  input disp_o_alu_ready,\n  input disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input oitfrd_match_disprs1,\n  input oitfrd_match_disprs2,\n  input oitfrd_match_disprs3,\n  input oitfrd_match_disprd,\n  input [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n\n  // e203_exu_oitf\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n\n  // e203_exu_alu\n  input i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  input nice_xs_off,\n  output amo_wait,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] i_itag,\n  input [E203_XLEN-1:0] i_rs1,\n  input [E203_XLEN-1:0] i_rs2,\n  input [E203_XLEN-1:0] i_imm,\n  input [E203_DECINFO_WIDTH-1:0] i_info,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input [E203_INSTR_SIZE-1:0] i_instr,\n  input i_pc_vld,\n  input [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input i_rdwen,\n  input i_ilegl,\n  input i_buserr,\n  input i_misalgn,\n  input flush_req,\n  input flush_pulse,\n  output cmt_o_valid,\n  input cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input nonflush_cmt_ena,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input i_nice_cmt_off_ilgl,\n  input clk,\n  input rst_n,\n\n  // e203_exu_commit\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n\n  // e203_exu_csr\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n,\n\n`ifdef E203_HAS_NICE\n  output nice_xs_off,\n`endif\n\n  // e203_exu_longpwbck\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n,\n\n`ifdef E203_HAS_NICE\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err,\n`endif\n\n  // e203_exu_wbck\n  input alu_wbck_i_valid,\n  output alu_wbck_i_ready,\n  input [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input longp_wbck_i_valid,\n  output longp_wbck_i_ready,\n  input [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input [4:0] longp_wbck_i_flags,\n  input [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input longp_wbck_i_rdfpu,\n  output rf_wbck_o_ena,\n  output [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 7, "code": "module e203_lsu(\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [XLEN-1:0] nice_icb_cmd_wdata,\n  input  [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [XLEN-1:0] biu_icb_cmd_wdata,\n  output [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Internal signals and logic for the LSU module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 9, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire longp_excp_flush_req_insterr;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n  wire [E203_XLEN-1:0] mcause;\n  wire [E203_PC_SIZE-1:0] mepc;\n  wire [E203_ADDR_SIZE-1:0] mtval;\n  wire [E203_XLEN-1:0] mstatus;\n\n  // WFI Handling\n  assign wfi_flag = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_req = wfi_flag & ~wfi_halt_ifu_ack & ~wfi_halt_exu_ack;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception Handling\n  assign alu_excp_flush_req = alu_excp_i_valid & oitf_empty & (\n    alu_excp_i_misalgn | alu_excp_i_buserr | alu_excp_i_ebreak | alu_excp_i_ecall |\n    alu_excp_i_ifu_misalgn | alu_excp_i_ifu_buserr | alu_excp_i_ifu_ilegl\n  );\n\n  assign longp_excp_flush_req = longp_excp_i_valid & oitf_empty;\n\n  assign dbg_mode_entry_req = ~dbg_mode & (\n    dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r\n  );\n\n  assign irq_flush_req = oitf_empty & (\n    (sft_irq_r & msie_r) | (tmr_irq_r & mtie_r) | (ext_irq_r & meie_r)\n  );\n\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req | alu_excp_flush_req;\n\n  assign excpirq_flush_add_op1 = dbg_mode_entry_req ? 32'h800 :\n                                 (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 32'h808 :\n                                 csr_mtvec_r;\n\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // Register Updates\n  assign cmt_badaddr = longp_excp_flush_req ? longp_excp_i_badaddr :\n                       alu_excp_flush_req ? alu_excp_i_pc :\n                       32'h0;\n\n  assign cmt_epc = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n  assign cmt_cause = longp_excp_flush_req ? 32'h10 : alu_excp_i_valid ? 32'h0 : 32'h0;\n\n  assign cmt_badaddr_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_epc_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_cause_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_status_ena = longp_excp_flush_req | alu_excp_flush_req;\n\n  assign cmt_dpc = alu_excp_i_pc;\n  assign cmt_dpc_ena = dbg_mode_entry_req;\n  assign cmt_dcause = 3'b0;\n  assign cmt_dcause_ena = dbg_mode_entry_req;\n\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 20, "code": "`include \"e203_defines.v\"\n`include \"config.v\"\n\nmodule e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  `ifdef E203_HAS_CSR_NICE\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  `endif\n  `ifdef E203_HAS_NICE\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err,\n  `endif\n  // Additional signals for submodules\n  // ...\n);\n\n// Instantiate submodules here\n// ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 10, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_INSTR_SIZE-1:0] instr = i_instr;\n  wire [E203_PC_SIZE-1:0] pc = i_pc;\n\n  // Decode logic for instruction fields\n  wire [6:0] opcode = instr[6:0];\n  wire [4:0] rd = instr[11:7];\n  wire [2:0] funct3 = instr[14:12];\n  wire [4:0] rs1 = instr[19:15];\n  wire [4:0] rs2 = instr[24:20];\n  wire [6:0] funct7 = instr[31:25];\n\n  // Decode immediate values\n  wire [11:0] imm_i = instr[31:20];\n  wire [11:0] imm_s = {instr[31:25], instr[11:7]};\n  wire [11:0] imm_b = {instr[31], instr[7], instr[30:25], instr[11:8]};\n  wire [19:0] imm_u = instr[31:12];\n  wire [19:0] imm_j = {instr[31], instr[19:12], instr[20], instr[30:21]};\n\n  // Determine instruction type\n  wire is_rtype = (opcode == 7'b0110011);\n  wire is_itype = (opcode == 7'b0010011);\n  wire is_stype = (opcode == 7'b0100011);\n  wire is_sbtype = (opcode == 7'b1100011);\n  wire is_utype = (opcode == 7'b0110111) || (opcode == 7'b0010111);\n  wire is_ujtype = (opcode == 7'b1101111);\n\n  // Decode control signals\n  assign dec_rs1x0 = (rs1 == 5'b00000);\n  assign dec_rs2x0 = (rs2 == 5'b00000);\n  assign dec_rs1en = is_rtype || is_itype || is_sbtype;\n  assign dec_rs2en = is_rtype || is_stype || is_sbtype;\n  assign dec_rdwen = is_rtype || is_itype || is_utype || is_ujtype;\n\n  // Decode register indices\n  assign dec_rs1idx = rs1;\n  assign dec_rs2idx = rs2;\n  assign dec_rdidx = rd;\n\n  // Decode instruction information\n  assign dec_info = {E203_DECINFO_WIDTH{1'b0}}; // Placeholder for actual decode logic\n\n  // Decode immediate values\n  assign dec_imm = is_itype ? {{20{imm_i[11]}}, imm_i} :\n                   is_stype ? {{20{imm_s[11]}}, imm_s} :\n                   is_sbtype ? {{19{imm_b[11]}}, imm_b, 1'b0} :\n                   is_utype ? {imm_u, 12'b0} :\n                   is_ujtype ? {{11{imm_j[19]}}, imm_j, 1'b0} : {E203_XLEN{1'b0}};\n\n  // Pass through PC value\n  assign dec_pc = pc;\n\n  // Decode exception signals\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = (opcode == 7'b0000000) || (opcode == 7'b1111111);\n\n  // Decode multiply/divide signals\n  assign dec_mulhsu = (is_rtype && funct7 == 7'b0000001 && funct3 == 3'b010);\n  assign dec_mul = (is_rtype && funct7 == 7'b0000001 && funct3 == 3'b000);\n  assign dec_div = (is_rtype && funct7 == 7'b0000001 && funct3 == 3'b100);\n  assign dec_rem = (is_rtype && funct7 == 7'b0000001 && funct3 == 3'b110);\n  assign dec_divu = (is_rtype && funct7 == 7'b0000001 && funct3 == 3'b101);\n  assign dec_remu = (is_rtype && funct7 == 7'b0000001 && funct3 == 3'b111);\n\n  // Decode instruction length\n  assign dec_rv32 = 1'b1; // Assuming all instructions are 32-bit for simplicity\n\n  // Decode branch/jump signals\n  assign dec_bjp = (opcode == 7'b1101111) || (opcode == 7'b1100111) || is_sbtype;\n  assign dec_jal = (opcode == 7'b1101111);\n  assign dec_jalr = (opcode == 7'b1100111);\n  assign dec_bxx = is_sbtype;\n  assign dec_jalr_rs1idx = rs1;\n  assign dec_bjp_imm = dec_imm;\n\n`ifdef E203_HAS_NICE\n  // NICE extension signals\n  assign dec_nice = (opcode == 7'b0001011); // Assuming custom NICE opcode\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 15, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_pre = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n\n  assign csr_rd_en = csr_i_valid & csr_rd_en_pre;\n  assign csr_wr_en = csr_i_valid & csr_wr_en_pre;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  wire csr_ena_pre = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n  assign csr_ena = csr_ena_pre;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        (csr_op1 & ~read_csr_dat);\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_sel_nice ? (csr_i_valid & nice_csr_ready) : csr_i_valid;\n  assign csr_i_ready = csr_sel_nice ? (csr_o_ready & nice_csr_ready) : csr_o_ready;\n\n  wire nice_csr_valid = csr_sel_nice & csr_i_valid & csr_o_ready;\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 16, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = \n    csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n    csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n    csr_i_info[E203_DECINFO_CSR_CSRRC] ? ((~csr_op1) & read_csr_dat) :\n    {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 8, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signals and logic\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [31:16] ifu_hi_ir_r;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_hi_ir_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_lo_ir_r;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_lo_ir_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : dly_pipe_flush_req ? pc_r : ifetch_replay_req ? pc_r : bjp_req ? prdt_pc_add_op1 : ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : dly_pipe_flush_req ? 0 : ifetch_replay_req ? 0 : bjp_req ? prdt_pc_add_op2 : ifu_reset_req ? 0 : pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : bjp_req ? prdt_pc_add_op1 : ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 : bjp_req ? prdt_pc_add_op2 : ifu_reset_req ? 0 : pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal = minidec_jal;\n  wire dec_jalr = minidec_jalr;\n  wire dec_bxx = minidec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm = minidec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx = minidec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1 = rf2ifu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1 = rf2ifu_rs1;\n\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 8, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  wire nice_mem_holdup,\n  input  wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  wire nice_icb_cmd_read,\n  input  wire [XLEN-1:0] nice_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input  wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 10, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction forwarding logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_i_valid & nice_req_ready & ~nice_i_xs_off;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 10, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input [32:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [31:0] cycle_counter;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] remainder;\n  reg [E203_XLEN-1:0] quotient;\n  reg [E203_XLEN-1:0] dividend;\n  reg [E203_XLEN-1:0] divisor;\n  reg [E203_XLEN-1:0] partial_product;\n  reg [E203_XLEN-1:0] partial_remainder;\n  reg [E203_XLEN-1:0] partial_quotient;\n  reg [E203_XLEN-1:0] booth_code;\n  reg [E203_XLEN-1:0] correction;\n  reg [E203_XLEN-1:0] alu_op1;\n  reg [E203_XLEN-1:0] alu_op2;\n  reg alu_add;\n  reg alu_sub;\n  reg sbf_0_ena;\n  reg [32:0] sbf_0_nxt;\n  reg sbf_1_ena;\n  reg [32:0] sbf_1_nxt;\n\n  // FSM state definitions\n  localparam MULDIV_STATE_0TH = 5'b00001;\n  localparam MULDIV_STATE_EXEC = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // FSM state transitions and operations\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n      cycle_counter <= 0;\n      result <= 0;\n      remainder <= 0;\n      quotient <= 0;\n      dividend <= 0;\n      divisor <= 0;\n      partial_product <= 0;\n      partial_remainder <= 0;\n      partial_quotient <= 0;\n      booth_code <= 0;\n      correction <= 0;\n      alu_op1 <= 0;\n      alu_op2 <= 0;\n      alu_add <= 0;\n      alu_sub <= 0;\n      sbf_0_ena <= 0;\n      sbf_0_nxt <= 0;\n      sbf_1_ena <= 0;\n      sbf_1_nxt <= 0;\n    end else begin\n      case (state)\n        MULDIV_STATE_0TH: begin\n          if (muldiv_i_valid && !flush_pulse) begin\n            // Initialize operands and determine operation type\n            dividend <= muldiv_i_rs1;\n            divisor <= muldiv_i_rs2;\n            state <= MULDIV_STATE_EXEC;\n          end\n        end\n        MULDIV_STATE_EXEC: begin\n          // Execute multiplication or division\n          if (cycle_counter < 16) begin\n            // Booth encoding for multiplication\n            booth_code <= {dividend[1:0], 1'b0};\n            case (booth_code)\n              3'b000, 3'b111: partial_product <= 0;\n              3'b001, 3'b010: partial_product <= divisor;\n              3'b011: partial_product <= divisor << 1;\n              3'b100: partial_product <= -(divisor << 1);\n              3'b101, 3'b110: partial_product <= -divisor;\n            endcase\n            cycle_counter <= cycle_counter + 1;\n          end else if (cycle_counter < 32) begin\n            // Division using iterative subtraction\n            if (partial_remainder >= divisor) begin\n              partial_remainder <= partial_remainder - divisor;\n              partial_quotient <= partial_quotient + 1;\n            end else begin\n              partial_remainder <= partial_remainder;\n              partial_quotient <= partial_quotient;\n            end\n            cycle_counter <= cycle_counter + 1;\n          end else begin\n            state <= MULDIV_STATE_REMD_CHCK;\n          end\n        end\n        MULDIV_STATE_REMD_CHCK: begin\n          // Check remainder for correction\n          if (partial_remainder >= divisor) begin\n            correction <= 1;\n            state <= MULDIV_STATE_QUOT_CORR;\n          end else begin\n            correction <= 0;\n            state <= MULDIV_STATE_0TH;\n          end\n        end\n        MULDIV_STATE_QUOT_CORR: begin\n          // Correct quotient\n          if (correction) begin\n            quotient <= partial_quotient + 1;\n          end else begin\n            quotient <= partial_quotient;\n          end\n          state <= MULDIV_STATE_REMD_CORR;\n        end\n        MULDIV_STATE_REMD_CORR: begin\n          // Correct remainder\n          if (correction) begin\n            remainder <= partial_remainder - divisor;\n          end else begin\n            remainder <= partial_remainder;\n          end\n          state <= MULDIV_STATE_0TH;\n        end\n      endcase\n    end\n  end\n\n  // Handshake signals\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && (cycle_counter == 32);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 0;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = sbf_0_ena;\n  assign muldiv_sbf_0_nxt = sbf_0_nxt;\n  assign muldiv_sbf_1_ena = sbf_1_ena;\n  assign muldiv_sbf_1_nxt = sbf_1_nxt;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 12, "code": "module e203_exu_disp (\n  input  wire                 wfi_halt_exu_req,\n  output wire                 wfi_halt_exu_ack,\n  input  wire                 oitf_empty,\n  input  wire                 amo_wait,\n  input  wire                 disp_i_valid,\n  output wire                 disp_i_ready,\n  input  wire                 disp_i_rs1x0,\n  input  wire                 disp_i_rs2x0,\n  input  wire                 disp_i_rs1en,\n  input  wire                 disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire                 disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                 disp_i_misalgn,\n  input  wire                 disp_i_buserr,\n  input  wire                 disp_i_ilegl,\n  output wire                 disp_o_alu_valid,\n  input  wire                 disp_o_alu_ready,\n  input  wire                 disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire                 disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                 disp_o_alu_misalgn,\n  output wire                 disp_o_alu_buserr,\n  output wire                 disp_o_alu_ilegl,\n  input  wire                 oitfrd_match_disprs1,\n  input  wire                 oitfrd_match_disprs2,\n  input  wire                 oitfrd_match_disprs3,\n  input  wire                 oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                 disp_oitf_ena,\n  input  wire                 disp_oitf_ready,\n  output wire                 disp_oitf_rs1fpu,\n  output wire                 disp_oitf_rs2fpu,\n  output wire                 disp_oitf_rs3fpu,\n  output wire                 disp_oitf_rdfpu,\n  output wire                 disp_oitf_rs1en,\n  output wire                 disp_oitf_rs2en,\n  output wire                 disp_oitf_rs3en,\n  output wire                 disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Internal signals\n  wire disp_condition;\n  wire raw_dep;\n  wire waw_dep;\n  wire csr_dep;\n  wire fence_dep;\n  wire wfi_dep;\n  wire alu_ready;\n  wire oitf_ready;\n\n  // Dependency checks\n  assign raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  assign waw_dep = oitfrd_match_disprd;\n  assign csr_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  assign fence_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  assign wfi_dep = wfi_halt_exu_req & ~oitf_empty & ~amo_wait;\n\n  // ALU dispatch condition\n  assign alu_ready = disp_o_alu_ready & ~disp_o_alu_longpipe;\n  assign oitf_ready = disp_oitf_ready & disp_o_alu_longpipe;\n  assign disp_condition = disp_i_valid & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & ~wfi_dep & (alu_ready | oitf_ready);\n\n  // Dispatch to ALU\n  assign disp_o_alu_valid = disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // Dispatch to OITF\n  assign disp_oitf_ena = disp_condition & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\n  // Ready signal\n  assign disp_i_ready = disp_condition;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 13, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty | ~ir_empty) & ir_rs1en;\n  wire jalr_rs1xn_dep_ir_clr = jalr_rs1idx_cam_irrdidx & ir_valid_clr;\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  wire rs1xn_rdrf_r;\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1xn_rdrf = rs1xn_rdrf_r;\n\n  wire bpu_wait = dec_jalr & dec_jalr_rs1x1 & ~oitf_empty | dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr | jalr_rs1xn_rdrf;\n\n  wire [E203_XLEN-1:0] jalr_rs1_add_op1 = \n    ({32{dec_jalr_rs1x0}} & 32'b0) |\n    ({32{dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({32{dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  wire [E203_XLEN-1:0] bxx_add_op1 = pc;\n  wire [E203_XLEN-1:0] jal_add_op1 = pc;\n\n  wire [E203_XLEN-1:0] prdt_pc_add_op1_pre =\n    ({32{dec_bxx}} & bxx_add_op1) |\n    ({32{dec_jal}} & jal_add_op1) |\n    ({32{dec_jalr}} & jalr_rs1_add_op1);\n\n  assign prdt_pc_add_op1 = prdt_pc_add_op1_pre[E203_PC_SIZE-1:0];\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  wire bxx_imm_neg = dec_bjp_imm[E203_XLEN-1];\n  wire bxx_taken = bxx_imm_neg;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & bxx_taken);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 9, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata\n\n  `ifdef E203_HAS_NICE\n  , input  wire nice_mem_holdup\n  , input  wire nice_icb_cmd_valid\n  , output wire nice_icb_cmd_ready\n  , input  wire [ADDR_SIZE-1:0] nice_icb_cmd_addr\n  , input  wire nice_icb_cmd_read\n  , input  wire [XLEN-1:0] nice_icb_cmd_wdata\n  , input  wire [XLEN/8-1:0] nice_icb_cmd_wmask\n  , output wire nice_icb_rsp_valid\n  , input  wire nice_icb_rsp_ready\n  , output wire nice_icb_rsp_err\n  , output wire [XLEN-1:0] nice_icb_rsp_rdata\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  , input  wire [ADDR_SIZE-1:0] itcm_region_indic\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  , input  wire [ADDR_SIZE-1:0] dtcm_region_indic\n  `endif\n\n  , output wire biu_icb_cmd_valid\n  , input  wire biu_icb_cmd_ready\n  , output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr\n  , output wire biu_icb_cmd_read\n  , output wire [XLEN-1:0] biu_icb_cmd_wdata\n  , output wire [XLEN/8-1:0] biu_icb_cmd_wmask\n  , output wire biu_icb_cmd_lock\n  , output wire biu_icb_cmd_excl\n  , output wire [1:0] biu_icb_cmd_size\n  , input  wire biu_icb_rsp_valid\n  , output wire biu_icb_rsp_ready\n  , input  wire biu_icb_rsp_err\n  , input  wire biu_icb_rsp_excl_ok\n  , input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for the LSU module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 11, "code": "module e203_exu_csr (\n  input  wire         nonflush_cmt_ena, // not used\n  input  wire         csr_ena,\n  input  wire         csr_wr_en,\n  input  wire         csr_rd_en,\n  input  wire [11:0]  csr_idx,\n  output wire         csr_access_ilgl,\n  output wire         tm_stop,\n  output wire         core_cgstop,\n  output wire         tcm_cgstop,\n  output wire         itcm_nohold,\n  output wire         mdv_nob2b,\n  output wire [31:0]  read_csr_dat,\n  input  wire [31:0]  wbck_csr_dat,\n  input  wire [0:0]   core_mhartid,\n  input  wire         ext_irq_r,\n  input  wire         sft_irq_r,\n  input  wire         tmr_irq_r,\n  output wire         status_mie_r,\n  output wire         mtie_r,\n  output wire         msie_r,\n  output wire         meie_r,\n  output wire         wr_dcsr_ena,\n  output wire         wr_dpc_ena,\n  output wire         wr_dscratch_ena,\n  input  wire [31:0]  dcsr_r,\n  input  wire [31:0]  dpc_r,\n  input  wire [31:0]  dscratch_r,\n  output wire         u_mode,\n  output wire         s_mode,\n  output wire         h_mode,\n  output wire         m_mode,\n  input  wire [31:0]  cmt_badaddr,\n  input  wire         cmt_badaddr_ena,\n  input  wire [31:0]  cmt_epc,\n  input  wire         cmt_epc_ena,\n  input  wire [31:0]  cmt_cause,\n  input  wire         cmt_cause_ena,\n  input  wire         cmt_status_ena,\n  input  wire         cmt_instret_ena,\n  input  wire         cmt_mret_ena,\n  output wire [31:0]  csr_epc_r,\n  output wire [31:0]  csr_dpc_r,\n  output wire [31:0]  csr_mtvec_r,\n  input  wire         clk_aon,\n  input  wire         clk,\n  input  wire         rst_n\n);\n\n  // CSR Registers\n  reg [31:0] mstatus;\n  reg [31:0] mie;\n  reg [31:0] mip;\n  reg [31:0] mtvec;\n  reg [31:0] mscratch;\n  reg [31:0] mepc;\n  reg [31:0] mcause;\n  reg [31:0] mbadaddr;\n  reg [31:0] mcycle;\n  reg [31:0] minstret;\n  reg [31:0] mcycleh;\n  reg [31:0] minstreth;\n  reg [31:0] mvendorid;\n  reg [31:0] marchid;\n  reg [31:0] mimpid;\n  reg [31:0] mhartid;\n  reg [31:0] mcounterstop;\n\n  // Default values for read-only CSRs\n  assign mvendorid = 32'h00000214; // Vendor ID\n  assign marchid   = 32'h000000E2; // Architecture ID\n  assign mimpid    = 32'h00000001; // Implementation ID\n  assign mhartid   = {31'b0, core_mhartid}; // Hart ID\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'h00001800; // Default mstatus\n      mie     <= 32'h0;\n      mip     <= 32'h0;\n      mtvec   <= 32'h0;\n      mscratch <= 32'h0;\n      mepc    <= 32'h0;\n      mcause  <= 32'h0;\n      mbadaddr <= 32'h0;\n      mcycle  <= 32'h0;\n      minstret <= 32'h0;\n      mcycleh <= 32'h0;\n      minstreth <= 32'h0;\n      mcounterstop <= 32'h0;\n    end else if (csr_ena) begin\n      if (csr_wr_en && !csr_access_ilgl) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= {wbck_csr_dat[31:1], 1'b0};\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: mcounterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = mcounterstop;\n      default: read_csr_dat = 32'h0;\n    endcase\n  end\n\n  // CSR Access Illegal Logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR Write Enable\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR EPC and DPC Read\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Custom Control Signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 11, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input [32:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and state machine definitions\n  localparam MULDIV_STATE_0TH = 3'd0;\n  localparam MULDIV_STATE_EXEC = 3'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 3'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 3'd3;\n  localparam MULDIV_STATE_REMD_CORR = 3'd4;\n\n  reg [2:0] state;\n  reg [2:0] next_state;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution completion */) begin\n          next_state = MULDIV_STATE_0TH;\n        end else if (/* condition for remainder check */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction needed */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && /* condition for valid output */;\n  assign muldiv_o_wbck_err = 1'b0; // No exceptions for MUL/DIV\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = /* logic for operand 1 */;\n  assign muldiv_req_alu_op2 = /* logic for operand 2 */;\n  assign muldiv_req_alu_add = /* logic for add operation */;\n  assign muldiv_req_alu_sub = /* logic for subtract operation */;\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = /* logic for enabling buffer 0 */;\n  assign muldiv_sbf_0_nxt = /* logic for next value of buffer 0 */;\n  assign muldiv_sbf_1_ena = /* logic for enabling buffer 1 */;\n  assign muldiv_sbf_1_nxt = /* logic for next value of buffer 1 */;\n\n  // Output data logic\n  assign muldiv_o_wbck_wdat = /* logic for write-back data */;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 14, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // Flush mechanism\n  wire flush_block = flush_req & icb_sta_is_idle;\n\n  // State machine\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) begin\n        icb_state <= 4'd1;\n      end else if (state_1st_exit_ena) begin\n        icb_state <= 4'd4;\n      end else if (state_amoalu_exit_ena) begin\n        icb_state <= 4'd5;\n      end else if (state_amordy_exit_ena) begin\n        icb_state <= 4'd2;\n      end else if (state_wait2nd_exit_ena) begin\n        icb_state <= 4'd3;\n      end else if (state_2nd_exit_ena) begin\n        icb_state <= 4'd6;\n      end else if (state_wbck_exit_ena) begin\n        icb_state <= 4'd0;\n      end\n    end\n  end\n\n  // Additional logic for AGU operations and interface handling\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 15, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  reg unalgn_flg;\n  reg [E203_XLEN-1:0] leftover;\n\n  // State machine states\n  localparam ICB_STATE_IDLE   = 4'd0;\n  localparam ICB_STATE_1ST    = 4'd1;\n  localparam ICB_STATE_AMOALU = 4'd4;\n  localparam ICB_STATE_AMORDY = 4'd5;\n  localparam ICB_STATE_WAIT2ND = 4'd2;\n  localparam ICB_STATE_2ND    = 4'd3;\n  localparam ICB_STATE_WBCK   = 4'd6;\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else begin\n      case (icb_state)\n        ICB_STATE_IDLE: begin\n          if (agu_i_valid && oitf_empty && !flush_pulse) begin\n            icb_state <= ICB_STATE_1ST;\n          end\n        end\n        ICB_STATE_1ST: begin\n          if (agu_icb_rsp_valid || flush_pulse) begin\n            icb_state <= ICB_STATE_AMOALU;\n          end\n        end\n        ICB_STATE_AMOALU: begin\n          icb_state <= ICB_STATE_AMORDY;\n        end\n        ICB_STATE_AMORDY: begin\n          icb_state <= ICB_STATE_WAIT2ND;\n        end\n        ICB_STATE_WAIT2ND: begin\n          if (agu_icb_cmd_ready || flush_pulse) begin\n            icb_state <= ICB_STATE_2ND;\n          end\n        end\n        ICB_STATE_2ND: begin\n          if (agu_icb_rsp_valid || flush_pulse) begin\n            icb_state <= ICB_STATE_WBCK;\n          end\n        end\n        ICB_STATE_WBCK: begin\n          if (agu_o_ready || flush_pulse) begin\n            icb_state <= ICB_STATE_IDLE;\n          end\n        end\n      endcase\n    end\n  end\n\n  // AGU operation logic\n  assign agu_i_ready = (icb_state == ICB_STATE_IDLE);\n  assign agu_o_valid = (icb_state == ICB_STATE_WBCK);\n  assign agu_icb_cmd_valid = (icb_state == ICB_STATE_1ST) || (icb_state == ICB_STATE_WAIT2ND);\n  assign agu_icb_rsp_ready = (icb_state == ICB_STATE_1ST) || (icb_state == ICB_STATE_2ND);\n\n  // ALU operation control signals\n  assign agu_req_alu_op1 = agu_i_rs1;\n  assign agu_req_alu_op2 = agu_i_imm;\n  assign agu_req_alu_add = agu_i_info[E203_DECINFO_AGU_AMOADD];\n  assign agu_req_alu_and = agu_i_info[E203_DECINFO_AGU_AMOAND];\n  assign agu_req_alu_or  = agu_i_info[E203_DECINFO_AGU_AMOOR];\n  assign agu_req_alu_xor = agu_i_info[E203_DECINFO_AGU_AMOXOR];\n  assign agu_req_alu_max = agu_i_info[E203_DECINFO_AGU_AMOMAX];\n  assign agu_req_alu_min = agu_i_info[E203_DECINFO_AGU_AMOMIN];\n  assign agu_req_alu_maxu = agu_i_info[E203_DECINFO_AGU_AMOMAXU];\n  assign agu_req_alu_minu = agu_i_info[E203_DECINFO_AGU_AMOMINU];\n\n  // Exception handling\n  assign agu_o_cmt_misalgn = unalgn_flg;\n  assign agu_o_cmt_buserr = agu_icb_rsp_err;\n  assign agu_o_cmt_badaddr = agu_i_rs1 + agu_i_imm;\n\n  // Write-back data\n  assign agu_o_wbck_wdat = agu_req_alu_res;\n\n  // Shared buffer control\n  assign agu_sbf_0_ena = (icb_state == ICB_STATE_AMOALU);\n  assign agu_sbf_0_nxt = agu_icb_rsp_rdata;\n  assign agu_sbf_1_ena = (icb_state == ICB_STATE_AMORDY);\n  assign agu_sbf_1_nxt = agu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 16, "code": "module e203_exu_alu_lsuagu (\n  input  wire                          agu_i_valid,\n  output wire                          agu_i_ready,\n  input  wire [E203_XLEN-1:0]          agu_i_rs1,\n  input  wire [E203_XLEN-1:0]          agu_i_rs2,\n  input  wire [E203_XLEN-1:0]          agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0]    agu_i_itag,\n  output wire                          agu_i_longpipe,\n  input  wire                          flush_req,\n  input  wire                          flush_pulse,\n  output wire                          amo_wait,\n  input  wire                          oitf_empty,\n  output wire                          agu_o_valid,\n  input  wire                          agu_o_ready,\n  output wire [E203_XLEN-1:0]          agu_o_wbck_wdat,\n  output wire                          agu_o_wbck_err,\n  output wire                          agu_o_cmt_misalgn,\n  output wire                          agu_o_cmt_ld,\n  output wire                          agu_o_cmt_stamo,\n  output wire                          agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0]     agu_o_cmt_badaddr,\n  output wire                          agu_icb_cmd_valid,\n  input  wire                          agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]     agu_icb_cmd_addr,\n  output wire                          agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]          agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]        agu_icb_cmd_wmask,\n  output wire                          agu_icb_cmd_back2agu,\n  output wire                          agu_icb_cmd_lock,\n  output wire                          agu_icb_cmd_excl,\n  output wire [1:0]                    agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0]    agu_icb_cmd_itag,\n  output wire                          agu_icb_cmd_usign,\n  input  wire                          agu_icb_rsp_valid,\n  output wire                          agu_icb_rsp_ready,\n  input  wire                          agu_icb_rsp_err,\n  input  wire                          agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]          agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]          agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]          agu_req_alu_op2,\n  output wire                          agu_req_alu_swap,\n  output wire                          agu_req_alu_add,\n  output wire                          agu_req_alu_and,\n  output wire                          agu_req_alu_or,\n  output wire                          agu_req_alu_xor,\n  output wire                          agu_req_alu_max,\n  output wire                          agu_req_alu_min,\n  output wire                          agu_req_alu_maxu,\n  output wire                          agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]          agu_req_alu_res,\n  output wire                          agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]          agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]          agu_sbf_0_r,\n  output wire                          agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]          agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]          agu_sbf_1_r,\n  input  wire                          clk,\n  input  wire                          rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  reg unalgn_flg;\n  reg [E203_XLEN-1:0] leftover;\n\n  // State machine states\n  localparam ICB_STATE_IDLE   = 4'd0;\n  localparam ICB_STATE_1ST    = 4'd1;\n  localparam ICB_STATE_AMOALU = 4'd4;\n  localparam ICB_STATE_AMORDY = 4'd5;\n  localparam ICB_STATE_WAIT2ND = 4'd2;\n  localparam ICB_STATE_2ND    = 4'd3;\n  localparam ICB_STATE_WBCK   = 4'd6;\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && agu_i_valid && oitf_empty && ~flush_pulse;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && (agu_icb_rsp_valid || flush_pulse);\n  wire state_amoalu_exit_ena = icb_state == ICB_STATE_AMOALU && (1'b1 || flush_pulse);\n  wire state_amordy_exit_ena = icb_state == ICB_STATE_AMORDY && (1'b1 || flush_pulse);\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && (agu_icb_cmd_ready || flush_pulse);\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && (agu_icb_rsp_valid || flush_pulse);\n  wire state_wbck_exit_ena = icb_state == ICB_STATE_WBCK && (agu_o_ready || flush_pulse);\n\n  // State machine\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else begin\n      if (state_idle_exit_ena) begin\n        icb_state <= ICB_STATE_1ST;\n      end else if (state_1st_exit_ena) begin\n        icb_state <= ICB_STATE_AMOALU;\n      end else if (state_amoalu_exit_ena) begin\n        icb_state <= ICB_STATE_AMORDY;\n      end else if (state_amordy_exit_ena) begin\n        icb_state <= ICB_STATE_WAIT2ND;\n      end else if (state_wait2nd_exit_ena) begin\n        icb_state <= ICB_STATE_2ND;\n      end else if (state_2nd_exit_ena) begin\n        icb_state <= ICB_STATE_WBCK;\n      end else if (state_wbck_exit_ena) begin\n        icb_state <= ICB_STATE_IDLE;\n      end\n    end\n  end\n\n  // AGU logic\n  assign agu_i_ready = (icb_state == ICB_STATE_IDLE);\n  assign agu_o_valid = (icb_state == ICB_STATE_WBCK);\n  assign agu_icb_cmd_valid = (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n  assign agu_icb_rsp_ready = (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_2ND);\n\n  // ALU operation control\n  assign agu_req_alu_op1 = agu_i_rs1;\n  assign agu_req_alu_op2 = agu_i_imm;\n  assign agu_req_alu_add = agu_i_info[E203_DECINFO_AGU_AMOADD];\n  assign agu_req_alu_and = agu_i_info[E203_DECINFO_AGU_AMOAND];\n  assign agu_req_alu_or  = agu_i_info[E203_DECINFO_AGU_AMOOR];\n  assign agu_req_alu_xor = agu_i_info[E203_DECINFO_AGU_AMOXOR];\n  assign agu_req_alu_max = agu_i_info[E203_DECINFO_AGU_AMOMAX];\n  assign agu_req_alu_min = agu_i_info[E203_DECINFO_AGU_AMOMIN];\n  assign agu_req_alu_maxu = agu_i_info[E203_DECINFO_AGU_AMOMAXU];\n  assign agu_req_alu_minu = agu_i_info[E203_DECINFO_AGU_AMOMINU];\n\n  // Exception handling\n  assign agu_o_cmt_misalgn = unalgn_flg;\n  assign agu_o_cmt_buserr = agu_icb_rsp_err;\n  assign agu_o_cmt_badaddr = agu_icb_cmd_addr;\n\n  // Write-back data\n  assign agu_o_wbck_wdat = agu_icb_rsp_rdata;\n  assign agu_o_wbck_err = agu_icb_rsp_err;\n\n  // Shared buffer logic\n  assign agu_sbf_0_ena = (icb_state == ICB_STATE_AMOALU);\n  assign agu_sbf_0_nxt = agu_req_alu_res;\n  assign agu_sbf_1_ena = (icb_state == ICB_STATE_AMORDY);\n  assign agu_sbf_1_nxt = agu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 12, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] rs1_reg, rs2_reg;\n  reg [E203_XLEN-1:0] result;\n  reg [32:0] sbf_0, sbf_1;\n  reg muldiv_valid, muldiv_ready;\n  reg muldiv_longpipe;\n  reg muldiv_wbck_err;\n\n  // State encoding\n  localparam MULDIV_STATE_0TH       = 5'b00001;\n  localparam MULDIV_STATE_EXEC      = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution complete */) begin\n          next_state = MULDIV_STATE_0TH;\n        end else if (/* condition for remainder check */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && muldiv_valid;\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = muldiv_wbck_err;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = rs1_reg;\n  assign muldiv_req_alu_op2 = rs2_reg;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = (state == MULDIV_STATE_EXEC);\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = sbf_0;\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = sbf_1;\n\n  // Additional logic for multiplication and division operations\n  // Booth encoding, partial product accumulation, division correction, etc.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 20, "code": "`include \"e203_defines.v\"\n\nmodule e203_dtcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_DTCM_RAM_AW-1:0] addr,\n  input [E203_DTCM_RAM_MW-1:0] wem,\n  input [E203_DTCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 7, "code": "module e203_itcm_ram(\n  input  sd,\n  input  ds,\n  input  ls,\n  input  cs,\n  input  we,\n  input  [E203_ITCM_RAM_AW-1:0] addr,\n  input  [E203_ITCM_RAM_MW-1:0] wem,\n  input  [E203_ITCM_RAM_DW-1:0] din,\n  input  rst_n,\n  input  clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 13, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include the global definitions\n  `include \"e203_defines.v\"\n\n  // Generate block for master-slave mode\n  generate\n    if (MASTER) begin : master_mode\n      // Non-Lockstep Mode\n      `ifndef E203_HAS_LOCKSTEP\n        // Synchronization needed\n        `ifdef E203_IRQ_NEED_SYNC\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // No synchronization needed\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      // Signal pass-through in slave mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 12, "code": "module e203_exu_csr(\n  input  wire          nonflush_cmt_ena, // not used\n  input  wire          csr_ena,\n  input  wire          csr_wr_en,\n  input  wire          csr_rd_en,\n  input  wire [11:0]   csr_idx,\n  output wire          csr_access_ilgl,\n  output wire          tm_stop,\n  output wire          core_cgstop,\n  output wire          tcm_cgstop,\n  output wire          itcm_nohold,\n  output wire          mdv_nob2b,\n  output wire [31:0]   read_csr_dat,\n  input  wire [31:0]   wbck_csr_dat,\n  input  wire [0:0]    core_mhartid,\n  input  wire          ext_irq_r,\n  input  wire          sft_irq_r,\n  input  wire          tmr_irq_r,\n  output wire          status_mie_r,\n  output wire          mtie_r,\n  output wire          msie_r,\n  output wire          meie_r,\n  output wire          wr_dcsr_ena,\n  output wire          wr_dpc_ena,\n  output wire          wr_dscratch_ena,\n  input  wire [31:0]   dcsr_r,\n  input  wire [31:0]   dpc_r,\n  input  wire [31:0]   dscratch_r,\n  output wire          u_mode,\n  output wire          s_mode,\n  output wire          h_mode,\n  output wire          m_mode,\n  input  wire [31:0]   cmt_badaddr,\n  input  wire          cmt_badaddr_ena,\n  input  wire [31:0]   cmt_epc,\n  input  wire          cmt_epc_ena,\n  input  wire [31:0]   cmt_cause,\n  input  wire          cmt_cause_ena,\n  input  wire          cmt_status_ena,\n  input  wire          cmt_instret_ena,\n  input  wire          cmt_mret_ena,\n  output wire [31:0]   csr_epc_r,\n  output wire [31:0]   csr_dpc_r,\n  output wire [31:0]   csr_mtvec_r,\n  input  wire          clk_aon,\n  input  wire          clk,\n  input  wire          rst_n\n);\n\n  // Internal registers for CSR\n  reg [31:0] mstatus;\n  reg [31:0] mie;\n  reg [31:0] mip;\n  reg [31:0] mtvec;\n  reg [31:0] mscratch;\n  reg [31:0] mepc;\n  reg [31:0] mcause;\n  reg [31:0] mbadaddr;\n  reg [31:0] mcycle;\n  reg [31:0] minstret;\n  reg [31:0] mcycleh;\n  reg [31:0] minstreth;\n\n  // CSR Access Illegal Flag\n  assign csr_access_ilgl = 1'b0;\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = 32'h00000214; // mvendorid\n      12'hF12: read_csr_dat = 32'hE203;     // marchid\n      12'hF13: read_csr_dat = 32'h1;        // mimpid\n      12'hF14: read_csr_dat = {31'b0, core_mhartid}; // mhartid\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'b0;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mtvec <= 32'b0;\n      mscratch <= 32'b0;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      mcycle <= 32'b0;\n      minstret <= 32'b0;\n      mcycleh <= 32'b0;\n      minstreth <= 32'b0;\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat;\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat;\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB80: mcycleh <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hB82: minstreth <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Additional logic for handling interrupts, exceptions, etc.\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 8, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 15, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file definition\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for x1 register\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 9, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 17, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n  assign csr_rd_en = csr_rd_en_raw & csr_i_valid;\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n  assign csr_wr_en = csr_wr_en_raw & csr_i_valid;\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = (csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        (csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        (read_csr_dat & ~csr_op1)));\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 10, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire unused_dec_misalgn;\n  wire unused_dec_buserr;\n  wire unused_dec_ilegl;\n  wire unused_dec_rs1x0;\n  wire unused_dec_rs2x0;\n  wire unused_dec_rdwen;\n  wire [E203_RFIDX_WIDTH-1:0] unused_dec_rdidx;\n  wire unused_dec_info;\n  wire unused_dec_imm;\n  wire unused_dec_pc;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(unused_dec_misalgn),\n    .dec_buserr(unused_dec_buserr),\n    .dec_ilegl(unused_dec_ilegl),\n    .dec_rs1x0(unused_dec_rs1x0),\n    .dec_rs2x0(unused_dec_rs2x0),\n    .dec_rdwen(unused_dec_rdwen),\n    .dec_rdidx(unused_dec_rdidx),\n    .dec_info(unused_dec_info),\n    .dec_imm(unused_dec_imm),\n    .dec_pc(unused_dec_pc)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 10, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic for exception handling, WFI handling, and pipeline flushing\n  // would be implemented here based on the specification provided.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 14, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                    cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_bjp ? cmt_i_imm : (cmt_i_rv32 ? 32'h4 : 32'h2);\n\n  generate\n    if (`E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n                                (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n                                (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n                                (cmt_i_pc + cmt_i_imm) :\n                                cmt_i_dret ? csr_dpc_r : csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 11, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic for exception handling\n  // ...\n\n  // WFI Handling\n  wire wfi_req = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  wire wfi_ack = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_req & ~wfi_ack;\n  assign wfi_halt_exu_req = wfi_req & ~wfi_ack;\n  assign core_wfi = wfi_ack;\n\n  // Exception and Interrupt Handling\n  // ...\n\n  // Flush Logic\n  // ...\n\n  // Register Update Logic\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 11, "code": "module e203_exu_nice (\n  input  wire nice_i_xs_off,\n  input  wire nice_i_valid,\n  output wire nice_i_ready,\n  input  wire [E203_XLEN-1:0] nice_i_instr,\n  input  wire [E203_XLEN-1:0] nice_i_rs1,\n  input  wire [E203_XLEN-1:0] nice_i_rs2,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input  wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input  wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // NICE output logic\n  assign nice_o_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy & nice_o_itag_ready;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // FIFO input logic\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n\n  // FIFO output logic\n  assign fifo_o_rdy = nice_rsp_multicyc_ready & nice_o_itag_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 15, "code": "module e203_exu_commit(\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire nonalu_excpirq_flush_req_raw;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire brchmis_flush_req;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_pc;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire flush_req;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(excpirq_flush_add_op1),\n    .excpirq_flush_add_op2(excpirq_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(brchmis_flush_add_op1),\n    .brchmis_flush_add_op2(brchmis_flush_add_op2),\n    .brchmis_flush_pc(brchmis_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & flush_req;\n  assign flush_req = pipe_flush_req;\n\n  // PC computation\n  assign pipe_flush_add_op1 = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_add_op1;\n  assign pipe_flush_add_op2 = excpirq_flush_req ? excpirq_flush_add_op2 : brchmis_flush_add_op2;\n\n  // Timing boost option\n  `ifdef E203_TIMING_BOOST\n    assign pipe_flush_pc = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_pc;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 12, "code": "module e203_exu_nice (\n  input  wire        nice_i_xs_off,\n  input  wire        nice_i_valid,\n  output wire        nice_i_ready,\n  input  wire [31:0] nice_i_instr,\n  input  wire [31:0] nice_i_rs1,\n  input  wire [31:0] nice_i_rs2,\n  input  wire [1:0]  nice_i_itag,\n  output wire        nice_o_longpipe,\n  output wire        nice_o_valid,\n  input  wire        nice_o_ready,\n  output wire        nice_o_itag_valid,\n  input  wire        nice_o_itag_ready,\n  output wire [1:0]  nice_o_itag,\n  input  wire        nice_rsp_multicyc_valid,\n  output wire        nice_rsp_multicyc_ready,\n  output wire        nice_req_valid,\n  input  wire        nice_req_ready,\n  output wire [31:0] nice_req_instr,\n  output wire [31:0] nice_req_rs1,\n  output wire [31:0] nice_req_rs2,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [1:0] fifo_o_dat;\n\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(2)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n\n  assign nice_o_valid = fifo_o_vld;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  assign fifo_o_rdy = nice_o_itag_ready & nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 13, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Decode ALU operation type\n  wire op_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  wire op_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  wire op_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  wire op_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  wire op_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  wire op_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  wire op_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  wire op_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  wire op_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  wire op_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  wire op_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_req_alu_add  = op_add;\n  assign alu_req_alu_sub  = op_sub;\n  assign alu_req_alu_xor  = op_xor;\n  assign alu_req_alu_sll  = op_sll;\n  assign alu_req_alu_srl  = op_srl;\n  assign alu_req_alu_sra  = op_sra;\n  assign alu_req_alu_or   = op_or;\n  assign alu_req_alu_and  = op_and;\n  assign alu_req_alu_slt  = op_slt;\n  assign alu_req_alu_sltu = op_sltu;\n  assign alu_req_alu_lui  = op_lui;\n\n  // Operand selection\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // Special instructions\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error signal for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result from shared data path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 9, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 14, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // ALU operation type generation\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Special instructions\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result retrieval\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 13, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  // State Machine Registers\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n\n  // State Transition Logic\n  always @(*) begin\n    icb_state_nxt = icb_state;\n    case (icb_state)\n      ICB_STATE_IDLE: if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n      ICB_STATE_1ST: if (ifu_icb_rsp_hsked) begin\n        if (req_need_2uop_r && !ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_WAIT2ND;\n        else if (req_need_2uop_r && ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_WAIT2ND: if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n      ICB_STATE_2ND: if (i_ifu_rsp_hsked) begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n    endcase\n  end\n\n  // State Update Control\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n  sirv_gnrl_dfflr #(2) icb_state_dfflr(icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire i_ifu_rsp_valid, i_ifu_rsp_ready;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  assign ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup && (~itcm_nohold);\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && !ifu_req_lane_holdup) || (!ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && !ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= (icb_cmd2itcm_r) ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n      leftover_err_r <= (holdup2leftover_ena) ? 1'b0 : ifu_icb_rsp_err;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_data = rsp_instr_sel_leftover ? {ifu_icb_rsp_rdata_lsb16, leftover_r} : ifu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && !req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = (icb_addr_sel_1stnxtalgn) ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ADDR_SIZE-1:ITCM_ADDR_WIDTH] == ITCM_BASE_REGION);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = (icb_cmd2itcm_r) ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 13, "code": "module e203_exu_csr(\n  input  wire                      nonflush_cmt_ena, // not used\n  input  wire                      csr_ena,\n  input  wire                      csr_wr_en,\n  input  wire                      csr_rd_en,\n  input  wire [11:0]               csr_idx,\n  output wire                      csr_access_ilgl,\n  output wire                      tm_stop,\n  output wire                      core_cgstop,\n  output wire                      tcm_cgstop,\n  output wire                      itcm_nohold,\n  output wire                      mdv_nob2b,\n  output wire [E203_XLEN-1:0]      read_csr_dat,\n  input  wire [E203_XLEN-1:0]      wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire                      ext_irq_r,\n  input  wire                      sft_irq_r,\n  input  wire                      tmr_irq_r,\n  output wire                      status_mie_r,\n  output wire                      mtie_r,\n  output wire                      msie_r,\n  output wire                      meie_r,\n  output wire                      wr_dcsr_ena,\n  output wire                      wr_dpc_ena,\n  output wire                      wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0]      dcsr_r,\n  input  wire [E203_PC_SIZE-1:0]   dpc_r,\n  input  wire [E203_XLEN-1:0]      dscratch_r,\n  output wire                      u_mode,\n  output wire                      s_mode,\n  output wire                      h_mode,\n  output wire                      m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire                      cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0]   cmt_epc,\n  input  wire                      cmt_epc_ena,\n  input  wire [E203_XLEN-1:0]      cmt_cause,\n  input  wire                      cmt_cause_ena,\n  input  wire                      cmt_status_ena,\n  input  wire                      cmt_instret_ena,\n  input  wire                      cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0]   csr_epc_r,\n  output wire [E203_PC_SIZE-1:0]   csr_dpc_r,\n  output wire [E203_XLEN-1:0]      csr_mtvec_r,\n  input  wire                      clk_aon,\n  input  wire                      clk,\n  input  wire                      rst_n\n  `ifdef E203_HAS_NICE\n  , output wire                    nice_xs_off\n  `endif\n);\n\n  // CSR Access Illegal Flag\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Privilege Mode Indicators\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n\n  // CSR Read Data\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h301: read_csr_dat = misa;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      misa <= {E203_XLEN{1'b0}};\n      mvendorid <= 536;\n      marchid <= \"E203\";\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'h301: misa <= wbck_csr_dat;\n        default: ;\n      endcase\n    end\n  end\n\n  // CSR Update Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n    end else begin\n      if (cmt_epc_ena) begin\n        mepc <= cmt_epc;\n      end\n      if (cmt_cause_ena) begin\n        mcause <= cmt_cause;\n      end\n      if (cmt_badaddr_ena) begin\n        mbadaddr <= cmt_badaddr;\n      end\n    end\n  end\n\n  // Output Assignments\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = csr_ena && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = csr_ena && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = csr_ena && csr_wr_en && (csr_idx == 12'h7b2);\n\n  // Custom Register Logic\n  assign tm_stop = 1'b0; // Custom logic for tm_stop\n  assign core_cgstop = 1'b0; // Custom logic for core_cgstop\n  assign tcm_cgstop = 1'b0; // Custom logic for tcm_cgstop\n  assign itcm_nohold = 1'b0; // Custom logic for itcm_nohold\n  assign mdv_nob2b = 1'b0; // Custom logic for mdv_nob2b\n\n  `ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0; // Custom logic for nice_xs_off\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 10, "code": "module e203_lsu(\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [XLEN-1:0] nice_icb_cmd_wdata,\n  input  [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [XLEN-1:0] biu_icb_cmd_wdata,\n  output [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for the LSU module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 8, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_valid;\n  reg [E203_RFIDX_WIDTH-1:0] fifo_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] fifo_pc [E203_OITF_DEPTH-1:0];\n  reg fifo_rdwen [E203_OITF_DEPTH-1:0];\n  reg fifo_rdfpu [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = !((dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag));\n  assign dis_ptr = dis_ptr_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo_valid[dis_ptr_r] <= 1'b1;\n      fifo_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      fifo_pc[dis_ptr_r] <= disp_i_pc;\n      fifo_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      fifo_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1'b1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1))\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_ptr = ret_ptr_r;\n  assign ret_rdidx = fifo_rdidx[ret_ptr_r];\n  assign ret_pc = fifo_pc[ret_ptr_r];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_r];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_r];\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      fifo_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1'b1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1))\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(fifo_valid & (fifo_rdidx == disp_i_rs1idx) & fifo_rdwen & (fifo_rdfpu == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(fifo_valid & (fifo_rdidx == disp_i_rs2idx) & fifo_rdwen & (fifo_rdfpu == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(fifo_valid & (fifo_rdidx == disp_i_rs3idx) & fifo_rdwen & (fifo_rdfpu == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(fifo_valid & (fifo_rdidx == disp_i_rdidx) & fifo_rdwen);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 9, "code": "`include \"e203_defines.v\"\n\nmodule e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] rdwen_fifo;\n  reg [E203_OITF_DEPTH-1:0] rdfpu_fifo;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] pc_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch and retire pointers\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  // OITF full and empty conditions\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  // Dispatch ready signal\n  assign dis_ready = !oitf_full;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdwen_fifo[dis_ptr_r] <= disp_i_rdwen;\n      rdfpu_fifo[dis_ptr_r] <= disp_i_rdfpu;\n      rdidx_fifo[dis_ptr_r] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_r] <= disp_i_pc;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= rdidx_fifo[ret_ptr_r];\n      ret_pc <= pc_fifo[ret_ptr_r];\n      ret_rdwen <= rdwen_fifo[ret_ptr_r];\n      ret_rdfpu <= rdfpu_fifo[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == rdidx_fifo[ret_ptr_r]) && rdwen_fifo[ret_ptr_r]);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 14, "code": "module e203_exu_alu_dpath (\n  input  wire                     alu_req_alu,\n  input  wire                     alu_req_alu_add,\n  input  wire                     alu_req_alu_sub,\n  input  wire                     alu_req_alu_xor,\n  input  wire                     alu_req_alu_sll,\n  input  wire                     alu_req_alu_srl,\n  input  wire                     alu_req_alu_sra,\n  input  wire                     alu_req_alu_or,\n  input  wire                     alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]     alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     alu_req_alu_op2,\n  input  wire                     bjp_req_alu,\n  input  wire [E203_XLEN-1:0]     bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     bjp_req_alu_op2,\n  input  wire                     agu_req_alu,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_op2,\n  input  wire                     muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                     muldiv_req_alu_add,\n  input  wire                     muldiv_req_alu_sub,\n  input  wire                     muldiv_sbf_0_ena,\n  input  wire [32:0]              muldiv_sbf_0_nxt,\n  input  wire                     muldiv_sbf_1_ena,\n  input  wire [32:0]              muldiv_sbf_1_nxt,\n  input  wire                     clk,\n  input  wire                     rst_n,\n\n  output wire [E203_XLEN-1:0]     alu_req_alu_res,\n  output wire [E203_XLEN-1:0]     bjp_req_alu_add_res,\n  output wire                     bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]     agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]              muldiv_sbf_0_r,\n  output wire [32:0]              muldiv_sbf_1_r\n);\n\n// Internal signals\nwire [E203_XLEN-1:0] alu_res;\nwire [E203_XLEN-1:0] bjp_add_res;\nwire bjp_cmp_res;\nwire [E203_XLEN-1:0] agu_res;\nwire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n\n// ALU operations\nassign alu_res = (alu_req_alu_add) ? (alu_req_alu_op1 + alu_req_alu_op2) :\n                 (alu_req_alu_sub) ? (alu_req_alu_op1 - alu_req_alu_op2) :\n                 (alu_req_alu_xor) ? (alu_req_alu_op1 ^ alu_req_alu_op2) :\n                 (alu_req_alu_sll) ? (alu_req_alu_op1 << alu_req_alu_op2[4:0]) :\n                 (alu_req_alu_srl) ? (alu_req_alu_op1 >> alu_req_alu_op2[4:0]) :\n                 (alu_req_alu_sra) ? (alu_req_alu_op1 >>> alu_req_alu_op2[4:0]) :\n                 (alu_req_alu_or)  ? (alu_req_alu_op1 | alu_req_alu_op2) :\n                 (alu_req_alu_and) ? (alu_req_alu_op1 & alu_req_alu_op2) :\n                 0;\n\n// BJP operations\nassign bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\nassign bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n// AGU operations\nassign agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n// MULDIV operations\nassign muldiv_res = (muldiv_req_alu_add) ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                    (muldiv_req_alu_sub) ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                    0;\n\n// Shared Buffer 0\nsirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n  .lden(muldiv_sbf_0_ena),\n  .dnxt(muldiv_sbf_0_nxt),\n  .qout(muldiv_sbf_0_r),\n  .clk(clk)\n);\n\n// Shared Buffer 1\nsirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n  .lden(muldiv_sbf_1_ena),\n  .dnxt(muldiv_sbf_1_nxt),\n  .qout(muldiv_sbf_1_r),\n  .clk(clk)\n);\n\n// Output assignments\nassign alu_req_alu_res = alu_res;\nassign bjp_req_alu_add_res = bjp_add_res;\nassign bjp_req_alu_cmp_res = bjp_cmp_res;\nassign agu_req_alu_res = agu_res;\nassign muldiv_req_alu_res = muldiv_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 11, "code": "module e203_lsu(\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [XLEN-1:0] nice_icb_cmd_wdata,\n  input  [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [XLEN-1:0] biu_icb_cmd_wdata,\n  output [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for the LSU module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 15, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 14, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1x1_dep = (~oitf_empty) | jalr_rs1idx_cam_irrdidx;\n  wire bpu_wait = dec_jalr & ((dec_jalr_rs1x1 & jalr_rs1x1_dep) | (dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr)));\n\n  wire [E203_PC_SIZE-1:0] jalr_op1 = \n      ({E203_PC_SIZE{dec_jalr_rs1x0}} & `E203_PC_SIZE'b0)\n    | ({E203_PC_SIZE{dec_jalr_rs1x1}} & rf2bpu_x1)\n    | ({E203_PC_SIZE{dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op1 = \n      ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n    | ({E203_PC_SIZE{dec_jalr}} & jalr_op1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 12, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata\n\n  `ifdef E203_HAS_NICE\n  , input  wire nice_mem_holdup\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  , input  wire [ADDR_SIZE-1:0] itcm_region_indic\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  , input  wire [ADDR_SIZE-1:0] dtcm_region_indic\n  `endif\n\n  // Other ICB interfaces (NICE/ITCM/DTCM/DCache/BIU)\n  // Define signals for each interface as needed\n);\n\n  // Main control logic\n  // Address routing, arbitration, write-back processing, exception handling\n  // Implement the logic based on the design document\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 15, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_dret ? csr_dpc_r : \n                                 cmt_i_mret ? csr_epc_r : \n                                 cmt_i_pc;\n\n  assign brchmis_flush_add_op2 = cmt_i_bjp & ~cmt_i_bjp_prdt ? cmt_i_imm[E203_PC_SIZE-1:0] : \n                                 cmt_i_rv32 ? 32'h4 : 32'h2;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n                              (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                              cmt_i_dret ? csr_dpc_r :\n                              csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 10, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 12, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the LSU control module would be implemented here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 11, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] rdidx;\n  wire [E203_DECINFO_WIDTH-1:0] info_bus;\n  wire [E203_XLEN-1:0] imm;\n  wire [E203_PC_SIZE-1:0] pc;\n  wire misalgn;\n  wire buserr;\n  wire ilegl;\n  wire mulhsu;\n  wire mul;\n  wire div;\n  wire rem;\n  wire divu;\n  wire remu;\n  wire rv32;\n  wire bjp;\n  wire jal;\n  wire jalr;\n  wire bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Decode logic\n  // (This is a placeholder for the actual decode logic implementation)\n  // The actual decode logic should be implemented here based on the instruction set specification.\n\n  assign dec_rs1x0 = (rs1idx == 0);\n  assign dec_rs2x0 = (rs2idx == 0);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd is enabled */;\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_rdidx = rdidx;\n  assign dec_info = info_bus;\n  assign dec_imm = imm;\n  assign dec_pc = pc;\n  assign dec_misalgn = misalgn;\n  assign dec_buserr = buserr;\n  assign dec_ilegl = ilegl;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\n  `ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if the instruction is a NICE instruction */;\n  assign nice_cmt_off_ilgl_o = /* logic to determine if the NICE instruction is illegal */;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 8, "code": "module e203_exu_longpwbck (\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_rdwen;\n  wire wbck_i_rdfpu;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire [E203_PC_SIZE-1:0] wbck_i_pc;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1)\n                      & (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n\n  assign wbck_i_rdwen = oitf_ret_rdwen;\n  assign wbck_i_rdfpu = oitf_ret_rdfpu;\n  assign wbck_i_wdat = lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                     | nice_longp_wbck_i_wdat\n`endif\n                     ;\n  assign wbck_i_rdidx = oitf_ret_rdidx;\n  assign wbck_i_itag = oitf_ret_ptr;\n  assign wbck_i_pc = oitf_ret_pc;\n\n  assign lsu_wbck_i_ready = wbck_i_ready\n`ifdef E203_HAS_NICE\n                          & ~nice_longp_wbck_i_valid\n`endif\n                          ;\n\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready\n                                 & ~lsu_wbck_i_valid;\n`endif\n\n  assign longp_wbck_o_valid = wbck_i_valid & wbck_i_ready & wbck_i_rdwen;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_flags = 5'b0;\n  assign longp_wbck_o_rdidx = wbck_i_rdidx;\n  assign longp_wbck_o_rdfpu = wbck_i_rdfpu;\n\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_ready & wbck_i_err;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = wbck_i_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 16, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire bjp_i_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei= bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_rv32  = bjp_i_info[E203_DECINFO_RV32];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_rv32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp    = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret   = bjp_i_mret;\n  assign bjp_o_cmt_dret   = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt   = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv   = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 13, "code": "module e203_exu_nice (\n  input  wire nice_i_xs_off,\n  input  wire nice_i_valid,\n  output wire nice_i_ready,\n  input  wire [E203_XLEN-1:0] nice_i_instr,\n  input  wire [E203_XLEN-1:0] nice_i_rs1,\n  input  wire [E203_XLEN-1:0] nice_i_rs2,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input  wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input  wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 9, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_valid,\n  input wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(.DW(1)) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(.DW(1)) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(.DW(1)) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(.DW(1)) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(.DW(1)) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  sirv_gnrl_dfflr #(.DW(1)) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : (dly_pipe_flush_req ? pc_r : (ifetch_replay_req ? pc_r : (bjp_req ? prdt_pc_add_op1 : (ifu_reset_req ? pc_rtvec : pc_r))));\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : (dly_pipe_flush_req ? 0 : (ifetch_replay_req ? 0 : (bjp_req ? prdt_pc_add_op2 : (ifu_reset_req ? 0 : pc_incr_ofst))));\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : (bjp_req ? prdt_pc_add_op1 : (ifu_reset_req ? pc_rtvec : pc_r));\n  assign pc_add_op2 = ifetch_replay_req ? 0 : (bjp_req ? prdt_pc_add_op2 : (ifu_reset_req ? 0 : pc_incr_ofst));\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : (dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0});\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  sirv_gnrl_dfflr #(.DW(1)) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] bpu_pc = pc_r;\n  wire bpu_dec_jal = minidec_jal;\n  wire bpu_dec_jalr = minidec_jalr;\n  wire bpu_dec_bxx = minidec_bxx;\n  wire [E203_XLEN-1:0] bpu_dec_bjp_imm = minidec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] bpu_dec_jalr_rs1idx = minidec_jalr_rs1idx;\n  wire bpu_dec_i_valid = ifu_rsp_valid;\n  wire bpu_ir_valid_clr = ir_valid_clr;\n  wire bpu_wait;\n  wire bpu_prdt_taken;\n  wire [E203_PC_SIZE-1:0] bpu_prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] bpu_prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1 = rf2ifu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1 = rf2ifu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(.DW(1)) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 15, "code": "module e203_exu_alu_dpath (\n  input  wire                  alu_req_alu,\n  input  wire                  alu_req_alu_add,\n  input  wire                  alu_req_alu_sub,\n  input  wire                  alu_req_alu_xor,\n  input  wire                  alu_req_alu_sll,\n  input  wire                  alu_req_alu_srl,\n  input  wire                  alu_req_alu_sra,\n  input  wire                  alu_req_alu_or,\n  input  wire                  alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  input  wire                  bjp_req_alu,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  input  wire                  agu_req_alu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  input  wire                  muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                  muldiv_req_alu_add,\n  input  wire                  muldiv_req_alu_sub,\n  input  wire                  muldiv_sbf_0_ena,\n  input  wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire                  muldiv_sbf_1_ena,\n  input  wire [32:0]           muldiv_sbf_1_nxt,\n  input  wire                  clk,\n  input  wire                  rst_n,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  output wire                  bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]           muldiv_sbf_0_r,\n  output wire [32:0]           muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 : \n                                 bjp_req_alu ? bjp_req_alu_op1 : \n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 muldiv_req_alu ? muldiv_req_alu_op1[E203_XLEN-1:0] : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 : \n                                 bjp_req_alu ? bjp_req_alu_op2 : \n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 muldiv_req_alu ? muldiv_req_alu_op2[E203_XLEN-1:0] : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_add_res = alu_op1 + alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_op1 - alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_op1 ^ alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_op1 << alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_op1 >> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_op1) >>> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_op1 | alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_op1 & alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  assign bjp_req_alu_add_res = alu_add_res;\n  assign bjp_req_alu_cmp_res = (alu_op1 == alu_op2);\n\n  assign agu_req_alu_res = alu_add_res;\n\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res) |\n                              ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 10, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(.DW(1)) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(.DW(1)) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(.DW(1)) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(.DW(1)) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire ir_pc_vld_set;\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n                  dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `endif\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(.DW(1)) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(.DW(1)) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset condition\n    end else begin\n      // Check ifu_req_valid signal\n      if (^ifu_req_valid === 1'bx) begin\n        $fatal(\"ifu_req_valid has X value\");\n      end\n    end\n  end\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 16, "code": "module e203_exu_alu_dpath (\n  input  wire                  alu_req_alu,\n  input  wire                  alu_req_alu_add,\n  input  wire                  alu_req_alu_sub,\n  input  wire                  alu_req_alu_xor,\n  input  wire                  alu_req_alu_sll,\n  input  wire                  alu_req_alu_srl,\n  input  wire                  alu_req_alu_sra,\n  input  wire                  alu_req_alu_or,\n  input  wire                  alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  input  wire                  bjp_req_alu,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  input  wire                  agu_req_alu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  input  wire                  muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                  muldiv_req_alu_add,\n  input  wire                  muldiv_req_alu_sub,\n  input  wire                  muldiv_sbf_0_ena,\n  input  wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire                  muldiv_sbf_1_ena,\n  input  wire [32:0]           muldiv_sbf_1_nxt,\n  input  wire                  clk,\n  input  wire                  rst_n,\n\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  output wire                  bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]           muldiv_sbf_0_r,\n  output wire [32:0]           muldiv_sbf_1_r\n);\n\n  // ALU operations\n  wire [E203_XLEN-1:0] alu_res_add = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sub = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_xor = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_or  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_and = alu_req_alu_op1 & alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sll = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_srl = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_sra = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_res_add) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_res_sub) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_res_xor) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_res_or)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_res_and) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_res_sll) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_res_srl) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_res_sra);\n\n  // BJP operations\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n\n  // AGU operations\n  wire [E203_XLEN-1:0] agu_res_add = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_res_add;\n\n  // MULDIV operations\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_add = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_sub = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = (muldiv_req_alu_add ? muldiv_res_add : muldiv_res_sub);\n\n  // Shared Buffers\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 11, "code": "module e203_ifu_ifetch (\n  input clk,\n  input rst_n,\n  output ifu_req_valid,\n  input ifu_req_ready,\n  output [E203_PC_SIZE-1:0] ifu_req_pc,\n  output ifu_req_seq,\n  output ifu_req_seq_rv32,\n  output [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input ifu_rsp_valid,\n  output ifu_rsp_ready,\n  input ifu_rsp_err,\n  input [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input pipe_flush_req,\n  output pipe_flush_ack,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  input ifu_o_ready,\n  input ifu_halt_req,\n  output ifu_halt_ack,\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_rsp_err),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : (dly_pipe_flush_req ? pc_r : (ifetch_replay_req ? pc_r : (bjp_req ? prdt_pc_add_op1 : (ifu_reset_req ? pc_rtvec : pc_r))));\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : (dly_pipe_flush_req ? 0 : (ifetch_replay_req ? 0 : (bjp_req ? prdt_pc_add_op2 : (ifu_reset_req ? 0 : pc_incr_ofst))));\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : (bjp_req ? prdt_pc_add_op1 : (ifu_reset_req ? pc_rtvec : pc_r));\n  assign pc_add_op2 = ifetch_replay_req ? 0 : (bjp_req ? prdt_pc_add_op2 : (ifu_reset_req ? 0 : pc_incr_ofst));\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : (dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0});\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 18, "code": "module e203_exu_alu (\n  input  wire                  i_valid,\n  output wire                  i_ready,\n  output wire                  i_longpipe,\n  output wire                  nice_csr_valid,\n  input  wire                  nice_csr_ready,\n  output wire [31:0]           nice_csr_addr,\n  output wire                  nice_csr_wr,\n  output wire [31:0]           nice_csr_wdata,\n  input  wire [31:0]           nice_csr_rdata,\n  input  wire                  nice_xs_off,\n  output wire                  amo_wait,\n  input  wire                  oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]  i_rs1,\n  input  wire [E203_XLEN-1:0]  i_rs2,\n  input  wire [E203_XLEN-1:0]  i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                  i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                  i_rdwen,\n  input  wire                  i_ilegl,\n  input  wire                  i_buserr,\n  input  wire                  i_misalgn,\n  input  wire                  flush_req,\n  input  wire                  flush_pulse,\n  output wire                  cmt_o_valid,\n  input  wire                  cmt_o_ready,\n  output wire                  cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]  cmt_o_imm,\n  output wire                  cmt_o_rv32,\n  output wire                  cmt_o_bjp,\n  output wire                  cmt_o_mret,\n  output wire                  cmt_o_dret,\n  output wire                  cmt_o_ecall,\n  output wire                  cmt_o_ebreak,\n  output wire                  cmt_o_fencei,\n  output wire                  cmt_o_wfi,\n  output wire                  cmt_o_ifu_misalgn,\n  output wire                  cmt_o_ifu_buserr,\n  output wire                  cmt_o_ifu_ilegl,\n  output wire                  cmt_o_bjp_prdt,\n  output wire                  cmt_o_bjp_rslv,\n  output wire                  cmt_o_misalgn,\n  output wire                  cmt_o_ld,\n  output wire                  cmt_o_stamo,\n  output wire                  cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                  wbck_o_valid,\n  input  wire                  wbck_o_ready,\n  output wire [E203_XLEN-1:0]  wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                  mdv_nob2b,\n  output wire                  csr_ena,\n  output wire                  csr_wr_en,\n  output wire                  csr_rd_en,\n  output wire [11:0]           csr_idx,\n  input  wire                  nonflush_cmt_ena,\n  input  wire                  csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]  read_csr_dat,\n  output wire [E203_XLEN-1:0]  wbck_csr_dat,\n  output wire                  agu_icb_cmd_valid,\n  input  wire                  agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                  agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]  agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                  agu_icb_cmd_lock,\n  output wire                  agu_icb_cmd_excl,\n  output wire [1:0]            agu_icb_cmd_size,\n  output wire                  agu_icb_cmd_back2agu,\n  output wire                  agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                  agu_icb_rsp_valid,\n  output wire                  agu_icb_rsp_ready,\n  input  wire                  agu_icb_rsp_err,\n  input  wire                  agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]  agu_icb_rsp_rdata,\n  output wire                  nice_req_valid,\n  input  wire                  nice_req_ready,\n  output wire [E203_XLEN-1:0]  nice_req_instr,\n  output wire [E203_XLEN-1:0]  nice_req_rs1,\n  output wire [E203_XLEN-1:0]  nice_req_rs2,\n  input  wire                  nice_rsp_multicyc_valid,\n  output wire                  nice_rsp_multicyc_ready,\n  output wire                  nice_longp_wbck_valid,\n  input  wire                  nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                  i_nice_cmt_off_ilgl,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals and logic for the e203_exu_alu module\n  // Instantiate submodules and connect them as per the design specification\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 12, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic\n  // ... (decoding logic to be implemented here)\n\n  // Assign outputs\n  assign dec_rs1x0 = (dec_rs1idx == 5'b00000);\n  assign dec_rs2x0 = (dec_rs2idx == 5'b00000);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd is written */;\n  assign dec_info = /* logic to generate dec_info */;\n  assign dec_imm = /* logic to generate immediate value */;\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = /* logic to determine if instruction is illegal */;\n  assign dec_mulhsu = /* logic to determine if instruction is mulhsu */;\n  assign dec_mul = /* logic to determine if instruction is mul */;\n  assign dec_div = /* logic to determine if instruction is div */;\n  assign dec_rem = /* logic to determine if instruction is rem */;\n  assign dec_divu = /* logic to determine if instruction is divu */;\n  assign dec_remu = /* logic to determine if instruction is remu */;\n  assign dec_rv32 = /* logic to determine if instruction is 32-bit */;\n  assign dec_bjp = /* logic to determine if instruction is branch/jump */;\n  assign dec_jal = /* logic to determine if instruction is jal */;\n  assign dec_jalr = /* logic to determine if instruction is jalr */;\n  assign dec_bxx = /* logic to determine if instruction is branch */;\n  assign dec_jalr_rs1idx = /* logic to determine jalr rs1 index */;\n  assign dec_bjp_imm = /* logic to generate branch/jump immediate */;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if instruction is NICE */;\n  assign nice_cmt_off_ilgl_o = nice_xs_off & dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 12, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Define internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(.DW(1)) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(.DW(1)) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(.DW(1)) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(.DW(1)) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR (Instruction Register) control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(.DW(1)) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(.DW(1)) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(.DW(16)) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(.DW(E203_RFIDX_WIDTH)) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(.DW(E203_PC_SIZE)) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(.DW(1)) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(.DW(1)) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx))\n    else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 9, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n\n  input  clk,\n  input  rst_n\n\n`ifdef E203_HAS_NICE\n  ,input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) &\n                        (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign lsu_wbck_i_ready = wbck_i_ready & (oitf_ret_ptr == lsu_wbck_i_itag);\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & (oitf_ret_ptr == nice_longp_wbck_i_itag);\n`endif\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_err\n`endif\n                      ;\n\n  assign wbck_i_wdat = lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign longp_wbck_o_valid = oitf_ret_rdwen & wbck_i_valid & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_err & wbck_i_valid;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 17, "code": "module e203_exu_alu_dpath (\n  input  wire                  alu_req_alu,\n  input  wire                  alu_req_alu_add,\n  input  wire                  alu_req_alu_sub,\n  input  wire                  alu_req_alu_xor,\n  input  wire                  alu_req_alu_sll,\n  input  wire                  alu_req_alu_srl,\n  input  wire                  alu_req_alu_sra,\n  input  wire                  alu_req_alu_or,\n  input  wire                  alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  input  wire                  bjp_req_alu,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  input  wire                  agu_req_alu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  input  wire                  muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                  muldiv_req_alu_add,\n  input  wire                  muldiv_req_alu_sub,\n  input  wire                  muldiv_sbf_0_ena,\n  input  wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire                  muldiv_sbf_1_ena,\n  input  wire [32:0]           muldiv_sbf_1_nxt,\n  input  wire                  clk,\n  input  wire                  rst_n,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  output wire                  bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]           muldiv_sbf_0_r,\n  output wire [32:0]           muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 : \n                                 bjp_req_alu ? bjp_req_alu_op1 : \n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 muldiv_req_alu ? muldiv_req_alu_op1[E203_XLEN-1:0] : {E203_XLEN{1'b0}};\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 : \n                                 bjp_req_alu ? bjp_req_alu_op2 : \n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 muldiv_req_alu ? muldiv_req_alu_op2[E203_XLEN-1:0] : {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_add_res = alu_op1 + alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_op1 - alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_op1 ^ alu_op2;\n  wire [E203_XLEN-1:0] alu_or_res  = alu_op1 | alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_op1 & alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_op1 << alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_op1 >> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_op1) >>> alu_op2[4:0];\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_and_res) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res);\n\n  // BJP operation logic\n  assign bjp_req_alu_add_res = alu_add_res;\n  assign bjp_req_alu_cmp_res = (alu_op1 == alu_op2);\n\n  // AGU operation logic\n  assign agu_req_alu_res = alu_add_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = muldiv_req_alu_add ? muldiv_add_res : muldiv_sub_res;\n\n  // Shared Buffer logic\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden (muldiv_sbf_0_ena),\n    .dnxt (muldiv_sbf_0_nxt),\n    .qout (muldiv_sbf_0_r),\n    .clk  (clk)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden (muldiv_sbf_1_ena),\n    .dnxt (muldiv_sbf_1_nxt),\n    .qout (muldiv_sbf_1_r),\n    .clk  (clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 13, "code": "module e203_exu_alu_muldiv (\n  input  wire                  mdv_nob2b,\n  input  wire                  muldiv_i_valid,\n  output wire                  muldiv_i_ready,\n  input  wire [E203_XLEN-1:0]  muldiv_i_rs1,\n  input  wire [E203_XLEN-1:0]  muldiv_i_rs2,\n  input  wire [E203_XLEN-1:0]  muldiv_i_imm,\n  input  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire                  muldiv_i_longpipe,\n  input  wire                  flush_pulse,\n  output wire                  muldiv_o_valid,\n  input  wire                  muldiv_o_ready,\n  output wire [E203_XLEN-1:0]  muldiv_o_wbck_wdat,\n  output wire                  muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire                  muldiv_req_alu_add,\n  output wire                  muldiv_req_alu_sub,\n  input  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire                  muldiv_sbf_0_ena,\n  output wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire [32:0]           muldiv_sbf_0_r,\n  output wire                  muldiv_sbf_1_ena,\n  output wire [32:0]           muldiv_sbf_1_nxt,\n  input  wire [32:0]           muldiv_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [31:0] cycle_counter;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] remainder;\n  reg [E203_XLEN-1:0] quotient;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] imm;\n  reg [E203_DECINFO_MULDIV_WIDTH-1:0] info;\n  reg [E203_ITAG_WIDTH-1:0] itag;\n  reg valid;\n  reg ready;\n  reg longpipe;\n  reg wbck_err;\n  reg [E203_XLEN-1:0] wbck_wdat;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op1;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op2;\n  reg alu_add;\n  reg alu_sub;\n  reg sbf_0_ena;\n  reg [32:0] sbf_0_nxt;\n  reg sbf_1_ena;\n  reg [32:0] sbf_1_nxt;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH      = 5'b00001;\n  localparam MULDIV_STATE_EXEC     = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK= 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR= 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR= 5'b10000;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (cycle_counter == 32) begin\n          if (/* condition for correction */) begin\n            next_state = MULDIV_STATE_REMD_CHCK;\n          end else begin\n            next_state = MULDIV_STATE_0TH;\n          end\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Cycle counter logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      cycle_counter <= 0;\n    end else if (state == MULDIV_STATE_EXEC) begin\n      cycle_counter <= cycle_counter + 1;\n    end else begin\n      cycle_counter <= 0;\n    end\n  end\n\n  // Output logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && (cycle_counter == 32);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = wbck_err;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = sbf_0_ena;\n  assign muldiv_sbf_0_nxt = sbf_0_nxt;\n  assign muldiv_sbf_1_ena = sbf_1_ena;\n  assign muldiv_sbf_1_nxt = sbf_1_nxt;\n\n  // Additional logic for handling operations, corrections, and special cases\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 13, "code": "module e203_exu_disp (\n  input  wire                     wfi_halt_exu_req,\n  output wire                     wfi_halt_exu_ack,\n  input  wire                     oitf_empty,\n  input  wire                     amo_wait,\n  input  wire                     disp_i_valid,\n  output wire                     disp_i_ready,\n  input  wire                     disp_i_rs1x0,\n  input  wire                     disp_i_rs2x0,\n  input  wire                     disp_i_rs1en,\n  input  wire                     disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]     disp_i_rs1,\n  input  wire [E203_XLEN-1:0]     disp_i_rs2,\n  input  wire                     disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]     disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0]  disp_i_pc,\n  input  wire                     disp_i_misalgn,\n  input  wire                     disp_i_buserr,\n  input  wire                     disp_i_ilegl,\n  output wire                     disp_o_alu_valid,\n  input  wire                     disp_o_alu_ready,\n  input  wire                     disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs2,\n  output wire                     disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]     disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0]  disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                     disp_o_alu_misalgn,\n  output wire                     disp_o_alu_buserr,\n  output wire                     disp_o_alu_ilegl,\n  input  wire                     oitfrd_match_disprs1,\n  input  wire                     oitfrd_match_disprs2,\n  input  wire                     oitfrd_match_disprs3,\n  input  wire                     oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                     disp_oitf_ena,\n  input  wire                     disp_oitf_ready,\n  output wire                     disp_oitf_rs1fpu,\n  output wire                     disp_oitf_rs2fpu,\n  output wire                     disp_oitf_rs3fpu,\n  output wire                     disp_oitf_rdfpu,\n  output wire                     disp_oitf_rs1en,\n  output wire                     disp_oitf_rs2en,\n  output wire                     disp_oitf_rs3en,\n  output wire                     disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0]  disp_oitf_pc,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals\n  wire raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  wire waw_dep = oitfrd_match_disprd;\n  wire dep = raw_dep | waw_dep;\n\n  wire csr = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n  wire fence = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE];\n  wire fencei = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire wfi = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_ALU) & disp_i_info[E203_DECINFO_ALU_WFI];\n\n  wire disp_condition = \n      (~csr | oitf_empty) &\n      (~fence | oitf_empty) &\n      (~wfi | oitf_empty) &\n      (~dep) &\n      (~disp_o_alu_longpipe | disp_oitf_ready);\n\n  assign disp_i_ready = disp_condition & disp_o_alu_ready;\n  assign disp_o_alu_valid = disp_condition & disp_i_valid;\n\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_o_alu_valid & disp_o_alu_longpipe & disp_o_alu_ready;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = oitf_empty & ~amo_wait & wfi_halt_exu_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 15, "code": "module e203_ifu (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  output wire [E203_PC_SIZE-1:0]  inspect_pc,\n  output wire                     ifu_active,\n  input  wire                     itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]  pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]  ifu_o_pc,\n  output wire                     ifu_o_pc_vld,\n  output wire                     ifu_o_misalgn,\n  output wire                     ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire                     ifu_o_prdt_taken,\n  output wire                     ifu_o_muldiv_b2b,\n  output wire                     ifu_o_valid,\n  input  wire                     ifu_o_ready,\n  input  wire                     pipe_flush_req,\n  output wire                     pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire                     ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire                     ifu2itcm_icb_cmd_valid,\n  input  wire                     ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                     ifu2itcm_icb_rsp_valid,\n  output wire                     ifu2itcm_icb_rsp_ready,\n  input  wire                     ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire                     ifu2biu_icb_cmd_valid,\n  input  wire                     ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire                     ifu2biu_icb_rsp_valid,\n  output wire                     ifu2biu_icb_rsp_ready,\n  input  wire                     ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire                     ifu_halt_req,\n  output wire                     ifu_halt_ack,\n  input  wire                     oitf_empty,\n  input  wire [E203_XLEN-1:0]     rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]     rf2ifu_rs1,\n  input  wire                     dec2ifu_rs1en,\n  input  wire                     dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire                     dec2ifu_mulhsu,\n  input  wire                     dec2ifu_div,\n  input  wire                     dec2ifu_rem,\n  input  wire                     dec2ifu_divu,\n  input  wire                     dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 10, "code": "`include \"e203_defines.v\"\n\nmodule e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [`E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [`E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [`E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [`E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [`E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [`E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [`E203_PC_SIZE-1:0] longp_excp_o_pc,\n\n  input  oitf_empty,\n  input  [`E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [`E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [`E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n\n  input  clk,\n  input  rst_n\n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [`E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [`E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [`E203_XLEN-1:0] wbck_i_wdat;\n  wire [`E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n\n`ifdef E203_HAS_NICE\n  assign wbck_i_valid = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_valid : nice_longp_wbck_i_valid;\n  assign wbck_i_wdat  = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_wdat  : nice_longp_wbck_i_wdat;\n  assign wbck_i_itag  = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_itag  : nice_longp_wbck_i_itag;\n  assign wbck_i_err   = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_err   : nice_longp_wbck_i_err;\n  assign lsu_wbck_i_ready = (oitf_ret_ptr == lsu_wbck_i_itag) ? wbck_i_ready : 1'b0;\n  assign nice_longp_wbck_i_ready = (oitf_ret_ptr == lsu_wbck_i_itag) ? 1'b0 : wbck_i_ready;\n`else\n  assign wbck_i_valid = lsu_wbck_i_valid;\n  assign wbck_i_wdat  = lsu_wbck_i_wdat;\n  assign wbck_i_itag  = lsu_wbck_i_itag;\n  assign wbck_i_err   = lsu_wbck_i_err;\n  assign lsu_wbck_i_ready = wbck_i_ready;\n`endif\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign wbck_i_ready = \n    (wbck_need ? longp_wbck_o_ready : 1'b1) &\n    (excp_need ? longp_excp_o_ready : 1'b1);\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\n  assign longp_wbck_o_valid = wbck_need & wbck_i_valid & (~excp_need | longp_excp_o_ready);\n  assign longp_wbck_o_wdat  = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = excp_need & wbck_i_valid & (~wbck_need | longp_wbck_o_ready);\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 14, "code": "module e203_exu_csr (\n  input  wire nonflush_cmt_ena, // not used\n  input  wire csr_ena,\n  input  wire csr_wr_en,\n  input  wire csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input  wire [E203_XLEN-1:0] wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire ext_irq_r,\n  input  wire sft_irq_r,\n  input  wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0] cmt_epc,\n  input  wire cmt_epc_ena,\n  input  wire [E203_XLEN-1:0] cmt_cause,\n  input  wire cmt_cause_ena,\n  input  wire cmt_status_ena,\n  input  wire cmt_instret_ena,\n  input  wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input  wire clk_aon,\n  input  wire clk,\n  input  wire rst_n\n  `ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n  `endif\n);\n\n  // Internal registers for CSR\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mcounterstop;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR access illegal flag\n  assign csr_access_ilgl = 1'b0; // Always 0, assuming no illegal access\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      12'hBFF: read_csr_dat = mcounterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      mcycle <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n      mcounterstop <= {E203_XLEN{1'b0}};\n      dcsr <= {E203_XLEN{1'b0}};\n      dpc <= {E203_PC_SIZE{1'b0}};\n      dscratch <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= {wbck_csr_dat[E203_PC_SIZE-1:1], 1'b0};\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hBFF: mcounterstop <= wbck_csr_dat;\n        12'h7b0: dcsr <= wbck_csr_dat;\n        12'h7b1: dpc <= {wbck_csr_dat[E203_PC_SIZE-1:1], 1'b0};\n        12'h7b2: dscratch <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Additional logic for CSR updates based on specific conditions\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic for specific fields\n    end else begin\n      if (cmt_status_ena) begin\n        mstatus[7] <= mstatus[3]; // Update MPIE with MIE\n        mstatus[3] <= 1'b0; // Clear MIE\n      end\n      if (cmt_mret_ena) begin\n        mstatus[3] <= mstatus[7]; // Update MIE with MPIE\n        mstatus[7] <= 1'b1; // Set MPIE\n      end\n      if (cmt_epc_ena) begin\n        mepc <= {cmt_epc[E203_PC_SIZE-1:1], 1'b0};\n      end\n      if (cmt_cause_ena) begin\n        mcause <= cmt_cause;\n      end\n      if (cmt_badaddr_ena) begin\n        mbadaddr <= cmt_badaddr;\n      end\n    end\n  end\n\n  // Output assignments\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n  `ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0; // NICE is not closed\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 17, "code": "module e203_exu_alu_lsuagu(\n  input  wire                     agu_i_valid,\n  output wire                     agu_i_ready,\n  input  wire [E203_XLEN-1:0]     agu_i_rs1,\n  input  wire [E203_XLEN-1:0]     agu_i_rs2,\n  input  wire [E203_XLEN-1:0]     agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                     agu_i_longpipe,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  output wire                     agu_o_valid,\n  input  wire                     agu_o_ready,\n  output wire [E203_XLEN-1:0]     agu_o_wbck_wdat,\n  output wire                     agu_o_wbck_err,\n  output wire                     agu_o_cmt_misalgn,\n  output wire                     agu_o_cmt_ld,\n  output wire                     agu_o_cmt_stamo,\n  output wire                     agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                     agu_icb_cmd_usign,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]     agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]     agu_req_alu_op2,\n  output wire                     agu_req_alu_swap,\n  output wire                     agu_req_alu_add,\n  output wire                     agu_req_alu_and,\n  output wire                     agu_req_alu_or,\n  output wire                     agu_req_alu_xor,\n  output wire                     agu_req_alu_max,\n  output wire                     agu_req_alu_min,\n  output wire                     agu_req_alu_maxu,\n  output wire                     agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_res,\n  output wire                     agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]     agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]     agu_sbf_0_r,\n  output wire                     agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]     agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]     agu_sbf_1_r,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transitions\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) begin\n        icb_state <= 4'd1;\n      end else if (state_1st_exit_ena) begin\n        icb_state <= 4'd4;\n      end else if (state_amoalu_exit_ena) begin\n        icb_state <= 4'd5;\n      end else if (state_amordy_exit_ena) begin\n        icb_state <= 4'd2;\n      end else if (state_wait2nd_exit_ena) begin\n        icb_state <= 4'd3;\n      end else if (state_2nd_exit_ena) begin\n        icb_state <= 4'd6;\n      end else if (state_wbck_exit_ena) begin\n        icb_state <= 4'd0;\n      end\n    end\n  end\n\n  // Additional logic for AGU operations, exception handling, and LSU interface\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 10, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 16, "code": "`include \"e203_defines.v\"\n\nmodule e203_ifu (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  output wire [E203_PC_SIZE-1:0]  inspect_pc,\n  output wire                     ifu_active,\n  input  wire                     itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]  pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]    ifu_o_pc,\n  output wire                       ifu_o_pc_vld,\n  output wire                       ifu_o_misalgn,\n  output wire                       ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire                       ifu_o_prdt_taken,\n  output wire                       ifu_o_muldiv_b2b,\n  output wire                       ifu_o_valid,\n  input  wire                       ifu_o_ready,\n\n  input  wire                       pipe_flush_req,\n  output wire                       pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]    pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]    pipe_flush_add_op2,\n\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]    pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire                       ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]  itcm_region_indic,\n  output wire                       ifu2itcm_icb_cmd_valid,\n  input  wire                       ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                       ifu2itcm_icb_rsp_valid,\n  output wire                       ifu2itcm_icb_rsp_ready,\n  input  wire                       ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire                       ifu2biu_icb_cmd_valid,\n  input  wire                       ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]  ifu2biu_icb_cmd_addr,\n  input  wire                       ifu2biu_icb_rsp_valid,\n  output wire                       ifu2biu_icb_rsp_ready,\n  input  wire                       ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire                       ifu_halt_req,\n  output wire                       ifu_halt_ack,\n\n  input  wire                       oitf_empty,\n  input  wire [E203_XLEN-1:0]       rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]       rf2ifu_rs1,\n  input  wire                       dec2ifu_rs1en,\n  input  wire                       dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire                       dec2ifu_mulhsu,\n  input  wire                       dec2ifu_div,\n  input  wire                       dec2ifu_rem,\n  input  wire                       dec2ifu_divu,\n  input  wire                       dec2ifu_remu\n);\n\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 14, "code": "module e203_exu_alu_muldiv (\n  input  wire                  mdv_nob2b,\n  input  wire                  muldiv_i_valid,\n  output wire                  muldiv_i_ready,\n  input  wire [E203_XLEN-1:0]  muldiv_i_rs1,\n  input  wire [E203_XLEN-1:0]  muldiv_i_rs2,\n  input  wire [E203_XLEN-1:0]  muldiv_i_imm,\n  input  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire                  muldiv_i_longpipe,\n  input  wire                  flush_pulse,\n  output wire                  muldiv_o_valid,\n  input  wire                  muldiv_o_ready,\n  output wire [E203_XLEN-1:0]  muldiv_o_wbck_wdat,\n  output wire                  muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire                  muldiv_req_alu_add,\n  output wire                  muldiv_req_alu_sub,\n  input  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire                  muldiv_sbf_0_ena,\n  output wire [32:0]           muldiv_sbf_0_nxt,\n  input  wire [32:0]           muldiv_sbf_0_r,\n  output wire                  muldiv_sbf_1_ena,\n  output wire [32:0]           muldiv_sbf_1_nxt,\n  input  wire [32:0]           muldiv_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals and state machine declarations\n  // FSM state encoding\n  localparam MULDIV_STATE_0TH      = 3'b000;\n  localparam MULDIV_STATE_EXEC     = 3'b001;\n  localparam MULDIV_STATE_REMD_CHCK = 3'b010;\n  localparam MULDIV_STATE_QUOT_CORR = 3'b011;\n  localparam MULDIV_STATE_REMD_CORR = 3'b100;\n\n  reg [2:0] muldiv_state;\n  reg [4:0] cycle_cnt;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] remainder;\n  reg [E203_XLEN-1:0] quotient;\n\n  // FSM: State transitions\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      muldiv_state <= MULDIV_STATE_0TH;\n      cycle_cnt <= 5'd0;\n    end else begin\n      case (muldiv_state)\n        MULDIV_STATE_0TH: begin\n          if (muldiv_i_valid && muldiv_i_ready) begin\n            muldiv_state <= MULDIV_STATE_EXEC;\n            cycle_cnt <= 5'd0;\n          end\n        end\n        MULDIV_STATE_EXEC: begin\n          if (cycle_cnt == 5'd16) begin\n            muldiv_state <= MULDIV_STATE_REMD_CHCK;\n          end else begin\n            cycle_cnt <= cycle_cnt + 1;\n          end\n        end\n        MULDIV_STATE_REMD_CHCK: begin\n          if (/* condition for correction */) begin\n            muldiv_state <= MULDIV_STATE_QUOT_CORR;\n          end else begin\n            muldiv_state <= MULDIV_STATE_0TH;\n          end\n        end\n        MULDIV_STATE_QUOT_CORR: begin\n          muldiv_state <= MULDIV_STATE_REMD_CORR;\n        end\n        MULDIV_STATE_REMD_CORR: begin\n          muldiv_state <= MULDIV_STATE_0TH;\n        end\n        default: begin\n          muldiv_state <= MULDIV_STATE_0TH;\n        end\n      endcase\n    end\n  end\n\n  // Output logic\n  assign muldiv_o_valid = (muldiv_state == MULDIV_STATE_0TH) && (cycle_cnt == 5'd16);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0; // No error handling for MUL/DIV\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = /* logic */;\n  assign muldiv_req_alu_op2 = /* logic */;\n  assign muldiv_req_alu_add = /* logic */;\n  assign muldiv_req_alu_sub = /* logic */;\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = /* logic */;\n  assign muldiv_sbf_0_nxt = /* logic */;\n  assign muldiv_sbf_1_ena = /* logic */;\n  assign muldiv_sbf_1_nxt = /* logic */;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 17, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n  wire ifu_req_ready;\n  wire ifu_rsp_ready;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr)\n  );\n\n  // IFU active signal\n  assign ifu_active = ifu_req_valid || ifu_rsp_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 15, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // ALU operation type decoding\n  wire alu_op_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  wire alu_op_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  wire alu_op_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  wire alu_op_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  wire alu_op_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  wire alu_op_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  wire alu_op_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  wire alu_op_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  wire alu_op_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  wire alu_op_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  wire alu_op_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n\n  wire [E203_XLEN-1:0] op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  wire [E203_XLEN-1:0] op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU request signals\n  assign alu_req_alu_add  = alu_op_add;\n  assign alu_req_alu_sub  = alu_op_sub;\n  assign alu_req_alu_xor  = alu_op_xor;\n  assign alu_req_alu_sll  = alu_op_sll;\n  assign alu_req_alu_srl  = alu_op_srl;\n  assign alu_req_alu_sra  = alu_op_sra;\n  assign alu_req_alu_or   = alu_op_or;\n  assign alu_req_alu_and  = alu_op_and;\n  assign alu_req_alu_slt  = alu_op_slt;\n  assign alu_req_alu_sltu = alu_op_sltu;\n  assign alu_req_alu_lui  = alu_op_lui;\n\n  assign alu_req_alu_op1 = op1;\n  assign alu_req_alu_op2 = op2;\n\n  // Special instructions\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Writeback error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  // ALU result (placeholder, actual computation logic should be implemented)\n  assign alu_req_alu_res = 0; // Placeholder for ALU result\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 19, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [11:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Submodule instantiation and interconnections go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 17, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (E203_XLEN_IS_32 ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 5, "code": "module itcm_ctrl (\n  input  wire                        clk,\n  input  wire                        rst_n,\n  input  wire                        test_mode,\n  output wire                        itcm_active,\n  input  wire                        tcm_cgstop,\n\n  // IFU Interface\n  input  wire                        ifu2itcm_icb_cmd_valid,\n  output wire                        ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0]       ifu2itcm_icb_cmd_addr,\n  input  wire                        ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0]       ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0]       ifu2itcm_icb_cmd_wmask,\n  output wire                        ifu2itcm_icb_rsp_valid,\n  input  wire                        ifu2itcm_icb_rsp_ready,\n  output wire                        ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0]       ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input  wire                        lsu2itcm_icb_cmd_valid,\n  output wire                        lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0]       lsu2itcm_icb_cmd_addr,\n  input  wire                        lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0]       lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0]       lsu2itcm_icb_cmd_wmask,\n  output wire                        lsu2itcm_icb_rsp_valid,\n  input  wire                        lsu2itcm_icb_rsp_ready,\n  output wire                        lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0]       lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (Optional)\n  `ifdef E203_HAS_ITCM_EXTITF\n  input  wire                        ext2itcm_icb_cmd_valid,\n  output wire                        ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0]       ext2itcm_icb_cmd_addr,\n  input  wire                        ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0]       ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0]       ext2itcm_icb_cmd_wmask,\n  output wire                        ext2itcm_icb_rsp_valid,\n  input  wire                        ext2itcm_icb_rsp_ready,\n  output wire                        ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0]       ext2itcm_icb_rsp_rdata,\n  `endif\n\n  // RAM Interface\n  output wire                        itcm_ram_cs,\n  output wire                        itcm_ram_we,\n  output wire [RAM_AW-1:0]           itcm_ram_addr,\n  output wire [RAM_MW-1:0]           itcm_ram_wem,\n  output wire [RAM_DW-1:0]           itcm_ram_din,\n  input  wire [RAM_DW-1:0]           itcm_ram_dout,\n  output wire                        clk_itcm_ram\n);\n\n  // Internal signals\n  wire [ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire [DATA_WIDTH-1:0] itcm_cmd_wdata;\n  wire [WMSK_WIDTH-1:0] itcm_cmd_wmask;\n  wire                  itcm_cmd_read;\n  wire                  itcm_cmd_valid;\n  wire                  itcm_cmd_ready;\n  wire                  itcm_rsp_valid;\n  wire                  itcm_rsp_ready;\n  wire                  itcm_rsp_err;\n  wire [DATA_WIDTH-1:0] itcm_rsp_rdata;\n\n  // Arbitration logic\n  // Priority: LSU > External > IFU\n  assign itcm_cmd_valid = lsu2itcm_icb_cmd_valid | `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid | `endif ifu2itcm_icb_cmd_valid;\n  assign itcm_cmd_addr  = lsu2itcm_icb_cmd_valid ? lsu2itcm_icb_cmd_addr : `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid ? ext2itcm_icb_cmd_addr : `endif ifu2itcm_icb_cmd_addr;\n  assign itcm_cmd_wdata = lsu2itcm_icb_cmd_valid ? lsu2itcm_icb_cmd_wdata : `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid ? ext2itcm_icb_cmd_wdata : `endif ifu2itcm_icb_cmd_wdata;\n  assign itcm_cmd_wmask = lsu2itcm_icb_cmd_valid ? lsu2itcm_icb_cmd_wmask : `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid ? ext2itcm_icb_cmd_wmask : `endif ifu2itcm_icb_cmd_wmask;\n  assign itcm_cmd_read  = lsu2itcm_icb_cmd_valid ? lsu2itcm_icb_cmd_read  : `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid ? ext2itcm_icb_cmd_read  : `endif ifu2itcm_icb_cmd_read;\n\n  assign lsu2itcm_icb_cmd_ready = itcm_cmd_ready & lsu2itcm_icb_cmd_valid;\n  `ifdef E203_HAS_ITCM_EXTITF\n  assign ext2itcm_icb_cmd_ready = itcm_cmd_ready & ext2itcm_icb_cmd_valid;\n  `endif\n  assign ifu2itcm_icb_cmd_ready = itcm_cmd_ready & ifu2itcm_icb_cmd_valid;\n\n  // Response logic\n  assign lsu2itcm_icb_rsp_valid = itcm_rsp_valid & lsu2itcm_icb_cmd_valid;\n  `ifdef E203_HAS_ITCM_EXTITF\n  assign ext2itcm_icb_rsp_valid = itcm_rsp_valid & ext2itcm_icb_cmd_valid;\n  `endif\n  assign ifu2itcm_icb_rsp_valid = itcm_rsp_valid & ifu2itcm_icb_cmd_valid;\n\n  assign lsu2itcm_icb_rsp_err = itcm_rsp_err;\n  `ifdef E203_HAS_ITCM_EXTITF\n  assign ext2itcm_icb_rsp_err = itcm_rsp_err;\n  `endif\n  assign ifu2itcm_icb_rsp_err = itcm_rsp_err;\n\n  assign lsu2itcm_icb_rsp_rdata = itcm_rsp_rdata;\n  `ifdef E203_HAS_ITCM_EXTITF\n  assign ext2itcm_icb_rsp_rdata = itcm_rsp_rdata;\n  `endif\n  assign ifu2itcm_icb_rsp_rdata = itcm_rsp_rdata;\n\n  // RAM control logic\n  assign itcm_ram_cs   = itcm_cmd_valid;\n  assign itcm_ram_we   = ~itcm_cmd_read;\n  assign itcm_ram_addr = itcm_cmd_addr[RAM_AW-1:0];\n  assign itcm_ram_wem  = itcm_cmd_wmask;\n  assign itcm_ram_din  = itcm_cmd_wdata;\n  assign itcm_rsp_rdata = itcm_ram_dout;\n\n  // Clock gating logic\n  assign clk_itcm_ram = clk & ~tcm_cgstop;\n\n  // Active status\n  assign itcm_active = itcm_cmd_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 11, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_ready = longp_wbck_i_valid ? longp_wbck_i_ready : alu_wbck_i_ready;\n  assign wbck_i_wdat  = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 8, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 18, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  wire bjp_i_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_beq = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire bjp_i_bprdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_bprdt;\n\n  wire bjp_req_alu_cmp = bjp_i_bxx;\n  assign bjp_req_alu_cmp_eq = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add = bjp_i_jump;\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 4 : 2) : bjp_i_rs2;\n\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 20, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Instantiate submodules and connect them according to the design specification\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 13, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_valid,\n  input wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  assign pc_add_op1 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op1 :\n                      dly_pipe_flush_req ? pc_r :\n                      `endif\n                      ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec :\n                      pc_r;\n\n  assign pc_add_op2 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op2 :\n                      dly_pipe_flush_req ? 0 :\n                      `endif\n                      ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 :\n                      pc_incr_ofst;\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt = `ifndef E203_TIMING_BOOST\n                                   {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                                   `else\n                                   pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n                                   dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n                                   {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                                   `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset condition\n    end else begin\n      if (ifu_req_valid === 1'bx) begin\n        $fatal(\"CHECK_IFU_REQ_VALID_NO_X: ifu_req_valid should not be X\");\n      end\n    end\n  end\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 11, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n\n  input  clk,\n  input  rst_n\n\n`ifdef E203_HAS_NICE\n  ,input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_rdwen;\n  wire wbck_i_rdfpu;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire [E203_PC_SIZE-1:0] wbck_i_pc;\n\n  wire wbck_i_ld;\n  wire wbck_i_st;\n  wire wbck_i_buserr;\n  wire [E203_ADDR_SIZE-1:0] wbck_i_badaddr;\n\n  assign wbck_i_valid = \n    (~oitf_empty) & \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr))\n`ifdef E203_HAS_NICE\n    | (nice_longp_wbck_i_valid & (nice_longp_wbck_i_itag == oitf_ret_ptr))\n`endif\n    );\n\n  assign wbck_i_ready = \n    (\n      (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) &\n      ((wbck_i_err) ? longp_excp_o_ready : 1'b1)\n    );\n\n  assign wbck_i_err = \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr) & lsu_wbck_i_err)\n`ifdef E203_HAS_NICE\n    | (nice_longp_wbck_i_valid & (nice_longp_wbck_i_itag == oitf_ret_ptr) & nice_longp_wbck_i_err)\n`endif\n    );\n\n  assign wbck_i_rdwen = oitf_ret_rdwen;\n  assign wbck_i_rdfpu = oitf_ret_rdfpu;\n  assign wbck_i_wdat = \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr)) ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n    : (nice_longp_wbck_i_valid & (nice_longp_wbck_i_itag == oitf_ret_ptr)) ? nice_longp_wbck_i_wdat\n`endif\n    : {E203_XLEN{1'b0}}\n    );\n\n  assign wbck_i_rdidx = oitf_ret_rdidx;\n  assign wbck_i_itag = oitf_ret_ptr;\n  assign wbck_i_pc = oitf_ret_pc;\n\n  assign wbck_i_ld = \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr) & lsu_cmt_i_ld)\n    );\n\n  assign wbck_i_st = \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr) & lsu_cmt_i_st)\n    );\n\n  assign wbck_i_buserr = \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr) & lsu_cmt_i_buserr)\n    );\n\n  assign wbck_i_badaddr = \n    (\n      (lsu_wbck_i_valid & (lsu_wbck_i_itag == oitf_ret_ptr)) ? lsu_cmt_i_badaddr\n    : {E203_ADDR_SIZE{1'b0}}\n    );\n\n  assign longp_wbck_o_valid = wbck_i_valid & wbck_i_rdwen & (~wbck_i_err);\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = wbck_i_rdidx;\n  assign longp_wbck_o_rdfpu = wbck_i_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = wbck_i_ld;\n  assign longp_excp_o_st = wbck_i_st;\n  assign longp_excp_o_buserr = wbck_i_buserr;\n  assign longp_excp_o_badaddr = wbck_i_badaddr;\n  assign longp_excp_o_pc = wbck_i_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\n  assign lsu_wbck_i_ready = wbck_i_ready & (lsu_wbck_i_itag == oitf_ret_ptr);\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & (nice_longp_wbck_i_itag == oitf_ret_ptr);\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 14, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  reg [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST : ICB_STATE_IDLE;\n      ICB_STATE_1ST: icb_state_nxt = state_1st_exit_ena ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND) : ICB_STATE_IDLE) : ICB_STATE_1ST;\n      ICB_STATE_WAIT2ND: icb_state_nxt = state_wait2nd_exit_ena ? ICB_STATE_2ND : ICB_STATE_WAIT2ND;\n      ICB_STATE_2ND: icb_state_nxt = state_2nd_exit_ena ? ICB_STATE_IDLE : ICB_STATE_2ND;\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  sirv_gnrl_dfflr #(.DW(2)) icb_state_dfflr (\n    .lden(icb_state_ena),\n    .dnxt(icb_state_nxt),\n    .qout(icb_state),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  wire [31:0] ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(.DP(1), .DW(33)) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr;\n\n  // ICB Request Distribution Implementation\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && ifu_req_ready_condi;\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = ifu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 15, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] op1, op2;\n  reg [E203_XLEN-1:0] result;\n  reg [32:0] sbf_0, sbf_1;\n  reg valid, ready, wbck_err;\n\n  // FSM state definitions\n  localparam MULDIV_STATE_0TH      = 5'b00001;\n  localparam MULDIV_STATE_EXEC     = 5'b00010;\n  localparam MULDIV_STATE_REMD_CHCK = 5'b00100;\n  localparam MULDIV_STATE_QUOT_CORR = 5'b01000;\n  localparam MULDIV_STATE_REMD_CORR = 5'b10000;\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  // Next state logic\n  always @(*) begin\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for division correction */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end else if (/* condition for completion */) begin\n          next_state = MULDIV_STATE_0TH;\n        end else begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && valid;\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = wbck_err;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = op1;\n  assign muldiv_req_alu_op2 = op2;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = (state == MULDIV_STATE_REMD_CHCK);\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = sbf_0;\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_REMD_CHCK);\n  assign muldiv_sbf_1_nxt = sbf_1;\n\n  // Additional logic for handling operations, corrections, and special cases\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 11, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 18, "code": "module e203_exu_alu_lsuagu(\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // State machine\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) icb_state <= 4'd1;\n      else if (state_1st_exit_ena) icb_state <= 4'd4;\n      else if (state_amoalu_exit_ena) icb_state <= 4'd5;\n      else if (state_amordy_exit_ena) icb_state <= 4'd2;\n      else if (state_wait2nd_exit_ena) icb_state <= 4'd3;\n      else if (state_2nd_exit_ena) icb_state <= 4'd6;\n      else if (state_wbck_exit_ena) icb_state <= 4'd0;\n    end\n  end\n\n  // Additional logic for AGU operations, exception handling, and LSU interface\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 12, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 16, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] next_pc;\n\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw);\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm[E203_PC_SIZE-1:0] : (cmt_i_rv32 ? 32'h4 : 32'h2);\n\n  assign brchmis_flush_pc = \n    cmt_i_dret ? csr_dpc_r :\n    cmt_i_mret ? csr_epc_r :\n    (cmt_i_bjp & cmt_i_bjp_prdt) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 16, "code": "module e203_exu_alu_rglr(\n  input  wire                  alu_i_valid, \n  output wire                  alu_i_ready, \n  input  wire [E203_XLEN-1:0]  alu_i_rs1, \n  input  wire [E203_XLEN-1:0]  alu_i_rs2, \n  input  wire [E203_XLEN-1:0]  alu_i_imm, \n  input  wire [E203_PC_SIZE-1:0] alu_i_pc, \n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info, \n  output wire                  alu_o_valid, \n  input  wire                  alu_o_ready, \n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat, \n  output wire                  alu_o_wbck_err, \n  output wire                  alu_o_cmt_ecall, \n  output wire                  alu_o_cmt_ebreak, \n  output wire                  alu_o_cmt_wfi, \n  output wire                  alu_req_alu_add, \n  output wire                  alu_req_alu_sub, \n  output wire                  alu_req_alu_xor, \n  output wire                  alu_req_alu_sll, \n  output wire                  alu_req_alu_srl, \n  output wire                  alu_req_alu_sra, \n  output wire                  alu_req_alu_or, \n  output wire                  alu_req_alu_and, \n  output wire                  alu_req_alu_slt, \n  output wire                  alu_req_alu_sltu, \n  output wire                  alu_req_alu_lui, \n  output wire [E203_XLEN-1:0]  alu_req_alu_op1, \n  output wire [E203_XLEN-1:0]  alu_req_alu_op2, \n  output wire [E203_XLEN-1:0]  alu_req_alu_res, \n  input  wire                  clk, \n  input  wire                  rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire nop    = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 17, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Valid-ready handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // ALU operation request signals\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection logic\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Special instruction signals\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error signal for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result from shared data path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 13, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic for instruction fields\n  // Example: Decode rs1, rs2, rd, etc.\n  assign dec_rs1idx = i_instr[19:15];\n  assign dec_rs2idx = i_instr[24:20];\n  assign dec_rdidx  = i_instr[11:7];\n\n  // Decode immediate values\n  // Example: Decode I-type immediate\n  assign dec_imm = {{20{i_instr[31]}}, i_instr[31:20]};\n\n  // Decode instruction type and generate control signals\n  // Example: ALU operations\n  assign alu_info_bus[E203_DECINFO_ALU_ADD] = (i_instr[6:0] == 7'b0110011) && (i_instr[14:12] == 3'b000) && (i_instr[31:25] == 7'b0000000);\n  assign alu_info_bus[E203_DECINFO_ALU_SUB] = (i_instr[6:0] == 7'b0110011) && (i_instr[14:12] == 3'b000) && (i_instr[31:25] == 7'b0100000);\n\n  // Example: BJP operations\n  assign bjp_info_bus[E203_DECINFO_BJP_JUMP] = (i_instr[6:0] == 7'b1101111);\n\n  // Example: CSR operations\n  assign csr_info_bus[E203_DECINFO_CSR_CSRRW] = (i_instr[6:0] == 7'b1110011) && (i_instr[14:12] == 3'b001);\n\n  // Example: MULDIV operations\n  assign muldiv_info_bus[E203_DECINFO_MULDIV_MUL] = (i_instr[6:0] == 7'b0110011) && (i_instr[14:12] == 3'b000) && (i_instr[31:25] == 7'b0000001);\n\n  // Example: NICE operations\n`ifdef E203_HAS_NICE\n  assign nice_info_bus[E203_DECINFO_NICE_INSTR] = (i_instr[6:0] == 7'b1010101);\n  assign dec_nice = nice_info_bus[E203_DECINFO_NICE_INSTR];\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n`endif\n\n  // Combine all info buses into dec_info\n  assign dec_info = alu_info_bus | agu_info_bus | bjp_info_bus | csr_info_bus | muldiv_info_bus\n`ifdef E203_HAS_NICE\n                    | nice_info_bus\n`endif\n                    ;\n\n  // Decode illegal instructions\n  assign dec_ilegl = (i_instr == 32'b0) || (i_instr == 32'hFFFFFFFF);\n\n  // Decode PC and exception signals\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n\n  // Decode RV32/16-bit instruction\n  assign dec_rv32 = (i_instr[1:0] != 2'b11);\n\n  // Decode branch and jump signals\n  assign dec_bjp = bjp_info_bus[E203_DECINFO_BJP_JUMP];\n  assign dec_jal = (i_instr[6:0] == 7'b1101111);\n  assign dec_jalr = (i_instr[6:0] == 7'b1100111);\n  assign dec_bxx = (i_instr[6:0] == 7'b1100011);\n\n  // Decode JALR rs1 index\n  assign dec_jalr_rs1idx = i_instr[19:15];\n\n  // Decode BJP immediate\n  assign dec_bjp_imm = {{12{i_instr[31]}}, i_instr[19:12], i_instr[20], i_instr[30:21], 1'b0};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 14, "code": "module e203_exu_disp (\n  input  wire                     wfi_halt_exu_req,\n  output wire                     wfi_halt_exu_ack,\n  input  wire                     oitf_empty,\n  input  wire                     amo_wait,\n  input  wire                     disp_i_valid,\n  output wire                     disp_i_ready,\n  input  wire                     disp_i_rs1x0,\n  input  wire                     disp_i_rs2x0,\n  input  wire                     disp_i_rs1en,\n  input  wire                     disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]     disp_i_rs1,\n  input  wire [E203_XLEN-1:0]     disp_i_rs2,\n  input  wire                     disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]     disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0]  disp_i_pc,\n  input  wire                     disp_i_misalgn,\n  input  wire                     disp_i_buserr,\n  input  wire                     disp_i_ilegl,\n  output wire                     disp_o_alu_valid,\n  input  wire                     disp_o_alu_ready,\n  input  wire                     disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs2,\n  output wire                     disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]     disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0]  disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                     disp_o_alu_misalgn,\n  output wire                     disp_o_alu_buserr,\n  output wire                     disp_o_alu_ilegl,\n  input  wire                     oitfrd_match_disprs1,\n  input  wire                     oitfrd_match_disprs2,\n  input  wire                     oitfrd_match_disprs3,\n  input  wire                     oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                     disp_oitf_ena,\n  input  wire                     disp_oitf_ready,\n  output wire                     disp_oitf_rs1fpu,\n  output wire                     disp_oitf_rs2fpu,\n  output wire                     disp_oitf_rs3fpu,\n  output wire                     disp_oitf_rdfpu,\n  output wire                     disp_oitf_rs1en,\n  output wire                     disp_oitf_rs2en,\n  output wire                     disp_oitf_rs3en,\n  output wire                     disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0]  disp_oitf_pc,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal signals\n  wire raw_dep = (oitfrd_match_disprs1 & disp_i_rs1en) | \n                 (oitfrd_match_disprs2 & disp_i_rs2en);\n  wire waw_dep = oitfrd_match_disprd & disp_i_rdwen;\n\n  wire disp_condition = \n      (disp_i_info[E203_DECINFO_GRP] != E203_DECINFO_GRP_CSR || oitf_empty) &&\n      (disp_i_info[E203_DECINFO_GRP] != E203_DECINFO_GRP_BJP || oitf_empty) &&\n      !wfi_halt_exu_req && \n      !raw_dep && \n      !waw_dep && \n      (!disp_o_alu_longpipe || disp_oitf_ready);\n\n  assign disp_i_ready = disp_condition && disp_o_alu_ready;\n\n  assign disp_o_alu_valid = disp_i_valid && disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_i_valid && disp_condition && disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = oitf_empty && !amo_wait;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 17, "code": "module e203_exu_branchslv(\n  input  cmt_i_valid,\n  output cmt_i_ready,\n  input  cmt_i_rv32,\n  input  cmt_i_dret,\n  input  cmt_i_mret,\n  input  cmt_i_fencei,\n  input  cmt_i_bjp,\n  input  cmt_i_bjp_prdt,\n  input  cmt_i_bjp_rslv,\n  input  [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  [E203_XLEN-1:0] cmt_i_imm,\n  input  [E203_PC_SIZE-1:0] csr_epc_r,\n  input  [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input  clk,\n  input  rst_n\n);\n\n  wire flush_need = \n    (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n    cmt_i_fencei |\n    cmt_i_mret |\n    cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = \n    ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n    (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n    (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  wire [E203_PC_SIZE-1:0] next_pc = cmt_i_pc + (cmt_i_rv32 ? 4 : 2);\n\n  assign brchmis_flush_add_op1 = \n    cmt_i_dret ? csr_dpc_r :\n    cmt_i_mret ? csr_epc_r :\n    (cmt_i_bjp & cmt_i_bjp_prdt) ? next_pc :\n    cmt_i_pc;\n\n  assign brchmis_flush_add_op2 = \n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm[E203_PC_SIZE-1:0] : 0;\n\n  `ifdef E203_TIMING_BOOST\n  assign brchmis_flush_pc = \n    cmt_i_dret ? csr_dpc_r :\n    cmt_i_mret ? csr_epc_r :\n    (cmt_i_bjp & cmt_i_bjp_prdt) ? next_pc :\n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 15, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: icb_state_nxt = ICB_STATE_1ST;\n      ICB_STATE_1ST: icb_state_nxt = (req_need_2uop_r && !ifu_icb_cmd_ready) ? ICB_STATE_WAIT2ND : ICB_STATE_2ND;\n      ICB_STATE_WAIT2ND: icb_state_nxt = ICB_STATE_2ND;\n      ICB_STATE_2ND: icb_state_nxt = ICB_STATE_IDLE;\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(.DW(2)) icb_state_dfflr (\n    .lden(icb_state_ena),\n    .dnxt(icb_state_nxt),\n    .qout(icb_state),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_i_vld = i_ifu_rsp_valid;\n  wire ifu_rsp_bypbuf_o_rdy = ifu_rsp_ready;\n\n  sirv_gnrl_bypbuf #(.DP(1), .DW(33)) ifu_rsp_bypbuf (\n    .i_vld(ifu_rsp_bypbuf_i_vld),\n    .i_rdy(ifu_rsp_bypbuf_o_rdy),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= holdup2leftover_ena ? ifu_icb_rsp_rdata[31:16] : ifu_icb_rsp_rdata[47:32];\n      leftover_err_r <= holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? {ifu_icb_rsp_rdata_lsb16, leftover_r} : ifu_icb_rsp_rdata;\n\n  // ICB Command Generation Implementation\n  assign ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n  assign ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  // Target Selection\n  assign ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[31:28] == 4'b1000);\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  // Internal Handshake Signals\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = ifu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 16, "code": "module e203_exu_alu_muldiv(\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine declarations\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [31:0] cycle_counter;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] remainder;\n  reg [E203_XLEN-1:0] quotient;\n  reg [E203_XLEN-1:0] divisor;\n  reg [E203_XLEN-1:0] dividend;\n  reg [E203_XLEN-1:0] partial_product;\n  reg [E203_XLEN-1:0] partial_quotient;\n  reg [E203_XLEN-1:0] partial_remainder;\n\n  // State machine encoding\n  localparam MULDIV_STATE_0TH = 5'd0;\n  localparam MULDIV_STATE_EXEC = 5'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 5'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 5'd3;\n  localparam MULDIV_STATE_REMD_CORR = 5'd4;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n      cycle_counter <= 32'd0;\n    end else begin\n      state <= next_state;\n      if (state == MULDIV_STATE_EXEC) begin\n        cycle_counter <= cycle_counter + 1;\n      end else begin\n        cycle_counter <= 32'd0;\n      end\n    end\n  end\n\n  // Next state logic\n  always @(*) begin\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (cycle_counter == 32'd16) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end else begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_REMD_CORR);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = /* logic */;\n  assign muldiv_req_alu_op2 = /* logic */;\n  assign muldiv_req_alu_add = /* logic */;\n  assign muldiv_req_alu_sub = /* logic */;\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = /* logic */;\n  assign muldiv_sbf_0_nxt = /* logic */;\n  assign muldiv_sbf_1_ena = /* logic */;\n  assign muldiv_sbf_1_nxt = /* logic */;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 11, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // OITF Full and Empty Conditions\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  // Dispatch Logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1'b1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1))\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1'b1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1))\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n\n  // Dependency Checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 19, "code": "module e203_exu_alu_bjp(\n  input  bjp_i_valid,\n  output bjp_i_ready,\n  input  [E203_XLEN-1:0] bjp_i_rs1,\n  input  [E203_XLEN-1:0] bjp_i_rs2,\n  input  [E203_XLEN-1:0] bjp_i_imm,\n  input  [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output bjp_o_valid,\n  input  bjp_o_ready,\n  output [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,\n  output bjp_o_cmt_rslv,\n  output [E203_XLEN-1:0] bjp_req_alu_op1,\n  output [E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq,\n  output bjp_req_alu_cmp_ne,\n  output bjp_req_alu_cmp_lt,\n  output bjp_req_alu_cmp_gt,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n  input  bjp_req_alu_cmp_res,\n  input  [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  clk,\n  input  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 18, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {{E203_XLEN-5{1'b0}}, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_raw = (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                       csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]);\n\n  assign csr_rd_en = csr_i_valid & csr_rd_en_raw;\n  assign csr_wr_en = csr_i_valid & csr_wr_en_raw;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  wire csr_ena_raw = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n  assign csr_ena = csr_ena_raw;\n\n  wire [E203_XLEN-1:0] csr_wbck_csr_dat = \n    ({E203_XLEN{csr_i_info[E203_DECINFO_CSR_CSRRW]}} & csr_op1) |\n    ({E203_XLEN{csr_i_info[E203_DECINFO_CSR_CSRRS]}} & (csr_op1 | read_csr_dat)) |\n    ({E203_XLEN{csr_i_info[E203_DECINFO_CSR_CSRRC]}} & ((~csr_op1) & read_csr_dat));\n\n  assign wbck_csr_dat = csr_wbck_csr_dat;\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n  assign csr_i_ready = csr_o_ready & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  generate if (E203_HAS_CSR_NICE) begin\n    output nice_csr_valid;\n    input nice_csr_ready;\n    output [31:0] nice_csr_addr;\n    output nice_csr_wr;\n    output [31:0] nice_csr_wdata;\n    input [31:0] nice_csr_rdata;\n    input nice_xs_off;\n\n    assign nice_csr_valid = csr_i_valid & csr_sel_nice & csr_o_ready;\n    assign nice_csr_addr = {20'b0, csr_idx};\n    assign nice_csr_wr = csr_wr_en;\n    assign nice_csr_wdata = csr_op1;\n    assign csr_o_wbck_wdat = csr_sel_nice ? nice_csr_rdata : read_csr_dat;\n  end endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 14, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic\n  // Here, you would implement the logic to decode the instruction\n  // and generate the appropriate control signals and information bus.\n  // This includes setting the dec_info, dec_imm, and other outputs\n  // based on the instruction type and fields.\n\n  // Example: Decoding R-type instruction\n  always @(*) begin\n    // Default values\n    dec_rs1x0 = 0;\n    dec_rs2x0 = 0;\n    dec_rs1en = 0;\n    dec_rs2en = 0;\n    dec_rdwen = 0;\n    dec_rs1idx = 0;\n    dec_rs2idx = 0;\n    dec_rdidx = 0;\n    dec_info = 0;\n    dec_imm = 0;\n    dec_pc = i_pc;\n    dec_misalgn = i_misalgn;\n    dec_buserr = i_buserr;\n    dec_ilegl = 0;\n    dec_mulhsu = 0;\n    dec_mul = 0;\n    dec_div = 0;\n    dec_rem = 0;\n    dec_divu = 0;\n    dec_remu = 0;\n    dec_rv32 = 1;\n    dec_bjp = 0;\n    dec_jal = 0;\n    dec_jalr = 0;\n    dec_bxx = 0;\n    dec_jalr_rs1idx = 0;\n    dec_bjp_imm = 0;\n\n    // Decode logic for R-type instructions\n    if (i_instr[6:0] == 7'b0110011) begin\n      dec_rs1en = 1;\n      dec_rs2en = 1;\n      dec_rdwen = 1;\n      dec_rs1idx = i_instr[19:15];\n      dec_rs2idx = i_instr[24:20];\n      dec_rdidx = i_instr[11:7];\n      case (i_instr[14:12])\n        3'b000: begin\n          if (i_instr[31:25] == 7'b0000000) begin\n            dec_info[E203_DECINFO_ALU_ADD] = 1;\n          end else if (i_instr[31:25] == 7'b0100000) begin\n            dec_info[E203_DECINFO_ALU_SUB] = 1;\n          end\n        end\n        3'b001: dec_info[E203_DECINFO_ALU_SLL] = 1;\n        3'b010: dec_info[E203_DECINFO_ALU_SLT] = 1;\n        3'b011: dec_info[E203_DECINFO_ALU_SLTU] = 1;\n        3'b100: dec_info[E203_DECINFO_ALU_XOR] = 1;\n        3'b101: begin\n          if (i_instr[31:25] == 7'b0000000) begin\n            dec_info[E203_DECINFO_ALU_SRL] = 1;\n          end else if (i_instr[31:25] == 7'b0100000) begin\n            dec_info[E203_DECINFO_ALU_SRA] = 1;\n          end\n        end\n        3'b110: dec_info[E203_DECINFO_ALU_OR] = 1;\n        3'b111: dec_info[E203_DECINFO_ALU_AND] = 1;\n      endcase\n    end\n\n    // Additional decoding logic for other instruction types\n    // ...\n\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 12, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire longp_excp_flush_req_insterr;\n  wire [E203_XLEN-1:0] mcause;\n  wire [E203_PC_SIZE-1:0] mepc;\n  wire [E203_ADDR_SIZE-1:0] mtval;\n  wire [E203_XLEN-1:0] mstatus;\n\n  // WFI Handling\n  assign wfi_flag = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_req = wfi_flag & ~wfi_halt_ifu_ack & ~wfi_halt_exu_ack;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception Handling\n  assign alu_excp_flush_req_ifu_misalgn = alu_excp_i_ifu_misalgn & alu_excp_i_valid;\n  assign alu_excp_flush_req_ifu_buserr = alu_excp_i_ifu_buserr & alu_excp_i_valid;\n  assign alu_excp_flush_req_ifu_ilegl = alu_excp_i_ifu_ilegl & alu_excp_i_valid;\n  assign alu_excp_flush_req_ebreak = alu_excp_i_ebreak & alu_excp_i_valid;\n  assign alu_excp_flush_req_ld_misalgn = alu_excp_i_ld & alu_excp_i_misalgn & alu_excp_i_valid;\n  assign longp_excp_flush_req_ld_buserr = longp_excp_i_ld & longp_excp_i_buserr & longp_excp_i_valid;\n  assign alu_excp_flush_req_stamo_misalgn = alu_excp_i_stamo & alu_excp_i_misalgn & alu_excp_i_valid;\n  assign longp_excp_flush_req_st_buserr = longp_excp_i_st & longp_excp_i_buserr & longp_excp_i_valid;\n  assign alu_excp_flush_req_ecall = alu_excp_i_ecall & alu_excp_i_valid;\n  assign longp_excp_flush_req_insterr = longp_excp_i_insterr & longp_excp_i_valid;\n\n  // Flush Request Logic\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req | alu_excp_flush_req;\n  assign nonalu_excpirq_flush_req_raw = longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req;\n  assign excpirq_flush_add_op1 = (dbg_mode_entry_req) ? 32'h800 :\n                                 (longp_excp_flush_req | alu_excp_flush_req) ? 32'h808 :\n                                 csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // Register Update Logic\n  assign cmt_badaddr = (longp_excp_flush_req_ld_buserr | longp_excp_flush_req_st_buserr) ? longp_excp_i_badaddr :\n                       (alu_excp_flush_req_ld_misalgn | alu_excp_flush_req_stamo_misalgn) ? alu_excp_i_pc :\n                       (alu_excp_flush_req_ebreak | alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr) ? alu_excp_i_pc :\n                       (alu_excp_flush_req_ifu_ilegl) ? alu_excp_i_instr : 32'h0;\n  assign cmt_epc = (longp_excp_flush_req) ? longp_excp_i_pc : alu_excp_i_pc;\n  assign cmt_cause = (irq_flush_req) ? {1'b1, 3'b0, 1'b0} : mcause;\n  assign cmt_badaddr_ena = excpirq_flush_req;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n\n  // Debug Mode Handling\n  assign dbg_entry_req = ~dbg_mode & (dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r);\n  assign dbg_mode_entry_req = ~longp_excp_flush_req & alu_excp_i_pc_vld & oitf_empty & dbg_entry_req;\n\n  // Interrupt Handling\n  assign irq_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_req & alu_excp_i_pc_vld & oitf_empty & (ext_irq_r | sft_irq_r | tmr_irq_r);\n\n  // Exception Active Signal\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 19, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine declarations\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transitions\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // Flush mechanism\n  wire flush_block = flush_req & icb_sta_is_idle;\n\n  // AGU operations and ALU datapath sharing\n  assign agu_req_alu_op1 = agu_i_rs1;\n  assign agu_req_alu_op2 = agu_i_imm;\n  assign agu_req_alu_add = agu_i_info[E203_DECINFO_AGU_AMOADD];\n  assign agu_req_alu_and = agu_i_info[E203_DECINFO_AGU_AMOAND];\n  assign agu_req_alu_or = agu_i_info[E203_DECINFO_AGU_AMOOR];\n  assign agu_req_alu_xor = agu_i_info[E203_DECINFO_AGU_AMOXOR];\n  assign agu_req_alu_max = agu_i_info[E203_DECINFO_AGU_AMOMAX];\n  assign agu_req_alu_min = agu_i_info[E203_DECINFO_AGU_AMOMIN];\n  assign agu_req_alu_maxu = agu_i_info[E203_DECINFO_AGU_AMOMAXU];\n  assign agu_req_alu_minu = agu_i_info[E203_DECINFO_AGU_AMOMINU];\n\n  // Output assignments\n  assign agu_o_valid = icb_sta_is_wbck;\n  assign agu_o_wbck_wdat = agu_req_alu_res;\n  assign agu_o_wbck_err = agu_icb_rsp_err;\n  assign agu_o_cmt_misalgn = 1'b0; // Placeholder for misalignment logic\n  assign agu_o_cmt_ld = agu_i_info[E203_DECINFO_AGU_LOAD];\n  assign agu_o_cmt_stamo = agu_i_info[E203_DECINFO_AGU_STORE] | agu_i_info[E203_DECINFO_AGU_AMO];\n  assign agu_o_cmt_buserr = agu_icb_rsp_err;\n  assign agu_o_cmt_badaddr = agu_icb_cmd_addr;\n\n  // Command interface\n  assign agu_icb_cmd_valid = icb_sta_is_idle | icb_sta_is_wait2nd;\n  assign agu_icb_cmd_addr = agu_req_alu_res;\n  assign agu_icb_cmd_read = agu_i_info[E203_DECINFO_AGU_LOAD];\n  assign agu_icb_cmd_wdata = agu_i_rs2;\n  assign agu_icb_cmd_wmask = {E203_XLEN/8{1'b1}};\n  assign agu_icb_cmd_back2agu = 1'b1;\n  assign agu_icb_cmd_lock = 1'b0;\n  assign agu_icb_cmd_excl = agu_i_info[E203_DECINFO_AGU_EXCL];\n  assign agu_icb_cmd_size = agu_i_info[E203_DECINFO_AGU_SIZE];\n  assign agu_icb_cmd_itag = agu_i_itag;\n  assign agu_icb_cmd_usign = agu_i_info[E203_DECINFO_AGU_USIGN];\n\n  // Response interface\n  assign agu_icb_rsp_ready = icb_sta_is_1st | icb_sta_is_2nd;\n\n  // Shared buffer control\n  assign agu_sbf_0_ena = icb_sta_is_amoalu;\n  assign agu_sbf_0_nxt = agu_req_alu_res;\n  assign agu_sbf_1_ena = icb_sta_is_amordy;\n  assign agu_sbf_1_nxt = agu_req_alu_res;\n\n  // Clock and reset logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) icb_state <= 4'd1;\n      else if (state_1st_exit_ena) icb_state <= 4'd4;\n      else if (state_amoalu_exit_ena) icb_state <= 4'd5;\n      else if (state_amordy_exit_ena) icb_state <= 4'd2;\n      else if (state_wait2nd_exit_ena) icb_state <= 4'd3;\n      else if (state_2nd_exit_ena) icb_state <= 4'd6;\n      else if (state_wbck_exit_ena) icb_state <= 4'd0;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 15, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic\n  // ... (Implement the decoding logic here based on the instruction set and specification)\n\n  // Assign decoded information to output signals\n  assign dec_info = // ... (Assign the appropriate decoded information bus)\n  assign dec_imm = // ... (Extract and assign the immediate value)\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = // ... (Determine if the instruction is illegal)\n  assign dec_mulhsu = // ... (Determine if the instruction is mulhsu)\n  assign dec_mul = // ... (Determine if the instruction is mul)\n  assign dec_div = // ... (Determine if the instruction is div)\n  assign dec_rem = // ... (Determine if the instruction is rem)\n  assign dec_divu = // ... (Determine if the instruction is divu)\n  assign dec_remu = // ... (Determine if the instruction is remu)\n  assign dec_rv32 = // ... (Determine if the instruction is 32-bit)\n  assign dec_bjp = // ... (Determine if the instruction is a branch/jump)\n  assign dec_jal = // ... (Determine if the instruction is jal)\n  assign dec_jalr = // ... (Determine if the instruction is jalr)\n  assign dec_bxx = // ... (Determine if the instruction is a branch)\n  assign dec_jalr_rs1idx = // ... (Extract the register index for jalr)\n  assign dec_bjp_imm = // ... (Extract the immediate value for branch/jump)\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = // ... (Determine if the instruction is a NICE instruction)\n  assign nice_cmt_off_ilgl_o = // ... (Determine if the NICE instruction is illegal when NICE is disabled)\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 16, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire nonalu_excpirq_flush_req_raw;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire brchmis_flush_req;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_pc;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire flush_req;\n\n  // Exception handling submodule instantiation\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(excpirq_flush_add_op1),\n    .excpirq_flush_add_op2(excpirq_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Branch resolution submodule instantiation\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(brchmis_flush_add_op1),\n    .brchmis_flush_add_op2(brchmis_flush_add_op2),\n    .brchmis_flush_pc(brchmis_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & flush_req;\n  assign flush_req = pipe_flush_req;\n\n  // PC computation logic\n  assign pipe_flush_add_op1 = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_add_op1;\n  assign pipe_flush_add_op2 = excpirq_flush_req ? excpirq_flush_add_op2 : brchmis_flush_add_op2;\n\n  // Commit signals\n  assign commit_mret = alu_cmt_i_mret;\n  assign cmt_instret_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 19, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_x0 = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_op1_imm = csr_i_info[E203_DECINFO_CSR_ZIMMM +: 5];\n  wire [11:0] csr_op1_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX +: 12];\n\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_op1_imm} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_x0) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_x0)\n  );\n\n  assign csr_idx = csr_op1_idx;\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 18, "code": "module e203_exu_alu_dpath (\n  input  wire                     alu_req_alu,\n  input  wire                     alu_req_alu_add,\n  input  wire                     alu_req_alu_sub,\n  input  wire                     alu_req_alu_xor,\n  input  wire                     alu_req_alu_sll,\n  input  wire                     alu_req_alu_srl,\n  input  wire                     alu_req_alu_sra,\n  input  wire                     alu_req_alu_or,\n  input  wire                     alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]     alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     alu_req_alu_op2,\n  input  wire                     bjp_req_alu,\n  input  wire [E203_XLEN-1:0]     bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     bjp_req_alu_op2,\n  input  wire                     agu_req_alu,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_op2,\n  input  wire                     muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                     muldiv_req_alu_add,\n  input  wire                     muldiv_req_alu_sub,\n  input  wire                     muldiv_sbf_0_ena,\n  input  wire [32:0]              muldiv_sbf_0_nxt,\n  input  wire                     muldiv_sbf_1_ena,\n  input  wire [32:0]              muldiv_sbf_1_nxt,\n  input  wire                     clk,\n  input  wire                     rst_n,\n\n  output wire [E203_XLEN-1:0]     alu_req_alu_res,\n  output wire [E203_XLEN-1:0]     bjp_req_alu_add_res,\n  output wire                     bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]     agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]              muldiv_sbf_0_r,\n  output wire [32:0]              muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu ? alu_req_alu_op1 : \n                                 bjp_req_alu ? bjp_req_alu_op1 : \n                                 agu_req_alu ? agu_req_alu_op1 : \n                                 muldiv_req_alu ? muldiv_req_alu_op1[E203_XLEN-1:0] : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu ? alu_req_alu_op2 : \n                                 bjp_req_alu ? bjp_req_alu_op2 : \n                                 agu_req_alu ? agu_req_alu_op2 : \n                                 muldiv_req_alu ? muldiv_req_alu_op2[E203_XLEN-1:0] : \n                                 {E203_XLEN{1'b0}};\n\n  wire [E203_XLEN-1:0] alu_add_res = alu_op1 + alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_op1 - alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_op1 ^ alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_op1 << alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_op1 >> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_op1) >>> alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_op1 | alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_op1 & alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res) |\n                           ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operation logic\n  assign bjp_req_alu_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  assign agu_req_alu_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res) |\n                              ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared buffer logic\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden (muldiv_sbf_0_ena),\n    .dnxt (muldiv_sbf_0_nxt),\n    .qout (muldiv_sbf_0_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden (muldiv_sbf_1_ena),\n    .dnxt (muldiv_sbf_1_nxt),\n    .qout (muldiv_sbf_1_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 20, "code": "module e203_exu_alu_bjp(\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN_IS_32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 18, "code": "module e203_exu_branchslv(\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_req;\n\n  assign cmt_i_ready = ~flush_need | flush_ack | ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_bjp & ~cmt_i_bjp_prdt ? cmt_i_imm[E203_PC_SIZE-1:0] : (cmt_i_rv32 ? 4 : 2);\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = \n      cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n      cmt_i_bjp & ~cmt_i_bjp_prdt ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n      cmt_i_dret ? csr_dpc_r :\n      csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 15, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n  `ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n  `endif\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcounterstop;\n\n  // Default values for read-only CSRs\n  initial begin\n    mvendorid = 32'h00000214; // Vendor ID\n    marchid = 32'h000000E2;   // Architecture ID\n    mimpid = 32'h00000001;    // Implementation ID\n    mhartid = core_mhartid;   // Hart ID\n  end\n\n  // CSR access illegal flag\n  assign csr_access_ilgl = 1'b0; // Always set to 0, assuming no illegal access\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h301: read_csr_dat = misa;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcounterstop;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'h00001800; // Default mstatus value\n      mie <= 32'h0;\n      mip <= 32'h0;\n      mtvec <= `ifdef E203_SUPPORT_MTVEC E203_MTVEC_TRAP_BASE `else 32'h0 `endif;\n      mscratch <= `ifdef E203_SUPPORT_MSCRATCH 32'h0 `else 32'h0 `endif;\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= 32'h0;\n      mbadaddr <= {E203_ADDR_SIZE{1'b0}};\n      mcounterstop <= 32'h0;\n    end else if (csr_ena && csr_wr_en && !csr_access_ilgl) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h305: mtvec <= `ifdef E203_SUPPORT_MTVEC wbck_csr_dat `else mtvec `endif;\n        12'h340: mscratch <= `ifdef E203_SUPPORT_MSCRATCH wbck_csr_dat `else mscratch `endif;\n        12'h341: mepc <= {wbck_csr_dat[E203_PC_SIZE-1:1], 1'b0};\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcounterstop <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // CSR update logic for trap handling\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n    end else begin\n      if (cmt_status_ena) begin\n        mstatus[7] <= mstatus[3]; // Update MPIE with current MIE\n        mstatus[3] <= 1'b0;       // Clear MIE\n      end\n      if (cmt_mret_ena) begin\n        mstatus[3] <= mstatus[7]; // Restore MIE from MPIE\n        mstatus[7] <= 1'b1;       // Set MPIE\n      end\n      if (cmt_epc_ena) begin\n        mepc <= {cmt_epc[E203_PC_SIZE-1:1], 1'b0};\n      end\n      if (cmt_cause_ena) begin\n        mcause <= cmt_cause;\n      end\n      if (cmt_badaddr_ena) begin\n        mbadaddr <= cmt_badaddr;\n      end\n    end\n  end\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR write enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_ena && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_ena && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_ena && csr_wr_en;\n\n  // CSR read signals for exception handling\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Clock gating and other control signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\n  `ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0; // NICE is always on\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 14, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction forwarding logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 12, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_rdwen;\n  reg [E203_RFIDX_WIDTH-1:0] fifo_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] fifo_pc [0:E203_OITF_DEPTH-1];\n  reg [E203_OITF_DEPTH-1:0] fifo_rdfpu;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n  \n  // Full and empty conditions\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  \n  // Dispatch logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      fifo_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      fifo_pc[dis_ptr_r] <= disp_i_pc;\n      fifo_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1))\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1))\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  assign ret_rdidx = fifo_rdidx[ret_ptr_r];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_r];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_r];\n  assign ret_pc = fifo_pc[ret_ptr_r];\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs1idx) & ~fifo_rdfpu & disp_i_rs1en);\n  assign oitfrd_match_disprs2 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs2idx) & ~fifo_rdfpu & disp_i_rs2en);\n  assign oitfrd_match_disprs3 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs3idx) & ~fifo_rdfpu & disp_i_rs3en);\n  assign oitfrd_match_disprd = |(fifo_rdwen & (fifo_rdidx == disp_i_rdidx) & ~fifo_rdfpu & disp_i_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 16, "code": "module e203_exu_regfile (\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output wire [E203_XLEN-1:0] read_src1_dat,\n  output wire [E203_XLEN-1:0] read_src2_dat,\n  input  wire wbck_dest_wen,\n  input  wire [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  wire [E203_XLEN-1:0] wbck_dest_dat,\n  output wire [E203_XLEN-1:0] x1_r,\n  input  wire test_mode,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n  assign x1_r = regfile[1];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 16, "code": "module e203_exu_csr (\n  input  wire nonflush_cmt_ena, // not used\n  input  wire csr_ena,\n  input  wire csr_wr_en,\n  input  wire csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input  wire [E203_XLEN-1:0] wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire ext_irq_r,\n  input  wire sft_irq_r,\n  input  wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0] cmt_epc,\n  input  wire cmt_epc_ena,\n  input  wire [E203_XLEN-1:0] cmt_cause,\n  input  wire cmt_cause_ena,\n  input  wire cmt_status_ena,\n  input  wire cmt_instret_ena,\n  input  wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input  wire clk_aon,\n  input  wire clk,\n  input  wire rst_n\n  `ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n  `endif\n);\n\n  // Define CSR registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mcounterstop;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // Initialize CSR registers\n  initial begin\n    mstatus = 32'b00000000000000000000000000000000;\n    mie = 32'b00000000000000000000000000000000;\n    mip = 32'b00000000000000000000000000000000;\n    mtvec = 32'b00000000000000000000000000000000;\n    mscratch = 32'b00000000000000000000000000000000;\n    mepc = 0;\n    mcause = 32'b00000000000000000000000000000000;\n    mbadaddr = 0;\n    misa = 32'b00000000000000000000000000000000;\n    mvendorid = 32'b00000000000000000000000000000000;\n    marchid = 32'b00000000000000000000000000000000;\n    mimpid = 32'b00000000000000000000000000000000;\n    mhartid = 32'b00000000000000000000000000000000;\n    mcycle = 32'b00000000000000000000000000000000;\n    minstret = 32'b00000000000000000000000000000000;\n    mcounterstop = 32'b00000000000000000000000000000000;\n    dcsr = 32'b00000000000000000000000000000000;\n    dpc = 0;\n    dscratch = 32'b00000000000000000000000000000000;\n  end\n\n  // CSR access logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h301: read_csr_dat = misa;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      12'hBFF: read_csr_dat = mcounterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // CSR write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'b00000000000000000000000000000000;\n      mie <= 32'b00000000000000000000000000000000;\n      mip <= 32'b00000000000000000000000000000000;\n      mtvec <= 32'b00000000000000000000000000000000;\n      mscratch <= 32'b00000000000000000000000000000000;\n      mepc <= 0;\n      mcause <= 32'b00000000000000000000000000000000;\n      mbadaddr <= 0;\n      misa <= 32'b00000000000000000000000000000000;\n      mvendorid <= 32'b00000000000000000000000000000000;\n      marchid <= 32'b00000000000000000000000000000000;\n      mimpid <= 32'b00000000000000000000000000000000;\n      mhartid <= 32'b00000000000000000000000000000000;\n      mcycle <= 32'b00000000000000000000000000000000;\n      minstret <= 32'b00000000000000000000000000000000;\n      mcounterstop <= 32'b00000000000000000000000000000000;\n      dcsr <= 32'b00000000000000000000000000000000;\n      dpc <= 0;\n      dscratch <= 32'b00000000000000000000000000000000;\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hBFF: mcounterstop <= wbck_csr_dat;\n        12'h7b0: dcsr <= wbck_csr_dat;\n        12'h7b1: dpc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h7b2: dscratch <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR write enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR read outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n\n  // Custom control signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\n  `ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 19, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_res;\n  assign alu_res = (alu_req_alu_add) ? (alu_req_alu_op1 + alu_req_alu_op2) :\n                   (alu_req_alu_sub) ? (alu_req_alu_op1 - alu_req_alu_op2) :\n                   (alu_req_alu_xor) ? (alu_req_alu_op1 ^ alu_req_alu_op2) :\n                   (alu_req_alu_sll) ? (alu_req_alu_op1 << alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_srl) ? (alu_req_alu_op1 >> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_sra) ? ($signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0]) :\n                   (alu_req_alu_or)  ? (alu_req_alu_op1 | alu_req_alu_op2) :\n                   (alu_req_alu_and) ? (alu_req_alu_op1 & alu_req_alu_op2) :\n                   {E203_XLEN{1'b0}};\n\n  assign alu_req_alu_res = alu_res;\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res;\n  assign bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_res;\n  assign agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  assign muldiv_res = (muldiv_req_alu_add) ? (muldiv_req_alu_op1 + muldiv_req_alu_op2) :\n                      (muldiv_req_alu_sub) ? (muldiv_req_alu_op1 - muldiv_req_alu_op2) :\n                      {E203_ALU_ADDER_WIDTH{1'b0}};\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared buffer logic\n  reg [32:0] sbf_0_r, sbf_1_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 33'b0;\n      sbf_1_r <= 33'b0;\n    end else begin\n      if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 13, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] rdwen_fifo;\n  reg [E203_OITF_DEPTH-1:0] rdfpu_fifo;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] pc_fifo [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch and retire pointers\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  // Full and empty conditions\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && !oitf_full) begin\n      rdwen_fifo[dis_ptr_r] <= disp_i_rdwen;\n      rdfpu_fifo[dis_ptr_r] <= disp_i_rdfpu;\n      rdidx_fifo[dis_ptr_r] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_r] <= disp_i_pc;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdwen <= rdwen_fifo[ret_ptr_r];\n      ret_rdfpu <= rdfpu_fifo[ret_ptr_r];\n      ret_rdidx <= rdidx_fifo[ret_ptr_r];\n      ret_pc <= pc_fifo[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs1idx) & (rdfpu_fifo == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs2idx) & (rdfpu_fifo == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs3idx) & (rdfpu_fifo == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(rdwen_fifo & (rdidx_fifo == disp_i_rdidx) & (rdfpu_fifo == disp_i_rdfpu));\n\n  // Ready signal\n  assign dis_ready = !oitf_full;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 16, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n  \n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (req_need_2uop_r ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         state_2nd_exit_ena ? (ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         icb_state;\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_i_rdy;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= ifu_req_lane_cross && ~ifu_req_lane_holdup;\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= holdup2leftover_ena ? ifu_icb_rsp_rdata_lsb16 : ifu_icb_rsp_rdata[31:16];\n      leftover_err_r <= holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = ifu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err | leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = ifu_req_hsked && ~req_need_0uop_r || req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0] == ITCM_ADDR_BASE);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // ICB Request Distribution Implementation\n  assign ifu2itcm_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2itcm;\n  assign ifu2itcm_icb_cmd_addr = ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0];\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready);\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 20, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // Define the internal signals and submodule instances here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 17, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire pipe_flush_req;\n  wire pipe_flush_ack;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Exception handling module instantiation\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(pipe_flush_ack),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(excpirq_flush_add_op1),\n    .excpirq_flush_add_op2(excpirq_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Branch resolution module instantiation\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(pipe_flush_ack),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(brchmis_flush_add_op1),\n    .brchmis_flush_add_op2(brchmis_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n  assign pipe_flush_add_op1 = excpirq_flush_req ? excpirq_flush_add_op1 : brchmis_flush_add_op1;\n  assign pipe_flush_add_op2 = excpirq_flush_req ? excpirq_flush_add_op2 : brchmis_flush_add_op2;\n\n  // Commit logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 12, "code": "module e203_exu_longpwbck (\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_buserr;\n  wire [E203_ADDR_SIZE-1:0] wbck_i_badaddr;\n  wire wbck_i_ld;\n  wire wbck_i_st;\n\n  // Arbitration logic\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      || nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) &&\n                        (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign lsu_wbck_i_ready = wbck_i_ready && (oitf_ret_ptr == lsu_wbck_i_itag);\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready && (oitf_ret_ptr == nice_longp_wbck_i_itag);\n`endif\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                      || nice_longp_wbck_i_err\n`endif\n                      ;\n\n  assign wbck_i_wdat = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign wbck_i_buserr = lsu_cmt_i_buserr;\n  assign wbck_i_badaddr = lsu_cmt_i_badaddr;\n  assign wbck_i_ld = lsu_cmt_i_ld;\n  assign wbck_i_st = lsu_cmt_i_st;\n\n  // Write-back and exception logic\n  assign longp_wbck_o_valid = wbck_i_valid && oitf_ret_rdwen && !wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_flags = 5'b0; // Placeholder for additional status flags\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n\n  assign longp_excp_o_valid = wbck_i_valid && wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = wbck_i_ld;\n  assign longp_excp_o_st = wbck_i_st;\n  assign longp_excp_o_buserr = wbck_i_buserr;\n  assign longp_excp_o_badaddr = wbck_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid && wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 17, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine States\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r && !ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_WAIT2ND;\n          else if (req_need_2uop_r && ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n          else if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_i_rdy;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(ifu_rsp_bypbuf_i_rdy),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) || (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) || (ifu_req_pc[2:1] == 2'b00);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n  wire leftover_ena = holdup2leftover_ena || uop1st2leftover_ena;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  wire holdup_gen_fake_rsp_valid = (icb_state == ICB_STATE_1ST) && ~req_need_2uop_r;\n  wire ifu_icb_rsp2ir_valid = ifu_icb_rsp_valid && ~ifu_icb_rsp2leftover;\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && ((icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked) || (icb_state == ICB_STATE_WAIT2ND)));\n\n  wire icb_addr_sel_1stnxtalgn = holdup2leftover_sel;\n  wire icb_addr_sel_2ndnxtalgn = req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n  wire icb_addr_sel_cur = ~(icb_addr_sel_1stnxtalgn || icb_addr_sel_2ndnxtalgn);\n\n  wire [PC_SIZE-1:0] icb_cmd_addr = icb_addr_sel_cur ? ifu_req_pc : ifu_req_last_pc;\n\n  wire ifu_icb_cmd2itcm = (icb_cmd_addr >= ITCM_BASE_ADDR) && (icb_cmd_addr < ITCM_END_ADDR);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  wire ifu_req_ready_condi = (icb_state == ICB_STATE_IDLE) || ((req_need_0uop_r || req_need_1uop_r) && (icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked)) || (req_need_2uop_r && (icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked));\n\n  assign ifu_req_ready = ifu_icb_cmd_ready && ifu_req_ready_condi;\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover ? 1'b1 : i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  wire ifu_icb_cmd2biu_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd2biu_pre;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr_pre;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 17, "code": "`include \"e203_defines.v\"\n\nmodule e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [`E203_XLEN-1:0] muldiv_i_rs1,\n  input [`E203_XLEN-1:0] muldiv_i_rs2,\n  input [`E203_XLEN-1:0] muldiv_i_imm,\n  input [`E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [`E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [`E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input [32:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and state machine declarations\n  localparam MULDIV_STATE_0TH = 3'b000;\n  localparam MULDIV_STATE_EXEC = 3'b001;\n  localparam MULDIV_STATE_REMD_CHCK = 3'b010;\n  localparam MULDIV_STATE_QUOT_CORR = 3'b011;\n  localparam MULDIV_STATE_REMD_CORR = 3'b100;\n\n  reg [2:0] state;\n  reg [4:0] cycle_cnt;\n\n  wire mul_op = muldiv_i_info[`E203_DECINFO_MULDIV_MUL];\n  wire div_op = muldiv_i_info[`E203_DECINFO_MULDIV_DIV];\n  wire rem_op = muldiv_i_info[`E203_DECINFO_MULDIV_REM];\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && (cycle_cnt == 0);\n\n  // State machine for multiplier/divider operations\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n      cycle_cnt <= 0;\n    end else begin\n      case (state)\n        MULDIV_STATE_0TH: begin\n          if (muldiv_i_valid && muldiv_i_ready) begin\n            state <= MULDIV_STATE_EXEC;\n            cycle_cnt <= mul_op ? 17 : 33;\n          end\n        end\n        MULDIV_STATE_EXEC: begin\n          if (cycle_cnt == 0) begin\n            if (div_op) state <= MULDIV_STATE_REMD_CHCK;\n            else state <= MULDIV_STATE_0TH;\n          end else begin\n            cycle_cnt <= cycle_cnt - 1;\n          end\n        end\n        MULDIV_STATE_REMD_CHCK: begin\n          state <= MULDIV_STATE_QUOT_CORR;\n        end\n        MULDIV_STATE_QUOT_CORR: begin\n          state <= MULDIV_STATE_REMD_CORR;\n        end\n        MULDIV_STATE_REMD_CORR: begin\n          state <= MULDIV_STATE_0TH;\n        end\n      endcase\n    end\n  end\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = muldiv_i_rs1;\n  assign muldiv_req_alu_op2 = muldiv_i_rs2;\n  assign muldiv_req_alu_add = mul_op;\n  assign muldiv_req_alu_sub = div_op;\n\n  // Write-back logic\n  assign muldiv_o_wbck_wdat = muldiv_req_alu_res;\n  assign muldiv_o_wbck_err = 1'b0;\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = {muldiv_req_alu_res, 1'b0};\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_REMD_CHCK);\n  assign muldiv_sbf_1_nxt = {muldiv_req_alu_res, 1'b0};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 20, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [3:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 4'd0);\n  wire icb_sta_is_1st = (icb_state == 4'd1);\n  wire icb_sta_is_amoalu = (icb_state == 4'd4);\n  wire icb_sta_is_amordy = (icb_state == 4'd5);\n  wire icb_sta_is_wait2nd = (icb_state == 4'd2);\n  wire icb_sta_is_2nd = (icb_state == 4'd3);\n  wire icb_sta_is_wbck = (icb_state == 4'd6);\n\n  // State transition logic\n  wire state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit & agu_icb_cmd_hsked & (~flush_pulse);\n  wire state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_amoalu_exit_ena = icb_sta_is_amoalu & (1'b1 | flush_pulse);\n  wire state_amordy_exit_ena = icb_sta_is_amordy & (1'b1 | flush_pulse);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n  wire state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  wire state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n\n  // Flush block logic\n  wire flush_block = flush_req & icb_sta_is_idle;\n\n  // State machine\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 4'd0;\n    end else begin\n      if (state_idle_exit_ena) icb_state <= 4'd1;\n      else if (state_1st_exit_ena) icb_state <= 4'd4;\n      else if (state_amoalu_exit_ena) icb_state <= 4'd5;\n      else if (state_amordy_exit_ena) icb_state <= 4'd2;\n      else if (state_wait2nd_exit_ena) icb_state <= 4'd3;\n      else if (state_2nd_exit_ena) icb_state <= 4'd6;\n      else if (state_wbck_exit_ena) icb_state <= 4'd0;\n    end\n  end\n\n  // Additional logic for AGU operations, exception handling, and LSU interface\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 13, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_ADDR_SIZE-1:0] mtval;\n  reg core_wfi_reg;\n  reg wfi_halt_ifu_req_reg;\n  reg wfi_halt_exu_req_reg;\n\n  // Exception handling logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mcause <= 0;\n      mepc <= 0;\n      mtval <= 0;\n      core_wfi_reg <= 0;\n      wfi_halt_ifu_req_reg <= 0;\n      wfi_halt_exu_req_reg <= 0;\n    end else begin\n      // Exception handling logic\n      if (alu_excp_i_valid) begin\n        if (alu_excp_i_misalgn) begin\n          mcause <= 0;\n          mepc <= alu_excp_i_pc;\n          mtval <= alu_excp_i_pc;\n        end else if (alu_excp_i_buserr) begin\n          mcause <= 1;\n          mepc <= alu_excp_i_pc;\n          mtval <= alu_excp_i_pc;\n        end else if (alu_excp_i_ilegl) begin\n          mcause <= 2;\n          mepc <= alu_excp_i_pc;\n          mtval <= alu_excp_i_instr;\n        end else if (alu_excp_i_ebreak) begin\n          mcause <= 3;\n          mepc <= alu_excp_i_pc;\n          mtval <= alu_excp_i_pc;\n        end else if (alu_excp_i_ecall) begin\n          mcause <= 11;\n          mepc <= alu_excp_i_pc;\n          mtval <= 0;\n        end\n      end\n\n      // WFI handling logic\n      if (alu_excp_i_wfi & cmt_ena & ~dbg_mode) begin\n        wfi_halt_ifu_req_reg <= 1;\n        wfi_halt_exu_req_reg <= 1;\n      end\n\n      if (wfi_halt_ifu_ack & wfi_halt_exu_ack) begin\n        core_wfi_reg <= 1;\n      end\n\n      if ((sft_irq_r & msie_r) | (tmr_irq_r & mtie_r) | (ext_irq_r & meie_r) | dbg_irq_r) begin\n        core_wfi_reg <= 0;\n        wfi_halt_ifu_req_reg <= 0;\n        wfi_halt_exu_req_reg <= 0;\n      end\n    end\n  end\n\n  // Output assignments\n  assign commit_trap = alu_excp_i_valid | longp_excp_i_valid;\n  assign core_wfi = core_wfi_reg;\n  assign wfi_halt_ifu_req = wfi_halt_ifu_req_reg;\n  assign wfi_halt_exu_req = wfi_halt_exu_req_reg;\n  assign excpirq_flush_req = alu_excp_i_valid | longp_excp_i_valid;\n  assign nonalu_excpirq_flush_req_raw = longp_excp_i_valid;\n  assign excpirq_flush_add_op1 = (dbg_mode) ? 32'h800 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 0;\n  assign cmt_badaddr = mtval;\n  assign cmt_epc = mepc;\n  assign cmt_cause = mcause;\n  assign cmt_badaddr_ena = alu_excp_i_valid | longp_excp_i_valid;\n  assign cmt_epc_ena = alu_excp_i_valid | longp_excp_i_valid;\n  assign cmt_cause_ena = alu_excp_i_valid | longp_excp_i_valid;\n  assign cmt_status_ena = alu_excp_i_valid | longp_excp_i_valid;\n  assign cmt_dpc = mepc;\n  assign cmt_dpc_ena = alu_excp_i_valid | longp_excp_i_valid;\n  assign cmt_dcause = mcause[2:0];\n  assign cmt_dcause_ena = alu_excp_i_valid | longp_excp_i_valid;\n  assign excp_active = alu_excp_i_valid | longp_excp_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 19, "code": "module e203_exu_branchslv(\n  input  cmt_i_valid,\n  output cmt_i_ready,\n  input  cmt_i_rv32,\n  input  cmt_i_dret,\n  input  cmt_i_mret,\n  input  cmt_i_fencei,\n  input  cmt_i_bjp,\n  input  cmt_i_bjp_prdt,\n  input  cmt_i_bjp_rslv,\n  input  [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  [E203_XLEN-1:0] cmt_i_imm,\n  input  [E203_PC_SIZE-1:0] csr_epc_r,\n  input  [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input  clk,\n  input  rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  wire flush_ack = brchmis_flush_ack;\n\n  assign brchmis_flush_req = flush_req;\n  assign cmt_i_ready = ~flush_need | flush_ack | ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_bjp ? (cmt_i_bjp_prdt ? (cmt_i_rv32 ? 32'h4 : 32'h2) : cmt_i_imm[E203_PC_SIZE-1:0]) : 32'h0;\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n                              (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                              cmt_i_dret ? csr_dpc_r :\n                              csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 18, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 15, "code": "module e203_exu_nice (\n  input  wire          nice_i_xs_off,\n  input  wire          nice_i_valid,\n  output wire          nice_i_ready,\n  input  wire [31:0]   nice_i_instr,\n  input  wire [31:0]   nice_i_rs1,\n  input  wire [31:0]   nice_i_rs2,\n  input  wire [1:0]    nice_i_itag,\n  output wire          nice_o_longpipe,\n  output wire          nice_o_valid,\n  input  wire          nice_o_ready,\n  output wire          nice_o_itag_valid,\n  input  wire          nice_o_itag_ready,\n  output wire [1:0]    nice_o_itag,\n  input  wire          nice_rsp_multicyc_valid,\n  output wire          nice_rsp_multicyc_ready,\n  output wire          nice_req_valid,\n  input  wire          nice_req_ready,\n  output wire [31:0]   nice_req_instr,\n  output wire [31:0]   nice_req_rs1,\n  output wire [31:0]   nice_req_rs2,\n  input  wire          clk,\n  input  wire          rst_n\n);\n\n  // Internal signals\n  reg [1:0] itag_fifo [0:3];\n  reg [1:0] fifo_head, fifo_tail;\n  reg fifo_empty, fifo_full;\n  reg [1:0] current_itag;\n\n  // NICE request handling\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1   = nice_i_rs1;\n  assign nice_req_rs2   = nice_i_rs2;\n  assign nice_i_ready   = nice_req_ready || nice_i_xs_off;\n\n  // Instruction tag FIFO management\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      fifo_head <= 0;\n      fifo_tail <= 0;\n      fifo_empty <= 1;\n      fifo_full <= 0;\n    end else begin\n      if (nice_req_valid && nice_req_ready && !fifo_full) begin\n        itag_fifo[fifo_tail] <= nice_i_itag;\n        fifo_tail <= fifo_tail + 1;\n        fifo_empty <= 0;\n        if (fifo_tail + 1 == fifo_head) fifo_full <= 1;\n      end\n      if (nice_rsp_multicyc_valid && nice_rsp_multicyc_ready && !fifo_empty) begin\n        current_itag <= itag_fifo[fifo_head];\n        fifo_head <= fifo_head + 1;\n        fifo_full <= 0;\n        if (fifo_head + 1 == fifo_tail) fifo_empty <= 1;\n      end\n    end\n  end\n\n  // Multi-cycle operation completion\n  assign nice_rsp_multicyc_ready = !fifo_empty;\n  assign nice_o_itag_valid = nice_rsp_multicyc_valid && !fifo_empty;\n  assign nice_o_itag = current_itag;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = !nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid && nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 20, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu_op1;\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res;\n\n  assign alu_res = \n    ({E203_XLEN{alu_req_alu_add}} & (alu_op1 + alu_op2)) |\n    ({E203_XLEN{alu_req_alu_sub}} & (alu_op1 - alu_op2)) |\n    ({E203_XLEN{alu_req_alu_xor}} & (alu_op1 ^ alu_op2)) |\n    ({E203_XLEN{alu_req_alu_sll}} & (alu_op1 << alu_op2[4:0])) |\n    ({E203_XLEN{alu_req_alu_srl}} & (alu_op1 >> alu_op2[4:0])) |\n    ({E203_XLEN{alu_req_alu_sra}} & (alu_op1 >>> alu_op2[4:0])) |\n    ({E203_XLEN{alu_req_alu_or}}  & (alu_op1 | alu_op2)) |\n    ({E203_XLEN{alu_req_alu_and}} & (alu_op1 & alu_op2));\n\n  assign alu_req_alu_res = alu_res;\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_op1 = bjp_req_alu_op1;\n  wire [E203_XLEN-1:0] bjp_op2 = bjp_req_alu_op2;\n  wire [E203_XLEN-1:0] bjp_add_res;\n  wire bjp_cmp_res;\n\n  assign bjp_add_res = bjp_op1 + bjp_op2;\n  assign bjp_cmp_res = (bjp_op1 == bjp_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_op1 = agu_req_alu_op1;\n  wire [E203_XLEN-1:0] agu_op2 = agu_req_alu_op2;\n  wire [E203_XLEN-1:0] agu_res;\n\n  assign agu_res = agu_op1 + agu_op2;\n\n  assign agu_req_alu_res = agu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_op1 = muldiv_req_alu_op1;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_op2 = muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n\n  assign muldiv_res = \n    ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & (muldiv_op1 + muldiv_op2)) |\n    ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & (muldiv_op1 - muldiv_op2));\n\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared Buffer logic\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 14, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} :\n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} :\n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] bpu_pc = pc_r;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (~rst_n) begin\n      // Reset condition\n    end else begin\n      // Check ifu_req_valid is not X\n      if (^ifu_req_valid === 1'bx) begin\n        $fatal(\"ifu_req_valid is X\");\n      end\n    end\n  end\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 19, "code": "module e203_exu_alu_rglr (\n  input  wire                  alu_i_valid,\n  output wire                  alu_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_i_rs1,\n  input  wire [E203_XLEN-1:0]  alu_i_rs2,\n  input  wire [E203_XLEN-1:0]  alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                  alu_o_valid,\n  input  wire                  alu_o_ready,\n  output wire [E203_XLEN-1:0]  alu_o_wbck_wdat,\n  output wire                  alu_o_wbck_err,\n  output wire                  alu_o_cmt_ecall,\n  output wire                  alu_o_cmt_ebreak,\n  output wire                  alu_o_cmt_wfi,\n  output wire                  alu_req_alu_add,\n  output wire                  alu_req_alu_sub,\n  output wire                  alu_req_alu_xor,\n  output wire                  alu_req_alu_sll,\n  output wire                  alu_req_alu_srl,\n  output wire                  alu_req_alu_sra,\n  output wire                  alu_req_alu_or,\n  output wire                  alu_req_alu_and,\n  output wire                  alu_req_alu_slt,\n  output wire                  alu_req_alu_sltu,\n  output wire                  alu_req_alu_lui,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  alu_req_alu_op2,\n  output wire [E203_XLEN-1:0]  alu_req_alu_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc  = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire nop    = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~nop;\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 12, "code": "module e203_exu_wbck (\n  input                   alu_wbck_i_valid,\n  output                  alu_wbck_i_ready,\n  input  [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input                   longp_wbck_i_valid,\n  output                  longp_wbck_i_ready,\n  input  [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  [4:0]            longp_wbck_i_flags,\n  input  [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input                   longp_wbck_i_rdfpu,\n\n  output                  rf_wbck_o_ena,\n  output [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input                   clk,\n  input                   rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 18, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input  wire itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input  wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_MEM_ITF\n  output wire ifu2biu_icb_cmd_valid,\n  input  wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 9, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 17, "code": "module e203_exu_csr (\n  input  wire nonflush_cmt_ena, // not used\n  input  wire csr_ena,\n  input  wire csr_wr_en,\n  input  wire csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input  wire [E203_XLEN-1:0] wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire ext_irq_r,\n  input  wire sft_irq_r,\n  input  wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0] cmt_epc,\n  input  wire cmt_epc_ena,\n  input  wire [E203_XLEN-1:0] cmt_cause,\n  input  wire cmt_cause_ena,\n  input  wire cmt_status_ena,\n  input  wire cmt_instret_ena,\n  input  wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input  wire clk_aon,\n  input  wire clk,\n  input  wire rst_n\n  `ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n  `endif\n);\n\n  // Internal registers for CSR\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcounterstop;\n\n  // CSR default values\n  initial begin\n    mstatus = 32'b00000000000000000000000000001100; // Default mstatus\n    mie = 32'b0; // Default mie\n    mip = 32'b0; // Default mip\n    mtvec = `ifdef E203_SUPPORT_MTVEC E203_MTVEC_TRAP_BASE `else 32'b0 `endif; // Default mtvec\n    mscratch = `ifdef E203_SUPPORT_MSCRATCH 32'b0 `else 32'b0 `endif; // Default mscratch\n    mepc = 32'b0; // Default mepc\n    mcause = 32'b0; // Default mcause\n    mbadaddr = 32'b0; // Default mbadaddr\n    misa = 32'b01000000000000000000000000000000; // Default misa\n    mvendorid = 32'b00000000000000000000000000000000; // Default mvendorid\n    marchid = 32'b00000000000000000000000000000000; // Default marchid\n    mimpid = 32'b00000000000000000000000000000000; // Default mimpid\n    mhartid = 32'b00000000000000000000000000000000; // Default mhartid\n    mcounterstop = 32'b0; // Default mcounterstop\n  end\n\n  // CSR access control logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h301: read_csr_dat = misa;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = mcounterstop;\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // CSR write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset all CSR registers\n      mstatus <= 32'b00000000000000000000000000001100;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mtvec <= `ifdef E203_SUPPORT_MTVEC E203_MTVEC_TRAP_BASE `else 32'b0 `endif;\n      mscratch <= `ifdef E203_SUPPORT_MSCRATCH 32'b0 `else 32'b0 `endif;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      misa <= 32'b01000000000000000000000000000000;\n      mvendorid <= 32'b00000000000000000000000000000000;\n      marchid <= 32'b00000000000000000000000000000000;\n      mimpid <= 32'b00000000000000000000000000000000;\n      mhartid <= 32'b00000000000000000000000000000000;\n      mcounterstop <= 32'b0;\n    end else if (csr_ena && csr_wr_en && !csr_access_ilgl) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat;\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat;\n        12'hBFF: mcounterstop <= wbck_csr_dat;\n        default: ;\n      endcase\n    end\n  end\n\n  // Mode status\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Debug CSR write enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // Debug CSR read signals\n  assign csr_dpc_r = dpc_r;\n\n  // Interrupt enable status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Clock gating and stop signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\n  // CSR EPC read signal\n  assign csr_epc_r = mepc;\n\n  // CSR MTVEC read signal\n  assign csr_mtvec_r = mtvec;\n\n  `ifdef E203_HAS_NICE\n  assign nice_xs_off = 1'b0;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 10, "code": "module e203_itcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 18, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & pipe_flush_ack;\n\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 15, "code": "module e203_exu_disp (\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire raw_dep, waw_dep, csr_dep, fence_dep, wfi_dep;\n  wire alu_ready, oitf_ready, alu_longpipe;\n  wire [E203_XLEN-1:0] alu_rs1, alu_rs2;\n  wire [E203_RFIDX_WIDTH-1:0] alu_rdidx;\n  wire [E203_DECINFO_WIDTH-1:0] alu_info;\n  wire [E203_XLEN-1:0] alu_imm;\n  wire [E203_PC_SIZE-1:0] alu_pc;\n  wire [E203_ITAG_WIDTH-1:0] alu_itag;\n  wire alu_misalgn, alu_buserr, alu_ilegl;\n\n  // Dependency checks\n  assign raw_dep = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  assign waw_dep = oitfrd_match_disprd;\n  assign csr_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  assign fence_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  assign wfi_dep = wfi_halt_exu_req & ~oitf_empty & ~amo_wait;\n\n  // ALU dispatch logic\n  assign alu_ready = disp_o_alu_ready & ~alu_longpipe;\n  assign disp_o_alu_valid = disp_i_valid & alu_ready & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & ~wfi_dep;\n  assign disp_i_ready = alu_ready & disp_oitf_ready & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & ~wfi_dep;\n\n  // ALU operand forwarding\n  assign alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign alu_rdidx = disp_i_rdidx;\n  assign alu_info = disp_i_info;\n  assign alu_imm = disp_i_imm;\n  assign alu_pc = disp_i_pc;\n  assign alu_itag = disp_oitf_ptr;\n  assign alu_misalgn = disp_i_misalgn;\n  assign alu_buserr = disp_i_buserr;\n  assign alu_ilegl = disp_i_ilegl;\n\n  // OITF dispatch logic\n  assign disp_oitf_ena = disp_o_alu_valid & alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 13, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 18, "code": "`include \"e203_defines.v\"\n\nmodule e203_exu_alu_muldiv(\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [`E203_XLEN-1:0] muldiv_i_rs1,\n  input  [`E203_XLEN-1:0] muldiv_i_rs2,\n  input  [`E203_XLEN-1:0] muldiv_i_imm,\n  input  [`E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [`E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [`E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and state machine declarations\n  // FSM states\n  localparam MULDIV_STATE_0TH = 3'd0;\n  localparam MULDIV_STATE_EXEC = 3'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 3'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 3'd3;\n  localparam MULDIV_STATE_REMD_CORR = 3'd4;\n\n  reg [2:0] state;\n  reg [2:0] next_state;\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH);\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution completion */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end else begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for remainder check */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n      default: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_o_wbck_wdat = /* computation result */;\n  assign muldiv_o_wbck_err = 1'b0; // No exceptions for MUL/DIV\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = /* operand 1 */;\n  assign muldiv_req_alu_op2 = /* operand 2 */;\n  assign muldiv_req_alu_add = /* add operation */;\n  assign muldiv_req_alu_sub = /* subtract operation */;\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = /* enable signal */;\n  assign muldiv_sbf_0_nxt = /* next value */;\n  assign muldiv_sbf_1_ena = /* enable signal */;\n  assign muldiv_sbf_1_nxt = /* next value */;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 14, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_flush_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire [E203_XLEN-1:0] mcause;\n  wire [E203_PC_SIZE-1:0] mepc;\n  wire [E203_ADDR_SIZE-1:0] mtval;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n\n  // Instantiate submodules\n  sirv_gnrl_dfflr #(.DW(1)) wfi_flag_dfflr (\n    .lden(alu_excp_i_wfi & cmt_ena),\n    .dnxt(1'b1),\n    .qout(wfi_flag),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(.DW(1)) wfi_halt_req_dfflr (\n    .lden(alu_excp_i_wfi & cmt_ena & ~dbg_mode),\n    .dnxt(1'b1),\n    .qout(wfi_halt_req),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(.DW(1)) step_req_dfflr (\n    .lden(dbg_step_r),\n    .dnxt(1'b1),\n    .qout(step_req),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Exception handling logic\n  assign commit_trap = excpirq_flush_req;\n  assign core_wfi = wfi_flag & wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req & ~excpirq_flush_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_flush_req | irq_flush_req | alu_excp_flush_req;\n  assign nonalu_excpirq_flush_req_raw = dbg_mode_entry_flush_req | irq_flush_req;\n  assign excpirq_flush_add_op1 = dbg_mode_entry_flush_req ? 12'h800 : (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 12'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 0;\n\n  // Exception cause and address logic\n  assign cmt_badaddr = longp_excp_flush_req ? longp_excp_i_badaddr : alu_excp_i_pc;\n  assign cmt_epc = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n  assign cmt_cause = longp_excp_flush_req ? longp_excp_i_insterr : alu_excp_i_instr;\n  assign cmt_badaddr_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_epc_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_cause_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_status_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_dpc = alu_excp_i_pc;\n  assign cmt_dpc_ena = alu_excp_flush_req;\n  assign cmt_dcause = 3'b000;\n  assign cmt_dcause_ena = alu_excp_flush_req;\n\n  // Interrupt and debug logic\n  assign dbg_entry_req = ~dbg_mode & (dbg_irq_r | dbg_halt_r | step_req | dbg_ebreakm_r & alu_excp_i_valid);\n  assign irq_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_flush_req & alu_excp_i_pc_vld & oitf_empty & (sft_irq_r & msie_r | tmr_irq_r & mtie_r | ext_irq_r & meie_r);\n  assign alu_excp_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_flush_req & ~irq_flush_req & oitf_empty & alu_excp_i_valid & (alu_excp_i_misalgn | alu_excp_i_buserr | alu_excp_i_ebreak & ~dbg_ebreakm_r | alu_excp_i_ecall | alu_excp_i_ifu_misalgn | alu_excp_i_ifu_buserr | alu_excp_i_ifu_ilegl);\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 20, "code": "module e203_exu_alu_csrctrl(\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_op1_imm = csr_i_info[E203_DECINFO_CSR_ZIMMM +: 5];\n  wire [11:0] csr_op1_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX +: 12];\n\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {{(E203_XLEN-5){1'b0}}, csr_op1_imm} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_op1_idx;\n\n  assign csr_ena = csr_o_valid & csr_o_ready;\n\n  assign wbck_csr_dat = \n    csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n    csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n    csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n    {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_i_ready = csr_o_ready;\n  assign csr_o_valid = csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 16, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n\n  // Instruction decoding logic goes here\n  // This will include the logic to decode the instruction into the various control signals\n  // and information buses as described in the specification.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 14, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= oitf_rdidx[ret_ptr_r];\n      ret_pc <= oitf_pc[ret_ptr_r];\n      ret_rdwen <= oitf_rdwen[ret_ptr_r];\n      ret_rdfpu <= oitf_rdfpu[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  assign dis_ready = !((dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 15, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_flush_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire [E203_XLEN-1:0] excpirq_flush_pc;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire [E203_XLEN-1:0] cmt_cause;\n  wire [E203_ADDR_SIZE-1:0] cmt_badaddr;\n  wire [E203_PC_SIZE-1:0] cmt_epc;\n  wire cmt_badaddr_ena;\n  wire cmt_epc_ena;\n  wire cmt_cause_ena;\n  wire cmt_status_ena;\n  wire [E203_PC_SIZE-1:0] cmt_dpc;\n  wire cmt_dpc_ena;\n  wire [2:0] cmt_dcause;\n  wire cmt_dcause_ena;\n\n  // WFI handling\n  assign wfi_flag = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_req = wfi_flag & ~wfi_halt_ifu_ack & ~wfi_halt_exu_ack;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception handling\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_flush_req | irq_flush_req | alu_excp_flush_req;\n  assign nonalu_excpirq_flush_req_raw = longp_excp_flush_req | dbg_mode_entry_flush_req | irq_flush_req;\n  assign excpirq_flush_add_op1 = (dbg_mode_entry_flush_req) ? 32'h800 : \n                                 (longp_excp_flush_req | alu_excp_flush_req) ? (dbg_mode ? 32'h808 : csr_mtvec_r) : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 0;\n\n  // Register updates\n  assign cmt_cause = (irq_flush_req) ? {1'b1, 3'b000, 1'b0} : \n                     (alu_excp_flush_req_ifu_misalgn) ? 5'd0 : \n                     (alu_excp_flush_req_ifu_buserr) ? 5'd1 : \n                     (alu_excp_flush_req_ifu_ilegl) ? 5'd2 : \n                     (alu_excp_flush_req_ebreak) ? 5'd3 : \n                     (alu_excp_flush_req_ld_misalgn) ? 5'd4 : \n                     (longp_excp_flush_req_ld_buserr) ? 5'd5 : \n                     (alu_excp_flush_req_stamo_misalgn) ? 5'd6 : \n                     (longp_excp_flush_req_st_buserr) ? 5'd7 : \n                     (alu_excp_flush_req_ecall & u_mode) ? 5'd8 : \n                     (alu_excp_flush_req_ecall & s_mode) ? 5'd9 : \n                     (alu_excp_flush_req_ecall & h_mode) ? 5'd10 : \n                     (alu_excp_flush_req_ecall & m_mode) ? 5'd11 : \n                     (longp_excp_flush_req_insterr) ? 5'd16 : 5'd0;\n\n  assign cmt_epc = (longp_excp_flush_req) ? longp_excp_i_pc : alu_excp_i_pc;\n  assign cmt_badaddr = (longp_excp_flush_req_ld_buserr | longp_excp_flush_req_st_buserr) ? longp_excp_i_badaddr : \n                       (alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr | alu_excp_flush_req_ebreak) ? alu_excp_i_pc : \n                       (alu_excp_flush_req_ifu_ilegl) ? alu_excp_i_instr : 0;\n\n  assign cmt_badaddr_ena = longp_excp_flush_req_ld_buserr | longp_excp_flush_req_st_buserr | \n                           alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr | \n                           alu_excp_flush_req_ebreak | alu_excp_flush_req_ifu_ilegl;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n\n  // Debug handling\n  assign dbg_entry_req = ~dbg_mode & (dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r);\n  assign dbg_mode_entry_flush_req = ~longp_excp_flush_req & alu_excp_i_pc_vld & oitf_empty & dbg_entry_req;\n\n  // Interrupt handling\n  assign irq_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_flush_req & alu_excp_i_pc_vld & oitf_empty & \n                         (sft_irq_r & msie_r | tmr_irq_r & mtie_r | ext_irq_r & meie_r);\n\n  // ALU exception handling\n  assign alu_excp_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_flush_req & ~irq_flush_req & oitf_empty & \n                              (alu_excp_i_misalgn | alu_excp_i_buserr | alu_excp_i_ebreak | alu_excp_i_ecall | \n                               alu_excp_i_ifu_misalgn | alu_excp_i_ifu_buserr | alu_excp_i_ifu_ilegl);\n\n  // Exception active signal\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 16, "code": "module e203_exu_disp (\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Dispatch logic\n  wire disp_condition = \n    (disp_i_valid && \n    !wfi_halt_exu_req && \n    !amo_wait && \n    !oitfrd_match_disprs1 && \n    !oitfrd_match_disprs2 && \n    !oitfrd_match_disprs3 && \n    !oitfrd_match_disprd && \n    (disp_o_alu_ready || !disp_o_alu_longpipe) && \n    (disp_oitf_ready || !disp_o_alu_longpipe));\n\n  assign disp_i_ready = disp_condition;\n  assign disp_o_alu_valid = disp_condition;\n\n  // Operand forwarding\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? 0 : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? 0 : disp_i_rs2;\n\n  // ALU interface\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF interface\n  assign disp_oitf_ena = disp_condition && disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 0;\n  assign disp_oitf_rs2fpu = 0;\n  assign disp_oitf_rs3fpu = 0;\n  assign disp_oitf_rdfpu = 0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = 0;\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req && oitf_empty && !amo_wait;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 19, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input  [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input  [32:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1;\n  reg [E203_XLEN-1:0] op2;\n  reg [E203_XLEN-1:0] quotient;\n  reg [E203_XLEN-1:0] remainder;\n  reg [E203_XLEN-1:0] divisor;\n  reg [E203_XLEN-1:0] dividend;\n  reg [5:0] cycle_count;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH = 5'd0;\n  localparam MULDIV_STATE_EXEC = 5'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 5'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 5'd3;\n  localparam MULDIV_STATE_REMD_CORR = 5'd4;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (cycle_count == 6'd32) begin\n          if (/* condition for remainder check */) begin\n            next_state = MULDIV_STATE_REMD_CHCK;\n          end else begin\n            next_state = MULDIV_STATE_0TH;\n          end\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for quotient correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // Cycle counter logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      cycle_count <= 6'd0;\n    end else if (state == MULDIV_STATE_EXEC) begin\n      cycle_count <= cycle_count + 1'b1;\n    end else begin\n      cycle_count <= 6'd0;\n    end\n  end\n\n  // Handshake logic\n  assign muldiv_i_ready = (state == MULDIV_STATE_0TH);\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && (cycle_count == 6'd32);\n\n  // Result logic\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n\n  // ALU request logic\n  assign muldiv_req_alu_op1 = op1;\n  assign muldiv_req_alu_op2 = op2;\n  assign muldiv_req_alu_add = (state == MULDIV_STATE_EXEC);\n  assign muldiv_req_alu_sub = (state == MULDIV_STATE_EXEC);\n\n  // Shared buffer logic\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = {1'b0, result};\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_1_nxt = {1'b0, result};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 17, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  `ifdef E203_HAS_NICE\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n  `endif\n\n  // Decode logic\n  // The decode logic will be implemented here based on the instruction set\n  // and the specification provided in the document.\n\n  // Example decode logic for R-type instructions\n  always @(*) begin\n    case (i_instr[6:0])\n      7'b0110011: begin // R-type\n        case (i_instr[14:12])\n          3'b000: begin\n            if (i_instr[31:25] == 7'b0000000) begin\n              dec_info = alu_info_bus;\n              dec_info[E203_DECINFO_ALU_ADD] = 1'b1;\n            end else if (i_instr[31:25] == 7'b0100000) begin\n              dec_info = alu_info_bus;\n              dec_info[E203_DECINFO_ALU_SUB] = 1'b1;\n            end\n          end\n          // Other funct3 cases for R-type\n        endcase\n      end\n      // Other opcode cases\n    endcase\n  end\n\n  // Assignments for outputs\n  assign dec_rs1x0 = (dec_rs1idx == 5'b00000);\n  assign dec_rs2x0 = (dec_rs2idx == 5'b00000);\n  assign dec_rs1en = (dec_info[E203_DECINFO_ALU_ADD] || dec_info[E203_DECINFO_ALU_SUB]);\n  assign dec_rs2en = (dec_info[E203_DECINFO_ALU_ADD] || dec_info[E203_DECINFO_ALU_SUB]);\n  assign dec_rdwen = (dec_info[E203_DECINFO_ALU_ADD] || dec_info[E203_DECINFO_ALU_SUB]);\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = 1'b0; // Default to legal, set to 1 if illegal conditions are detected\n  assign dec_mulhsu = 1'b0; // Default, set based on instruction\n  assign dec_mul = 1'b0; // Default, set based on instruction\n  assign dec_div = 1'b0; // Default, set based on instruction\n  assign dec_rem = 1'b0; // Default, set based on instruction\n  assign dec_divu = 1'b0; // Default, set based on instruction\n  assign dec_remu = 1'b0; // Default, set based on instruction\n  assign dec_rv32 = 1'b1; // Default to 32-bit\n  assign dec_bjp = 1'b0; // Default, set based on instruction\n  assign dec_jal = 1'b0; // Default, set based on instruction\n  assign dec_jalr = 1'b0; // Default, set based on instruction\n  assign dec_bxx = 1'b0; // Default, set based on instruction\n  assign dec_jalr_rs1idx = dec_rs1idx;\n  assign dec_bjp_imm = dec_imm;\n\n  `ifdef E203_HAS_NICE\n  assign dec_nice = 1'b0; // Default, set based on instruction\n  assign nice_cmt_off_ilgl_o = nice_xs_off && dec_nice;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 17, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire alu_dispatch;\n  wire oitf_dispatch;\n  wire wfi_halt_ack;\n  wire raw_dependency;\n  wire waw_dependency;\n  wire csr_wait;\n  wire fence_wait;\n  wire wfi_wait;\n  wire alu_ready;\n  wire oitf_ready;\n\n  // ALU Dispatch Logic\n  assign alu_dispatch = disp_i_valid && !raw_dependency && !waw_dependency && alu_ready;\n  assign disp_o_alu_valid = alu_dispatch;\n  assign disp_o_alu_rs1 = disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF Dispatch Logic\n  assign oitf_dispatch = disp_o_alu_longpipe && disp_oitf_ready;\n  assign disp_oitf_ena = oitf_dispatch;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI Handling\n  assign wfi_halt_ack = oitf_empty && !amo_wait;\n  assign wfi_halt_exu_ack = wfi_halt_ack;\n\n  // Dependency Management\n  assign raw_dependency = oitfrd_match_disprs1 || oitfrd_match_disprs2 || oitfrd_match_disprs3;\n  assign waw_dependency = oitfrd_match_disprd;\n\n  // Dispatch Condition\n  assign csr_wait = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) && !oitf_empty;\n  assign fence_wait = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) && disp_i_info[E203_DECINFO_BJP_FENCE] && !oitf_empty;\n  assign wfi_wait = wfi_halt_exu_req && !wfi_halt_ack;\n  assign alu_ready = disp_o_alu_ready && !csr_wait && !fence_wait && !wfi_wait;\n  assign disp_i_ready = alu_ready && oitf_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 13, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid \n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) \n                      & (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign wbck_i_err = lsu_wbck_i_err \n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat \n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag \n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign lsu_wbck_i_ready = wbck_i_ready \n`ifdef E203_HAS_NICE\n                          & ~nice_longp_wbck_i_valid\n`endif\n                          ;\n\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready \n                                 & ~lsu_wbck_i_valid;\n`endif\n\n  assign longp_wbck_o_valid = oitf_ret_rdwen & wbck_i_valid & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_err & wbck_i_valid;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 19, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_req;\n  wire flush_pulse;\n  wire pipe_flush_req;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate e203_exu_excp\n  e203_exu_excp u_e203_exu_excp (\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(pipe_flush_req),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_exu_branchslv\n  e203_exu_branchslv u_e203_exu_branchslv (\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(flush_req),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(pipe_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Commit and Flush Logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena;\n  assign flush_pulse = pipe_flush_req & flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 20, "code": "module e203_exu_alu_rglr (\n  input  wire                 alu_i_valid,\n  output wire                 alu_i_ready,\n  input  wire [E203_XLEN-1:0] alu_i_rs1,\n  input  wire [E203_XLEN-1:0] alu_i_rs2,\n  input  wire [E203_XLEN-1:0] alu_i_imm,\n  input  wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input  wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire                 alu_o_valid,\n  input  wire                 alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire                 alu_o_wbck_err,\n  output wire                 alu_o_cmt_ecall,\n  output wire                 alu_o_cmt_ebreak,\n  output wire                 alu_o_cmt_wfi,\n  output wire                 alu_req_alu_add,\n  output wire                 alu_req_alu_sub,\n  output wire                 alu_req_alu_xor,\n  output wire                 alu_req_alu_sll,\n  output wire                 alu_req_alu_srl,\n  output wire                 alu_req_alu_sra,\n  output wire                 alu_req_alu_or,\n  output wire                 alu_req_alu_and,\n  output wire                 alu_req_alu_slt,\n  output wire                 alu_req_alu_sltu,\n  output wire                 alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-ready handshake\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // ALU operation type generation\n  assign alu_req_alu_add  = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub  = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor  = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll  = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl  = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra  = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or   = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and  = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt  = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Retrieve result from shared data path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\n  // Special instructions\n  assign alu_o_cmt_ecall  = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi    = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 20, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack;\n  wire flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_req;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret | \n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) | \n                       (~nonalu_excpirq_flush_req_raw & flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & flush_req & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_req & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_req & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_rv32 ? 32'h4 : 32'h2;\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = \n        (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 32'h4 : 32'h2)) :\n        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n        cmt_i_dret ? csr_dpc_r :\n        csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 18, "code": "module e203_exu_csr (\n  input  wire nonflush_cmt_ena, // not used\n  input  wire csr_ena,\n  input  wire csr_wr_en,\n  input  wire csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input  wire [E203_XLEN-1:0] wbck_csr_dat,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire ext_irq_r,\n  input  wire sft_irq_r,\n  input  wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input  wire [E203_XLEN-1:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input  wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input  wire cmt_badaddr_ena,\n  input  wire [E203_PC_SIZE-1:0] cmt_epc,\n  input  wire cmt_epc_ena,\n  input  wire [E203_XLEN-1:0] cmt_cause,\n  input  wire cmt_cause_ena,\n  input  wire cmt_status_ena,\n  input  wire cmt_instret_ena,\n  input  wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input  wire clk_aon,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal registers for CSR\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mcounterstop;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR Access Control\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      12'hBFF: read_csr_dat = mcounterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      mcycle <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n      mcounterstop <= {E203_XLEN{1'b0}};\n      dcsr <= {E203_XLEN{1'b0}};\n      dpc <= {E203_PC_SIZE{1'b0}};\n      dscratch <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hBFF: mcounterstop <= wbck_csr_dat;\n        12'h7b0: dcsr <= wbck_csr_dat;\n        12'h7b1: dpc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h7b2: dscratch <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // CSR Update Logic for Trap Handling\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic for trap-related CSRs\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n    end else begin\n      if (cmt_epc_ena) begin\n        mepc <= cmt_epc;\n      end\n      if (cmt_cause_ena) begin\n        mcause <= cmt_cause;\n      end\n      if (cmt_badaddr_ena) begin\n        mbadaddr <= cmt_badaddr;\n      end\n    end\n  end\n\n  // Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Debug CSR Write Enables\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Clock Gating and Stop Signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\n  // CSR Outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 18, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire csr_access = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR);\n  wire agu_access = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_AGU);\n  wire bjp_access = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP);\n  wire fence = bjp_access & disp_i_info[E203_DECINFO_BJP_FENCE];\n  wire fencei = bjp_access & disp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire wfi = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_ALU) & disp_i_info[E203_DECINFO_ALU_WFI];\n\n  wire raw_dep = (oitfrd_match_disprs1 & disp_i_rs1en) | (oitfrd_match_disprs2 & disp_i_rs2en);\n  wire waw_dep = oitfrd_match_disprd & disp_i_rdwen;\n\n  wire dep = raw_dep | waw_dep;\n\n  wire alu_longpipe = disp_o_alu_longpipe;\n  wire oitf_ready = disp_oitf_ready & ~alu_longpipe;\n\n  wire disp_condition = ~dep & oitf_ready & ~wfi_halt_exu_req & ~fence & ~fencei & ~csr_access & ~agu_access;\n\n  assign disp_i_ready = disp_condition & disp_o_alu_ready;\n  assign disp_o_alu_valid = disp_condition & disp_i_valid;\n\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_condition & disp_o_alu_valid & alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = oitf_empty & ~amo_wait & wfi;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 15, "code": "module e203_ifu_ifetch (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  \n  output wire                         ifu_req_valid,\n  input  wire                         ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0]      ifu_req_pc,\n  output wire                         ifu_req_seq,\n  output wire                         ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0]      ifu_req_last_pc,\n  input  wire                         ifu_rsp_valid,\n  output wire                         ifu_rsp_ready,\n  input  wire                         ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0]   ifu_rsp_instr,\n  \n  input  wire                         pipe_flush_req,\n  output wire                         pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_pc,\n  `endif\n  \n  output wire [E203_INSTR_SIZE-1:0]   ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]      ifu_o_pc,\n  output wire                         ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs2idx,\n  output wire                         ifu_o_prdt_taken,\n  output wire                         ifu_o_misalgn,\n  output wire                         ifu_o_buserr,\n  output wire                         ifu_o_muldiv_b2b,\n  output wire                         ifu_o_valid,\n  input  wire                         ifu_o_ready,\n  \n  input  wire                         ifu_halt_req,\n  output wire                         ifu_halt_ack,\n  \n  input  wire                         oitf_empty,\n  input  wire [E203_XLEN-1:0]         rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]         rf2ifu_rs1,\n  input  wire                         dec2ifu_rs1en,\n  input  wire                         dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]  dec2ifu_rdidx,\n  input  wire                         dec2ifu_mulhsu,\n  input  wire                         dec2ifu_div,\n  input  wire                         dec2ifu_rem,\n  input  wire                         dec2ifu_divu,\n  input  wire                         dec2ifu_remu\n);\n\n// Internal signal declarations\nwire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\nwire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\nwire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\nwire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n// Reset control logic\nwire reset_flag_r;\nsirv_gnrl_dffrs #(1) reset_flag_dffrs (1'b0, reset_flag_r, clk, rst_n);\n\nwire reset_req_r;\nwire reset_req_set = (~reset_req_r) & reset_flag_r;\nwire reset_req_clr = reset_req_r & ifu_req_hsked;\nwire reset_req_ena = reset_req_set | reset_req_clr;\nwire reset_req_nxt = reset_req_set | (~reset_req_clr);\nsirv_gnrl_dfflr #(1) reset_req_dfflr (reset_req_ena, reset_req_nxt, reset_req_r, clk, rst_n);\n\nassign ifu_reset_req = reset_req_r;\n\n// Halt control logic\nwire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\nwire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\nwire halt_ack_ena = halt_ack_set | halt_ack_clr;\nwire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\nsirv_gnrl_dfflr #(1) halt_ack_dfflr (halt_ack_ena, halt_ack_nxt, halt_ack_r, clk, rst_n);\n\nassign ifu_halt_ack = halt_ack_r;\n\n// Pipeline flush control\nwire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\nwire dly_flush_clr = dly_flush_r & ifu_req_hsked;\nwire dly_flush_ena = dly_flush_set | dly_flush_clr;\nwire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\nsirv_gnrl_dfflr #(1) dly_flush_dfflr (dly_flush_ena, dly_flush_nxt, dly_flush_r, clk, rst_n);\n\nassign dly_pipe_flush_req = dly_flush_r;\nassign pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n// IR control logic\nwire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\nwire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\nwire ir_valid_ena = ir_valid_set | ir_valid_clr;\nwire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\nsirv_gnrl_dfflr #(1) ir_valid_dfflr (ir_valid_ena, ir_valid_nxt, ir_valid_r, clk, rst_n);\n\nwire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\nwire ir_pc_vld_clr = ir_valid_clr;\nwire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\nwire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\nsirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r, clk, rst_n);\n\nwire ifu_err_r;\nsirv_gnrl_dfflr #(1) ifu_err_dfflr (ir_valid_set, ifu_err_nxt, ifu_err_r, clk, rst_n);\n\nwire ifu_prdt_taken_r;\nsirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (ir_valid_set, prdt_taken, ifu_prdt_taken_r, clk, rst_n);\n\nwire ifu_muldiv_b2b_r;\nsirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r, clk, rst_n);\n\nwire [15:0] ifu_ir_r_hi;\nwire ir_hi_ena = ir_valid_set & minidec_rv32;\nsirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r_hi, clk, rst_n);\n\nwire [15:0] ifu_ir_r_lo;\nwire ir_lo_ena = ir_valid_set;\nsirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (ir_lo_ena, ifu_ir_nxt[15:0], ifu_ir_r_lo, clk, rst_n);\n\nwire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\nwire ir_rs1idx_ena = \n  (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n  ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n  bpu2rf_rs1_ena;\nwire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = \n  minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\nsirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r, clk, rst_n);\n\nwire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\nwire ir_rs2idx_ena = \n  (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n  ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\nwire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = \n  minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\nsirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r, clk, rst_n);\n\n// PC control logic\nwire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\nwire [E203_PC_SIZE-1:0] pc_add_op1 = \n  `ifndef E203_TIMING_BOOST\n  pipe_flush_req ? pipe_flush_add_op1 :\n  dly_pipe_flush_req ? pc_r :\n  `endif\n  ifetch_replay_req ? pc_r :\n  bjp_req ? prdt_pc_add_op1 :\n  ifu_reset_req ? pc_rtvec :\n  pc_r;\n\nwire [E203_PC_SIZE-1:0] pc_add_op2 = \n  `ifndef E203_TIMING_BOOST\n  pipe_flush_req ? pipe_flush_add_op2 :\n  dly_pipe_flush_req ? 0 :\n  `endif\n  ifetch_replay_req ? 0 :\n  bjp_req ? prdt_pc_add_op2 :\n  ifu_reset_req ? 0 :\n  pc_incr_ofst;\n\nwire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\nwire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\nwire ifu_req_seq_rv32 = minidec_rv32;\nwire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\nwire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\nwire [E203_PC_SIZE-1:0] pc_nxt = \n  `ifndef E203_TIMING_BOOST\n  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `else\n  pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n  dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `endif\n\nsirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (pc_ena, pc_nxt, pc_r, clk, rst_n);\n\nassign inspect_pc = pc_r;\n\n// Fetch request generation and control\nwire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\nwire new_req_condi = (~out_flag_r) | out_flag_clr;\nwire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\nassign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\nwire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\nassign ifu_rsp_ready = ifu_rsp2ir_ready;\n\nwire out_flag_set = ifu_req_hsked;\nwire out_flag_clr = ifu_rsp_hsked;\nwire out_flag_ena = out_flag_set | out_flag_clr;\nwire out_flag_nxt = out_flag_set | (~out_flag_clr);\nsirv_gnrl_dfflr #(1) out_flag_dfflr (out_flag_ena, out_flag_nxt, out_flag_r, clk, rst_n);\n\n// Mini-decoder interface implementation\nwire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\nwire minidec_rv32;\nwire minidec_bjp;\nwire minidec_jal;\nwire minidec_jalr;\nwire minidec_bxx;\nwire minidec_rs1en;\nwire minidec_rs2en;\nwire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\nwire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\nwire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\nwire [E203_XLEN-1:0] minidec_bjp_imm;\nwire minidec_mul;\nwire minidec_div;\nwire minidec_rem;\nwire minidec_divu;\nwire minidec_remu;\n\n// BPU interface and control\nwire [E203_PC_SIZE-1:0] pc = pc_r;\nwire dec_jal;\nwire dec_jalr;\nwire dec_bxx;\nwire [E203_XLEN-1:0] dec_bjp_imm;\nwire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\nwire dec_i_valid = ifu_rsp_valid;\nwire ir_valid_clr;\nwire bpu_wait;\nwire prdt_taken;\nwire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\nwire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\nwire bpu2rf_rs1_ena;\nwire [E203_XLEN-1:0] rf2bpu_x1;\nwire [E203_XLEN-1:0] rf2bpu_rs1;\n\n// State monitoring and control\nwire pc_newpend_set = pc_ena;\nwire pc_newpend_clr = ir_pc_vld_set;\nwire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\nwire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\nsirv_gnrl_dfflr #(1) pc_newpend_dfflr (pc_newpend_ena, pc_newpend_nxt, pc_newpend_r, clk, rst_n);\n\nwire ifu_rsp_need_replay = 1'b0;\nwire ifetch_replay_req = 1'b0;\n\nwire ir_empty = ~ir_valid_r;\nwire ir_rs1en = dec2ifu_rs1en;\nwire ir_rden = dec2ifu_rden;\nwire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n// Assertion check implementation\n`ifndef FPGA_SOURCE\n`ifndef DISABLE_SV_ASSERTION\nCHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n`endif\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 19, "code": "module e203_exu_disp(\n  input  wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input  oitf_empty,\n  input  amo_wait,\n  input  disp_i_valid,\n  output disp_i_ready,\n  input  disp_i_rs1x0,\n  input  disp_i_rs2x0,\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [E203_XLEN-1:0] disp_i_rs1,\n  input  [E203_XLEN-1:0] disp_i_rs2,\n  input  disp_i_rdwen,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  [E203_XLEN-1:0] disp_i_imm,\n  input  [E203_PC_SIZE-1:0] disp_i_pc,\n  input  disp_i_misalgn,\n  input  disp_i_buserr,\n  input  disp_i_ilegl,\n  output disp_o_alu_valid,\n  input  disp_o_alu_ready,\n  input  disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input  oitfrd_match_disprs1,\n  input  oitfrd_match_disprs2,\n  input  oitfrd_match_disprs3,\n  input  oitfrd_match_disprd,\n  input  [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input  disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals\n  wire disp_condition;\n  wire raw_dependency;\n  wire waw_dependency;\n  wire csr_dependency;\n  wire fence_dependency;\n  wire wfi_dependency;\n\n  // Dependency checks\n  assign raw_dependency = oitfrd_match_disprs1 | oitfrd_match_disprs2 | oitfrd_match_disprs3;\n  assign waw_dependency = oitfrd_match_disprd;\n  assign csr_dependency = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  assign fence_dependency = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  assign wfi_dependency = wfi_halt_exu_req & ~oitf_empty & ~amo_wait;\n\n  // Dispatch condition\n  assign disp_condition = disp_i_valid & ~raw_dependency & ~waw_dependency & ~csr_dependency & ~fence_dependency & ~wfi_dependency & disp_o_alu_ready;\n\n  // ALU dispatch\n  assign disp_o_alu_valid = disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? {E203_XLEN{1'b0}} : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? {E203_XLEN{1'b0}} : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  // OITF dispatch\n  assign disp_oitf_ena = disp_condition & disp_o_alu_longpipe;\n  assign disp_oitf_rs1fpu = 1'b0;\n  assign disp_oitf_rs2fpu = 1'b0;\n  assign disp_oitf_rs3fpu = 1'b0;\n  assign disp_oitf_rdfpu = 1'b0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 1'b0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = {E203_RFIDX_WIDTH{1'b0}};\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  // WFI handling\n  assign wfi_halt_exu_ack = wfi_halt_exu_req & oitf_empty & ~amo_wait;\n\n  // Ready signal\n  assign disp_i_ready = disp_condition;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 14, "code": "module e203_exu_longpwbck (\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n`ifdef E203_HAS_NICE\n  assign wbck_i_valid = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_valid : nice_longp_wbck_i_valid;\n  assign wbck_i_err = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_err : nice_longp_wbck_i_err;\n  assign wbck_i_wdat = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_wdat : nice_longp_wbck_i_wdat;\n  assign wbck_i_itag = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_itag : nice_longp_wbck_i_itag;\n  assign lsu_wbck_i_ready = (oitf_ret_ptr == lsu_wbck_i_itag) ? wbck_i_ready : 1'b0;\n  assign nice_longp_wbck_i_ready = (oitf_ret_ptr == nice_longp_wbck_i_itag) ? wbck_i_ready : 1'b0;\n`else\n  assign wbck_i_valid = lsu_wbck_i_valid;\n  assign wbck_i_err = lsu_wbck_i_err;\n  assign wbck_i_wdat = lsu_wbck_i_wdat;\n  assign wbck_i_itag = lsu_wbck_i_itag;\n  assign lsu_wbck_i_ready = wbck_i_ready;\n`endif\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign wbck_i_ready = \n    (wbck_need ? longp_wbck_o_ready : 1'b1) & \n    (excp_need ? longp_excp_o_ready : 1'b1);\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\n  assign longp_wbck_o_valid = wbck_i_valid & wbck_need & \n    (~excp_need | longp_excp_o_ready);\n\n  assign longp_excp_o_valid = wbck_i_valid & excp_need & \n    (~wbck_need | longp_wbck_o_ready);\n\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 16, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // NICE input ready logic\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // NICE output valid logic\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // FIFO for instruction tags\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // FIFO input logic\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n\n  // FIFO output logic\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Multi-cycle response ready logic\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 13, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 18, "code": "module e203_exu_decode (\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire i_prdt_taken,\n  input  wire i_misalgn,\n  input  wire i_buserr,\n  input  wire i_muldiv_b2b,\n  input  wire dbg_mode,\n  output wire dec_rs1x0,\n  output wire dec_rs2x0,\n  output wire dec_rs1en,\n  output wire dec_rs2en,\n  output wire dec_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] dec_info,\n  output wire [E203_XLEN-1:0] dec_imm,\n  output wire [E203_PC_SIZE-1:0] dec_pc,\n  output wire dec_misalgn,\n  output wire dec_buserr,\n  output wire dec_ilegl,\n  output wire dec_mulhsu,\n  output wire dec_mul,\n  output wire dec_div,\n  output wire dec_rem,\n  output wire dec_divu,\n  output wire dec_remu,\n  output wire dec_rv32,\n  output wire dec_bjp,\n  output wire dec_jal,\n  output wire dec_jalr,\n  output wire dec_bxx,\n  output wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output wire [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  , input  wire nice_xs_off,\n  output wire dec_nice,\n  output wire nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] rdidx;\n  wire [E203_DECINFO_WIDTH-1:0] info;\n  wire [E203_XLEN-1:0] imm;\n  wire [E203_PC_SIZE-1:0] pc;\n  wire misalgn;\n  wire buserr;\n  wire ilegl;\n  wire mulhsu;\n  wire mul;\n  wire div;\n  wire rem;\n  wire divu;\n  wire remu;\n  wire rv32;\n  wire bjp;\n  wire jal;\n  wire jalr;\n  wire bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Decode logic\n  // (Implementation of the decode logic based on the instruction format and fields)\n\n  // Assign outputs\n  assign dec_rs1x0 = (rs1idx == 0);\n  assign dec_rs2x0 = (rs2idx == 0);\n  assign dec_rs1en = /* logic to determine if rs1 is enabled */;\n  assign dec_rs2en = /* logic to determine if rs2 is enabled */;\n  assign dec_rdwen = /* logic to determine if rd write is enabled */;\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_rdidx = rdidx;\n  assign dec_info = info;\n  assign dec_imm = imm;\n  assign dec_pc = pc;\n  assign dec_misalgn = misalgn;\n  assign dec_buserr = buserr;\n  assign dec_ilegl = ilegl;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = /* logic to determine if the instruction is a NICE instruction */;\n  assign nice_cmt_off_ilgl_o = /* logic to determine if NICE is illegal when disabled */;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 19, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals\n  wire [E203_DECINFO_WIDTH-1:0] alu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] agu_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] bjp_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] csr_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] muldiv_info_bus;\n  wire [E203_DECINFO_WIDTH-1:0] nice_info_bus;\n\n  // Decode logic for instruction fields\n  // ...\n\n  // Assign decoded signals to outputs\n  assign dec_rs1x0 = ...;\n  assign dec_rs2x0 = ...;\n  assign dec_rs1en = ...;\n  assign dec_rs2en = ...;\n  assign dec_rdwen = ...;\n  assign dec_rs1idx = ...;\n  assign dec_rs2idx = ...;\n  assign dec_rdidx = ...;\n  assign dec_info = ...;\n  assign dec_imm = ...;\n  assign dec_pc = i_pc;\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr = i_buserr;\n  assign dec_ilegl = ...;\n  assign dec_mulhsu = ...;\n  assign dec_mul = ...;\n  assign dec_div = ...;\n  assign dec_rem = ...;\n  assign dec_divu = ...;\n  assign dec_remu = ...;\n  assign dec_rv32 = ...;\n  assign dec_bjp = ...;\n  assign dec_jal = ...;\n  assign dec_jalr = ...;\n  assign dec_bxx = ...;\n  assign dec_jalr_rs1idx = ...;\n  assign dec_bjp_imm = ...;\n\n`ifdef E203_HAS_NICE\n  assign dec_nice = ...;\n  assign nice_cmt_off_ilgl_o = nice_xs_off & dec_nice;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 15, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] rdwen_fifo;\n  reg [E203_OITF_DEPTH-1:0] rdfpu_fifo;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] pc_fifo [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Full and empty conditions\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  // Dispatch logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdwen_fifo[dis_ptr_r] <= disp_i_rdwen;\n      rdfpu_fifo[dis_ptr_r] <= disp_i_rdfpu;\n      rdidx_fifo[dis_ptr_r] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_r] <= disp_i_pc;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Output assignments\n  assign ret_rdidx = rdidx_fifo[ret_ptr_r];\n  assign ret_rdwen = rdwen_fifo[ret_ptr_r];\n  assign ret_rdfpu = rdfpu_fifo[ret_ptr_r];\n  assign ret_pc = pc_fifo[ret_ptr_r];\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs1idx) & ~disp_i_rs1fpu);\n  assign oitfrd_match_disprs2 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs2idx) & ~disp_i_rs2fpu);\n  assign oitfrd_match_disprs3 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs3idx) & ~disp_i_rs3fpu);\n  assign oitfrd_match_disprd = |(rdwen_fifo & (rdidx_fifo == disp_i_rdidx));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 15, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) &\n                        (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign lsu_wbck_i_ready = wbck_i_ready & lsu_wbck_i_valid;\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & nice_longp_wbck_i_valid;\n`endif\n\n  assign longp_wbck_o_valid = wbck_i_valid & oitf_ret_rdwen & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 16, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] rdwen_fifo;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] pc_fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_OITF_DEPTH-1:0] rdfpu_fifo;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdwen_fifo[dis_ptr_r] <= disp_i_rdwen;\n      rdidx_fifo[dis_ptr_r] <= disp_i_rdidx;\n      pc_fifo[dis_ptr_r] <= disp_i_pc;\n      rdfpu_fifo[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= rdidx_fifo[ret_ptr_r];\n      ret_pc <= pc_fifo[ret_ptr_r];\n      ret_rdwen <= rdwen_fifo[ret_ptr_r];\n      ret_rdfpu <= rdfpu_fifo[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs1idx) & ~rdfpu_fifo & disp_i_rs1en & ~disp_i_rs1fpu);\n  assign oitfrd_match_disprs2 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs2idx) & ~rdfpu_fifo & disp_i_rs2en & ~disp_i_rs2fpu);\n  assign oitfrd_match_disprs3 = |(rdwen_fifo & (rdidx_fifo == disp_i_rs3idx) & ~rdfpu_fifo & disp_i_rs3en & ~disp_i_rs3fpu);\n  assign oitfrd_match_disprd = |(rdwen_fifo & (rdidx_fifo == disp_i_rdidx) & ~rdfpu_fifo & disp_i_rdwen & ~disp_i_rdfpu);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 14, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 19, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // CSR Access Illegal Flag\n  assign csr_access_ilgl = 1'b0;\n\n  // Privilege Mode Signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = {mepc, 2'b00};\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB02: read_csr_dat = minstret;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_ADDR_SIZE{1'b0}};\n      mcycle <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR Write Enable\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR Read Outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Clock Gating and Stop Signals\n  assign tm_stop = 1'b0;\n  assign core_cgstop = 1'b0;\n  assign tcm_cgstop = 1'b0;\n  assign itcm_nohold = 1'b0;\n  assign mdv_nob2b = 1'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 17, "code": "module e203_exu_nice (\n  input  wire          nice_i_xs_off,\n  input  wire          nice_i_valid,\n  output wire          nice_i_ready,\n  input  wire [31:0]   nice_i_instr,\n  input  wire [31:0]   nice_i_rs1,\n  input  wire [31:0]   nice_i_rs2,\n  input  wire [1:0]    nice_i_itag,\n  output wire          nice_o_longpipe,\n  output wire          nice_o_valid,\n  input  wire          nice_o_ready,\n  output wire          nice_o_itag_valid,\n  input  wire          nice_o_itag_ready,\n  output wire [1:0]    nice_o_itag,\n  input  wire          nice_rsp_multicyc_valid,\n  output wire          nice_rsp_multicyc_ready,\n  output wire          nice_req_valid,\n  input  wire          nice_req_ready,\n  output wire [31:0]   nice_req_instr,\n  output wire [31:0]   nice_req_rs1,\n  output wire [31:0]   nice_req_rs2,\n  input  wire          clk,\n  input  wire          rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [1:0] fifo_o_dat;\n\n  // NICE instruction forwarding logic\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready || nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = !nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid && nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid && nice_o_itag_ready;\n\n  // Instruction commit and writeback logic\n  assign nice_o_valid = fifo_o_vld && nice_rsp_multicyc_valid;\n  assign nice_o_itag_valid = fifo_o_vld && nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\n  // Instantiate FIFO for instruction tag tracking\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .DP(4),\n    .DW(2)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 14, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 18, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  reg [E203_ITAG_WIDTH-1:0] itag_fifo [0:3];\n  reg [1:0] fifo_head, fifo_tail;\n  reg fifo_full, fifo_empty;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Instruction tag FIFO logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      fifo_head <= 2'b00;\n      fifo_tail <= 2'b00;\n      fifo_full <= 1'b0;\n      fifo_empty <= 1'b1;\n    end else begin\n      if (nice_req_valid & nice_req_ready) begin\n        itag_fifo[fifo_tail] <= nice_i_itag;\n        fifo_tail <= fifo_tail + 1;\n        fifo_empty <= 1'b0;\n        if (fifo_tail + 1 == fifo_head) fifo_full <= 1'b1;\n      end\n      if (nice_rsp_multicyc_valid & nice_rsp_multicyc_ready) begin\n        fifo_head <= fifo_head + 1;\n        fifo_full <= 1'b0;\n        if (fifo_head + 1 == fifo_tail) fifo_empty <= 1'b1;\n      end\n    end\n  end\n\n  // Multi-cycle operation completion\n  assign nice_rsp_multicyc_ready = ~fifo_empty;\n  assign nice_o_itag_valid = ~fifo_empty & nice_rsp_multicyc_valid;\n  assign nice_o_itag = itag_fifo[fifo_head];\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n  \nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 15, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 17, "code": "module e203_exu_regfile(\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Define the number of registers based on configuration\n  `ifdef E203_CFG_REGNUM_IS_32\n    localparam RFREG_NUM = 32;\n  `elsif E203_CFG_REGNUM_IS_16\n    localparam RFREG_NUM = 16;\n  `else\n    `error \"Unsupported register number configuration\"\n  `endif\n\n  // Register file storage\n  reg [E203_XLEN-1:0] regfile [0:RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 17, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] valid;\n  reg [E203_RFIDX_WIDTH-1:0] rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] pc [0:E203_OITF_DEPTH-1];\n  reg rdwen [0:E203_OITF_DEPTH-1];\n  reg rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = !((dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag));\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      rdidx[dis_ptr_r] <= disp_i_rdidx;\n      pc[dis_ptr_r] <= disp_i_pc;\n      rdwen[dis_ptr_r] <= disp_i_rdwen;\n      rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      valid[dis_ptr_r] <= 1;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1)) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_rdidx <= rdidx[ret_ptr_r];\n      ret_pc <= pc[ret_ptr_r];\n      ret_rdwen <= rdwen[ret_ptr_r];\n      ret_rdfpu <= rdfpu[ret_ptr_r];\n      valid[ret_ptr_r] <= 0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1)) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(valid & (rdidx == disp_i_rs1idx) & rdwen & (rdfpu == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(valid & (rdidx == disp_i_rs2idx) & rdwen & (rdfpu == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(valid & (rdidx == disp_i_rs3idx) & rdwen & (rdfpu == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(valid & (rdidx == disp_i_rdidx) & rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 20, "code": "module e203_exu_disp(\n  input  wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n  input  oitf_empty,\n  input  amo_wait,\n  input  disp_i_valid,\n  output disp_i_ready,\n  input  disp_i_rs1x0,\n  input  disp_i_rs2x0,\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [E203_XLEN-1:0] disp_i_rs1,\n  input  [E203_XLEN-1:0] disp_i_rs2,\n  input  disp_i_rdwen,\n  input  [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  [E203_XLEN-1:0] disp_i_imm,\n  input  [E203_PC_SIZE-1:0] disp_i_pc,\n  input  disp_i_misalgn,\n  input  disp_i_buserr,\n  input  disp_i_ilegl,\n  output disp_o_alu_valid,\n  input  disp_o_alu_ready,\n  input  disp_o_alu_longpipe,\n  output [E203_XLEN-1:0] disp_o_alu_rs1,\n  output [E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output [E203_XLEN-1:0] disp_o_alu_imm,\n  output [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr,\n  output disp_o_alu_ilegl,\n  input  oitfrd_match_disprs1,\n  input  oitfrd_match_disprs2,\n  input  oitfrd_match_disprs3,\n  input  oitfrd_match_disprd,\n  input  [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output disp_oitf_ena,\n  input  disp_oitf_ready,\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu,\n  output disp_oitf_rs1en,\n  output disp_oitf_rs2en,\n  output disp_oitf_rs3en,\n  output disp_oitf_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals\n  wire raw_dep = (oitfrd_match_disprs1 & disp_i_rs1en) | (oitfrd_match_disprs2 & disp_i_rs2en);\n  wire waw_dep = oitfrd_match_disprd & disp_i_rdwen;\n  wire csr_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_CSR) & ~oitf_empty;\n  wire fence_dep = (disp_i_info[E203_DECINFO_GRP] == E203_DECINFO_GRP_BJP) & disp_i_info[E203_DECINFO_BJP_FENCE] & ~oitf_empty;\n  wire wfi_halt_ack = oitf_empty & ~amo_wait;\n  wire disp_condition = disp_i_valid & ~raw_dep & ~waw_dep & ~csr_dep & ~fence_dep & (wfi_halt_ack | ~wfi_halt_exu_req);\n\n  assign disp_i_ready = disp_o_alu_ready & disp_oitf_ready & disp_condition;\n  assign disp_o_alu_valid = disp_condition;\n  assign disp_o_alu_rs1 = disp_i_rs1x0 ? 0 : disp_i_rs1;\n  assign disp_o_alu_rs2 = disp_i_rs2x0 ? 0 : disp_i_rs2;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info = disp_i_info;\n  assign disp_o_alu_imm = disp_i_imm;\n  assign disp_o_alu_pc = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn = disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr;\n  assign disp_o_alu_ilegl = disp_i_ilegl;\n\n  assign disp_oitf_ena = disp_o_alu_longpipe & disp_condition;\n  assign disp_oitf_rs1fpu = 0;\n  assign disp_oitf_rs2fpu = 0;\n  assign disp_oitf_rs3fpu = 0;\n  assign disp_oitf_rdfpu = 0;\n  assign disp_oitf_rs1en = disp_i_rs1en;\n  assign disp_oitf_rs2en = disp_i_rs2en;\n  assign disp_oitf_rs3en = 0;\n  assign disp_oitf_rdwen = disp_i_rdwen;\n  assign disp_oitf_rs1idx = disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_rs2idx;\n  assign disp_oitf_rs3idx = 0;\n  assign disp_oitf_rdidx = disp_i_rdidx;\n  assign disp_oitf_pc = disp_i_pc;\n\n  assign wfi_halt_exu_ack = wfi_halt_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 18, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 18, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1))\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_rdidx <= oitf_rdidx[ret_ptr_r];\n      ret_pc <= oitf_pc[ret_ptr_r];\n      ret_rdwen <= oitf_rdwen[ret_ptr_r];\n      ret_rdfpu <= oitf_rdfpu[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1))\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs1fpu));\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs2fpu));\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen & (oitf_rdfpu == disp_i_rs3fpu));\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 15, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 16, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 20, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal signals and logic for decoding instructions\n  // Decoding logic for various instruction types and fields\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 16, "code": "module e203_exu_longpwbck (\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n  wire wbck_i_buserr;\n  wire [E203_ADDR_SIZE-1:0] wbck_i_badaddr;\n  wire wbck_i_ld;\n  wire wbck_i_st;\n\n  assign wbck_i_valid = lsu_wbck_i_valid;\n  assign wbck_i_wdat = lsu_wbck_i_wdat;\n  assign wbck_i_itag = lsu_wbck_i_itag;\n  assign wbck_i_err = lsu_wbck_i_err;\n  assign wbck_i_buserr = lsu_cmt_i_buserr;\n  assign wbck_i_badaddr = lsu_cmt_i_badaddr;\n  assign wbck_i_ld = lsu_cmt_i_ld;\n  assign wbck_i_st = lsu_cmt_i_st;\n\n  assign lsu_wbck_i_ready = wbck_i_ready;\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign wbck_i_ready = \n    (wbck_need ? longp_wbck_o_ready : 1'b1) & \n    (excp_need ? longp_excp_o_ready : 1'b1);\n\n  assign longp_wbck_o_valid = wbck_need & wbck_i_valid & \n    (~excp_need | longp_excp_o_ready);\n\n  assign longp_excp_o_valid = excp_need & wbck_i_valid & \n    (~wbck_need | longp_wbck_o_ready);\n\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = wbck_i_ld;\n  assign longp_excp_o_st = wbck_i_st;\n  assign longp_excp_o_buserr = wbck_i_buserr;\n  assign longp_excp_o_badaddr = wbck_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\n`ifdef E203_HAS_NICE\n  wire nice_wbck_i_valid;\n  wire nice_wbck_i_ready;\n  wire [E203_XLEN-1:0] nice_wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] nice_wbck_i_itag;\n  wire nice_wbck_i_err;\n\n  assign nice_wbck_i_valid = nice_longp_wbck_i_valid;\n  assign nice_wbck_i_wdat = nice_longp_wbck_i_wdat;\n  assign nice_wbck_i_itag = nice_longp_wbck_i_itag;\n  assign nice_wbck_i_err = nice_longp_wbck_i_err;\n\n  assign nice_longp_wbck_i_ready = nice_wbck_i_ready;\n\n  wire nice_wbck_need = oitf_ret_rdwen & ~nice_wbck_i_err;\n  wire nice_excp_need = nice_wbck_i_err;\n\n  assign nice_wbck_i_ready = \n    (nice_wbck_need ? longp_wbck_o_ready : 1'b1) & \n    (nice_excp_need ? longp_excp_o_ready : 1'b1);\n\n  assign longp_wbck_o_valid = nice_wbck_need & nice_wbck_i_valid & \n    (~nice_excp_need | longp_excp_o_ready);\n\n  assign longp_excp_o_valid = nice_excp_need & nice_wbck_i_valid & \n    (~nice_wbck_need | longp_wbck_o_ready);\n\n  assign longp_wbck_o_wdat = nice_wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = wbck_i_ld;\n  assign longp_excp_o_st = wbck_i_st;\n  assign longp_excp_o_buserr = wbck_i_buserr;\n  assign longp_excp_o_badaddr = wbck_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = nice_wbck_i_valid & nice_wbck_i_ready;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 20, "code": "module e203_exu_commit(\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire excpirq_flush_req;\n  wire brchmis_flush_req;\n  wire pipe_flush_req;\n  wire flush_pulse;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2;\n  wire [E203_PC_SIZE-1:0] pipe_flush_pc;\n\n  // Instantiate exception handling module\n  e203_exu_excp u_e203_exu_excp(\n    .commit_trap(commit_trap),\n    .core_wfi(core_wfi),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_exu_req(wfi_halt_exu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack(wfi_halt_exu_ack),\n    .amo_wait(amo_wait),\n    .alu_excp_i_valid(alu_cmt_i_valid),\n    .alu_excp_i_ld(alu_cmt_i_ld),\n    .alu_excp_i_stamo(alu_cmt_i_stamo),\n    .alu_excp_i_misalgn(alu_cmt_i_misalgn),\n    .alu_excp_i_buserr(alu_cmt_i_buserr),\n    .alu_excp_i_ecall(alu_cmt_i_ecall),\n    .alu_excp_i_ebreak(alu_cmt_i_ebreak),\n    .alu_excp_i_wfi(alu_cmt_i_wfi),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr(alu_cmt_i_ifu_buserr),\n    .alu_excp_i_ifu_ilegl(alu_cmt_i_ifu_ilegl),\n    .alu_excp_i_pc(alu_cmt_i_pc),\n    .alu_excp_i_instr(alu_cmt_i_instr),\n    .alu_excp_i_pc_vld(alu_cmt_i_pc_vld),\n    .longp_excp_i_valid(longp_excp_i_valid),\n    .longp_excp_i_ld(longp_excp_i_ld),\n    .longp_excp_i_st(longp_excp_i_st),\n    .longp_excp_i_buserr(longp_excp_i_buserr),\n    .longp_excp_i_insterr(longp_excp_i_insterr),\n    .longp_excp_i_badaddr(longp_excp_i_badaddr),\n    .longp_excp_i_pc(longp_excp_i_pc),\n    .excpirq_flush_ack(flush_pulse),\n    .excpirq_flush_req(excpirq_flush_req),\n    .nonalu_excpirq_flush_req_raw(pipe_flush_req),\n    .excpirq_flush_add_op1(pipe_flush_add_op1),\n    .excpirq_flush_add_op2(pipe_flush_add_op2),\n    .csr_mtvec_r(csr_mtvec_r),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_ena(nonflush_cmt_ena),\n    .cmt_badaddr(cmt_badaddr),\n    .cmt_epc(cmt_epc),\n    .cmt_cause(cmt_cause),\n    .cmt_badaddr_ena(cmt_badaddr_ena),\n    .cmt_epc_ena(cmt_epc_ena),\n    .cmt_cause_ena(cmt_cause_ena),\n    .cmt_status_ena(cmt_status_ena),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .status_mie_r(status_mie_r),\n    .mtie_r(mtie_r),\n    .msie_r(msie_r),\n    .meie_r(meie_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .oitf_empty(oitf_empty),\n    .u_mode(u_mode),\n    .s_mode(s_mode),\n    .h_mode(h_mode),\n    .m_mode(m_mode),\n    .excp_active(excp_active),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate branch resolution module\n  e203_exu_branchslv u_e203_exu_branchslv(\n    .cmt_i_valid(alu_cmt_i_valid),\n    .cmt_i_ready(alu_cmt_i_ready),\n    .cmt_i_rv32(alu_cmt_i_rv32),\n    .cmt_i_dret(alu_cmt_i_dret),\n    .cmt_i_mret(alu_cmt_i_mret),\n    .cmt_i_fencei(alu_cmt_i_fencei),\n    .cmt_i_bjp(alu_cmt_i_bjp),\n    .cmt_i_bjp_prdt(alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv(alu_cmt_i_bjp_rslv),\n    .cmt_i_pc(alu_cmt_i_pc),\n    .cmt_i_imm(alu_cmt_i_imm),\n    .csr_epc_r(csr_epc_r),\n    .csr_dpc_r(csr_dpc_r),\n    .nonalu_excpirq_flush_req_raw(pipe_flush_req),\n    .brchmis_flush_ack(flush_pulse),\n    .brchmis_flush_req(brchmis_flush_req),\n    .brchmis_flush_add_op1(pipe_flush_add_op1),\n    .brchmis_flush_add_op2(pipe_flush_add_op2),\n    .brchmis_flush_pc(pipe_flush_pc),\n    .cmt_mret_ena(cmt_mret_ena),\n    .cmt_dret_ena(cmt_dret_ena),\n    .cmt_fencei_ena(cmt_fencei_ena),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Flush logic\n  assign pipe_flush_req = excpirq_flush_req | brchmis_flush_req;\n  assign flush_pulse = pipe_flush_req & alu_cmt_i_ready;\n\n  // Commit enable logic\n  assign nonflush_cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready & ~pipe_flush_req;\n  assign cmt_instret_ena = nonflush_cmt_ena & ~brchmis_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 16, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire longp_excp_flush_req_insterr;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op1;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  wire [E203_ADDR_SIZE-1:0] cmt_badaddr;\n  wire [E203_PC_SIZE-1:0] cmt_epc;\n  wire [E203_XLEN-1:0] cmt_cause;\n  wire cmt_badaddr_ena;\n  wire cmt_epc_ena;\n  wire cmt_cause_ena;\n  wire cmt_status_ena;\n  wire [E203_PC_SIZE-1:0] cmt_dpc;\n  wire cmt_dpc_ena;\n  wire [2:0] cmt_dcause;\n  wire cmt_dcause_ena;\n  wire excp_active;\n\n  // WFI Handling\n  assign wfi_flag = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_req = wfi_flag & ~wfi_halt_ifu_ack & ~wfi_halt_exu_ack;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception Handling\n  assign alu_excp_flush_req_ifu_misalgn = alu_excp_i_ifu_misalgn & alu_excp_i_valid;\n  assign alu_excp_flush_req_ifu_buserr = alu_excp_i_ifu_buserr & alu_excp_i_valid;\n  assign alu_excp_flush_req_ifu_ilegl = alu_excp_i_ifu_ilegl & alu_excp_i_valid;\n  assign alu_excp_flush_req_ebreak = alu_excp_i_ebreak & alu_excp_i_valid;\n  assign alu_excp_flush_req_ld_misalgn = alu_excp_i_misalgn & alu_excp_i_ld & alu_excp_i_valid;\n  assign longp_excp_flush_req_ld_buserr = longp_excp_i_buserr & longp_excp_i_ld & longp_excp_i_valid;\n  assign alu_excp_flush_req_stamo_misalgn = alu_excp_i_misalgn & alu_excp_i_stamo & alu_excp_i_valid;\n  assign longp_excp_flush_req_st_buserr = longp_excp_i_buserr & longp_excp_i_st & longp_excp_i_valid;\n  assign alu_excp_flush_req_ecall = alu_excp_i_ecall & alu_excp_i_valid;\n  assign longp_excp_flush_req_insterr = longp_excp_i_insterr & longp_excp_i_valid;\n\n  assign excpirq_flush_req = alu_excp_flush_req | longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req;\n  assign nonalu_excpirq_flush_req_raw = longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req;\n\n  assign excpirq_flush_add_op1 = (dbg_mode_entry_req) ? 32'h800 : \n                                 (longp_excp_flush_req | alu_excp_flush_req) ? 32'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // Register Update\n  assign cmt_badaddr = (longp_excp_flush_req_ld_buserr | longp_excp_flush_req_st_buserr) ? longp_excp_i_badaddr :\n                       (alu_excp_flush_req_ld_misalgn | alu_excp_flush_req_stamo_misalgn) ? alu_excp_i_pc :\n                       (alu_excp_flush_req_ebreak | alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr) ? alu_excp_i_pc :\n                       (alu_excp_flush_req_ifu_ilegl) ? alu_excp_i_instr : 32'h0;\n\n  assign cmt_epc = (longp_excp_flush_req) ? longp_excp_i_pc : alu_excp_i_pc;\n  assign cmt_cause = (irq_flush_req) ? {1'b1, 3'b0, 4'b0} :  // Example for interrupt cause\n                     (alu_excp_flush_req_ifu_misalgn) ? 32'h0 :\n                     (alu_excp_flush_req_ifu_buserr) ? 32'h1 :\n                     (alu_excp_flush_req_ifu_ilegl) ? 32'h2 :\n                     (alu_excp_flush_req_ebreak) ? 32'h3 :\n                     (alu_excp_flush_req_ld_misalgn) ? 32'h4 :\n                     (longp_excp_flush_req_ld_buserr) ? 32'h5 :\n                     (alu_excp_flush_req_stamo_misalgn) ? 32'h6 :\n                     (longp_excp_flush_req_st_buserr) ? 32'h7 :\n                     (alu_excp_flush_req_ecall & u_mode) ? 32'h8 :\n                     (alu_excp_flush_req_ecall & s_mode) ? 32'h9 :\n                     (alu_excp_flush_req_ecall & h_mode) ? 32'hA :\n                     (alu_excp_flush_req_ecall & m_mode) ? 32'hB :\n                     (longp_excp_flush_req_insterr) ? 32'h10 : 32'h0;\n\n  assign cmt_badaddr_ena = excpirq_flush_req;\n  assign cmt_epc_ena = excpirq_flush_req;\n  assign cmt_cause_ena = excpirq_flush_req;\n  assign cmt_status_ena = excpirq_flush_req;\n\n  assign excp_active = excpirq_flush_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 17, "code": "module e203_exu_longpwbck (\n  input  wire lsu_wbck_i_valid,\n  output wire lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire lsu_wbck_i_err,\n  input  wire lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire lsu_cmt_i_ld,\n  input  wire lsu_cmt_i_st,\n  output wire longp_wbck_o_valid,\n  input  wire longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output wire [4:0] longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire longp_wbck_o_rdfpu,\n  output wire longp_excp_o_valid,\n  input  wire longp_excp_o_ready,\n  output wire longp_excp_o_insterr,\n  output wire longp_excp_o_ld,\n  output wire longp_excp_o_st,\n  output wire longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire oitf_ret_rdwen,\n  input  wire oitf_ret_rdfpu,\n  output wire oitf_ret_ena,\n  input  wire clk,\n  input  wire rst_n\n`ifdef E203_HAS_NICE\n  , input  wire nice_longp_wbck_i_valid,\n  output wire nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_rdwen;\n  wire wbck_i_rdfpu;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire [E203_PC_SIZE-1:0] wbck_i_pc;\n\n  assign wbck_i_valid = lsu_wbck_i_valid & (oitf_ret_ptr == lsu_wbck_i_itag) & ~oitf_empty;\n  assign wbck_i_ready = longp_wbck_o_ready & longp_excp_o_ready;\n  assign wbck_i_err = lsu_wbck_i_err;\n  assign wbck_i_rdwen = oitf_ret_rdwen;\n  assign wbck_i_rdfpu = oitf_ret_rdfpu;\n  assign wbck_i_wdat = lsu_wbck_i_wdat;\n  assign wbck_i_rdidx = oitf_ret_rdidx;\n  assign wbck_i_itag = oitf_ret_ptr;\n  assign wbck_i_pc = oitf_ret_pc;\n\n  assign lsu_wbck_i_ready = wbck_i_ready;\n\n  assign longp_wbck_o_valid = wbck_i_valid & wbck_i_rdwen & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = wbck_i_rdidx;\n  assign longp_wbck_o_rdfpu = wbck_i_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = wbck_i_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\n`ifdef E203_HAS_NICE\n  wire nice_wbck_i_valid;\n  wire nice_wbck_i_ready;\n  wire nice_wbck_i_err;\n  wire [E203_XLEN-1:0] nice_wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] nice_wbck_i_itag;\n\n  assign nice_wbck_i_valid = nice_longp_wbck_i_valid & (oitf_ret_ptr == nice_longp_wbck_i_itag) & ~oitf_empty;\n  assign nice_wbck_i_ready = longp_wbck_o_ready & longp_excp_o_ready;\n  assign nice_wbck_i_err = nice_longp_wbck_i_err;\n  assign nice_wbck_i_wdat = nice_longp_wbck_i_wdat;\n  assign nice_wbck_i_itag = nice_longp_wbck_i_itag;\n\n  assign nice_longp_wbck_i_ready = nice_wbck_i_ready;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 19, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (oitf_valid[dis_ptr_r] == 1'b0);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && oitf_valid[ret_ptr_r]) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (oitf_rdidx[dis_ptr_r] == disp_i_rs1idx) && oitf_rdwen[dis_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (oitf_rdidx[dis_ptr_r] == disp_i_rs2idx) && oitf_rdwen[dis_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (oitf_rdidx[dis_ptr_r] == disp_i_rs3idx) && oitf_rdwen[dis_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (oitf_rdidx[dis_ptr_r] == disp_i_rdidx) && oitf_rdwen[dis_ptr_r]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 19, "code": "module e203_exu_nice (\n  input  wire        nice_i_xs_off,\n  input  wire        nice_i_valid,\n  output wire        nice_i_ready,\n  input  wire [31:0] nice_i_instr,\n  input  wire [31:0] nice_i_rs1,\n  input  wire [31:0] nice_i_rs2,\n  input  wire [1:0]  nice_i_itag,\n  output wire        nice_o_longpipe,\n  output wire        nice_o_valid,\n  input  wire        nice_o_ready,\n  output wire        nice_o_itag_valid,\n  input  wire        nice_o_itag_ready,\n  output wire [1:0]  nice_o_itag,\n  input  wire        nice_rsp_multicyc_valid,\n  output wire        nice_rsp_multicyc_ready,\n  output wire        nice_req_valid,\n  input  wire        nice_req_ready,\n  output wire [31:0] nice_req_instr,\n  output wire [31:0] nice_req_rs1,\n  output wire [31:0] nice_req_rs2,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal signals\n  reg [1:0] itag_fifo [3:0];\n  reg [1:0] itag_fifo_head;\n  reg [1:0] itag_fifo_tail;\n  reg [1:0] itag_fifo_count;\n  wire itag_fifo_full;\n  wire itag_fifo_empty;\n\n  // FIFO control logic\n  assign itag_fifo_full = (itag_fifo_count == 4);\n  assign itag_fifo_empty = (itag_fifo_count == 0);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itag_fifo_head <= 0;\n      itag_fifo_tail <= 0;\n      itag_fifo_count <= 0;\n    end else begin\n      if (nice_i_valid && nice_i_ready && !itag_fifo_full) begin\n        itag_fifo[itag_fifo_tail] <= nice_i_itag;\n        itag_fifo_tail <= itag_fifo_tail + 1;\n        itag_fifo_count <= itag_fifo_count + 1;\n      end\n      if (nice_rsp_multicyc_valid && nice_rsp_multicyc_ready && !itag_fifo_empty) begin\n        itag_fifo_head <= itag_fifo_head + 1;\n        itag_fifo_count <= itag_fifo_count - 1;\n      end\n    end\n  end\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready || nice_i_xs_off;\n\n  // NICE response logic\n  assign nice_o_valid = nice_rsp_multicyc_valid && !itag_fifo_empty;\n  assign nice_o_itag_valid = nice_o_valid;\n  assign nice_o_itag = itag_fifo[itag_fifo_head];\n  assign nice_rsp_multicyc_ready = nice_o_ready && nice_o_itag_ready;\n\n  // Long pipeline indication\n  assign nice_o_longpipe = !nice_i_xs_off;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 19, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file definition\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 18, "code": "`include \"e203_defines.v\"\n\nmodule e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n\n  input clk,\n  input rst_n\n\n`ifdef E203_HAS_NICE\n  ,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1)\n                      & (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign lsu_wbck_i_ready = wbck_i_ready\n`ifdef E203_HAS_NICE\n                          & ~nice_longp_wbck_i_valid\n`endif\n                          ;\n\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready\n                                 & ~lsu_wbck_i_valid;\n`endif\n\n  assign longp_wbck_o_valid = wbck_i_valid & oitf_ret_rdwen & ~wbck_i_err;\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 17, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat  = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 18, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_ready = 1'b1;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 20, "code": "module e203_exu_nice (\n  input nice_i_xs_off,\n  input nice_i_valid,\n  output nice_i_ready,\n  input [E203_XLEN-1:0] nice_i_instr,\n  input [E203_XLEN-1:0] nice_i_rs1,\n  input [E203_XLEN-1:0] nice_i_rs2,\n  input [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output nice_o_longpipe,\n  output nice_o_valid,\n  input nice_o_ready,\n  output nice_o_itag_valid,\n  input nice_o_itag_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request handling\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // NICE response handling\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // FIFO instance for instruction tag tracking\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // FIFO input control\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n\n  // FIFO output control\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 20, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] oitf_pc [E203_OITF_DEPTH-1:0];\n  reg oitf_rdwen [E203_OITF_DEPTH-1:0];\n  reg oitf_rdfpu [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (oitf_valid[dis_ptr_r] == 1'b0);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1)\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && oitf_valid[ret_ptr_r]) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1)\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen & ~oitf_rdfpu & disp_i_rs1en);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen & ~oitf_rdfpu & disp_i_rs2en);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen & ~oitf_rdfpu & disp_i_rs3en);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 20, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file definition\n  reg [E203_XLEN-1:0] rf_r [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : rf_r[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : rf_r[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      rf_r[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = rf_r[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 17, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input  wfi_halt_ifu_ack,\n  input  wfi_halt_exu_ack,\n  input  amo_wait,\n  input  alu_excp_i_valid,\n  input  alu_excp_i_ld,\n  input  alu_excp_i_stamo,\n  input  alu_excp_i_misalgn,\n  input  alu_excp_i_buserr,\n  input  alu_excp_i_ecall,\n  input  alu_excp_i_ebreak,\n  input  alu_excp_i_wfi,\n  input  alu_excp_i_ifu_misalgn,\n  input  alu_excp_i_ifu_buserr,\n  input  alu_excp_i_ifu_ilegl,\n  input  [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input  [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input  alu_excp_i_pc_vld,\n  input  longp_excp_i_valid,\n  input  longp_excp_i_ld,\n  input  longp_excp_i_st,\n  input  longp_excp_i_buserr,\n  input  longp_excp_i_insterr,\n  input  [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input  [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input  excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input  [E203_XLEN-1:0] csr_mtvec_r,\n  input  cmt_dret_ena,\n  input  cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input  dbg_irq_r,\n  input  [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  input  status_mie_r,\n  input  mtie_r,\n  input  msie_r,\n  input  meie_r,\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  oitf_empty,\n  input  u_mode,\n  input  s_mode,\n  input  h_mode,\n  input  m_mode,\n  output excp_active,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signal declarations\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_flush_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire longp_excp_flush_req_insterr;\n  wire [E203_XLEN-1:0] mcause_value;\n  wire [E203_PC_SIZE-1:0] mepc_value;\n  wire [E203_ADDR_SIZE-1:0] mtval_value;\n\n  // WFI Handling\n  sirv_gnrl_dfflr #(1) wfi_flag_dfflr (\n    .lden(alu_excp_i_wfi & cmt_ena),\n    .dnxt(1'b1),\n    .qout(wfi_flag),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign wfi_halt_ifu_req = wfi_flag & ~dbg_mode;\n  assign wfi_halt_exu_req = wfi_flag & ~dbg_mode;\n\n  assign core_wfi = wfi_flag & wfi_halt_ifu_ack & wfi_halt_exu_ack;\n\n  // Exception Handling\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_flush_req | irq_flush_req | alu_excp_flush_req;\n  assign nonalu_excpirq_flush_req_raw = dbg_mode_entry_flush_req | irq_flush_req;\n\n  // PC Switching\n  assign excpirq_flush_add_op1 = dbg_mode_entry_flush_req ? 32'h800 : \n                                 (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 32'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = 32'b0;\n\n  // Register Update\n  assign cmt_badaddr_ena = longp_excp_flush_req_ld_buserr | alu_excp_flush_req_ld_misalgn | alu_excp_flush_req_stamo_misalgn;\n  assign cmt_epc_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_cause_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_status_ena = longp_excp_flush_req | alu_excp_flush_req;\n\n  // mcause Register Update\n  assign mcause_value = irq_flush_req ? {1'b1, 4'b0000} : // Interrupt cause\n                        alu_excp_flush_req_ifu_misalgn ? 5'd0 :\n                        alu_excp_flush_req_ifu_buserr ? 5'd1 :\n                        alu_excp_flush_req_ifu_ilegl ? 5'd2 :\n                        alu_excp_flush_req_ebreak ? 5'd3 :\n                        alu_excp_flush_req_ld_misalgn ? 5'd4 :\n                        longp_excp_flush_req_ld_buserr ? 5'd5 :\n                        alu_excp_flush_req_stamo_misalgn ? 5'd6 :\n                        longp_excp_flush_req_st_buserr ? 5'd7 :\n                        alu_excp_flush_req_ecall & u_mode ? 5'd8 :\n                        alu_excp_flush_req_ecall & s_mode ? 5'd9 :\n                        alu_excp_flush_req_ecall & h_mode ? 5'd10 :\n                        alu_excp_flush_req_ecall & m_mode ? 5'd11 :\n                        longp_excp_flush_req_insterr ? 5'd16 : 5'd0;\n\n  // mepc Register Update\n  assign mepc_value = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n\n  // mtval Register Update\n  assign mtval_value = longp_excp_flush_req_ld_buserr ? longp_excp_i_badaddr :\n                       alu_excp_flush_req_ld_misalgn ? alu_excp_i_pc :\n                       alu_excp_flush_req_ifu_ilegl ? alu_excp_i_instr : 32'b0;\n\n  // Output Assignments\n  assign cmt_badaddr = mtval_value;\n  assign cmt_epc = mepc_value;\n  assign cmt_cause = mcause_value;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 18, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic for exception handling\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 19, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 15, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}}) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign bpu_wait = (dec_jalr & dec_jalr_rs1x1 & (~oitf_empty) & jalr_rs1idx_cam_irrdidx) |\n                    (dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 20, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 16, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 16, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input  clk,\n  input  rst_n,\n  input  [E203_PC_SIZE-1:0] pc,\n  input  dec_jal,\n  input  dec_jalr,\n  input  dec_bxx,\n  input  [E203_XLEN-1:0] dec_bjp_imm,\n  input  [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input  oitf_empty,\n  input  ir_empty,\n  input  ir_rs1en,\n  input  jalr_rs1idx_cam_irrdidx,\n  input  dec_i_valid,\n  input  ir_valid_clr,\n  input  [E203_XLEN-1:0] rf2bpu_x1,\n  input  [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  wire rs1xn_rdrf_r;\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1x1_dep = (~oitf_empty) | jalr_rs1idx_cam_irrdidx;\n  wire bpu_wait = dec_jalr & (\n    (dec_jalr_rs1x1 & jalr_rs1x1_dep) |\n    (dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr))\n  );\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_jal | dec_bxx}} & pc) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}}) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1) |\n    ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 11, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  // Instantiate the sirv_gnrl_ram module\n  sirv_gnrl_ram #(\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .FORCE_X2ZERO(0),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 12, "code": "module e203_itcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 17, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 14, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include global definitions\n  `include \"e203_defines.v\"\n\n  // Synchronizer module instantiation for each interrupt type\n  generate\n    if (MASTER) begin : master_mode\n      if (`ifdef E203_HAS_LOCKSTEP) begin : lockstep_mode\n        // No operations in lockstep mode\n      end else begin : non_lockstep_mode\n        if (`ifdef E203_IRQ_NEED_SYNC) begin : need_sync\n          // Instantiate synchronizers for each interrupt\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        end else begin : no_sync\n          // Direct pass-through\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        end\n      end\n    end else begin : slave_mode\n      // Signal pass-through in slave mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 15, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n`include \"e203_defines.v\"\n\ngenerate\n    if (MASTER) begin : master_mode\n        `ifdef E203_HAS_LOCKSTEP\n            // No operations for lockstep mode\n        `else\n            `ifdef E203_IRQ_NEED_SYNC\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_ext_irq_sync (\n                    .din_a  (ext_irq_a),\n                    .dout   (ext_irq_r),\n                    .rst_n  (rst_n),\n                    .clk    (clk)\n                );\n\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_sft_irq_sync (\n                    .din_a  (sft_irq_a),\n                    .dout   (sft_irq_r),\n                    .rst_n  (rst_n),\n                    .clk    (clk)\n                );\n\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_tmr_irq_sync (\n                    .din_a  (tmr_irq_a),\n                    .dout   (tmr_irq_r),\n                    .rst_n  (rst_n),\n                    .clk    (clk)\n                );\n\n                sirv_gnrl_sync #(.DP(E203_ASYNC_FF_LEVELS), .DW(1)) u_dbg_irq_sync (\n                    .din_a  (dbg_irq_a),\n                    .dout   (dbg_irq_r),\n                    .rst_n  (rst_n),\n                    .clk    (clk)\n                );\n            `else\n                assign ext_irq_r = ext_irq_a;\n                assign sft_irq_r = sft_irq_a;\n                assign tmr_irq_r = tmr_irq_a;\n                assign dbg_irq_r = dbg_irq_a;\n            `endif\n        `endif\n    end else begin : slave_mode\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n    end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 13, "code": "module e203_itcm_ram(\n  input  sd,\n  input  ds,\n  input  ls,\n  input  cs,\n  input  we,\n  input  [E203_ITCM_RAM_AW-1:0] addr,\n  input  [E203_ITCM_RAM_MW-1:0] wem,\n  input  [E203_ITCM_RAM_DW-1:0] din,\n  input  rst_n,\n  input  clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 14, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  // Instantiate the sirv_gnrl_ram module\n  sirv_gnrl_ram #(\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .FORCE_X2ZERO(0),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 15, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 16, "code": "`include \"e203_defines.v\"\n\nmodule e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 18, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] i_rs2idx;\n  wire i_rs1en;\n  wire i_rs2en;\n  wire i_mulhsu;\n  wire i_mul;\n  wire i_div;\n  wire i_rem;\n  wire i_divu;\n  wire i_remu;\n  wire i_rv32;\n  wire i_bjp;\n  wire i_jal;\n  wire i_jalr;\n  wire i_bxx;\n  wire [E203_RFIDX_WIDTH-1:0] i_jalr_rs1idx;\n  wire [E203_XLEN-1:0] i_bjp_imm;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(i_rs1en),\n    .dec_rs2en(i_rs2en),\n    .dec_rs1idx(i_rs1idx),\n    .dec_rs2idx(i_rs2idx),\n    .dec_mulhsu(i_mulhsu),\n    .dec_mul(i_mul),\n    .dec_div(i_div),\n    .dec_rem(i_rem),\n    .dec_divu(i_divu),\n    .dec_remu(i_remu),\n    .dec_rv32(i_rv32),\n    .dec_bjp(i_bjp),\n    .dec_jal(i_jal),\n    .dec_jalr(i_jalr),\n    .dec_bxx(i_bxx),\n    .dec_jalr_rs1idx(i_jalr_rs1idx),\n    .dec_bjp_imm(i_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\n  assign dec_rs1en = i_rs1en;\n  assign dec_rs2en = i_rs2en;\n  assign dec_rs1idx = i_rs1idx;\n  assign dec_rs2idx = i_rs2idx;\n  assign dec_mulhsu = i_mulhsu;\n  assign dec_mul = i_mul;\n  assign dec_div = i_div;\n  assign dec_rem = i_rem;\n  assign dec_divu = i_divu;\n  assign dec_remu = i_remu;\n  assign dec_rv32 = i_rv32;\n  assign dec_bjp = i_bjp;\n  assign dec_jal = i_jal;\n  assign dec_jalr = i_jalr;\n  assign dec_bxx = i_bxx;\n  assign dec_jalr_rs1idx = i_jalr_rs1idx;\n  assign dec_bjp_imm = i_bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 17, "code": "module e203_itcm_ram(\n  input  sd,\n  input  ds,\n  input  ls,\n  input  cs,\n  input  we,\n  input  [E203_ITCM_RAM_AW-1:0] addr,\n  input  [E203_ITCM_RAM_MW-1:0] wem,\n  input  [E203_ITCM_RAM_DW-1:0] din,\n  input  rst_n,\n  input  clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 19, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n`ifdef E203_HAS_NICE\n  ,input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      || nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = (oitf_ret_rdwen ? longp_wbck_o_ready : 1'b1) &&\n                        (wbck_i_err ? longp_excp_o_ready : 1'b1);\n\n  assign lsu_wbck_i_ready = wbck_i_ready && (oitf_ret_ptr == lsu_wbck_i_itag);\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready && (oitf_ret_ptr == nice_longp_wbck_i_itag);\n`endif\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                      || nice_longp_wbck_i_err\n`endif\n                      ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_wdat\n`endif\n                      ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                      : nice_longp_wbck_i_itag\n`endif\n                      ;\n\n  assign longp_wbck_o_valid = oitf_ret_rdwen && wbck_i_valid && !wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = wbck_i_err && wbck_i_valid;\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid && wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 18, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  // Instantiate the sirv_gnrl_ram module\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 16, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // No operations in lockstep mode\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 19, "code": "`include \"e203_defines.v\"\n\nmodule e203_ifu (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  output wire [E203_PC_SIZE-1:0]      inspect_pc,\n  output wire                         ifu_active,\n  input  wire                         itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]      pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0]   ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]      ifu_o_pc,\n  output wire                         ifu_o_pc_vld,\n  output wire                         ifu_o_misalgn,\n  output wire                         ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs2idx,\n  output wire                         ifu_o_prdt_taken,\n  output wire                         ifu_o_muldiv_b2b,\n  output wire                         ifu_o_valid,\n  input  wire                         ifu_o_ready,\n  input  wire                         pipe_flush_req,\n  output wire                         pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire                         ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]    itcm_region_indic,\n  output wire                         ifu2itcm_icb_cmd_valid,\n  input  wire                         ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                         ifu2itcm_icb_rsp_valid,\n  output wire                         ifu2itcm_icb_rsp_ready,\n  input  wire                         ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire                         ifu2biu_icb_cmd_valid,\n  input  wire                         ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]    ifu2biu_icb_cmd_addr,\n  input  wire                         ifu2biu_icb_rsp_valid,\n  output wire                         ifu2biu_icb_rsp_ready,\n  input  wire                         ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire                         ifu_halt_req,\n  output wire                         ifu_halt_ack,\n  input  wire                         oitf_empty,\n  input  wire [E203_XLEN-1:0]         rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]         rf2ifu_rs1,\n  input  wire                         dec2ifu_rs1en,\n  input  wire                         dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]  dec2ifu_rdidx,\n  input  wire                         dec2ifu_mulhsu,\n  input  wire                         dec2ifu_div,\n  input  wire                         dec2ifu_rem,\n  input  wire                         dec2ifu_divu,\n  input  wire                         dec2ifu_remu\n);\n\n  // Instantiate the e203_ifu_ifetch submodule\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate the e203_ifu_ift2icb submodule\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 20, "code": "module e203_exu_longpwbck(\n  input  lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input  [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err,\n  input  lsu_cmt_i_buserr,\n  input  [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld,\n  input  lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input  longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input  longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,\n  input  oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input  clk,\n  input  rst_n\n`ifdef E203_HAS_NICE\n  ,input  nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input  [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  nice_longp_wbck_i_err\n`endif\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n\n  assign wbck_i_ready = lsu_wbck_i_ready\n`ifdef E203_HAS_NICE\n                      & nice_longp_wbck_i_ready\n`endif\n                      ;\n\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n\n  assign wbck_i_wdat = lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                     | nice_longp_wbck_i_wdat\n`endif\n                     ;\n\n  assign wbck_i_itag = lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                     | nice_longp_wbck_i_itag\n`endif\n                     ;\n\n  wire wbck_need = oitf_ret_rdwen & ~wbck_i_err;\n  wire excp_need = wbck_i_err;\n\n  assign lsu_wbck_i_ready = wbck_i_ready & (oitf_ret_ptr == lsu_wbck_i_itag) & ~oitf_empty;\n`ifdef E203_HAS_NICE\n  assign nice_longp_wbck_i_ready = wbck_i_ready & (oitf_ret_ptr == nice_longp_wbck_i_itag) & ~oitf_empty;\n`endif\n\n  assign longp_wbck_o_valid = wbck_need & wbck_i_valid & (~excp_need | longp_excp_o_ready);\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0;\n\n  assign longp_excp_o_valid = excp_need & wbck_i_valid & (~wbck_need | longp_wbck_o_ready);\n  assign longp_excp_o_insterr = 1'b0;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 6, "code": "module itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals and logic for arbitration, data width conversion, and control\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 19, "code": "module e203_itcm_ram(\n  input  sd,\n  input  ds,\n  input  ls,\n  input  cs,\n  input  we,\n  input  [E203_ITCM_RAM_AW-1:0] addr,\n  input  [E203_ITCM_RAM_MW-1:0] wem,\n  input  [E203_ITCM_RAM_DW-1:0] din,\n  input  rst_n,\n  input  clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 17, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include the necessary defines\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_IRQ_NEED_SYNC\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) u_ext_irq_sync (\n          .din_a(ext_irq_a),\n          .dout(ext_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) u_sft_irq_sync (\n          .din_a(sft_irq_a),\n          .dout(sft_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) u_tmr_irq_sync (\n          .din_a(tmr_irq_a),\n          .dout(tmr_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n\n        sirv_gnrl_sync #(\n          .DP(E203_ASYNC_FF_LEVELS),\n          .DW(1)\n        ) u_dbg_irq_sync (\n          .din_a(dbg_irq_a),\n          .dout(dbg_irq_r),\n          .rst_n(rst_n),\n          .clk(clk)\n        );\n      `else\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n      `endif\n    end else begin : slave_mode\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 18, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n        end else begin\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    wire rst_final_n = test_mode ? rst_n : rst_sync_n;\n\n    assign rst_core = ~rst_final_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = ~rst_final_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~rst_final_n;\n`endif\n    assign rst_aon = ~rst_final_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 18, "code": "module e203_irq_sync (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  `include \"e203_defines.v\"\n\n  generate\n    if (MASTER) begin : gen_master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // Lockstep mode: no operation\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          // Non-lockstep mode with synchronization\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_ext_irq_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_sft_irq_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_tmr_irq_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) u_dbg_irq_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // Non-lockstep mode without synchronization\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : gen_slave_mode\n      // Slave mode: signal pass-through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 13, "code": "module e203_lsu (\n    input wire commit_mret,\n    input wire commit_trap,\n    input wire excp_active,\n    output wire lsu_active,\n\n    output wire lsu_o_valid,\n    input wire lsu_o_ready,\n    output wire [XLEN-1:0] lsu_o_wbck_wdat,\n    output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n    output wire lsu_o_wbck_err,\n    output wire lsu_o_cmt_ld,\n    output wire lsu_o_cmt_st,\n    output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n    output wire lsu_o_cmt_buserr,\n\n    input wire agu_icb_cmd_valid,\n    output wire agu_icb_cmd_ready,\n    input wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n    input wire agu_icb_cmd_read,\n    input wire [XLEN-1:0] agu_icb_cmd_wdata,\n    input wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n    input wire agu_icb_cmd_lock,\n    input wire agu_icb_cmd_excl,\n    input wire [1:0] agu_icb_cmd_size,\n    input wire agu_icb_cmd_back2agu,\n    input wire agu_icb_cmd_usign,\n    input wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n    output wire agu_icb_rsp_valid,\n    input wire agu_icb_rsp_ready,\n    output wire agu_icb_rsp_err,\n    output wire agu_icb_rsp_excl_ok,\n    output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n    input wire nice_mem_holdup,\n    input wire nice_icb_cmd_valid,\n    output wire nice_icb_cmd_ready,\n    input wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n    input wire nice_icb_cmd_read,\n    input wire [XLEN-1:0] nice_icb_cmd_wdata,\n    input wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n    output wire nice_icb_rsp_valid,\n    input wire nice_icb_rsp_ready,\n    output wire nice_icb_rsp_err,\n    output wire [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n    input wire [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n    input wire [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n    output wire biu_icb_cmd_valid,\n    input wire biu_icb_cmd_ready,\n    output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n    output wire biu_icb_cmd_read,\n    output wire [XLEN-1:0] biu_icb_cmd_wdata,\n    output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n    output wire biu_icb_cmd_lock,\n    output wire biu_icb_cmd_excl,\n    output wire [1:0] biu_icb_cmd_size,\n    input wire biu_icb_rsp_valid,\n    output wire biu_icb_rsp_ready,\n    input wire biu_icb_rsp_err,\n    input wire biu_icb_rsp_excl_ok,\n    input wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Internal logic for LSU control, arbitration, write-back, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 19, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync_reg;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync_reg <= {RST_SYNC_LEVEL{1'b1}};\n        end else begin\n            rst_sync_reg <= {rst_sync_reg[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    wire rst_sync = rst_sync_reg[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? ~rst_n : rst_sync;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = test_mode ? ~rst_n : rst_sync;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = test_mode ? ~rst_n : rst_sync;\n`endif\n    assign rst_aon = test_mode ? ~rst_n : rst_sync;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 19, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire dec_misalgn;\n  wire dec_buserr;\n  wire dec_ilegl;\n  wire dec_rs1x0;\n  wire dec_rs2x0;\n  wire dec_rdwen;\n  wire [E203_RFIDX_WIDTH-1:0] dec_rdidx;\n  wire [31:0] dec_info;\n  wire [31:0] dec_imm;\n  wire [31:0] dec_pc;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(32'b0),\n    .i_prdt_taken(1'b0),\n    .i_muldiv_b2b(1'b0),\n    .i_misalgn(1'b0),\n    .i_buserr(1'b0),\n    .dbg_mode(1'b0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(dec_misalgn),\n    .dec_buserr(dec_buserr),\n    .dec_ilegl(dec_ilegl),\n    .dec_rs1x0(dec_rs1x0),\n    .dec_rs2x0(dec_rs2x0),\n    .dec_rdwen(dec_rdwen),\n    .dec_rdidx(dec_rdidx),\n    .dec_info(dec_info),\n    .dec_imm(dec_imm),\n    .dec_pc(dec_pc)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 14, "code": "module e203_lsu (\n  input wire commit_mret,\n  input wire commit_trap,\n  input wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input wire agu_icb_cmd_read,\n  input wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input wire agu_icb_cmd_lock,\n  input wire agu_icb_cmd_excl,\n  input wire [1:0] agu_icb_cmd_size,\n  input wire agu_icb_cmd_back2agu,\n  input wire agu_icb_cmd_usign,\n  input wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input wire nice_mem_holdup,\n  input wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input wire nice_icb_cmd_read,\n  input wire [XLEN-1:0] nice_icb_cmd_wdata,\n  input wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input wire [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input wire [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output wire biu_icb_cmd_valid,\n  input wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input wire biu_icb_rsp_err,\n  input wire biu_icb_rsp_excl_ok,\n  input wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal logic for LSU control, arbitration, and exception handling\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 20, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 16, "code": "`include \"e203_defines.v\"\n\nmodule e203_srams (\n  // ITCM RAM Interface\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  // DTCM RAM Interface\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin : itcm_ram_block\n      e203_itcm_ram u_itcm_ram (\n        .sd(itcm_ram_sd),\n        .ds(itcm_ram_ds),\n        .ls(itcm_ram_ls),\n        .cs(itcm_ram_cs),\n        .we(itcm_ram_we),\n        .addr(itcm_ram_addr),\n        .wem(itcm_ram_wem),\n        .din(itcm_ram_din),\n        .dout(itcm_ram_dout),\n        .clk(clk_itcm_ram),\n        .rst_n(rst_itcm)\n      );\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin : dtcm_ram_block\n      e203_dtcm_ram u_dtcm_ram (\n        .sd(dtcm_ram_sd),\n        .ds(dtcm_ram_ds),\n        .ls(dtcm_ram_ls),\n        .cs(dtcm_ram_cs),\n        .we(dtcm_ram_we),\n        .addr(dtcm_ram_addr),\n        .wem(dtcm_ram_wem),\n        .din(dtcm_ram_din),\n        .dout(dtcm_ram_dout),\n        .clk(clk_dtcm_ram),\n        .rst_n(rst_dtcm)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 19, "code": "module e203_irq_sync (\n  input wire clk,\n  input wire rst_n,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire dbg_irq_a,\n  output wire ext_irq_r,\n  output wire sft_irq_r,\n  output wire tmr_irq_r,\n  output wire dbg_irq_r\n);\n\n  // Include the necessary configuration file\n  `include \"e203_defines.v\"\n\n  // Generate block for master-slave mode control\n  generate\n    if (MASTER) begin : master_mode\n      `ifdef E203_HAS_LOCKSTEP\n        // Lockstep mode: No operations performed\n      `else\n        `ifdef E203_IRQ_NEED_SYNC\n          // Non-Lockstep Mode with Synchronization\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) ext_sync (\n            .din_a(ext_irq_a),\n            .dout(ext_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) sft_sync (\n            .din_a(sft_irq_a),\n            .dout(sft_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) tmr_sync (\n            .din_a(tmr_irq_a),\n            .dout(tmr_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n\n          sirv_gnrl_sync #(\n            .DP(E203_ASYNC_FF_LEVELS),\n            .DW(1)\n          ) dbg_sync (\n            .din_a(dbg_irq_a),\n            .dout(dbg_irq_r),\n            .rst_n(rst_n),\n            .clk(clk)\n          );\n        `else\n          // Non-Lockstep Mode without Synchronization\n          assign ext_irq_r = ext_irq_a;\n          assign sft_irq_r = sft_irq_a;\n          assign tmr_irq_r = tmr_irq_a;\n          assign dbg_irq_r = dbg_irq_a;\n        `endif\n      `endif\n    end else begin : slave_mode\n      // Slave mode: Signal pass-through\n      assign ext_irq_r = ext_irq_a;\n      assign sft_irq_r = sft_irq_a;\n      assign tmr_irq_r = tmr_irq_a;\n      assign dbg_irq_r = dbg_irq_a;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 17, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 20, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    wire async_rst_n;\n    wire sync_rst_n;\n\n    // Asynchronous reset logic\n    assign async_rst_n = test_mode ? rst_n : 1'b1;\n\n    // Synchronous reset logic\n    generate\n        if (MASTER) begin: gen_master_reset\n            reg [RST_SYNC_LEVEL-1:0] rst_sync;\n            always @(posedge clk or negedge async_rst_n) begin\n                if (!async_rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b1};\n            end\n            assign sync_rst_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin: gen_slave_reset\n            assign sync_rst_n = async_rst_n;\n        end\n    endgenerate\n\n    // Reset signal distribution\n    assign rst_core = sync_rst_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = sync_rst_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = sync_rst_n;\n`endif\n    assign rst_aon = sync_rst_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 15, "code": "module e203_lsu(\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  wire nice_mem_holdup,\n  input  wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  wire nice_icb_cmd_read,\n  input  wire [XLEN-1:0] nice_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input  wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU implementation\n  // Address routing, arbitration control, write-back processing, and exception handling logic\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 20, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_sirv_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 16, "code": "module e203_lsu(\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata\n\n  `ifdef E203_HAS_NICE\n  , input  wire nice_mem_holdup\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  , input  wire [ADDR_SIZE-1:0] itcm_region_indic\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  , input  wire [ADDR_SIZE-1:0] dtcm_region_indic\n  `endif\n\n  // ICB interfaces for NICE/ITCM/DTCM/DCache/BIU\n  , output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n  // Main control logic for LSU\n  // Address routing, arbitration, write-back, and exception handling logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 18, "code": "`include \"e203_defines.v\"\n\nmodule e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .rst_n(rst_itcm),\n    .clk(clk_itcm_ram)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .rst_n(rst_dtcm),\n    .clk(clk_dtcm_ram)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 13, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the LSU control module\n  // Implement the logic based on the design document\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 17, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | ((~ir_empty) & ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1xn_rdrf_r = rs1xn_rdrf_r;\n  assign bpu_wait = (dec_jalr & dec_jalr_rs1x1 & (~oitf_empty)) | (dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr) & (~jalr_rs1xn_rdrf_r));\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n                         | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n                         | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n                         | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 20, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n`include \"e203_defines.v\"\n\ngenerate\n    if (MASTER) begin : master_mode\n        `ifdef E203_HAS_LOCKSTEP\n            // In lockstep mode, no operations are performed\n        `else\n            `ifdef E203_IRQ_NEED_SYNC\n                // Synchronize interrupt signals\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) ext_irq_sync (\n                    .din_a(ext_irq_a),\n                    .dout(ext_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) sft_irq_sync (\n                    .din_a(sft_irq_a),\n                    .dout(sft_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) tmr_irq_sync (\n                    .din_a(tmr_irq_a),\n                    .dout(tmr_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n\n                sirv_gnrl_sync #(\n                    .DP(E203_ASYNC_FF_LEVELS),\n                    .DW(1)\n                ) dbg_irq_sync (\n                    .din_a(dbg_irq_a),\n                    .dout(dbg_irq_r),\n                    .rst_n(rst_n),\n                    .clk(clk)\n                );\n            `else\n                // Direct pass-through of signals\n                assign ext_irq_r = ext_irq_a;\n                assign sft_irq_r = sft_irq_a;\n                assign tmr_irq_r = tmr_irq_a;\n                assign dbg_irq_r = dbg_irq_a;\n            `endif\n        `endif\n    end else begin : slave_mode\n        // In slave mode, signals are directly connected\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n    end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 17, "code": "module e203_lsu(\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata\n\n  `ifdef E203_HAS_NICE\n  ,input  nice_mem_holdup\n  ,input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [XLEN-1:0] nice_icb_cmd_wdata,\n  input  [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [XLEN-1:0] nice_icb_rsp_rdata\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  ,input  [ADDR_SIZE-1:0] itcm_region_indic\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  ,input  [ADDR_SIZE-1:0] dtcm_region_indic\n  `endif\n\n  ,output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [XLEN-1:0] biu_icb_cmd_wdata,\n  output [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU control, arbitration, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 14, "code": "module e203_lsu_ctrl (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  output wire lsu_ctrl_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input  wire [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  wire nice_icb_cmd_read,\n  input  wire [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  wire [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input  wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output wire dcache_icb_cmd_valid,\n  input  wire dcache_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output wire dcache_icb_cmd_read,\n  output wire [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output wire dcache_icb_cmd_lock,\n  output wire dcache_icb_cmd_excl,\n  output wire [1:0] dcache_icb_cmd_size,\n  input  wire dcache_icb_rsp_valid,\n  output wire dcache_icb_rsp_ready,\n  input  wire dcache_icb_rsp_err,\n  input  wire dcache_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output wire dtcm_icb_cmd_valid,\n  input  wire dtcm_icb_cmd_ready,\n  output wire [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output wire dtcm_icb_cmd_read,\n  output wire [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output wire dtcm_icb_cmd_lock,\n  output wire dtcm_icb_cmd_excl,\n  output wire [1:0] dtcm_icb_cmd_size,\n  input  wire dtcm_icb_rsp_valid,\n  output wire dtcm_icb_rsp_ready,\n  input  wire dtcm_icb_rsp_err,\n  input  wire dtcm_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n  // Implement the logic based on the design document specifications\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 18, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n`ifdef E203_HAS_NICE\n  input  wire nice_mem_holdup,\n  input  wire nice_icb_cmd_valid,\n  output wire nice_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  wire nice_icb_cmd_read,\n  input  wire [XLEN-1:0] nice_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_rsp_valid,\n  input  wire nice_icb_rsp_ready,\n  output wire nice_icb_rsp_err,\n  output wire [XLEN-1:0] nice_icb_rsp_rdata,\n`endif\n\n`ifdef E203_HAS_ITCM\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n`endif\n\n`ifdef E203_HAS_DTCM\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n`endif\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 19, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .rst_n(rst_itcm),\n    .clk(clk_itcm_ram)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .rst_n(rst_dtcm),\n    .clk(clk_dtcm_ram)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 19, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata\n\n  // Additional ICB interfaces for NICE, ITCM, DTCM, DCache, BIU\n  `ifdef E203_HAS_NICE\n  , input  wire nice_mem_holdup\n  , input  wire nice_icb_cmd_valid\n  , output wire nice_icb_cmd_ready\n  , input  wire [ADDR_SIZE-1:0] nice_icb_cmd_addr\n  , input  wire nice_icb_cmd_read\n  , input  wire [XLEN-1:0] nice_icb_cmd_wdata\n  , input  wire [XLEN/8-1:0] nice_icb_cmd_wmask\n  , output wire nice_icb_rsp_valid\n  , input  wire nice_icb_rsp_ready\n  , output wire nice_icb_rsp_err\n  , output wire [XLEN-1:0] nice_icb_rsp_rdata\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  , input  wire [ADDR_SIZE-1:0] itcm_region_indic\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  , input  wire [ADDR_SIZE-1:0] dtcm_region_indic\n  `endif\n\n  // BIU ICB interface\n  , output wire biu_icb_cmd_valid\n  , input  wire biu_icb_cmd_ready\n  , output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr\n  , output wire biu_icb_cmd_read\n  , output wire [XLEN-1:0] biu_icb_cmd_wdata\n  , output wire [XLEN/8-1:0] biu_icb_cmd_wmask\n  , output wire biu_icb_cmd_lock\n  , output wire biu_icb_cmd_excl\n  , output wire [1:0] biu_icb_cmd_size\n  , input  wire biu_icb_rsp_valid\n  , output wire biu_icb_rsp_ready\n  , input  wire biu_icb_rsp_err\n  , input  wire biu_icb_rsp_excl_ok\n  , input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU control, arbitration, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 16, "code": "module e203_ifu_ifetch (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  output wire                     ifu_req_valid,\n  input  wire                     ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0]  ifu_req_pc,\n  output wire                     ifu_req_seq,\n  output wire                     ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0]  ifu_req_last_pc,\n  input  wire                     ifu_rsp_valid,\n  output wire                     ifu_rsp_ready,\n  input  wire                     ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input  wire                     pipe_flush_req,\n  output wire                     pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]  pipe_flush_pc,\n  `endif\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]  ifu_o_pc,\n  output wire                     ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire                     ifu_o_prdt_taken,\n  output wire                     ifu_o_misalgn,\n  output wire                     ifu_o_buserr,\n  output wire                     ifu_o_muldiv_b2b,\n  output wire                     ifu_o_valid,\n  input  wire                     ifu_o_ready,\n  input  wire                     ifu_halt_req,\n  output wire                     ifu_halt_ack,\n  input  wire                     oitf_empty,\n  input  wire [E203_XLEN-1:0]     rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]     rf2ifu_rs1,\n  input  wire                     dec2ifu_rs1en,\n  input  wire                     dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire                     dec2ifu_mulhsu,\n  input  wire                     dec2ifu_div,\n  input  wire                     dec2ifu_rem,\n  input  wire                     dec2ifu_divu,\n  input  wire                     dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // IR control logic\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire prdt_taken;\n  wire bpu_wait;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx))\n    else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 15, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 16, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal logic and implementation details go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 20, "code": "module e203_srams (\n  `ifdef E203_HAS_ITCM\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n  `endif\n);\n\n  `ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 18, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n  assign prdt_pc_add_op1 = (dec_bxx | dec_jal) ? pc : \n                           (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 : \n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency logic\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr | ~ir_rs1en;\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1xn_dep) |\n                    (dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & jalr_rs1xn_dep);\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | ~rs1xn_rdrf_clr;\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Trigger module for rs1xn_rdrf_r\n  sirv_gnrl_dfflr #(.DW(1)) u_rs1xn_rdrf (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Control signal for register file read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 17, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the LSU control module\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 19, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire jalr_rs1xn_dep_clr = (~jalr_rs1xn_dep) | jalr_rs1xn_dep_ir_clr;\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep_clr;\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1x1_dep = (~oitf_empty) | jalr_rs1idx_cam_irrdidx;\n\n  wire bpu_wait_rs1xn = dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep_clr);\n  wire bpu_wait_rs1x1 = dec_jalr & dec_jalr_rs1x1 & jalr_rs1x1_dep;\n\n  assign bpu_wait = bpu_wait_rs1xn | bpu_wait_rs1x1;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1xn}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 18, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 20, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (~ir_empty);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr | (~ir_rs1en);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire jalr_rs1xn_rdrf_r = rs1xn_rdrf_r;\n  wire jalr_rs1xn_rdrf_ena = rs1xn_rdrf_ena;\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign prdt_pc_add_op1 = \n    (dec_bxx | dec_jal) ? pc :\n    (dec_jalr & dec_jalr_rs1x0) ? {E203_PC_SIZE{1'b0}} :\n    (dec_jalr & dec_jalr_rs1x1) ? rf2bpu_x1 :\n    rf2bpu_rs1;\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign bpu_wait = dec_jalr & dec_jalr_rs1x1 & (~oitf_empty) & jalr_rs1idx_cam_irrdidx |\n                    dec_jalr & dec_jalr_rs1xn & jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 19, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 7, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n  \n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (Optional)\n  `ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  `endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [1:0] arb_sel;\n  wire [DATA_WIDTH-1:0] arb_wdata;\n  wire [WMSK_WIDTH-1:0] arb_wmask;\n  wire [ADDR_WIDTH-1:0] arb_addr;\n  wire arb_read;\n  wire arb_cmd_valid;\n  wire arb_cmd_ready;\n  wire arb_rsp_valid;\n  wire arb_rsp_ready;\n  wire arb_rsp_err;\n  wire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n  // Instantiate the arbitration module\n  sirv_gnrl_icb_arbt #(\n    .AW(ADDR_WIDTH),\n    .DW(DATA_WIDTH),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(3),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_read),\n    .o_icb_cmd_addr(arb_addr),\n    .o_icb_cmd_wdata(arb_wdata),\n    .o_icb_cmd_wmask(arb_wmask),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, ifu2itcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, ifu2itcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, ifu2itcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, ifu2itcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, ifu2itcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, ifu2itcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, ifu2itcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, ifu2itcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, ifu2itcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, ifu2itcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(DATA_WIDTH),\n    .MW(WMSK_WIDTH),\n    .AW(ADDR_WIDTH),\n    .AW_LSB(3),\n    .USR_W(1)\n  ) u_sram_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_read),\n    .i_icb_cmd_addr(arb_addr),\n    .i_icb_cmd_wdata(arb_wdata),\n    .i_icb_cmd_wmask(arb_wmask),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 20, "code": "module e203_ifu(\n  input  wire                         clk,\n  input  wire                         rst_n,\n  output wire [E203_PC_SIZE-1:0]      inspect_pc,\n  output wire                         ifu_active,\n  input  wire                         itcm_nohold,\n  input  wire [E203_PC_SIZE-1:0]      pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0]   ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0]      ifu_o_pc,\n  output wire                         ifu_o_pc_vld,\n  output wire                         ifu_o_misalgn,\n  output wire                         ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0]  ifu_o_rs2idx,\n  output wire                         ifu_o_prdt_taken,\n  output wire                         ifu_o_muldiv_b2b,\n  output wire                         ifu_o_valid,\n  input  wire                         ifu_o_ready,\n  input  wire                         pipe_flush_req,\n  output wire                         pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0]      pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input  wire                         ifu2itcm_holdup,\n  input  wire [E203_ADDR_SIZE-1:0]    itcm_region_indic,\n  output wire                         ifu2itcm_icb_cmd_valid,\n  input  wire                         ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                         ifu2itcm_icb_rsp_valid,\n  output wire                         ifu2itcm_icb_rsp_ready,\n  input  wire                         ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire                         ifu2biu_icb_cmd_valid,\n  input  wire                         ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0]    ifu2biu_icb_cmd_addr,\n  input  wire                         ifu2biu_icb_rsp_valid,\n  output wire                         ifu2biu_icb_rsp_ready,\n  input  wire                         ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input  wire                         ifu_halt_req,\n  output wire                         ifu_halt_ack,\n  input  wire                         oitf_empty,\n  input  wire [E203_XLEN-1:0]         rf2ifu_x1,\n  input  wire [E203_XLEN-1:0]         rf2ifu_rs1,\n  input  wire                         dec2ifu_rs1en,\n  input  wire                         dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0]  dec2ifu_rdidx,\n  input  wire                         dec2ifu_mulhsu,\n  input  wire                         dec2ifu_div,\n  input  wire                         dec2ifu_rem,\n  input  wire                         dec2ifu_divu,\n  input  wire                         dec2ifu_remu\n);\n\n  // Instantiate the e203_ifu_ifetch submodule\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n`ifdef E203_TIMING_BOOST\n    .pipe_flush_pc(pipe_flush_pc),\n`endif\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate the e203_ifu_ift2icb submodule\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 8, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [1:0] arb_sel;\n  wire [DATA_WIDTH-1:0] data_converted;\n  wire [WMSK_WIDTH-1:0] mask_converted;\n\n  // Instantiate Data Width Conversion Module\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(data_converted),\n    .o_icb_cmd_wmask(mask_converted),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate Bus Arbiter Module\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate SRAM Controller Module\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 9, "code": "module itcm_controller (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire tcm_cgstop,\n    output wire itcm_active,\n\n    // IFU Interface\n    input wire ifu2itcm_icb_cmd_valid,\n    output wire ifu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n    input wire ifu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n    output wire ifu2itcm_icb_rsp_valid,\n    input wire ifu2itcm_icb_rsp_ready,\n    output wire ifu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n    // LSU Interface\n    input wire lsu2itcm_icb_cmd_valid,\n    output wire lsu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n    input wire lsu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n    output wire lsu2itcm_icb_rsp_valid,\n    input wire lsu2itcm_icb_rsp_ready,\n    output wire lsu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n    // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n    // RAM Interface\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [RAM_AW-1:0] itcm_ram_addr,\n    output wire [RAM_MW-1:0] itcm_ram_wem,\n    output wire [RAM_DW-1:0] itcm_ram_din,\n    input wire [RAM_DW-1:0] itcm_ram_dout,\n    output wire clk_itcm_ram\n);\n\n// Internal signals\nwire [1:0] arb_sel;\nwire [DATA_WIDTH-1:0] arb_wdata;\nwire [WMSK_WIDTH-1:0] arb_wmask;\nwire [ADDR_WIDTH-1:0] arb_addr;\nwire arb_read;\nwire arb_cmd_valid;\nwire arb_cmd_ready;\nwire arb_rsp_valid;\nwire arb_rsp_ready;\nwire arb_rsp_err;\nwire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n// Instantiate Bus Arbiter\nsirv_gnrl_icb_arbt #(\n    .AW(ADDR_WIDTH),\n    .DW(DATA_WIDTH),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(3),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n) u_itcm_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_read),\n    .o_icb_cmd_addr(arb_addr),\n    .o_icb_cmd_wdata(arb_wdata),\n    .o_icb_cmd_wmask(arb_wmask),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ifu2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, ext2itcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ifu2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, ext2itcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ifu2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, ext2itcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ifu2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, ext2itcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ifu2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, ext2itcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ifu2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, ext2itcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ifu2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, ext2itcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ifu2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, ext2itcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ifu2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, ext2itcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ifu2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, ext2itcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\n// Instantiate SRAM Controller\nsirv_sram_icb_ctrl #(\n    .DW(DATA_WIDTH),\n    .MW(WMSK_WIDTH),\n    .AW(ADDR_WIDTH),\n    .AW_LSB(3),\n    .USR_W(1)\n) u_sram_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_read),\n    .i_icb_cmd_addr(arb_addr),\n    .i_icb_cmd_wdata(arb_wdata),\n    .i_icb_cmd_wmask(arb_wmask),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .i_icb_rsp_err(arb_rsp_err),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 20, "code": "module e203_lsu (\n  input  wire        commit_mret,\n  input  wire        commit_trap,\n  input  wire        excp_active,\n  output wire        lsu_active,\n\n  output wire        lsu_o_valid,\n  input  wire        lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire        lsu_o_wbck_err,\n  output wire        lsu_o_cmt_ld,\n  output wire        lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire        lsu_o_cmt_buserr,\n\n  input  wire        agu_icb_cmd_valid,\n  output wire        agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire        agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire        agu_icb_cmd_lock,\n  input  wire        agu_icb_cmd_excl,\n  input  wire [1:0]  agu_icb_cmd_size,\n  input  wire        agu_icb_cmd_back2agu,\n  input  wire        agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire        agu_icb_rsp_valid,\n  input  wire        agu_icb_rsp_ready,\n  output wire        agu_icb_rsp_err,\n  output wire        agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata\n\n  // Additional interfaces for NICE, ITCM, DTCM, DCache, and BIU\n  `ifdef E203_HAS_NICE\n  , input  wire        nice_mem_holdup\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  , input  wire [ADDR_SIZE-1:0] itcm_region_indic\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  , input  wire [ADDR_SIZE-1:0] dtcm_region_indic\n  `endif\n\n  // BIU interface is always available\n  , output wire        biu_icb_cmd_valid,\n  input  wire        biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire        biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire        biu_icb_cmd_lock,\n  output wire        biu_icb_cmd_excl,\n  output wire [1:0]  biu_icb_cmd_size,\n  input  wire        biu_icb_rsp_valid,\n  output wire        biu_icb_rsp_ready,\n  input  wire        biu_icb_rsp_err,\n  input  wire        biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n  // Internal logic for LSU control, arbitration, and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 10, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals for arbitration and data width conversion\n  wire arb_cmd_valid;\n  wire arb_cmd_ready;\n  wire [ADDR_WIDTH-1:0] arb_cmd_addr;\n  wire arb_cmd_read;\n  wire [DATA_WIDTH-1:0] arb_cmd_wdata;\n  wire [WMSK_WIDTH-1:0] arb_cmd_wmask;\n  wire arb_rsp_valid;\n  wire arb_rsp_ready;\n  wire arb_rsp_err;\n  wire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n  // Instantiate the data width conversion module\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the bus arbiter module\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller module\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_cmd_usr(3'b0),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .i_icb_rsp_usr(3'b0),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 11, "code": "module itcm_controller (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire tcm_cgstop,\n    output wire itcm_active,\n\n    // IFU Interface\n    input wire ifu2itcm_icb_cmd_valid,\n    output wire ifu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n    input wire ifu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n    output wire ifu2itcm_icb_rsp_valid,\n    input wire ifu2itcm_icb_rsp_ready,\n    output wire ifu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n    // LSU Interface\n    input wire lsu2itcm_icb_cmd_valid,\n    output wire lsu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n    input wire lsu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n    output wire lsu2itcm_icb_rsp_valid,\n    input wire lsu2itcm_icb_rsp_ready,\n    output wire lsu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n    // External Interface (optional)\n    `ifdef E203_HAS_ITCM_EXTITF\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n    `endif\n\n    // RAM Interface\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [RAM_AW-1:0] itcm_ram_addr,\n    output wire [RAM_MW-1:0] itcm_ram_wem,\n    output wire [RAM_DW-1:0] itcm_ram_din,\n    input wire [RAM_DW-1:0] itcm_ram_dout,\n    output wire clk_itcm_ram\n);\n\n// Internal signals\nwire [RAM_DW-1:0] ram_din;\nwire [RAM_DW-1:0] ram_dout;\nwire ram_cs;\nwire ram_we;\nwire [RAM_AW-1:0] ram_addr;\nwire [RAM_MW-1:0] ram_wem;\n\n// Clock gating logic\nassign clk_itcm_ram = test_mode ? clk : (tcm_cgstop ? 1'b0 : clk);\n\n// ITCM active status\nassign itcm_active = ifu2itcm_icb_cmd_valid || lsu2itcm_icb_cmd_valid || `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid || `endif 1'b0;\n\n// Instantiate Data Width Conversion Module\nsirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\n// Instantiate Bus Arbiter Module\nsirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\n// Instantiate SRAM Controller Module\nsirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(ram_cs),\n    .ram_we(ram_we),\n    .ram_addr(ram_addr),\n    .ram_wem(ram_wem),\n    .ram_din(ram_din),\n    .ram_dout(ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 12, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [1:0] arb_sel;\n  wire [DATA_WIDTH-1:0] wdata_converted;\n  wire [WMSK_WIDTH-1:0] wmask_converted;\n\n  // Instantiate Data Width Conversion Module\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(wdata_converted),\n    .o_icb_cmd_wmask(wmask_converted),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate Bus Arbiter Module\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate SRAM Controller Module\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 13, "code": "module itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [DATA_WIDTH-1:0] converted_wdata;\n  wire [WMSK_WIDTH-1:0] converted_wmask;\n  wire [ADDR_WIDTH-1:0] converted_addr;\n  wire [DATA_WIDTH-1:0] read_data;\n  wire cmd_valid;\n  wire cmd_ready;\n  wire rsp_valid;\n  wire rsp_ready;\n  wire rsp_err;\n\n  // Data Width Conversion\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(cmd_valid),\n    .o_icb_cmd_ready(cmd_ready),\n    .o_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .o_icb_cmd_addr(converted_addr),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_lock(1'b0),\n    .o_icb_cmd_excl(1'b0),\n    .o_icb_cmd_size(2'b00),\n    .o_icb_cmd_burst(2'b00),\n    .o_icb_cmd_beat(2'b00),\n    .o_icb_cmd_usr(1'b0),\n    .o_icb_rsp_valid(rsp_valid),\n    .o_icb_rsp_ready(rsp_ready),\n    .o_icb_rsp_err(rsp_err),\n    .o_icb_rsp_excl_ok(1'b0),\n    .o_icb_rsp_rdata(read_data),\n    .o_icb_rsp_usr(1'b0),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(cmd_valid),\n    .o_icb_cmd_ready(cmd_ready),\n    .o_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .o_icb_cmd_addr(converted_addr),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_burst(2'b00),\n    .o_icb_cmd_beat(2'b00),\n    .o_icb_cmd_lock(1'b0),\n    .o_icb_cmd_excl(1'b0),\n    .o_icb_cmd_size(2'b00),\n    .o_icb_cmd_usr(1'b0),\n    .o_icb_rsp_valid(rsp_valid),\n    .o_icb_rsp_ready(rsp_ready),\n    .o_icb_rsp_err(rsp_err),\n    .o_icb_rsp_excl_ok(1'b0),\n    .o_icb_rsp_rdata(read_data),\n    .o_icb_rsp_usr(1'b0),\n    .i_bus_icb_cmd_ready({4{cmd_ready}}),\n    .i_bus_icb_cmd_valid({4{cmd_valid}}),\n    .i_bus_icb_cmd_read({4{lsu2itcm_icb_cmd_read}}),\n    .i_bus_icb_cmd_addr({4{converted_addr}}),\n    .i_bus_icb_cmd_wdata({4{converted_wdata}}),\n    .i_bus_icb_cmd_wmask({4{converted_wmask}}),\n    .i_bus_icb_cmd_burst({8{1'b0}}),\n    .i_bus_icb_cmd_beat({8{1'b0}}),\n    .i_bus_icb_cmd_lock({4{1'b0}}),\n    .i_bus_icb_cmd_excl({4{1'b0}}),\n    .i_bus_icb_cmd_size({8{1'b0}}),\n    .i_bus_icb_cmd_usr({4{1'b0}}),\n    .i_bus_icb_rsp_valid({4{rsp_valid}}),\n    .i_bus_icb_rsp_ready({4{rsp_ready}}),\n    .i_bus_icb_rsp_err({4{rsp_err}}),\n    .i_bus_icb_rsp_excl_ok({4{1'b0}}),\n    .i_bus_icb_rsp_rdata({4{read_data}}),\n    .i_bus_icb_rsp_usr({4{1'b0}}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(cmd_valid),\n    .i_icb_cmd_ready(cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(converted_addr),\n    .i_icb_cmd_wdata(converted_wdata),\n    .i_icb_cmd_wmask(converted_wmask),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(rsp_valid),\n    .i_icb_rsp_ready(rsp_ready),\n    .i_icb_rsp_rdata(read_data),\n    .i_icb_rsp_usr(1'b0),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 14, "code": "module itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals\nwire [1:0] arb_sel;\nwire [DATA_WIDTH-1:0] arb_wdata;\nwire [WMSK_WIDTH-1:0] arb_wmask;\nwire [ADDR_WIDTH-1:0] arb_addr;\nwire arb_read;\nwire arb_cmd_valid;\nwire arb_cmd_ready;\nwire arb_rsp_valid;\nwire arb_rsp_ready;\nwire arb_rsp_err;\nwire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n// Instantiate the arbitration module\nsirv_gnrl_icb_arbt #(\n  .AW(ADDR_WIDTH),\n  .DW(DATA_WIDTH),\n  .USR_W(1),\n  .ARBT_SCHEME(0),\n  .FIFO_OUTS_NUM(1),\n  .FIFO_CUT_READY(0),\n  .ARBT_NUM(3),\n  .ALLOW_0CYCL_RSP(1),\n  .ARBT_PTR_W(2)\n) u_itcm_icb_arbt (\n  .o_icb_cmd_valid(arb_cmd_valid),\n  .o_icb_cmd_ready(arb_cmd_ready),\n  .o_icb_cmd_read(arb_read),\n  .o_icb_cmd_addr(arb_addr),\n  .o_icb_cmd_wdata(arb_wdata),\n  .o_icb_cmd_wmask(arb_wmask),\n  .o_icb_cmd_lock(1'b0),\n  .o_icb_cmd_excl(1'b0),\n  .o_icb_cmd_size(2'b10),\n  .o_icb_cmd_burst(2'b00),\n  .o_icb_cmd_beat(2'b00),\n  .o_icb_cmd_usr(1'b0),\n  .o_icb_rsp_valid(arb_rsp_valid),\n  .o_icb_rsp_ready(arb_rsp_ready),\n  .o_icb_rsp_err(arb_rsp_err),\n  .o_icb_rsp_excl_ok(1'b0),\n  .o_icb_rsp_rdata(arb_rsp_rdata),\n  .o_icb_rsp_usr(1'b0),\n  .i_bus_icb_cmd_ready({ext2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, ifu2itcm_icb_cmd_ready}),\n  .i_bus_icb_cmd_valid({ext2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, ifu2itcm_icb_cmd_valid}),\n  .i_bus_icb_cmd_read({ext2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, ifu2itcm_icb_cmd_read}),\n  .i_bus_icb_cmd_addr({ext2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, ifu2itcm_icb_cmd_addr}),\n  .i_bus_icb_cmd_wdata({ext2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, ifu2itcm_icb_cmd_wdata}),\n  .i_bus_icb_cmd_wmask({ext2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, ifu2itcm_icb_cmd_wmask}),\n  .i_bus_icb_cmd_burst({2'b00, 2'b00, 2'b00}),\n  .i_bus_icb_cmd_beat({2'b00, 2'b00, 2'b00}),\n  .i_bus_icb_cmd_lock({1'b0, 1'b0, 1'b0}),\n  .i_bus_icb_cmd_excl({1'b0, 1'b0, 1'b0}),\n  .i_bus_icb_cmd_size({2'b10, 2'b10, 2'b10}),\n  .i_bus_icb_cmd_usr({1'b0, 1'b0, 1'b0}),\n  .i_bus_icb_rsp_valid({ext2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, ifu2itcm_icb_rsp_valid}),\n  .i_bus_icb_rsp_ready({ext2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, ifu2itcm_icb_rsp_ready}),\n  .i_bus_icb_rsp_err({ext2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, ifu2itcm_icb_rsp_err}),\n  .i_bus_icb_rsp_excl_ok({1'b0, 1'b0, 1'b0}),\n  .i_bus_icb_rsp_rdata({ext2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, ifu2itcm_icb_rsp_rdata}),\n  .i_bus_icb_rsp_usr({1'b0, 1'b0, 1'b0}),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// Instantiate the SRAM controller\nsirv_sram_icb_ctrl #(\n  .DW(DATA_WIDTH),\n  .MW(WMSK_WIDTH),\n  .AW(ADDR_WIDTH),\n  .AW_LSB(3),\n  .USR_W(1)\n) u_sram_icb_ctrl (\n  .i_icb_cmd_valid(arb_cmd_valid),\n  .i_icb_cmd_ready(arb_cmd_ready),\n  .i_icb_cmd_read(arb_read),\n  .i_icb_cmd_addr(arb_addr),\n  .i_icb_cmd_wdata(arb_wdata),\n  .i_icb_cmd_wmask(arb_wmask),\n  .i_icb_cmd_usr(1'b0),\n  .i_icb_rsp_valid(arb_rsp_valid),\n  .i_icb_rsp_ready(arb_rsp_ready),\n  .i_icb_rsp_rdata(arb_rsp_rdata),\n  .i_icb_rsp_usr(1'b0),\n  .ram_cs(itcm_ram_cs),\n  .ram_we(itcm_ram_we),\n  .ram_addr(itcm_ram_addr),\n  .ram_wem(itcm_ram_wem),\n  .ram_din(itcm_ram_din),\n  .ram_dout(itcm_ram_dout),\n  .clk_ram(clk_itcm_ram),\n  .sram_ctrl_active(itcm_active),\n  .tcm_cgstop(tcm_cgstop),\n  .test_mode(test_mode),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 17, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR (Instruction Register) control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r_hi),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r_lo),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : \n                      dly_pipe_flush_req ? pc_r : \n                      ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : \n                      dly_pipe_flush_req ? 0 : \n                      ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : \n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : \n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 15, "code": "module itcm_controller (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire tcm_cgstop,\n    output wire itcm_active,\n\n    // IFU Interface\n    input wire ifu2itcm_icb_cmd_valid,\n    output wire ifu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n    input wire ifu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n    output wire ifu2itcm_icb_rsp_valid,\n    input wire ifu2itcm_icb_rsp_ready,\n    output wire ifu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n    // LSU Interface\n    input wire lsu2itcm_icb_cmd_valid,\n    output wire lsu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n    input wire lsu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n    output wire lsu2itcm_icb_rsp_valid,\n    input wire lsu2itcm_icb_rsp_ready,\n    output wire lsu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n    // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n    // RAM Interface\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [RAM_AW-1:0] itcm_ram_addr,\n    output wire [RAM_MW-1:0] itcm_ram_wem,\n    output wire [RAM_DW-1:0] itcm_ram_din,\n    input wire [RAM_DW-1:0] itcm_ram_dout,\n    output wire clk_itcm_ram\n);\n\n// Internal signals\nwire [1:0] arb_sel;\nwire arb_cmd_valid;\nwire arb_cmd_ready;\nwire [ADDR_WIDTH-1:0] arb_cmd_addr;\nwire arb_cmd_read;\nwire [DATA_WIDTH-1:0] arb_cmd_wdata;\nwire [WMSK_WIDTH-1:0] arb_cmd_wmask;\nwire arb_rsp_valid;\nwire arb_rsp_ready;\nwire arb_rsp_err;\nwire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n// Instantiate Data Width Conversion Module\nsirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\n// Instantiate Bus Arbiter Module\nsirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready({ifu2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ifu2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ifu2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ifu2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ifu2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ifu2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask}),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid({ifu2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ifu2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ifu2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err}),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata({ifu2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata}),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\n// Instantiate SRAM Controller Module\nsirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 20, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n  // Implement the logic for handling memory access requests, arbitration, and response processing\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 16, "code": "module itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [DATA_WIDTH-1:0] converted_wdata;\n  wire [WMSK_WIDTH-1:0] converted_wmask;\n  wire [ADDR_WIDTH-1:0] converted_addr;\n  wire arb_cmd_valid;\n  wire arb_cmd_ready;\n  wire arb_cmd_read;\n  wire [ADDR_WIDTH-1:0] arb_cmd_addr;\n  wire [DATA_WIDTH-1:0] arb_cmd_wdata;\n  wire [WMSK_WIDTH-1:0] arb_cmd_wmask;\n  wire arb_rsp_valid;\n  wire arb_rsp_ready;\n  wire arb_rsp_err;\n  wire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n  // Data Width Conversion Module Instance\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bus Arbiter Module Instance\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(itcm_ram_cs),\n    .o_icb_cmd_ready(itcm_ram_we),\n    .o_icb_cmd_read(itcm_ram_addr),\n    .o_icb_cmd_addr(itcm_ram_wem),\n    .o_icb_cmd_wdata(itcm_ram_din),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller Module Instance\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 17, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (optional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [1:0] sram_sel;\n  wire ifu_holdup_set, ifu_holdup_clr, ifu_holdup_r;\n  wire [1:0] arbt_scheme;\n  wire [1:0] arbt_ptr_w;\n  wire [RAM_DW-1:0] converted_wdata;\n  wire [RAM_MW-1:0] converted_wmask;\n\n  // Data Width Conversion\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Holdup Mechanism\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ifu_holdup_r <= 1'b0;\n    end else if (ifu_holdup_clr) begin\n      ifu_holdup_r <= 1'b0;\n    end else if (ifu_holdup_set) begin\n      ifu_holdup_r <= 1'b1;\n    end\n  end\n\n  assign ifu_holdup_set = (sram_sel == 2'b01) && itcm_ram_cs;\n  assign ifu_holdup_clr = (sram_sel != 2'b01) && itcm_ram_cs;\n  assign ifu2itcm_holdup = ifu_holdup_r;\n\n  // Clock Control\n  assign clk_itcm_ram = (test_mode) ? clk : (tcm_cgstop ? clk : (itcm_active ? clk : 1'b0));\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 18, "code": "module itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (if defined)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [DATA_WIDTH-1:0] converted_wdata;\n  wire [WMSK_WIDTH-1:0] converted_wmask;\n  wire [ADDR_WIDTH-1:0] converted_addr;\n  wire cmd_valid;\n  wire cmd_ready;\n  wire rsp_valid;\n  wire rsp_ready;\n  wire rsp_err;\n  wire [DATA_WIDTH-1:0] rsp_rdata;\n\n  // Data Width Conversion Module\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(rsp_valid),\n    .i_icb_rsp_ready(rsp_ready),\n    .i_icb_rsp_err(rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(cmd_valid),\n    .o_icb_cmd_ready(cmd_ready),\n    .o_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .o_icb_cmd_addr(converted_addr),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_lock(1'b0),\n    .o_icb_cmd_excl(1'b0),\n    .o_icb_cmd_size(2'b00),\n    .o_icb_cmd_burst(2'b00),\n    .o_icb_cmd_beat(2'b00),\n    .o_icb_cmd_usr(1'b0),\n    .o_icb_rsp_valid(rsp_valid),\n    .o_icb_rsp_ready(rsp_ready),\n    .o_icb_rsp_err(rsp_err),\n    .o_icb_rsp_excl_ok(1'b0),\n    .o_icb_rsp_rdata(rsp_rdata),\n    .o_icb_rsp_usr(1'b0),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bus Arbiter Module\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(cmd_valid),\n    .o_icb_cmd_ready(cmd_ready),\n    .o_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .o_icb_cmd_addr(converted_addr),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_burst(2'b00),\n    .o_icb_cmd_beat(2'b00),\n    .o_icb_cmd_lock(1'b0),\n    .o_icb_cmd_excl(1'b0),\n    .o_icb_cmd_size(2'b00),\n    .o_icb_cmd_usr(1'b0),\n    .o_icb_rsp_valid(rsp_valid),\n    .o_icb_rsp_ready(rsp_ready),\n    .o_icb_rsp_err(rsp_err),\n    .o_icb_rsp_excl_ok(1'b0),\n    .o_icb_rsp_rdata(rsp_rdata),\n    .o_icb_rsp_usr(1'b0),\n    .i_bus_icb_cmd_ready({ifu2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ifu2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ifu2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ifu2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ifu2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ifu2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask}),\n    .i_bus_icb_cmd_burst({2'b00, 2'b00}),\n    .i_bus_icb_cmd_beat({2'b00, 2'b00}),\n    .i_bus_icb_cmd_lock({1'b0, 1'b0}),\n    .i_bus_icb_cmd_excl({1'b0, 1'b0}),\n    .i_bus_icb_cmd_size({2'b00, 2'b00}),\n    .i_bus_icb_cmd_usr({1'b0, 1'b0}),\n    .i_bus_icb_rsp_valid({ifu2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ifu2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ifu2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err}),\n    .i_bus_icb_rsp_excl_ok({1'b0, 1'b0}),\n    .i_bus_icb_rsp_rdata({ifu2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata}),\n    .i_bus_icb_rsp_usr({1'b0, 1'b0}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller Module\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(cmd_valid),\n    .i_icb_cmd_ready(cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(converted_addr),\n    .i_icb_cmd_wdata(converted_wdata),\n    .i_icb_cmd_wmask(converted_wmask),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(rsp_valid),\n    .i_icb_rsp_ready(rsp_ready),\n    .i_icb_rsp_rdata(rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 19, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [DATA_WIDTH-1:0] converted_wdata;\n  wire [WMSK_WIDTH-1:0] converted_wmask;\n  wire [ADDR_WIDTH-1:0] selected_addr;\n  wire selected_read;\n  wire [DATA_WIDTH-1:0] selected_wdata;\n  wire [WMSK_WIDTH-1:0] selected_wmask;\n  wire selected_valid;\n  wire selected_ready;\n  wire selected_rsp_valid;\n  wire selected_rsp_ready;\n  wire selected_rsp_err;\n  wire [DATA_WIDTH-1:0] selected_rsp_rdata;\n\n  // Data Width Conversion\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(selected_valid),\n    .o_icb_cmd_ready(selected_ready),\n    .o_icb_cmd_read(selected_read),\n    .o_icb_cmd_addr(selected_addr),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(selected_rsp_valid),\n    .o_icb_rsp_ready(selected_rsp_ready),\n    .o_icb_rsp_err(selected_rsp_err),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(selected_rsp_rdata),\n    .o_icb_rsp_usr()\n  );\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(selected_valid),\n    .i_icb_cmd_ready(selected_ready),\n    .i_icb_cmd_read(selected_read),\n    .i_icb_cmd_addr(selected_addr),\n    .i_icb_cmd_wdata(converted_wdata),\n    .i_icb_cmd_wmask(converted_wmask),\n    .i_icb_cmd_usr(3'b0),\n    .i_icb_rsp_valid(selected_rsp_valid),\n    .i_icb_rsp_ready(selected_rsp_ready),\n    .i_icb_rsp_rdata(selected_rsp_rdata),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 20, "code": "module itcm_controller (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire itcm_active,\n  input wire tcm_cgstop,\n\n  // IFU Interface\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (conditional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [ADDR_WIDTH-1:0] arb_cmd_addr;\n  wire arb_cmd_read;\n  wire [DATA_WIDTH-1:0] arb_cmd_wdata;\n  wire [WMSK_WIDTH-1:0] arb_cmd_wmask;\n  wire arb_cmd_valid;\n  wire arb_cmd_ready;\n  wire arb_rsp_valid;\n  wire arb_rsp_ready;\n  wire arb_rsp_err;\n  wire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n  // Instantiate Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(ADDR_WIDTH),\n    .DW(DATA_WIDTH),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(3),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_cmd_burst(2'b00),\n    .o_icb_cmd_beat(2'b00),\n    .o_icb_cmd_lock(1'b0),\n    .o_icb_cmd_excl(1'b0),\n    .o_icb_cmd_size(2'b10),\n    .o_icb_cmd_usr(1'b0),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_excl_ok(1'b0),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .o_icb_rsp_usr(1'b0),\n    .i_bus_icb_cmd_ready({ifu2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_ready `endif}),\n    .i_bus_icb_cmd_valid({ifu2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_valid `endif}),\n    .i_bus_icb_cmd_read({ifu2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_read `endif}),\n    .i_bus_icb_cmd_addr({ifu2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_addr `endif}),\n    .i_bus_icb_cmd_wdata({ifu2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_wdata `endif}),\n    .i_bus_icb_cmd_wmask({ifu2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_cmd_wmask `endif}),\n    .i_bus_icb_cmd_burst({2'b00, 2'b00, `ifdef E203_HAS_ITCM_EXTITF 2'b00 `endif}),\n    .i_bus_icb_cmd_beat({2'b00, 2'b00, `ifdef E203_HAS_ITCM_EXTITF 2'b00 `endif}),\n    .i_bus_icb_cmd_lock({1'b0, 1'b0, `ifdef E203_HAS_ITCM_EXTITF 1'b0 `endif}),\n    .i_bus_icb_cmd_excl({1'b0, 1'b0, `ifdef E203_HAS_ITCM_EXTITF 1'b0 `endif}),\n    .i_bus_icb_cmd_size({2'b10, 2'b10, `ifdef E203_HAS_ITCM_EXTITF 2'b10 `endif}),\n    .i_bus_icb_cmd_usr({1'b0, 1'b0, `ifdef E203_HAS_ITCM_EXTITF 1'b0 `endif}),\n    .i_bus_icb_rsp_valid({ifu2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_valid `endif}),\n    .i_bus_icb_rsp_ready({ifu2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_ready `endif}),\n    .i_bus_icb_rsp_err({ifu2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_err `endif}),\n    .i_bus_icb_rsp_excl_ok({1'b0, 1'b0, `ifdef E203_HAS_ITCM_EXTITF 1'b0 `endif}),\n    .i_bus_icb_rsp_rdata({ifu2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, `ifdef E203_HAS_ITCM_EXTITF ext2itcm_icb_rsp_rdata `endif}),\n    .i_bus_icb_rsp_usr({1'b0, 1'b0, `ifdef E203_HAS_ITCM_EXTITF 1'b0 `endif}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(DATA_WIDTH),\n    .MW(WMSK_WIDTH),\n    .AW(ADDR_WIDTH),\n    .AW_LSB(3),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 18, "code": "module e203_ifu_ift2icb (\n  input  wire                      itcm_nohold,\n  input  wire                      ifu_req_valid,\n  input  wire [PC_SIZE-1:0]        ifu_req_pc,\n  input  wire                      ifu_req_seq,\n  input  wire                      ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0]        ifu_req_last_pc,\n  input  wire                      ifu_rsp_ready,\n  input  wire                      clk,\n  input  wire                      rst_n,\n\n  output wire                      ifu_req_ready,\n  output wire                      ifu_rsp_valid,\n  output wire                      ifu_rsp_err,\n  output wire [31:0]               ifu_rsp_instr,\n\n  output wire                      ifu2itcm_icb_cmd_valid,\n  input  wire                      ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire                      ifu2itcm_icb_rsp_valid,\n  output wire                      ifu2itcm_icb_rsp_ready,\n  input  wire                      ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire                      ifu2biu_icb_cmd_valid,\n  input  wire                      ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0]      ifu2biu_icb_cmd_addr,\n  input  wire                      ifu2biu_icb_rsp_valid,\n  output wire                      ifu2biu_icb_rsp_ready,\n  input  wire                      ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) icb_state_nxt = ICB_STATE_1ST;\n        else icb_state_nxt = ICB_STATE_IDLE;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r) icb_state_nxt = ICB_STATE_WAIT2ND;\n          else icb_state_nxt = ICB_STATE_IDLE;\n        end else icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) icb_state_nxt = ICB_STATE_2ND;\n        else icb_state_nxt = ICB_STATE_WAIT2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) icb_state_nxt = ICB_STATE_IDLE;\n        else icb_state_nxt = ICB_STATE_2ND;\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n  wire i_ifu_rsp_valid, i_ifu_rsp_ready;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0);\n  assign ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n    end\n  end\n\n  // Address Alignment Information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_icb_cmd_hsked || ifu_req_hsked) begin\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = holdup2leftover_ena ? 1'b0 : ifu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  wire i_ifu_rsp_err_leftover = leftover_err_r || ifu_icb_rsp_err;\n  wire i_ifu_rsp_err_icb_rsp = ifu_icb_rsp_err;\n\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? i_ifu_rsp_err_leftover : i_ifu_rsp_err_icb_rsp;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = ifu_req_hsked && ~req_need_0uop_r || req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND);\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[31:28] == 4'h8);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready && (icb_state == ICB_STATE_IDLE || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND));\n\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  wire ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  wire ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready_pre);\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 19, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_hsked;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: icb_state_nxt = ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE;\n      ICB_STATE_1ST: icb_state_nxt = ifu_icb_rsp_hsked ? (req_need_2uop_r ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE) : ICB_STATE_1ST;\n      ICB_STATE_WAIT2ND: icb_state_nxt = ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND;\n      ICB_STATE_2ND: icb_state_nxt = i_ifu_rsp_hsked ? (ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE) : ICB_STATE_2ND;\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(.DW(2)) u_icb_state_dfflr (\n    .lden(icb_state_ena),\n    .dnxt(icb_state_nxt),\n    .qout(icb_state),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_bypbuf_o_vld;\n  wire ifu_rsp_bypbuf_o_rdy;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  sirv_gnrl_bypbuf #(.DP(1), .DW(33)) u_ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_bypbuf_o_vld),\n    .o_rdy(ifu_rsp_bypbuf_o_rdy),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_rsp_valid = ifu_rsp_bypbuf_o_vld;\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1);\n  wire ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0);\n  wire ifu_req_lane_same = ifu_req_seq && req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup && ~itcm_nohold;\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same && ifu_req_lane_cross && ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same && ifu_req_lane_cross && ~ifu_req_lane_holdup) || (~ifu_req_lane_same && ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same && ~ifu_req_lane_cross && ifu_req_lane_holdup;\n    end\n  end\n\n  // Target Indication Registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n    end else if (ifu_icb_cmd_hsked) begin\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n    end\n  end\n\n  // Address Alignment Information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_icb_cmd_hsked || ifu_req_hsked) begin\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  wire holdup2leftover_ena = ifu_req_hsked && req_same_cross_holdup_r;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked && ifu_icb_rsp2leftover;\n\n  wire [15:0] leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:16] : ifu2biu_icb_rsp_rdata[31:16];\n  wire leftover_err_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_err : ifu2biu_icb_rsp_err;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena || uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST && req_same_cross_holdup_r) || (icb_state == ICB_STATE_2ND);\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [31:0] rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  wire [31:0] rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata : ifu2biu_icb_rsp_rdata;\n\n  assign i_ifu_rsp_instr = rsp_instr_sel_leftover ? rsp_instr_leftover : rsp_instr_icb_rsp;\n\n  wire i_ifu_rsp_valid = holdup_gen_fake_rsp_valid || ifu_icb_rsp2ir_valid;\n  wire i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err || leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = (ifu_req_hsked && ~req_need_0uop_r) || (req_need_2uop_r && (icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_WAIT2ND));\n\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n\n  wire ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:ITCM_ADDR_WIDTH-4] == ITCM_BASE_ADDR[ITCM_ADDR_WIDTH-1:ITCM_ADDR_WIDTH-4]);\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  wire ifu_req_ready_condi = (icb_state == ICB_STATE_IDLE) || (req_need_0uop_r && icb_state == ICB_STATE_1ST) || (req_need_2uop_r && icb_state == ICB_STATE_2ND);\n  assign ifu_req_ready = ifu_icb_cmd_ready && ifu_req_ready_condi;\n\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover || i_ifu_rsp_ready;\n\n  wire ifu_req_hsked = ifu_req_valid && ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid && ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid && ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid && i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  wire ifu_icb_rsp_err = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_err) || (icb_cmd2biu_r && ifu2biu_icb_rsp_err);\n  wire ifu_icb_rsp_valid = (icb_cmd2itcm_r && ifu2itcm_icb_rsp_valid) || (icb_cmd2biu_r && ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid && ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  wire ifu_icb_cmd_ready = (ifu_icb_cmd2itcm && ifu2itcm_icb_cmd_ready) || (ifu_icb_cmd2biu && ifu2biu_icb_cmd_ready_pre);\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 18, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n\n  output wire ifu_req_valid,\n  input wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_hi_r;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_hi_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_lo_r;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_lo_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : \n                      dly_pipe_flush_req ? pc_r : \n                      ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : \n                      dly_pipe_flush_req ? 0 : \n                      ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1],1'b0} : \n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1],1'b0} : \n                  {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  CHECK_IFU_REQ_VALID_NO_X: assert property (@(posedge clk) disable iff (~rst_n) (ifu_req_valid !== 1'bx)) else $fatal(\"ifu_req_valid has X value\");\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 20, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = (icb_state == ICB_STATE_IDLE) & ifu_req_hsked;\n  wire state_1st_exit_ena = (icb_state == ICB_STATE_1ST) & ifu_icb_rsp_hsked;\n  wire state_wait2nd_exit_ena = (icb_state == ICB_STATE_WAIT2ND) & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = (icb_state == ICB_STATE_2ND) & i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: icb_state_nxt = ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE;\n      ICB_STATE_1ST: icb_state_nxt = ifu_icb_rsp_hsked ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND) : ICB_STATE_IDLE) : ICB_STATE_1ST;\n      ICB_STATE_WAIT2ND: icb_state_nxt = ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND;\n      ICB_STATE_2ND: icb_state_nxt = i_ifu_rsp_hsked ? ICB_STATE_IDLE : ICB_STATE_2ND;\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  assign ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  assign ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  assign ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) ifu_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross;\n  wire ifu_req_lane_begin;\n  wire ifu_req_lane_same;\n  wire ifu_req_lane_holdup;\n\n  assign ifu_req_lane_cross = (ifu_req_pc[1] == 1'b1) | (ifu_req_pc[2:1] == 2'b11);\n  assign ifu_req_lane_begin = (ifu_req_pc[1] == 1'b0) | (ifu_req_pc[2:1] == 2'b00);\n  assign ifu_req_lane_same = ifu_req_seq & req_lane_cross_r;\n  assign ifu_req_lane_holdup = ifu2itcm_holdup & (~itcm_nohold);\n\n  // Request Feature Registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      req_same_cross_holdup_r <= 1'b0;\n      req_need_2uop_r <= 1'b0;\n      req_need_0uop_r <= 1'b0;\n      icb_cmd2itcm_r <= 1'b0;\n      icb_cmd2biu_r <= 1'b0;\n      icb_cmd_addr_2_1_r <= 2'b00;\n    end else if (ifu_req_hsked) begin\n      req_same_cross_holdup_r <= ifu_req_lane_same & ifu_req_lane_cross & ifu_req_lane_holdup;\n      req_need_2uop_r <= (ifu_req_lane_same & ifu_req_lane_cross & ~ifu_req_lane_holdup) | (~ifu_req_lane_same & ifu_req_lane_cross);\n      req_need_0uop_r <= ifu_req_lane_same & ~ifu_req_lane_cross & ifu_req_lane_holdup;\n      icb_cmd2itcm_r <= ifu_icb_cmd2itcm;\n      icb_cmd2biu_r <= ifu_icb_cmd2biu;\n      icb_cmd_addr_2_1_r <= ifu_icb_cmd_addr[2:1];\n    end\n  end\n\n  // Leftover Buffer Implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n  wire holdup2leftover_ena;\n  wire uop1st2leftover_ena;\n  wire [15:0] leftover_nxt;\n  wire leftover_err_nxt;\n\n  assign holdup2leftover_ena = ifu_req_hsked & req_same_cross_holdup_r;\n  assign uop1st2leftover_ena = ifu_icb_rsp_hsked & ifu_icb_rsp2leftover;\n  assign leftover_nxt = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[47:32] : ifu2biu_icb_rsp_rdata[47:32];\n  assign leftover_err_nxt = uop1st2leftover_ena ? ifu_icb_rsp_err : 1'b0;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      leftover_r <= 16'b0;\n      leftover_err_r <= 1'b0;\n    end else if (holdup2leftover_ena | uop1st2leftover_ena) begin\n      leftover_r <= leftover_nxt;\n      leftover_err_r <= leftover_err_nxt;\n    end\n  end\n\n  // Response Generation Implementation\n  wire rsp_instr_sel_leftover;\n  wire rsp_instr_sel_icb_rsp;\n  wire [31:0] rsp_instr_leftover;\n  wire [31:0] rsp_instr_icb_rsp;\n  wire i_ifu_rsp_valid;\n  wire i_ifu_rsp_err;\n\n  assign rsp_instr_sel_leftover = (icb_state == ICB_STATE_1ST & req_same_cross_holdup_r) | (icb_state == ICB_STATE_2ND);\n  assign rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  assign rsp_instr_leftover = {ifu_icb_rsp_rdata_lsb16, leftover_r};\n  assign rsp_instr_icb_rsp = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[31:0] : ifu2biu_icb_rsp_rdata[31:0];\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid | ifu_icb_rsp2ir_valid;\n  assign i_ifu_rsp_err = rsp_instr_sel_leftover ? (ifu_icb_rsp_err | leftover_err_r) : ifu_icb_rsp_err;\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid;\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr;\n  wire ifu_icb_cmd2itcm;\n  wire ifu_icb_cmd2biu;\n\n  assign ifu_icb_cmd_valid = ifu_req_hsked & ~req_need_0uop_r | (req_need_2uop_r & (icb_state == ICB_STATE_1ST & ifu_icb_rsp_hsked | icb_state == ICB_STATE_WAIT2ND));\n  assign ifu_icb_cmd_addr = icb_addr_sel_1stnxtalgn ? ifu_req_last_pc + 4 : ifu_req_pc;\n  assign ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[31:28] == 4'b1000);\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n\n  // Handshake Control Implementation\n  wire ifu_req_hsked;\n  wire ifu_icb_cmd_hsked;\n  wire ifu_icb_rsp_hsked;\n  wire i_ifu_rsp_hsked;\n\n  assign ifu_req_ready = ifu_icb_cmd_ready & (icb_state == ICB_STATE_IDLE | (req_need_0uop_r & icb_state == ICB_STATE_1ST & ifu_icb_rsp_hsked) | (req_need_2uop_r & icb_state == ICB_STATE_2ND & i_ifu_rsp_hsked));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover | i_ifu_rsp_ready;\n\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  assign ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  assign i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // Data Alignment Implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16;\n\n  assign ifu_icb_rsp_rdata_lsb16 = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_rdata[15:0] : ifu2biu_icb_rsp_rdata[15:0];\n\n  // ICB Response Merge Implementation\n  wire ifu_icb_rsp_err;\n  wire ifu_icb_rsp_valid;\n\n  assign ifu_icb_rsp_err = (icb_cmd2itcm_r & ifu2itcm_icb_rsp_err) | (icb_cmd2biu_r & ifu2biu_icb_rsp_err);\n  assign ifu_icb_rsp_valid = (icb_cmd2itcm_r & ifu2itcm_icb_rsp_valid) | (icb_cmd2biu_r & ifu2biu_icb_rsp_valid);\n\n  // ICB Request Distribution Implementation\n  wire ifu_icb_cmd2biu;\n  wire ifu2biu_icb_cmd_valid_pre;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre;\n  wire ifu2biu_icb_cmd_ready_pre;\n\n  assign ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n  assign ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  assign ifu_icb_cmd_ready = (ifu_icb_cmd2itcm & ifu2itcm_icb_cmd_ready) | (ifu_icb_cmd2biu & ifu2biu_icb_cmd_ready_pre);\n\n  // System Memory Interface Implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 19, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR (Instruction Register) control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [15:0] ifu_ir_r;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : \n                      dly_pipe_flush_req ? pc_r : \n                      ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : \n                      pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : \n                      dly_pipe_flush_req ? 0 : \n                      ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : \n                      pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : \n                      pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : \n                      pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : \n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : \n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire [E203_PC_SIZE-1:0] inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (~rst_n) begin\n      // Reset condition\n    end else begin\n      // Check ifu_req_valid signal does not have X value\n      if (^ifu_req_valid === 1'bx) begin\n        $fatal(\"CHECK_IFU_REQ_VALID_NO_X: ifu_req_valid has X value\");\n      end\n    end\n  end\n  `endif\n  `endif\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 20, "code": "module e203_ifu_ifetch (\n  input  wire clk,\n  input  wire rst_n,\n\n  output wire ifu_req_valid,\n  input  wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input  wire ifu_rsp_err,\n  input  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n\n  input  wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input  wire ifu_o_ready,\n\n  input  wire ifu_halt_req,\n  output wire ifu_halt_ack,\n\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu\n);\n\n  // Basic Handshake Signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset Control Logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (1'b0, reset_flag_r, clk, rst_n);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (reset_req_ena, reset_req_nxt, reset_req_r, clk, rst_n);\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt Control Logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  wire halt_ack_r;\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (halt_ack_ena, halt_ack_nxt, halt_ack_r, clk, rst_n);\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  // Pipeline Flush Control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  wire dly_flush_r;\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (dly_flush_ena, dly_flush_nxt, dly_flush_r, clk, rst_n);\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR Control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  wire ir_valid_r;\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (ir_valid_ena, ir_valid_nxt, ir_valid_r, clk, rst_n);\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  wire ir_pc_vld_r;\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r, clk, rst_n);\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (ir_valid_set, ifu_err_nxt, ifu_err_r, clk, rst_n);\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (ir_valid_set, prdt_taken, ifu_prdt_taken_r, clk, rst_n);\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r, clk, rst_n);\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r_hi, clk, rst_n);\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (ir_lo_ena, ifu_ir_nxt[15:0], ifu_ir_r_lo, clk, rst_n);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r, clk, rst_n);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r, clk, rst_n);\n\n  // PC Control Logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : \n                      dly_pipe_flush_req ? pc_r :\n                      ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : \n                      dly_pipe_flush_req ? 0 :\n                      ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 : pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec : pc_r;\n  assign pc_add_op2 = ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 : pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} :\n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} :\n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (pc_ena, pc_nxt, pc_r, clk, rst_n);\n\n  wire [E203_PC_SIZE-1:0] inspect_pc = pc_r;\n\n  // Fetch Request Generation and Control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (out_flag_ena, out_flag_nxt, out_flag_r, clk, rst_n);\n\n  // Mini-decoder Interface Implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU Interface and Control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State Monitoring and Control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  wire pc_newpend_r;\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (pc_newpend_ena, pc_newpend_nxt, pc_newpend_r, clk, rst_n);\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion Check Implementation\n  `ifndef FPGA_SOURCE\n  `ifndef DISABLE_SV_ASSERTION\n  always @(posedge clk or negedge rst_n) begin\n    if (~rst_n) begin\n      // Reset condition\n    end else begin\n      // Check ifu_req_valid is not X\n      if (^ifu_req_valid === 1'bx) begin\n        $fatal(\"ifu_req_valid should not be X\");\n      end\n    end\n  end\n  `endif\n  `endif\n\n  // Special Case Handling\n  `ifndef E203_HAS_FPU\n  wire minidec_fpu = 1'b0;\n  wire minidec_fpu_rs1en = 1'b0;\n  wire minidec_fpu_rs2en = 1'b0;\n  wire minidec_fpu_rs3en = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n  wire [E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 20, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [32:0] muldiv_sbf_0_nxt,\n  input [32:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [32:0] muldiv_sbf_1_nxt,\n  input [32:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [4:0] state;\n  reg [4:0] next_state;\n  reg [E203_XLEN-1:0] result;\n  reg [E203_XLEN-1:0] op1, op2;\n  reg [E203_MULDIV_ADDER_WIDTH-1:0] alu_op1, alu_op2;\n  reg alu_add, alu_sub;\n  reg [32:0] sbf_0, sbf_1;\n\n  // State machine states\n  localparam MULDIV_STATE_0TH = 5'd0;\n  localparam MULDIV_STATE_EXEC = 5'd1;\n  localparam MULDIV_STATE_REMD_CHCK = 5'd2;\n  localparam MULDIV_STATE_QUOT_CORR = 5'd3;\n  localparam MULDIV_STATE_REMD_CORR = 5'd4;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      state <= MULDIV_STATE_0TH;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @(*) begin\n    next_state = state;\n    case (state)\n      MULDIV_STATE_0TH: begin\n        if (muldiv_i_valid && !flush_pulse) begin\n          next_state = MULDIV_STATE_EXEC;\n        end\n      end\n      MULDIV_STATE_EXEC: begin\n        if (/* condition for execution completion */) begin\n          next_state = MULDIV_STATE_REMD_CHCK;\n        end\n      end\n      MULDIV_STATE_REMD_CHCK: begin\n        if (/* condition for remainder correction */) begin\n          next_state = MULDIV_STATE_QUOT_CORR;\n        end else begin\n          next_state = MULDIV_STATE_0TH;\n        end\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        next_state = MULDIV_STATE_REMD_CORR;\n      end\n      MULDIV_STATE_REMD_CORR: begin\n        next_state = MULDIV_STATE_0TH;\n      end\n    endcase\n  end\n\n  // ALU operation logic\n  always @(*) begin\n    alu_op1 = {E203_MULDIV_ADDER_WIDTH{1'b0}};\n    alu_op2 = {E203_MULDIV_ADDER_WIDTH{1'b0}};\n    alu_add = 1'b0;\n    alu_sub = 1'b0;\n    case (state)\n      MULDIV_STATE_EXEC: begin\n        alu_op1 = op1;\n        alu_op2 = op2;\n        alu_add = 1'b1;\n      end\n      MULDIV_STATE_QUOT_CORR: begin\n        alu_op1 = sbf_0;\n        alu_op2 = sbf_1;\n        alu_sub = 1'b1;\n      end\n    endcase\n  end\n\n  // Output logic\n  assign muldiv_o_valid = (state == MULDIV_STATE_0TH) && (next_state == MULDIV_STATE_EXEC);\n  assign muldiv_o_wbck_wdat = result;\n  assign muldiv_o_wbck_err = 1'b0;\n  assign muldiv_req_alu_op1 = alu_op1;\n  assign muldiv_req_alu_op2 = alu_op2;\n  assign muldiv_req_alu_add = alu_add;\n  assign muldiv_req_alu_sub = alu_sub;\n  assign muldiv_sbf_0_ena = (state == MULDIV_STATE_EXEC);\n  assign muldiv_sbf_0_nxt = sbf_0;\n  assign muldiv_sbf_1_ena = (state == MULDIV_STATE_REMD_CHCK);\n  assign muldiv_sbf_1_nxt = sbf_1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 20, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // CSR Access Control\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // Privilege Mode Status\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // CSR Registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcounterstop;\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h301: read_csr_dat = misa;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_ADDR_SIZE{1'b0}};\n      mcycle <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n      mcycleh <= {E203_XLEN{1'b0}};\n      minstreth <= {E203_XLEN{1'b0}};\n      mvendorid <= 32'h536;\n      marchid <= 32'hE203;\n      mimpid <= 32'h1;\n      mhartid <= core_mhartid;\n      mcounterstop <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB80: mcycleh <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hB82: minstreth <= wbck_csr_dat;\n        12'hBFF: mcounterstop <= wbck_csr_dat;\n        default: ;\n      endcase\n    end\n  end\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR Write Enable\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR Outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Custom Control Signals\n  assign tm_stop = mcounterstop[0];\n  assign core_cgstop = mcounterstop[1];\n  assign tcm_cgstop = mcounterstop[2];\n  assign itcm_nohold = mcounterstop[3];\n  assign mdv_nob2b = mcounterstop[4];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 19, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg wfi_flag;\n  reg wfi_halt_req;\n  reg step_req;\n  wire dbg_entry_req;\n  wire wfi_irq_mask;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire longp_excp_flush_req_insterr;\n\n  // Exception handling logic\n  assign alu_excp_flush_req_ifu_misalgn = alu_excp_i_valid & alu_excp_i_ifu_misalgn;\n  assign alu_excp_flush_req_ifu_buserr = alu_excp_i_valid & alu_excp_i_ifu_buserr;\n  assign alu_excp_flush_req_ifu_ilegl = alu_excp_i_valid & alu_excp_i_ifu_ilegl;\n  assign alu_excp_flush_req_ebreak = alu_excp_i_valid & alu_excp_i_ebreak;\n  assign alu_excp_flush_req_ld_misalgn = alu_excp_i_valid & alu_excp_i_ld & alu_excp_i_misalgn;\n  assign longp_excp_flush_req_ld_buserr = longp_excp_i_valid & longp_excp_i_ld & longp_excp_i_buserr;\n  assign alu_excp_flush_req_stamo_misalgn = alu_excp_i_valid & alu_excp_i_stamo & alu_excp_i_misalgn;\n  assign longp_excp_flush_req_st_buserr = longp_excp_i_valid & longp_excp_i_st & longp_excp_i_buserr;\n  assign alu_excp_flush_req_ecall = alu_excp_i_valid & alu_excp_i_ecall;\n  assign longp_excp_flush_req_insterr = longp_excp_i_valid & longp_excp_i_insterr;\n\n  // mcause register update logic\n  always @(*) begin\n    if (irq_flush_req) begin\n      mcause = {1'b1, 3'b0, (sft_irq_r & msie_r) ? 3'd3 :\n                      (tmr_irq_r & mtie_r) ? 3'd7 :\n                      (ext_irq_r & meie_r) ? 3'd11 : 3'd0};\n    end else if (alu_excp_flush_req) begin\n      mcause = {1'b0, 4'b0, alu_excp_flush_req_ifu_misalgn ? 4'd0 :\n                      alu_excp_flush_req_ifu_buserr ? 4'd1 :\n                      alu_excp_flush_req_ifu_ilegl ? 4'd2 :\n                      alu_excp_flush_req_ebreak ? 4'd3 :\n                      alu_excp_flush_req_ld_misalgn ? 4'd4 :\n                      longp_excp_flush_req_ld_buserr ? 4'd5 :\n                      alu_excp_flush_req_stamo_misalgn ? 4'd6 :\n                      longp_excp_flush_req_st_buserr ? 4'd7 :\n                      alu_excp_flush_req_ecall ? (u_mode ? 4'd8 :\n                                                  s_mode ? 4'd9 :\n                                                  h_mode ? 4'd10 : 4'd11) :\n                      longp_excp_flush_req_insterr ? 4'd16 : 4'd0};\n    end else begin\n      mcause = 0;\n    end\n  end\n\n  // mepc register update logic\n  always @(*) begin\n    if (longp_excp_flush_req) begin\n      mepc = longp_excp_i_pc;\n    end else begin\n      mepc = alu_excp_i_pc;\n    end\n  end\n\n  // mbadaddr register update logic\n  always @(*) begin\n    if (longp_excp_flush_req_ld_buserr || longp_excp_flush_req_st_buserr) begin\n      mbadaddr = longp_excp_i_badaddr;\n    end else if (alu_excp_flush_req_ld_misalgn || alu_excp_flush_req_stamo_misalgn) begin\n      mbadaddr = alu_excp_i_pc;\n    end else if (alu_excp_flush_req_ebreak || alu_excp_flush_req_ifu_misalgn || alu_excp_flush_req_ifu_buserr) begin\n      mbadaddr = alu_excp_i_pc;\n    end else if (alu_excp_flush_req_ifu_ilegl) begin\n      mbadaddr = alu_excp_i_instr;\n    end else begin\n      mbadaddr = 0;\n    end\n  end\n\n  // WFI handling logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      wfi_flag <= 1'b0;\n    end else if (alu_excp_i_wfi & cmt_ena & ~dbg_mode) begin\n      wfi_flag <= 1'b1;\n    end else if (wfi_halt_ifu_ack & wfi_halt_exu_ack) begin\n      wfi_flag <= 1'b0;\n    end\n  end\n\n  assign wfi_halt_ifu_req = wfi_flag & ~dbg_mode;\n  assign wfi_halt_exu_req = wfi_flag & ~dbg_mode;\n  assign core_wfi = wfi_flag & wfi_halt_ifu_ack & wfi_halt_exu_ack;\n\n  // Exception active signal\n  assign excp_active = alu_excp_i_valid | longp_excp_i_valid | dbg_irq_r | ext_irq_r | sft_irq_r | tmr_irq_r;\n\n  // Flush request logic\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_req | irq_flush_req | alu_excp_flush_req;\n  assign nonalu_excpirq_flush_req_raw = dbg_mode_entry_req | irq_flush_req;\n  assign excpirq_flush_add_op1 = dbg_mode_entry_req ? 32'h800 :\n                                 (longp_excp_flush_req | alu_excp_flush_req) ? (dbg_mode ? 32'h808 : csr_mtvec_r) : 32'h0;\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  // Debug mode entry request logic\n  assign dbg_mode_entry_req = ~dbg_mode & alu_excp_i_pc_vld & oitf_empty &\n                              (dbg_irq_r | dbg_halt_r | dbg_step_r | (alu_excp_i_ebreak & dbg_ebreakm_r & alu_excp_i_valid));\n\n  // Interrupt flush request logic\n  assign irq_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_req & alu_excp_i_pc_vld & oitf_empty &\n                         (ext_irq_r & meie_r | sft_irq_r & msie_r | tmr_irq_r & mtie_r);\n\n  // ALU exception flush request logic\n  assign alu_excp_flush_req = ~longp_excp_flush_req & ~dbg_mode_entry_req & ~irq_flush_req & oitf_empty &\n                              (alu_excp_flush_req_ifu_misalgn | alu_excp_flush_req_ifu_buserr | alu_excp_flush_req_ifu_ilegl |\n                               alu_excp_flush_req_ebreak | alu_excp_flush_req_ld_misalgn | alu_excp_flush_req_stamo_misalgn |\n                               alu_excp_flush_req_ecall);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 20, "code": "module e203_exu_excp(\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire wfi_flag;\n  wire wfi_halt_req;\n  wire step_req;\n  wire dbg_entry_req;\n  wire alu_excp_flush_req;\n  wire longp_excp_flush_req;\n  wire dbg_mode_entry_req;\n  wire irq_flush_req;\n  wire alu_excp_flush_req_ifu_misalgn;\n  wire alu_excp_flush_req_ifu_buserr;\n  wire alu_excp_flush_req_ifu_ilegl;\n  wire alu_excp_flush_req_ebreak;\n  wire alu_excp_flush_req_ld_misalgn;\n  wire longp_excp_flush_req_ld_buserr;\n  wire alu_excp_flush_req_stamo_misalgn;\n  wire longp_excp_flush_req_st_buserr;\n  wire alu_excp_flush_req_ecall;\n  wire longp_excp_flush_req_insterr;\n  wire [E203_XLEN-1:0] excp_cause;\n  wire [E203_PC_SIZE-1:0] excp_epc;\n  wire [E203_ADDR_SIZE-1:0] excp_badaddr;\n  wire excp_cause_ena;\n  wire excp_epc_ena;\n  wire excp_badaddr_ena;\n  wire excp_status_ena;\n  wire excp_dpc_ena;\n  wire [2:0] excp_dcause;\n  wire excp_dcause_ena;\n  wire excp_active_int;\n  wire [E203_PC_SIZE-1:0] excpirq_flush_pc;\n\n  // WFI Handling\n  assign wfi_flag = alu_excp_i_wfi & cmt_ena & ~dbg_mode;\n  assign wfi_halt_req = wfi_flag & ~wfi_halt_ifu_ack & ~wfi_halt_exu_ack;\n  assign core_wfi = wfi_halt_ifu_ack & wfi_halt_exu_ack;\n  assign wfi_halt_ifu_req = wfi_halt_req;\n  assign wfi_halt_exu_req = wfi_halt_req;\n\n  // Exception Handling\n  assign alu_excp_flush_req = alu_excp_i_valid & oitf_empty & (\n    alu_excp_i_misalgn | alu_excp_i_buserr | alu_excp_i_ebreak |\n    alu_excp_i_ecall | alu_excp_i_ifu_misalgn | alu_excp_i_ifu_buserr |\n    alu_excp_i_ifu_ilegl\n  );\n\n  assign longp_excp_flush_req = longp_excp_i_valid & oitf_empty;\n\n  assign dbg_mode_entry_req = ~dbg_mode & (\n    dbg_irq_r | dbg_halt_r | dbg_step_r | dbg_ebreakm_r\n  );\n\n  assign irq_flush_req = (\n    (sft_irq_r & msie_r) | (tmr_irq_r & mtie_r) | (ext_irq_r & meie_r)\n  ) & ~dbg_mode & oitf_empty;\n\n  assign excpirq_flush_req = longp_excp_flush_req | dbg_mode_entry_req |\n                             irq_flush_req | alu_excp_flush_req;\n\n  assign excpirq_flush_add_op1 = dbg_mode_entry_req ? 32'h800 :\n                                 (longp_excp_flush_req | alu_excp_flush_req) & dbg_mode ? 32'h808 :\n                                 csr_mtvec_r;\n\n  assign excpirq_flush_add_op2 = 32'h0;\n\n  assign excp_active = excpirq_flush_req;\n\n  // Register Updates\n  assign cmt_badaddr = longp_excp_flush_req ? longp_excp_i_badaddr :\n                       alu_excp_flush_req ? alu_excp_i_pc : 32'h0;\n\n  assign cmt_epc = longp_excp_flush_req ? longp_excp_i_pc : alu_excp_i_pc;\n\n  assign cmt_cause = longp_excp_flush_req ? {1'b0, longp_excp_i_insterr} :\n                     alu_excp_flush_req ? {1'b0, alu_excp_i_ifu_ilegl} : 32'h0;\n\n  assign cmt_badaddr_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_epc_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_cause_ena = longp_excp_flush_req | alu_excp_flush_req;\n  assign cmt_status_ena = longp_excp_flush_req | alu_excp_flush_req;\n\n  assign cmt_dpc = alu_excp_i_pc;\n  assign cmt_dpc_ena = dbg_mode_entry_req;\n  assign cmt_dcause = 3'b0;\n  assign cmt_dcause_ena = dbg_mode_entry_req;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
