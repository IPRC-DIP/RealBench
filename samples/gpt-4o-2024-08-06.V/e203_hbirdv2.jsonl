{"task": "e203_clkgate", "codeid": 1, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 2, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 3, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else if (!clk_in)\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 4, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else if (!clk_in)\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 5, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 6, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 7, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 8, "code": "module e203_clkgate (\n    input wire clk_in,\n    input wire test_mode,\n    input wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 9, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // FPGA Mode: Direct connection\n    assign clk_out = clk_in;\n`else\n    // Gating Mode: Clock gating logic\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 10, "code": "module e203_clkgate (\n    input clk_in,\n    input test_mode,\n    input clock_en,\n    output clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 11, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 12, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 13, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 1, "code": "module e203_extend_csr (\n  input         clk,\n  input         rst_n,\n  input         nice_csr_valid,\n  output        nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input         nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 14, "code": "module e203_clkgate (\n    input wire clk_in,\n    input wire test_mode,\n    input wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // FPGA Mode: Direct connection\n    assign clk_out = clk_in;\n`else\n    // Gating Mode: Clock gating logic\n    reg enb;\n\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 15, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 16, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // FPGA Mode: Direct connection\n    assign clk_out = clk_in;\n`else\n    // Gating Mode: Clock gating logic\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 2, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    // Assign fixed values to outputs\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 17, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 1, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 2, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 3, "code": "module e203_dtcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_DTCM_RAM_AW-1:0] addr,\n  input wire [E203_DTCM_RAM_MW-1:0] wem,\n  input wire [E203_DTCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 4, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 1, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    ,\n    input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    ,\n    input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n    // Clock gating logic for IFU\n    assign clk_core_ifu = test_mode | core_cgstop | (core_ifu_active & ~core_wfi);\n\n    // Clock gating logic for EXU\n    assign clk_core_exu = test_mode | core_cgstop | core_exu_active;\n\n    // Clock gating logic for LSU\n    assign clk_core_lsu = test_mode | core_cgstop | core_lsu_active;\n\n    // Clock gating logic for BIU\n    assign clk_core_biu = test_mode | core_cgstop | core_biu_active;\n\n`ifdef E203_HAS_ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n    assign clk_itcm = test_mode | core_cgstop | itcm_active | itcm_active_r;\n    assign itcm_ls = ~itcm_active & ~itcm_active_r;\n`endif\n\n`ifdef E203_HAS_DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n    assign clk_dtcm = test_mode | core_cgstop | dtcm_active | dtcm_active_r;\n    assign dtcm_ls = ~dtcm_active & ~dtcm_active_r;\n`endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 5, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 3, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 6, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 7, "code": "module e203_dtcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_DTCM_RAM_AW-1:0] addr,\n  input wire [E203_DTCM_RAM_MW-1:0] wem,\n  input wire [E203_DTCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 8, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 2, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in  (clk),\n    .en     (ifu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in  (clk),\n    .en     (exu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in  (clk),\n    .en     (lsu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in  (clk),\n    .en     (biu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_biu)\n  );\n\n  assign clk_aon = clk;\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in  (clk),\n    .en     (itcm_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in  (clk),\n    .en     (dtcm_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 3, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n  `endif\n\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 4, "code": "module e203_clk_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire core_cgstop,\n  input wire core_ifu_active,\n  input wire core_exu_active,\n  input wire core_lsu_active,\n  input wire core_biu_active,\n  input wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input wire itcm_active\n  , output wire itcm_ls\n  , output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input wire dtcm_active\n  , output wire dtcm_ls\n  , output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itcm_active_r <= 1'b0;\n    end else begin\n      itcm_active_r <= itcm_active;\n    end\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dtcm_active_r <= 1'b0;\n    end else begin\n      dtcm_active_r <= dtcm_active;\n    end\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n  `endif\n\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 5, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    ,\n    input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    ,\n    input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n    // Clock gating logic for IFU\n    assign clk_core_ifu = test_mode ? clk : (core_cgstop || (core_ifu_active && !core_wfi)) ? clk : 1'b0;\n\n    // Clock gating logic for EXU\n    assign clk_core_exu = test_mode ? clk : (core_cgstop || core_exu_active) ? clk : 1'b0;\n\n    // Clock gating logic for LSU\n    assign clk_core_lsu = test_mode ? clk : (core_cgstop || core_lsu_active) ? clk : 1'b0;\n\n    // Clock gating logic for BIU\n    assign clk_core_biu = test_mode ? clk : (core_cgstop || core_biu_active) ? clk : 1'b0;\n\n`ifdef E203_HAS_ITCM\n    // ITCM clock control logic\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n    assign clk_itcm = test_mode ? clk : (core_cgstop || itcm_active || itcm_active_r) ? clk : 1'b0;\n    assign itcm_ls = !(core_cgstop || itcm_active || itcm_active_r);\n`endif\n\n`ifdef E203_HAS_DTCM\n    // DTCM clock control logic\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n    assign clk_dtcm = test_mode ? clk : (core_cgstop || dtcm_active || dtcm_active_r) ? clk : 1'b0;\n    assign dtcm_ls = !(core_cgstop || dtcm_active || dtcm_active_r);\n`endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 6, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n    `endif\n);\n\n    // Clock gating logic for IFU\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    // Clock gating logic for EXU\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    // Clock gating logic for LSU\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    // Clock gating logic for BIU\n    wire biu_clk_en = core_cgstop | core_biu_active;\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    // Always-on clock\n    assign clk_aon = clk;\n\n    `ifdef E203_HAS_ITCM\n    // ITCM clock control\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n    assign itcm_ls = ~itcm_clk_en;\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    // DTCM clock control\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n    assign dtcm_ls = ~dtcm_clk_en;\n    `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 7, "code": "module e203_clk_ctrl (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    input  wire core_cgstop,\n    input  wire core_ifu_active,\n    input  wire core_exu_active,\n    input  wire core_lsu_active,\n    input  wire core_biu_active,\n    input  wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    ,\n    input  wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    ,\n    input  wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n  // Clock gating logic for IFU\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  e203_clkgate u_ifu_clkgate (\n    .clk_in  (clk),\n    .en      (ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out (clk_core_ifu)\n  );\n\n  // Clock gating logic for EXU\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  e203_clkgate u_exu_clkgate (\n    .clk_in  (clk),\n    .en      (exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out (clk_core_exu)\n  );\n\n  // Clock gating logic for LSU\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  e203_clkgate u_lsu_clkgate (\n    .clk_in  (clk),\n    .en      (lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out (clk_core_lsu)\n  );\n\n  // Clock gating logic for BIU\n  wire biu_clk_en = core_cgstop | core_biu_active;\n  e203_clkgate u_biu_clkgate (\n    .clk_in  (clk),\n    .en      (biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out (clk_core_biu)\n  );\n\n`ifdef E203_HAS_ITCM\n  // Clock gating logic for ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  e203_clkgate u_itcm_clkgate (\n    .clk_in  (clk),\n    .en      (itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out (clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n  // Clock gating logic for DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in  (clk),\n    .en      (dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out (clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n  // Always-on clock\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 1, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_ready,\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_ready,\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_ready,\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_ready,\n  // MEM ICB Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_ready\n);\n\n  // Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 9, "code": "module e203_dtcm_ram (\n    input sd,\n    input ds,\n    input ls,\n    input cs,\n    input we,\n    input [E203_DTCM_RAM_AW-1:0] addr,\n    input [E203_DTCM_RAM_MW-1:0] wem,\n    input [E203_DTCM_RAM_DW-1:0] din,\n    input rst_n,\n    input clk,\n    output [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 2, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_valid,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_valid,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_valid,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_valid,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_valid,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 10, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 8, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n    `endif\n);\n\n    // Clock gating logic for IFU\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    // Clock gating logic for EXU\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    // Clock gating logic for LSU\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    // Clock gating logic for BIU\n    wire biu_clk_en = core_cgstop | core_biu_active;\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    `ifdef E203_HAS_ITCM\n    // Clock gating logic for ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n    assign itcm_ls = ~itcm_clk_en;\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    // Clock gating logic for DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n    assign dtcm_ls = ~dtcm_clk_en;\n    `endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 9, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input wire itcm_active\n    , output wire itcm_ls\n    , output wire clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input wire dtcm_active\n    , output wire dtcm_ls\n    , output wire clk_dtcm\n    `endif\n);\n\n    // Clock gating logic for IFU\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    // Clock gating logic for EXU\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    // Clock gating logic for LSU\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    // Clock gating logic for BIU\n    wire biu_clk_en = core_cgstop | core_biu_active;\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    `ifdef E203_HAS_ITCM\n    // Clock gating logic for ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n    assign itcm_ls = ~itcm_clk_en;\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    // Clock gating logic for DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n    assign dtcm_ls = ~dtcm_clk_en;\n    `endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 3, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_valid,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_valid,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_valid,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_valid,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  // MEM ICB Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_valid,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 1, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 1, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 1, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .FORCE_X2ZERO(0),\n        .DP(E203_ITCM_RAM_DP),\n        .DW(E203_ITCM_RAM_DW),\n        .MW(E203_ITCM_RAM_MW),\n        .AW(E203_ITCM_RAM_AW)\n    ) u_203_itcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 11, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 1, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 1, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 2, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 1, "code": "module e203_srams (\n  input  wire         itcm_ram_sd,\n  input  wire         itcm_ram_ds,\n  input  wire         itcm_ram_ls,\n  input  wire         itcm_ram_cs,\n  input  wire         itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire         clk_itcm_ram,\n  input  wire         rst_itcm,\n\n  input  wire         dtcm_ram_sd,\n  input  wire         dtcm_ram_ds,\n  input  wire         dtcm_ram_ls,\n  input  wire         dtcm_ram_cs,\n  input  wire         dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire         clk_dtcm_ram,\n  input  wire         rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // ITCM RAM logic here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // DTCM RAM logic here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 2, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // ITCM RAM logic here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // DTCM RAM logic here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 12, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 3, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd(itcm_ram_sd),\n    .ds(itcm_ram_ds),\n    .ls(itcm_ram_ls),\n    .cs(itcm_ram_cs),\n    .we(itcm_ram_we),\n    .addr(itcm_ram_addr),\n    .wem(itcm_ram_wem),\n    .din(itcm_ram_din),\n    .dout(itcm_ram_dout),\n    .clk(clk_itcm_ram),\n    .rst_n(rst_itcm)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd(dtcm_ram_sd),\n    .ds(dtcm_ram_ds),\n    .ls(dtcm_ram_ls),\n    .cs(dtcm_ram_cs),\n    .we(dtcm_ram_we),\n    .addr(dtcm_ram_addr),\n    .wem(dtcm_ram_wem),\n    .din(dtcm_ram_din),\n    .dout(dtcm_ram_dout),\n    .clk(clk_dtcm_ram),\n    .rst_n(rst_dtcm)\n  );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 10, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input wire itcm_active\n    , output wire itcm_ls\n    , output wire clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input wire dtcm_active\n    , output wire dtcm_ls\n    , output wire clk_dtcm\n    `endif\n);\n\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    wire biu_clk_en = core_cgstop | core_biu_active;\n\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    `ifdef E203_HAS_ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n\n    assign itcm_ls = ~itcm_clk_en;\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n\n    assign dtcm_ls = ~dtcm_clk_en;\n    `endif\n\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 2, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  input clint_icb_cmd_ready,\n  input plic_icb_cmd_ready,\n  input fio_icb_cmd_ready,\n  input mem_icb_cmd_ready,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n\n  // Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 4, "code": "module e203_biu (\n    output biu_active,\n    input clk,\n    input rst_n,\n    // LSU ICB Interface\n    input lsu2biu_icb_cmd_valid,\n    output lsu2biu_icb_cmd_ready,\n    input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n    input lsu2biu_icb_cmd_read,\n    input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n    input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n    input [1:0] lsu2biu_icb_cmd_burst,\n    input [1:0] lsu2biu_icb_cmd_beat,\n    input lsu2biu_icb_cmd_lock,\n    input lsu2biu_icb_cmd_excl,\n    input [1:0] lsu2biu_icb_cmd_size,\n    output lsu2biu_icb_rsp_valid,\n    input lsu2biu_icb_rsp_ready,\n    output lsu2biu_icb_rsp_err,\n    output lsu2biu_icb_rsp_excl_ok,\n    output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n    // IFU ICB Interface\n    input ifu2biu_icb_cmd_valid,\n    output ifu2biu_icb_cmd_ready,\n    input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n    input ifu2biu_icb_cmd_read,\n    input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n    input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n    input [1:0] ifu2biu_icb_cmd_burst,\n    input [1:0] ifu2biu_icb_cmd_beat,\n    input ifu2biu_icb_cmd_lock,\n    input ifu2biu_icb_cmd_excl,\n    input [1:0] ifu2biu_icb_cmd_size,\n    output ifu2biu_icb_rsp_valid,\n    input ifu2biu_icb_rsp_ready,\n    output ifu2biu_icb_rsp_err,\n    output ifu2biu_icb_rsp_excl_ok,\n    output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n    // PPI ICB Interface\n    input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n    input ppi_icb_enable,\n    output ppi_icb_cmd_ready,\n    input ppi_icb_rsp_valid,\n    output ppi_icb_rsp_ready,\n    input ppi_icb_rsp_err,\n    input ppi_icb_rsp_excl_ok,\n    input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n    // CLINT ICB Interface\n    input [E203_ADDR_SIZE-1:0] clint_region_indic,\n    input clint_icb_enable,\n    output clint_icb_cmd_ready,\n    input clint_icb_rsp_valid,\n    output clint_icb_rsp_ready,\n    input clint_icb_rsp_err,\n    input clint_icb_rsp_excl_ok,\n    input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n    // PLIC ICB Interface\n    input [E203_ADDR_SIZE-1:0] plic_region_indic,\n    input plic_icb_enable,\n    output plic_icb_cmd_ready,\n    input plic_icb_rsp_valid,\n    output plic_icb_rsp_ready,\n    input plic_icb_rsp_err,\n    input plic_icb_rsp_excl_ok,\n    input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n    // FIO ICB Interface\n    input [E203_ADDR_SIZE-1:0] fio_region_indic,\n    input fio_icb_enable,\n    output fio_icb_cmd_ready,\n    input fio_icb_rsp_valid,\n    output fio_icb_rsp_ready,\n    input fio_icb_rsp_err,\n    input fio_icb_rsp_excl_ok,\n    input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n    // MEM ICB Interface\n    input mem_icb_enable,\n    output mem_icb_cmd_ready,\n    input mem_icb_rsp_valid,\n    output mem_icb_rsp_ready,\n    input mem_icb_rsp_err,\n    input mem_icb_rsp_excl_ok,\n    input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 3, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin : gen_master_reset\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin : gen_slave_reset\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n`ifdef HAS_ITCM\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n`endif\n`ifdef HAS_DTCM\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n`endif\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 1, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  // Ready signal control\n  assign cmt_i_ready = ~flush_need | brchmis_flush_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 11, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n`endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_ifu),\n    .en     (ifu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_exu),\n    .en     (exu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_lsu),\n    .en     (lsu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_biu),\n    .en     (biu_clk_en),\n    .test_mode (test_mode)\n  );\n\n`ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_itcm),\n    .en     (itcm_clk_en),\n    .test_mode (test_mode)\n  );\n`endif\n\n`ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_dtcm),\n    .en     (dtcm_clk_en),\n    .test_mode (test_mode)\n  );\n`endif\n\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 5, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_valid,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_valid,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_valid,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_valid,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  // MEM ICB Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_valid,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n  // Internal signals and logic\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 1, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 6, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output [1:0] ppi_icb_cmd_burst,\n  output [1:0] ppi_icb_cmd_beat,\n  output ppi_icb_cmd_lock,\n  output ppi_icb_cmd_excl,\n  output [1:0] ppi_icb_cmd_size,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input ppi_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output clint_icb_cmd_read,\n  output [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output [1:0] clint_icb_cmd_burst,\n  output [1:0] clint_icb_cmd_beat,\n  output clint_icb_cmd_lock,\n  output clint_icb_cmd_excl,\n  output [1:0] clint_icb_cmd_size,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input clint_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output plic_icb_cmd_read,\n  output [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output [1:0] plic_icb_cmd_burst,\n  output [1:0] plic_icb_cmd_beat,\n  output plic_icb_cmd_lock,\n  output plic_icb_cmd_excl,\n  output [1:0] plic_icb_cmd_size,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input plic_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output fio_icb_cmd_read,\n  output [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output [1:0] fio_icb_cmd_burst,\n  output [1:0] fio_icb_cmd_beat,\n  output fio_icb_cmd_lock,\n  output fio_icb_cmd_excl,\n  output [1:0] fio_icb_cmd_size,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input fio_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output mem_icb_cmd_read,\n  output [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output [1:0] mem_icb_cmd_burst,\n  output [1:0] mem_icb_cmd_beat,\n  output mem_icb_cmd_lock,\n  output mem_icb_cmd_excl,\n  output [1:0] mem_icb_cmd_size,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input mem_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal logic and submodule instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 4, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    // Assign fixed values to outputs\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 1, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input wire clk,\n  input wire rst_n,\n  input wire [E203_PC_SIZE-1:0] pc,\n  input wire dec_jal,\n  input wire dec_jalr,\n  input wire dec_bxx,\n  input wire [E203_XLEN-1:0] dec_bjp_imm,\n  input wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input wire oitf_empty,\n  input wire ir_empty,\n  input wire ir_rs1en,\n  input wire jalr_rs1idx_cam_irrdidx,\n  input wire dec_i_valid,\n  input wire ir_valid_clr,\n  input wire [E203_XLEN-1:0] rf2bpu_x1,\n  input wire [E203_XLEN-1:0] rf2bpu_rs1,\n  output wire prdt_taken,\n  output wire [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output wire [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output wire bpu_wait,\n  output wire bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // JALR prediction logic\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & ~jalr_rs1xn_dep;\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Register read status management\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else if (rs1xn_rdrf_ena)\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\n  // Output signals\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc : \n                           (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 : \n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n  assign bpu_wait = dec_jalr & jalr_rs1xn_dep;\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 4, "code": "module e203_srams (\n  input  wire itcm_ram_sd,\n  input  wire itcm_ram_ds,\n  input  wire itcm_ram_ls,\n  input  wire itcm_ram_cs,\n  input  wire itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire clk_itcm_ram,\n  input  wire rst_itcm,\n\n  input  wire dtcm_ram_sd,\n  input  wire dtcm_ram_ds,\n  input  wire dtcm_ram_ls,\n  input  wire dtcm_ram_cs,\n  input  wire dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire clk_dtcm_ram,\n  input  wire rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      e203_itcm_ram itcm_ram (\n        .sd(itcm_ram_sd),\n        .ds(itcm_ram_ds),\n        .ls(itcm_ram_ls),\n        .cs(itcm_ram_cs),\n        .we(itcm_ram_we),\n        .addr(itcm_ram_addr),\n        .wem(itcm_ram_wem),\n        .din(itcm_ram_din),\n        .dout(itcm_ram_dout),\n        .clk(clk_itcm_ram),\n        .rst_n(rst_itcm)\n      );\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      e203_dtcm_ram dtcm_ram (\n        .sd(dtcm_ram_sd),\n        .ds(dtcm_ram_ds),\n        .ls(dtcm_ram_ls),\n        .cs(dtcm_ram_cs),\n        .we(dtcm_ram_we),\n        .addr(dtcm_ram_addr),\n        .wem(dtcm_ram_wem),\n        .din(dtcm_ram_din),\n        .dout(dtcm_ram_dout),\n        .clk(clk_dtcm_ram),\n        .rst_n(rst_dtcm)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 1, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction handling\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  // Instruction tag handling\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\n  // Commit interface\n  assign nice_o_valid = fifo_o_vld & nice_rsp_multicyc_valid & nice_o_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 1, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n`ifdef E203_HAS_NICE\n  ,input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n`endif\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 1, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                         lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                  lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                  lsu2dtcm_icb_rsp_rdata,\n\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                         ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                  ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                   ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [31:0]                  ext2dtcm_icb_rsp_rdata,\n\n  output wire                         dtcm_ram_cs,\n  output wire                         dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 5, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\ngenerate\n  if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n    // Instantiate ITCM RAM\n    // Add ITCM RAM instantiation code here\n  end\nendgenerate\n\ngenerate\n  if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n    // Instantiate DTCM RAM\n    // Add DTCM RAM instantiation code here\n  end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 5, "code": "module e203_extend_csr (\n  input         clk,\n  input         rst_n,\n  input         nice_csr_valid,\n  output        nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input         nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 1, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 2, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .FORCE_X2ZERO(0),\n        .DP(E203_ITCM_RAM_DP),\n        .DW(E203_ITCM_RAM_DW),\n        .MW(E203_ITCM_RAM_MW),\n        .AW(E203_ITCM_RAM_AW)\n    ) u_203_itcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 6, "code": "module e203_srams (\n  input  wire itcm_ram_sd,\n  input  wire itcm_ram_ds,\n  input  wire itcm_ram_ls,\n  input  wire itcm_ram_cs,\n  input  wire itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire clk_itcm_ram,\n  input  wire rst_itcm,\n\n  input  wire dtcm_ram_sd,\n  input  wire dtcm_ram_ds,\n  input  wire dtcm_ram_ls,\n  input  wire dtcm_ram_cs,\n  input  wire dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire clk_dtcm_ram,\n  input  wire rst_dtcm\n);\n\n  // Instantiate ITCM RAM\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // ITCM RAM instantiation\n    end\n  endgenerate\n\n  // Instantiate DTCM RAM\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // DTCM RAM instantiation\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 3, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic for e203_cpu_top\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 4, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n        end\n    endgenerate\n\n    wire rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon  = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 2, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n  `ifdef E203_HAS_NICE\n  ,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n  `endif\n);\n\n  // Internal logic and signals\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 2, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr, \n  input  wire                         lsu2dtcm_icb_cmd_read, \n  input  wire [32-1:0]                lsu2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]                 lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [32-1:0]                lsu2dtcm_icb_rsp_rdata,\n\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr, \n  input  wire                         ext2dtcm_icb_cmd_read, \n  input  wire [32-1:0]                ext2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]                 ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [32-1:0]                ext2dtcm_icb_rsp_rdata,\n\n  output wire                         dtcm_ram_cs,  \n  output wire                         dtcm_ram_we,  \n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr, \n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,          \n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [32-1:0] arbt_icb_cmd_wdata;\n  wire [4-1:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [32-1:0] arbt_icb_rsp_rdata;\n\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (DTCM_ARBT_I_NUM),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({ext2dtcm_icb_cmd_read,  lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr  ({ext2dtcm_icb_cmd_addr,  lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({ext2dtcm_icb_rsp_err,   lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 6, "code": "module e203_extend_csr (\n  input         clk,\n  input         rst_n,\n  input         nice_csr_valid,\n  output        nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input         nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 4, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk;\n  wire core_wfi;\n  wire tm_stop;\n  wire dbg_irq_r;\n  wire ext_irq_a;\n  wire sft_irq_a;\n  wire tmr_irq_a;\n  wire tcm_sd;\n  wire tcm_ds;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .tcm_sd(tcm_sd),\n    .tcm_ds(tcm_ds),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err(ext2dtcm_icb_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(ext2dtcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Output assignments\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 12, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    , input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    , input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n    // Clock gating logic for IFU\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    // Clock gating logic for EXU\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    // Clock gating logic for LSU\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    // Clock gating logic for BIU\n    wire biu_clk_en = core_cgstop | core_biu_active;\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n`ifdef E203_HAS_ITCM\n    // ITCM clock control\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n\n    assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n    // DTCM clock control\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n\n    assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 5, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 7, "code": "module e203_srams (\n  input  wire          itcm_ram_sd,\n  input  wire          itcm_ram_ds,\n  input  wire          itcm_ram_ls,\n  input  wire          itcm_ram_cs,\n  input  wire          itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire          clk_itcm_ram,\n  input  wire          rst_itcm,\n\n  input  wire          dtcm_ram_sd,\n  input  wire          dtcm_ram_ds,\n  input  wire          dtcm_ram_ls,\n  input  wire          dtcm_ram_cs,\n  input  wire          dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire          clk_dtcm_ram,\n  input  wire          rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // ITCM RAM module instantiation\n      // Add your ITCM RAM instantiation code here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // DTCM RAM module instantiation\n      // Add your DTCM RAM instantiation code here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 2, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush Need Generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush Target Calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline Flush Control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special Signal Commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  // Ready Signal Control\n  assign cmt_i_ready = ~flush_need | brchmis_flush_ack | nonalu_excpirq_flush_req_raw;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 7, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    // Assign fixed values to outputs\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 6, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and module instantiations would be here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 7, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_rsp_valid,\n  input clint_icb_cmd_ready,\n  output clint_icb_rsp_valid,\n  input plic_icb_cmd_ready,\n  output plic_icb_rsp_valid,\n  input fio_icb_cmd_ready,\n  output fio_icb_rsp_valid,\n  input mem_icb_cmd_ready,\n  output mem_icb_rsp_valid,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 1, "code": "module e203_lsu(\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n  // Internal logic and submodule instantiation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 3, "code": "module e203_itcm_ram(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 3, "code": "module e203_dtcm_ctrl (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  input  wire                     test_mode,\n  input  wire                     tcm_cgstop,\n  output wire                     dtcm_active,\n\n  input  wire                     lsu2dtcm_icb_cmd_valid,\n  output wire                     lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                     lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]              lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]               lsu2dtcm_icb_cmd_wmask,\n  output wire                     lsu2dtcm_icb_rsp_valid,\n  input  wire                     lsu2dtcm_icb_rsp_ready,\n  output wire                     lsu2dtcm_icb_rsp_err,\n  output wire [31:0]              lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                     ext2dtcm_icb_cmd_valid,\n  output wire                     ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                     ext2dtcm_icb_cmd_read,\n  input  wire [31:0]              ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]               ext2dtcm_icb_cmd_wmask,\n  output wire                     ext2dtcm_icb_rsp_valid,\n  input  wire                     ext2dtcm_icb_rsp_ready,\n  output wire                     ext2dtcm_icb_rsp_err,\n  output wire [31:0]              ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire                     dtcm_ram_cs,\n  output wire                     dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire                     clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr  ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 4, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(32),\n    .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 1, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_entries;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg oitf_full_flag, oitf_empty_flag;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      oitf_full_flag <= 0;\n    end else if (dis_ena && !oitf_full_flag) begin\n      oitf_entries[dis_ptr_reg] <= {disp_i_rdidx, disp_i_pc, disp_i_rdwen, disp_i_rdfpu};\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == E203_OITF_DEPTH-1) oitf_full_flag <= 1;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      oitf_empty_flag <= 1;\n    end else if (ret_ena && !oitf_empty_flag) begin\n      {ret_rdidx, ret_pc, ret_rdwen, ret_rdfpu} <= oitf_entries[ret_ptr_reg];\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == E203_OITF_DEPTH-1) oitf_empty_flag <= 1;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n\n  // Full and empty conditions\n  assign oitf_empty = oitf_empty_flag;\n  assign dis_ready = !oitf_full_flag;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 2, "code": "module e203_lsu(\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output lsu_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [XLEN-1:0] lsu_o_wbck_wdat,\n  output [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [XLEN-1:0] agu_icb_cmd_wdata,\n  input  [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  itcm_region_indic,\n  input  dtcm_region_indic,\n\n  output *_icb_cmd_valid,\n  input  *_icb_cmd_ready,\n  output [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output *_icb_cmd_read,\n  output [XLEN-1:0] *_icb_cmd_wdata,\n  output [XLEN/8-1:0] *_icb_cmd_wmask,\n  output *_icb_cmd_lock,\n  output *_icb_cmd_excl,\n  output [1:0] *_icb_cmd_size,\n  input  *_icb_rsp_valid,\n  output *_icb_rsp_ready,\n  input  *_icb_rsp_err,\n  input  *_icb_rsp_excl_ok,\n  input  [XLEN-1:0] *_icb_rsp_rdata\n);\n\n// Implementation details...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 1, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 3, "code": "module e203_exu_longpwbck (\n  input  wire                  lsu_wbck_i_valid,\n  output wire                  lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire                  lsu_wbck_i_err,\n  input  wire                  lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire                  lsu_cmt_i_ld,\n  input  wire                  lsu_cmt_i_st,\n  output wire                  longp_wbck_o_valid,\n  input  wire                  longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0]  longp_wbck_o_wdat,\n  output wire [4:0]            longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire                  longp_wbck_o_rdfpu,\n  output wire                  longp_excp_o_valid,\n  input  wire                  longp_excp_o_ready,\n  output wire                  longp_excp_o_insterr,\n  output wire                  longp_excp_o_ld,\n  output wire                  longp_excp_o_st,\n  output wire                  longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire                  oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire                  oitf_ret_rdwen,\n  input  wire                  oitf_ret_rdfpu,\n  output wire                  oitf_ret_ena,\n  input  wire                  clk,\n  input  wire                  rst_n\n  `ifdef E203_HAS_NICE\n  ,\n  input  wire                  nice_longp_wbck_i_valid,\n  output wire                  nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire                  nice_longp_wbck_i_err\n  `endif\n);\n\n  // Internal signals and logic for write-back and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 2, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 5, "code": "module e203_dtcm_ctrl (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  input  wire                     test_mode,\n  input  wire                     tcm_cgstop,\n  output wire                     dtcm_active,\n\n  // LSU ICB Bus Interface\n  input  wire                     lsu2dtcm_icb_cmd_valid,\n  output wire                     lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                     lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]              lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]               lsu2dtcm_icb_cmd_wmask,\n  output wire                     lsu2dtcm_icb_rsp_valid,\n  input  wire                     lsu2dtcm_icb_rsp_ready,\n  output wire                     lsu2dtcm_icb_rsp_err,\n  output wire [31:0]              lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                     ext2dtcm_icb_cmd_valid,\n  output wire                     ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                     ext2dtcm_icb_cmd_read,\n  input  wire [31:0]              ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]               ext2dtcm_icb_cmd_wmask,\n  output wire                     ext2dtcm_icb_rsp_valid,\n  input  wire                     ext2dtcm_icb_rsp_ready,\n  output wire                     ext2dtcm_icb_rsp_err,\n  output wire [31:0]              ext2dtcm_icb_rsp_rdata,\n`endif\n\n  // DTCM RAM Interface\n  output wire                     dtcm_ram_cs,\n  output wire                     dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire                     clk_dtcm_ram\n);\n\n// Internal signals\nwire arbt_icb_cmd_valid;\nwire arbt_icb_cmd_ready;\nwire arbt_icb_cmd_read;\nwire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\nwire [31:0] arbt_icb_cmd_wdata;\nwire [3:0] arbt_icb_cmd_wmask;\nwire arbt_icb_rsp_valid;\nwire arbt_icb_rsp_ready;\nwire arbt_icb_rsp_err;\nwire [31:0] arbt_icb_rsp_rdata;\n\n// Instantiate the Bus Arbiter\nsirv_gnrl_icb_arbt #(\n  .ARBT_SCHEME (0),\n  .ALLOW_0CYCL_RSP (0),\n  .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n  .FIFO_CUT_READY (0),\n  .USR_W (1),\n  .ARBT_NUM (DTCM_ARBT_I_NUM),\n  .AW (E203_DTCM_ADDR_WIDTH),\n  .DW (E203_DTCM_DATA_WIDTH),\n  .ARBT_PTR_W (DTCM_ARBT_I_PTR_W)\n) u_dtcm_icb_arbt (\n  .o_icb_cmd_valid (arbt_icb_cmd_valid),\n  .o_icb_cmd_ready (arbt_icb_cmd_ready),\n  .o_icb_cmd_read (arbt_icb_cmd_read),\n  .o_icb_cmd_addr (arbt_icb_cmd_addr),\n  .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n  .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n  .o_icb_rsp_valid (arbt_icb_rsp_valid),\n  .o_icb_rsp_ready (arbt_icb_rsp_ready),\n  .o_icb_rsp_err (arbt_icb_rsp_err),\n  .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n  .i_bus_icb_cmd_ready ({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n  .i_bus_icb_cmd_valid ({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n  .i_bus_icb_cmd_read ({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n  .i_bus_icb_cmd_addr ({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n  .i_bus_icb_cmd_wdata ({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n  .i_bus_icb_cmd_wmask ({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n  .i_bus_icb_rsp_valid ({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n  .i_bus_icb_rsp_ready ({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n  .i_bus_icb_rsp_err ({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n  .i_bus_icb_rsp_rdata ({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n  .clk (clk),\n  .rst_n (rst_n)\n);\n\n// Instantiate the SRAM Controller\nsirv_sram_icb_ctrl #(\n  .DW (E203_DTCM_DATA_WIDTH),\n  .AW (E203_DTCM_ADDR_WIDTH),\n  .MW (E203_DTCM_WMSK_WIDTH),\n  .AW_LSB (2),\n  .USR_W (1)\n) u_sram_icb_ctrl (\n  .sram_ctrl_active (dtcm_active),\n  .tcm_cgstop (tcm_cgstop),\n  .i_icb_cmd_valid (arbt_icb_cmd_valid),\n  .i_icb_cmd_ready (arbt_icb_cmd_ready),\n  .i_icb_cmd_read (arbt_icb_cmd_read),\n  .i_icb_cmd_addr (arbt_icb_cmd_addr),\n  .i_icb_cmd_wdata (arbt_icb_cmd_wdata),\n  .i_icb_cmd_wmask (arbt_icb_cmd_wmask),\n  .i_icb_rsp_valid (arbt_icb_rsp_valid),\n  .i_icb_rsp_ready (arbt_icb_rsp_ready),\n  .i_icb_rsp_rdata (arbt_icb_rsp_rdata),\n  .ram_cs (dtcm_ram_cs),\n  .ram_we (dtcm_ram_we),\n  .ram_addr (dtcm_ram_addr),\n  .ram_wem (dtcm_ram_wem),\n  .ram_din (dtcm_ram_din),\n  .ram_dout (dtcm_ram_dout),\n  .clk_ram (clk_dtcm_ram),\n  .test_mode (test_mode),\n  .clk (clk),\n  .rst_n (rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 1, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire bjp_is_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 1, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n  assign x1_r = regfile[1];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 1, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused outputs are not connected\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 1, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // ALU operation logic\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~alu_i_info[E203_DECINFO_ALU_NOP];\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or  = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Operand selection logic\n  assign alu_req_alu_op1 = alu_i_info[E203_DECINFO_ALU_OP1PC] ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = alu_i_info[E203_DECINFO_ALU_OP2IMM] ? alu_i_imm : alu_i_rs2;\n\n  // Handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Special instruction handling\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 8, "code": "module e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 1, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n  // Internal signals and logic for decoding instructions\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 2, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or  = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Writeback error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 7, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_valid,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_valid,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_valid,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_valid,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_valid,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n  // Local parameters\n  localparam BIU_ARBT_I_NUM = (E203_HAS_MEM_ITF) ? 2 : 1;\n  localparam BIU_ARBT_I_PTR_W = 1;\n  localparam BIU_SPLT_I_NUM = (E203_HAS_FIO || E203_HAS_MEM_ITF) ? 5 : 4;\n\n  // ICB Arbiter\n  sirv_gnrl_icb_arbt #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ARBT_NUM(BIU_ARBT_I_NUM),\n    .ARBT_PTR_W(BIU_ARBT_I_PTR_W),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY)\n  ) u_biu_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Buffer\n  sirv_gnrl_icb_buffer #(\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .USR_W(1),\n    .OUTS_CNT_W(E203_BIU_OUTS_CNT_W),\n    .CMD_DP(E203_BIU_CMD_DP),\n    .RSP_DP(E203_BIU_RSP_DP),\n    .CMD_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY(E203_BIU_RSP_CUT_READY)\n  ) u_sirv_gnrl_icb_buffer (\n    .icb_buffer_active(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // ICB Splitter\n  sirv_gnrl_icb_splt #(\n    .FIFO_CUT_READY(E203_BIU_CMD_CUT_READY),\n    .SPLT_PTR_W(BIU_SPLT_I_NUM),\n    .USR_W(1),\n    .AW(E203_ADDR_SIZE),\n    .DW(E203_XLEN),\n    .ALLOW_DIFF(0),\n    .ALLOW_0CYCL_RSP(1),\n    .FIFO_OUTS_NUM(E203_BIU_OUTS_NUM),\n    .SPLT_NUM(BIU_SPLT_I_NUM),\n    .SPLT_PTR_1HOT(1)\n  ) u_biu_icb_splt (\n    .i_icb_splt_indic(),\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .o_bus_icb_cmd_valid(),\n    .o_bus_icb_cmd_ready(),\n    .o_bus_icb_rsp_valid(),\n    .o_bus_icb_rsp_ready(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 2, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 1, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_zimm = csr_i_info[E203_DECINFO_CSR_ZIMMM];\n  wire [11:0] csr_csridx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // Operand 1 preparation\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {{(E203_XLEN-5){1'b0}}, csr_zimm} : csr_i_rs1;\n\n  // CSR read enable\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  // CSR write enable\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_zero) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_zero)\n  );\n\n  // CSR index\n  assign csr_idx = csr_csridx;\n\n  // CSR enable\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  // Write-back CSR data preparation\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  // CSR output valid\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  // CSR output write-back data\n  assign csr_o_wbck_wdat = csr_sel_nice ? nice_csr_rdata : read_csr_dat;\n\n  // CSR output write-back error\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 1, "code": "module e203_exu_disp (\n  input wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input wire oitf_empty,\n  input wire amo_wait,\n  input wire disp_i_valid,\n  output wire disp_i_ready,\n  input wire disp_i_rs1x0,\n  input wire disp_i_rs2x0,\n  input wire disp_i_rs1en,\n  input wire disp_i_rs2en,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input wire [E203_XLEN-1:0] disp_i_rs1,\n  input wire [E203_XLEN-1:0] disp_i_rs2,\n  input wire disp_i_rdwen,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input wire [E203_XLEN-1:0] disp_i_imm,\n  input wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input wire disp_i_misalgn,\n  input wire disp_i_buserr,\n  input wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input wire disp_o_alu_ready,\n  input wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input wire oitfrd_match_disprs1,\n  input wire oitfrd_match_disprs2,\n  input wire oitfrd_match_disprs3,\n  input wire oitfrd_match_disprd,\n  input wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 2, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n  wire [4:0] wbck_i_flags;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n  assign wbck_i_flags = longp_wbck_i_valid ? longp_wbck_i_flags : 5'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 8, "code": "module e203_srams (\n  input  wire        itcm_ram_sd,\n  input  wire        itcm_ram_ds,\n  input  wire        itcm_ram_ls,\n  input  wire        itcm_ram_cs,\n  input  wire        itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire        clk_itcm_ram,\n  input  wire        rst_itcm,\n\n  input  wire        dtcm_ram_sd,\n  input  wire        dtcm_ram_ds,\n  input  wire        dtcm_ram_ls,\n  input  wire        dtcm_ram_cs,\n  input  wire        dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire        clk_dtcm_ram,\n  input  wire        rst_dtcm\n);\n\n  // ITCM RAM instance\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // Instantiate ITCM RAM here\n    end\n  endgenerate\n\n  // DTCM RAM instance\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // Instantiate DTCM RAM here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 2, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Operation Requests\n  wire bjp_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = bjp_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_bgtu;\n  assign bjp_req_alu_add     = bjp_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Commit Signals\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 2, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculation\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency and wait logic\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n  assign bpu_wait = dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & jalr_rs1xn_dep;\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Register read enable signal\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      rs1xn_rdrf_r <= 1'b0;\n    end else if (rs1xn_rdrf_ena) begin\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 3, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  \n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  \n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  \n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n  \n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n// Module implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 2, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  \n  // IFU Interface\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface (optional)\n`ifdef E203_HAS_ITCM_EXTITF\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n`endif\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals and module instantiations\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 1, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_o_ready,\n  output wire ifu_o_valid,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n\n  // Instantiate submodules and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 3, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 2, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire mulhsu, mul, div, rem, divu, remu, rv32, bjp, jal, jalr, bxx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(rs1idx),\n    .dec_rs2idx(rs2idx),\n    .dec_mulhsu(mulhsu),\n    .dec_mul(mul),\n    .dec_div(div),\n    .dec_rem(rem),\n    .dec_divu(divu),\n    .dec_remu(remu),\n    .dec_rv32(rv32),\n    .dec_bjp(bjp),\n    .dec_jal(jal),\n    .dec_jalr(jalr),\n    .dec_bxx(bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\n  // Connect internal signals to outputs\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 3, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Other unused signals are not connected\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 13, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 6, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr, \n  input  wire                         lsu2dtcm_icb_cmd_read, \n  input  wire [32-1:0]                lsu2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]                 lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [32-1:0]                lsu2dtcm_icb_rsp_rdata,\n\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr, \n  input  wire                         ext2dtcm_icb_cmd_read, \n  input  wire [32-1:0]                ext2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]                 ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [32-1:0]                ext2dtcm_icb_rsp_rdata,\n\n  output wire                         dtcm_ram_cs,  \n  output wire                         dtcm_ram_we,  \n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr, \n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,          \n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [32-1:0] arbt_icb_cmd_wdata;\n  wire [4-1:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [32-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (DTCM_ARBT_I_NUM),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({ext2dtcm_icb_cmd_read,  lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr  ({ext2dtcm_icb_cmd_addr,  lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({ext2dtcm_icb_rsp_err,   lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 3, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL prediction\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // PC adder operand generation\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc :\n                           (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency detection\n  assign jalr_rs1xn_dep = ~oitf_empty & ~ir_empty & ir_rs1en & jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // BPU wait signal\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1xn_dep) |\n                    (dec_jalr & (dec_jalr_rs1idx != 0) & (jalr_rs1xn_dep | ~ir_empty));\n\n  // RS1 read enable\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) &\n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // RS1 read state management\n  sirv_gnrl_dfflr #(1) u_rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // RS1 read enable output\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 3, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 2, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // NICE logic\n  assign nice_i_ready = nice_req_ready || nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_o_longpipe = !nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid && nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld && fifo_o_rdy;\n  assign nice_o_itag_valid = fifo_o_vld && fifo_o_rdy;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid && nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 4, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Write-back error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 1, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 3, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign cmt_i_ready = ~flush_need | brchmis_flush_ack | nonalu_excpirq_flush_req_raw;\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = \n        (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n        cmt_i_dret ? csr_dpc_r :\n        csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 3, "code": "module e203_itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram,\n  output wire itcm_active\n);\n\n  // Internal signals\n  wire [DATA_WIDTH-1:0] converted_wdata;\n  wire [WMSK_WIDTH-1:0] converted_wmask;\n  wire [DATA_WIDTH-1:0] converted_rdata;\n\n  // Data width conversion instance\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b00),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(converted_wdata),\n    .o_icb_cmd_wmask(converted_wmask),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(converted_rdata),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Bus arbiter instance\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM controller instance\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 2, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 2, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && oitf_valid[ret_ptr_r]) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 5, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Write-back error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 8, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire wfi;\n  wire stop;\n  wire [E203_PC_SIZE-1:0] rtvec;\n  wire dbg_irq_sync;\n  wire ext_irq_sync;\n  wire sft_irq_sync;\n  wire tmr_irq_sync;\n  wire sd;\n  wire ds;\n  wire itcm_cmd_valid;\n  wire itcm_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire itcm_cmd_read;\n  wire [E203_XLEN-1:0] itcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] itcm_cmd_wmask;\n  wire itcm_rsp_valid;\n  wire itcm_rsp_ready;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n  wire dtcm_cmd_valid;\n  wire dtcm_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] dtcm_cmd_addr;\n  wire dtcm_cmd_read;\n  wire [E203_XLEN-1:0] dtcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] dtcm_cmd_wmask;\n  wire dtcm_rsp_valid;\n  wire dtcm_rsp_ready;\n  wire dtcm_rsp_err;\n  wire [E203_XLEN-1:0] dtcm_rsp_rdata;\n\n  // Core module instantiation\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(wfi),\n    .tm_stop(stop),\n    .pc_rtvec(rtvec),\n    .dbg_irq_r(dbg_irq_sync),\n    .ext_irq_a(ext_irq_sync),\n    .sft_irq_a(sft_irq_sync),\n    .tmr_irq_a(tmr_irq_sync),\n    .tcm_sd(sd),\n    .tcm_ds(ds),\n    .ext2itcm_icb_cmd_valid(itcm_cmd_valid),\n    .ext2itcm_icb_cmd_ready(itcm_cmd_ready),\n    .ext2itcm_icb_cmd_addr(itcm_cmd_addr),\n    .ext2itcm_icb_cmd_read(itcm_cmd_read),\n    .ext2itcm_icb_cmd_wdata(itcm_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(itcm_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(itcm_rsp_valid),\n    .ext2itcm_icb_rsp_ready(itcm_rsp_ready),\n    .ext2itcm_icb_rsp_err(itcm_rsp_err),\n    .ext2itcm_icb_rsp_rdata(itcm_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(dtcm_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(dtcm_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(dtcm_cmd_addr),\n    .ext2dtcm_icb_cmd_read(dtcm_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(dtcm_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(dtcm_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(dtcm_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(dtcm_rsp_ready),\n    .ext2dtcm_icb_rsp_err(dtcm_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(dtcm_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = csr_clk;\n  assign core_wfi = wfi;\n  assign tm_stop = stop;\n  assign dbg_irq_r = dbg_irq_sync;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 4, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 5, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 3, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 18, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @(negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 3, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_rdidx [E203_RFIDX_WIDTH-1:0];\n  reg [E203_OITF_DEPTH-1:0] fifo_pc [E203_PC_SIZE-1:0];\n  reg [E203_OITF_DEPTH-1:0] fifo_rdwen;\n  reg [E203_OITF_DEPTH-1:0] fifo_rdfpu;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg dis_flag, ret_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_reg != ret_ptr_reg) || (dis_flag == ret_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      dis_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo_rdidx[dis_ptr_reg] <= disp_i_rdidx;\n      fifo_pc[dis_ptr_reg] <= disp_i_pc;\n      fifo_rdwen[dis_ptr_reg] <= disp_i_rdwen;\n      fifo_rdfpu[dis_ptr_reg] <= disp_i_rdfpu;\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == E203_OITF_DEPTH-1) dis_flag <= ~dis_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = fifo_rdidx[ret_ptr_reg];\n  assign ret_pc = fifo_pc[ret_ptr_reg];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_reg];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_reg];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      ret_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == E203_OITF_DEPTH-1) ret_flag <= ~ret_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == fifo_rdidx[ret_ptr_reg]) && fifo_rdwen[ret_ptr_reg]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == fifo_rdidx[ret_ptr_reg]) && fifo_rdwen[ret_ptr_reg]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == fifo_rdidx[ret_ptr_reg]) && fifo_rdwen[ret_ptr_reg]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == fifo_rdidx[ret_ptr_reg]) && fifo_rdwen[ret_ptr_reg]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_reg == ret_ptr_reg) && (dis_flag == ret_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 4, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] oitf_pc [E203_OITF_DEPTH-1:0];\n  reg oitf_rdwen [E203_OITF_DEPTH-1:0];\n  reg oitf_rdfpu [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = !((dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag));\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1'b1;\n      if (dis_ptr_r == (E203_OITF_DEPTH-1)) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_rdidx <= oitf_rdidx[ret_ptr_r];\n      ret_pc <= oitf_pc[ret_ptr_r];\n      ret_rdwen <= oitf_rdwen[ret_ptr_r];\n      ret_rdfpu <= oitf_rdfpu[ret_ptr_r];\n      ret_ptr_r <= ret_ptr_r + 1'b1;\n      if (ret_ptr_r == (E203_OITF_DEPTH-1)) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 9, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire core_wfi_signal;\n  wire timer_stop;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] dtcm_rsp_rdata;\n  wire dtcm_rsp_err;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(core_wfi_signal),\n    .tm_stop(timer_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .tcm_sd(tcm_sd),\n    .tcm_ds(tcm_ds),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(itcm_rsp_err),\n    .ext2itcm_icb_rsp_rdata(itcm_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err(dtcm_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(dtcm_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Output assignments\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = csr_clk;\n  assign core_wfi = core_wfi_signal;\n  assign tm_stop = timer_stop;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 4, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 6, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or  = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Handshake signals\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 4, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n  `ifdef E203_HAS_NICE\n  ,input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n  `endif\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 3, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n  // Internal signals and logic for decoding the instruction\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 8, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_cmd_valid,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_cmd_valid,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_cmd_valid,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_cmd_valid,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_cmd_valid,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 4, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  reg rs1xn_rdrf_r;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculation\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency handling\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 1) & ~oitf_empty) |\n                    (dec_jalr & (dec_jalr_rs1idx != 0) & (ir_empty | ir_rs1en));\n\n  // Register read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  // State machine for rs1 read\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & ~bpu_wait;\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Trigger for rs1 read state\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 10, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_wfi_signal;\n  wire core_tm_stop;\n  wire core_dbg_irq_r;\n  wire [E203_XLEN-1:0] core_ext2itcm_icb_rsp_rdata;\n  wire core_ext2itcm_icb_rsp_err;\n  wire core_ext2dtcm_icb_rsp_err;\n  wire [E203_XLEN-1:0] core_ext2dtcm_icb_rsp_rdata;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi_signal),\n    .tm_stop(core_tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(core_dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .tcm_sd(tcm_sd),\n    .tcm_ds(tcm_ds),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(core_ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(core_ext2itcm_icb_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err(core_ext2dtcm_icb_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(core_ext2dtcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_wfi = core_wfi_signal;\n  assign tm_stop = core_tm_stop;\n  assign dbg_irq_r = core_dbg_irq_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 4, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  // Ready signal\n  assign cmt_i_ready = ~flush_need | brchmis_flush_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 9, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // ITCM RAM instantiation\n    end\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // DTCM RAM instantiation\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 2, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        (csr_op1 & ~read_csr_dat);\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign csr_o_valid = csr_i_valid & nice_csr_ready & csr_sel_nice;\n\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = csr_op1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 6, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // Synchronizer instances for each interrupt type\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 3, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 5, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n  `ifdef E203_HAS_NICE\n  ,input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n  `endif\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 7, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 7, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 4, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n  // Internal logic for decoding instructions\n  // ...\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 5, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 9, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 4, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 1, "code": "module e203_ifu (\n  input clk,\n  input rst_n,\n  input itcm_nohold,\n  input ifu_o_ready,\n  input pipe_flush_req,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input ifu2itcm_icb_cmd_ready,\n  input ifu2itcm_icb_rsp_valid,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_ready,\n  input ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_err,\n  input [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input ifu_halt_req,\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu,\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  output pipe_flush_ack,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output ifu2itcm_icb_rsp_ready,\n  output ifu2biu_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output ifu2biu_icb_rsp_ready,\n  output ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(ifu_o_valid),\n    .ifu_req_seq_rv32(ifu_o_valid),\n    .ifu_req_last_pc(ifu_o_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(ifu_o_valid),\n    .ifu_req_seq_rv32(ifu_o_valid),\n    .ifu_req_last_pc(ifu_o_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_o_ready),\n    .ifu_rsp_valid(ifu_o_valid),\n    .ifu_rsp_err(ifu_o_buserr),\n    .ifu_rsp_instr(ifu_o_ir),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 13, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_ifu),\n    .en     (ifu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_exu),\n    .en     (exu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_lsu),\n    .en     (lsu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_core_biu),\n    .en     (biu_clk_en),\n    .test_mode (test_mode)\n  );\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_itcm),\n    .en     (itcm_clk_en),\n    .test_mode (test_mode)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in  (clk),\n    .clk_out (clk_dtcm),\n    .en     (dtcm_clk_en),\n    .test_mode (test_mode)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n  `endif\n\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 5, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = \n    (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n    cmt_i_fencei |\n    cmt_i_mret |\n    cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = \n    ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n    (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n    (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  `ifdef E203_TIMING_BOOST\n    assign brchmis_flush_pc = \n      (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n      (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n      (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n      (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n      cmt_i_dret ? csr_dpc_r :\n      csr_epc_r;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 1, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 7, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instruction handling\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Write-back error signal\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Handshake signals\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 10, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    // Assign fixed values to outputs\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 1, "code": "module e203_cpu (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire [E203_PC_SIZE-1:0] pc_rtvec,\n    input wire [E203_HARD_ID_W-1:0] core_mhartid,\n    input wire dbg_irq_a,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire [31:0] dcsr_r,\n    input wire [E203_PC_SIZE-1:0] dpc_r,\n    input wire [31:0] dscratch_r,\n    input wire dbg_mode,\n    input wire dbg_halt_r,\n    input wire dbg_step_r,\n    input wire dbg_ebreakm_r,\n    input wire dbg_stopcycle,\n    input wire ext2itcm_icb_cmd_valid,\n    input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n    input wire ext2itcm_icb_rsp_ready,\n    input wire ext2dtcm_icb_cmd_valid,\n    input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n    input wire ext2dtcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n    input wire ext2dtcm_icb_rsp_ready,\n    input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n    input wire ppi_icb_enable,\n    input wire ppi_icb_cmd_ready,\n    input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n    input wire clint_icb_enable,\n    input wire clint_icb_cmd_ready,\n    input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n    input wire plic_icb_enable,\n    input wire plic_icb_cmd_ready,\n    input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n    input wire fio_icb_enable,\n    input wire fio_icb_cmd_ready,\n    input wire mem_icb_enable,\n    input wire mem_icb_cmd_ready,\n    input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n    input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n\n    output wire [E203_PC_SIZE-1:0] inspect_pc,\n    output wire inspect_dbg_irq,\n    output wire inspect_mem_cmd_valid,\n    output wire inspect_mem_cmd_ready,\n    output wire inspect_mem_rsp_valid,\n    output wire inspect_mem_rsp_ready,\n    output wire inspect_core_clk,\n    output wire core_csr_clk,\n    output wire core_wfi,\n    output wire tm_stop,\n    output wire [E203_PC_SIZE-1:0] cmt_dpc,\n    output wire cmt_dpc_ena,\n    output wire [2:0] cmt_dcause,\n    output wire cmt_dcause_ena,\n    output wire dbg_irq_r,\n    output wire wr_dcsr_ena,\n    output wire wr_dpc_ena,\n    output wire wr_dscratch_ena,\n    output wire [31:0] wr_csr_nxt,\n    output wire ext2itcm_icb_cmd_ready,\n    output wire ext2itcm_icb_rsp_valid,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n    output wire ext2dtcm_icb_cmd_ready,\n    output wire ext2dtcm_icb_rsp_valid,\n    output wire ext2dtcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n    output wire ppi_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n    output wire ppi_icb_cmd_read,\n    output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n    output wire ppi_icb_cmd_lock,\n    output wire ppi_icb_cmd_excl,\n    output wire [1:0] ppi_icb_cmd_size,\n    output wire ppi_icb_rsp_ready,\n    output wire clint_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n    output wire clint_icb_cmd_read,\n    output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n    output wire clint_icb_cmd_lock,\n    output wire clint_icb_cmd_excl,\n    output wire [1:0] clint_icb_cmd_size,\n    output wire clint_icb_rsp_ready,\n    output wire plic_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n    output wire plic_icb_cmd_read,\n    output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n    output wire plic_icb_cmd_lock,\n    output wire plic_icb_cmd_excl,\n    output wire [1:0] plic_icb_cmd_size,\n    output wire plic_icb_rsp_ready,\n    output wire fio_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n    output wire fio_icb_cmd_read,\n    output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n    output wire fio_icb_cmd_lock,\n    output wire fio_icb_cmd_excl,\n    output wire [1:0] fio_icb_cmd_size,\n    output wire fio_icb_rsp_ready,\n    output wire mem_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n    output wire mem_icb_cmd_read,\n    output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n    output wire mem_icb_cmd_lock,\n    output wire mem_icb_cmd_excl,\n    output wire [1:0] mem_icb_cmd_size,\n    output wire mem_icb_rsp_ready,\n    output wire itcm_ls,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n    output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n    output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n    output wire clk_itcm_ram,\n    output wire dtcm_ls,\n    output wire dtcm_ram_cs,\n    output wire dtcm_ram_we,\n    output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n    output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n    output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n    output wire clk_dtcm_ram\n);\n\n// Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 4, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n  // Internal signals and logic for LSU implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 14, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in  (clk),\n    .en     (ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in  (clk),\n    .en     (exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in  (clk),\n    .en     (lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in  (clk),\n    .en     (biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  assign clk_aon = clk;\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in  (clk),\n    .en     (itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in  (clk),\n    .en     (dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 2, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 3, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal logic for dispatching instructions to ALU and OITF\n  // Handling operand forwarding, dependencies, and WFI requests\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 2, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 2, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 1, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena,\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      misa <= 0;\n      mvendorid <= 536;\n      marchid <= 'hE203;\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode and Interrupt Logic\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 5, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1)\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1)\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n  assign dis_ready = !((dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag));\n\n  // Output assignments\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 4, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 6, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n\n  // Arbitration logic\n  assign wbck_i_valid = lsu_wbck_i_valid | nice_longp_wbck_i_valid;\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat : nice_longp_wbck_i_wdat;\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag : nice_longp_wbck_i_itag;\n  assign wbck_i_err = lsu_wbck_i_valid ? lsu_wbck_i_err : nice_longp_wbck_i_err;\n\n  // Write-back and exception handling\n  assign longp_wbck_o_valid = wbck_i_valid & ~wbck_i_err & oitf_ret_rdwen;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  // Ready signals\n  assign lsu_wbck_i_ready = wbck_i_ready & lsu_wbck_i_valid;\n  assign nice_longp_wbck_i_ready = wbck_i_ready & nice_longp_wbck_i_valid;\n  assign wbck_i_ready = longp_wbck_o_ready & longp_excp_o_ready;\n\n  // OITF control\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 11, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    // Assign fixed values to outputs\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 5, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Internal logic and submodule instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 15, "code": "module e203_clk_ctrl (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    input  wire core_cgstop,\n    input  wire core_ifu_active,\n    input  wire core_exu_active,\n    input  wire core_lsu_active,\n    input  wire core_biu_active,\n    input  wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    ,\n    input  wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    ,\n    input  wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    wire biu_clk_en = core_cgstop | core_biu_active;\n\n`ifdef E203_HAS_ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    assign itcm_ls = ~itcm_clk_en;\n`endif\n\n`ifdef E203_HAS_DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    assign dtcm_ls = ~dtcm_clk_en;\n`endif\n\n    assign clk_aon = clk;\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n`ifdef E203_HAS_ITCM\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n`endif\n\n`ifdef E203_HAS_DTCM\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 11, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire wfi;\n  wire stop;\n  wire [E203_PC_SIZE-1:0] rtvec;\n  wire irq_r;\n  wire irq_a;\n  wire sft_irq;\n  wire tmr_irq;\n  wire sd;\n  wire ds;\n  wire itcm_cmd_valid;\n  wire itcm_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire itcm_cmd_read;\n  wire [E203_XLEN-1:0] itcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] itcm_cmd_wmask;\n  wire itcm_rsp_valid;\n  wire itcm_rsp_ready;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n  wire dtcm_cmd_valid;\n  wire dtcm_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] dtcm_cmd_addr;\n  wire dtcm_cmd_read;\n  wire [E203_XLEN-1:0] dtcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] dtcm_cmd_wmask;\n  wire dtcm_rsp_valid;\n  wire dtcm_rsp_ready;\n  wire dtcm_rsp_err;\n  wire [E203_XLEN-1:0] dtcm_rsp_rdata;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(wfi),\n    .tm_stop(stop),\n    .pc_rtvec(rtvec),\n    .dbg_irq_r(irq_r),\n    .ext_irq_a(irq_a),\n    .sft_irq_a(sft_irq),\n    .tmr_irq_a(tmr_irq),\n    .tcm_sd(sd),\n    .tcm_ds(ds),\n    .ext2itcm_icb_cmd_valid(itcm_cmd_valid),\n    .ext2itcm_icb_cmd_ready(itcm_cmd_ready),\n    .ext2itcm_icb_cmd_addr(itcm_cmd_addr),\n    .ext2itcm_icb_cmd_read(itcm_cmd_read),\n    .ext2itcm_icb_cmd_wdata(itcm_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(itcm_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(itcm_rsp_valid),\n    .ext2itcm_icb_rsp_ready(itcm_rsp_ready),\n    .ext2itcm_icb_rsp_err(itcm_rsp_err),\n    .ext2itcm_icb_rsp_rdata(itcm_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(dtcm_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(dtcm_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(dtcm_cmd_addr),\n    .ext2dtcm_icb_cmd_read(dtcm_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(dtcm_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(dtcm_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(dtcm_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(dtcm_rsp_ready),\n    .ext2dtcm_icb_rsp_err(dtcm_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(dtcm_rsp_rdata),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .fio_icb_cmd_ready(fio_icb_cmd_ready),\n    .fio_icb_rsp_valid(fio_icb_rsp_valid),\n    .fio_icb_rsp_err(fio_icb_rsp_err),\n    .fio_icb_rsp_rdata(fio_icb_rsp_rdata),\n    .mem_icb_cmd_ready(mem_icb_cmd_ready),\n    .mem_icb_rsp_valid(mem_icb_rsp_valid),\n    .mem_icb_rsp_err(mem_icb_rsp_err),\n    .mem_icb_rsp_rdata(mem_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n),\n    .test_mode(test_mode)\n  );\n\n  // Instantiate e203_srams\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(sd),\n    .itcm_ram_ds(ds),\n    .itcm_ram_ls(),\n    .itcm_ram_cs(),\n    .itcm_ram_we(),\n    .itcm_ram_addr(),\n    .itcm_ram_wem(),\n    .itcm_ram_din(),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(),\n    .rst_itcm(),\n    .dtcm_ram_sd(),\n    .dtcm_ram_ds(),\n    .dtcm_ram_ls(),\n    .dtcm_ram_cs(),\n    .dtcm_ram_we(),\n    .dtcm_ram_addr(),\n    .dtcm_ram_wem(),\n    .dtcm_ram_din(),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(),\n    .rst_dtcm(),\n    .test_mode(test_mode)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 5, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n// Decode logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 1, "code": "module e203_exu_alu_lsuagu (\n  input  wire                  agu_i_valid,\n  output wire                  agu_i_ready,\n  input  wire [E203_XLEN-1:0]  agu_i_rs1,\n  input  wire [E203_XLEN-1:0]  agu_i_rs2,\n  input  wire [E203_XLEN-1:0]  agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                  agu_i_longpipe,\n  input  wire                  flush_req,\n  input  wire                  flush_pulse,\n  output wire                  amo_wait,\n  input  wire                  oitf_empty,\n  output wire                  agu_o_valid,\n  input  wire                  agu_o_ready,\n  output wire [E203_XLEN-1:0]  agu_o_wbck_wdat,\n  output wire                  agu_o_wbck_err,\n  output wire                  agu_o_cmt_misalgn,\n  output wire                  agu_o_cmt_ld,\n  output wire                  agu_o_cmt_stamo,\n  output wire                  agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                  agu_icb_cmd_valid,\n  input  wire                  agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                  agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]  agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                  agu_icb_cmd_back2agu,\n  output wire                  agu_icb_cmd_lock,\n  output wire                  agu_icb_cmd_excl,\n  output wire [1:0]            agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                  agu_icb_cmd_usign,\n  input  wire                  agu_icb_rsp_valid,\n  output wire                  agu_icb_rsp_ready,\n  input  wire                  agu_icb_rsp_err,\n  input  wire                  agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]  agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  output wire                  agu_req_alu_swap,\n  output wire                  agu_req_alu_add,\n  output wire                  agu_req_alu_and,\n  output wire                  agu_req_alu_or,\n  output wire                  agu_req_alu_xor,\n  output wire                  agu_req_alu_max,\n  output wire                  agu_req_alu_min,\n  output wire                  agu_req_alu_maxu,\n  output wire                  agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire                  agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_0_r,\n  output wire                  agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 12, "code": "module e203_extend_csr (\n  input         clk,\n  input         rst_n,\n  input         nice_csr_valid,\n  output        nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input         nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 6, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~flush_need | brchmis_flush_ack | nonalu_excpirq_flush_req_raw;\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  assign brchmis_flush_pc = \n    (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    cmt_i_dret ? csr_dpc_r :\n    csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 8, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // Parameters for synchronizer depth and data width\n    parameter DP = 2;\n    parameter DW = 1;\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(DP),\n        .DW(DW)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(DP),\n        .DW(DW)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(DP),\n        .DW(DW)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(DP),\n        .DW(DW)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 9, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 16, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in(clk),\n    .en(ifu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in(clk),\n    .en(exu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in(clk),\n    .en(lsu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in(clk),\n    .en(biu_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_core_biu)\n  );\n\n  assign clk_aon = clk;\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      itcm_active_r <= 1'b0;\n    end else begin\n      itcm_active_r <= itcm_active;\n    end\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in(clk),\n    .en(itcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dtcm_active_r <= 1'b0;\n    end else begin\n      dtcm_active_r <= dtcm_active;\n    end\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in(clk),\n    .en(dtcm_clk_en),\n    .test_mode(test_mode),\n    .clk_out(clk_dtcm)\n  );\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 6, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n  output wire nice_icb_cmd_valid,\n  input  wire nice_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  output wire nice_icb_cmd_read,\n  output wire [XLEN-1:0] nice_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  input  wire nice_icb_rsp_valid,\n  output wire nice_icb_rsp_ready,\n  input  wire nice_icb_rsp_err,\n  input  wire [XLEN-1:0] nice_icb_rsp_rdata,\n  output wire dcache_icb_cmd_valid,\n  input  wire dcache_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output wire dcache_icb_cmd_read,\n  output wire [XLEN-1:0] dcache_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dcache_icb_cmd_wmask,\n  input  wire dcache_icb_rsp_valid,\n  output wire dcache_icb_rsp_ready,\n  input  wire dcache_icb_rsp_err,\n  input  wire [XLEN-1:0] dcache_icb_rsp_rdata,\n  output wire dtcm_icb_cmd_valid,\n  input  wire dtcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dtcm_icb_cmd_addr,\n  output wire dtcm_icb_cmd_read,\n  output wire [XLEN-1:0] dtcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  input  wire dtcm_icb_rsp_valid,\n  output wire dtcm_icb_rsp_ready,\n  input  wire dtcm_icb_rsp_err,\n  input  wire [XLEN-1:0] dtcm_icb_rsp_rdata,\n  output wire itcm_icb_cmd_valid,\n  input  wire itcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] itcm_icb_cmd_addr,\n  output wire itcm_icb_cmd_read,\n  output wire [XLEN-1:0] itcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] itcm_icb_cmd_wmask,\n  input  wire itcm_icb_rsp_valid,\n  output wire itcm_icb_rsp_ready,\n  input  wire itcm_icb_rsp_err,\n  input  wire [XLEN-1:0] itcm_icb_rsp_rdata,\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// LSU implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 5, "code": "module e203_exu_wbck (\n  input                   alu_wbck_i_valid,\n  output                  alu_wbck_i_ready,\n  input  [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input                   longp_wbck_i_valid,\n  output                  longp_wbck_i_ready,\n  input  [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  [4:0]            longp_wbck_i_flags,\n  input  [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input                   longp_wbck_i_rdfpu,\n  output                  rf_wbck_o_ena,\n  output [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input                   clk,\n  input                   rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 2, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire ifu_rsp_need_replay;\n  wire ifetch_replay_req;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n\n  // Instantiate submodules and logic here\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 6, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 13, "code": "module e203_extend_csr (\n  input  wire        clk,\n  input  wire        rst_n,\n  input  wire        nice_csr_valid,\n  output wire        nice_csr_ready,\n  input  wire [31:0] nice_csr_addr,\n  input  wire        nice_csr_wr,\n  input  wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 2, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] mcgstop;\n\n  // CSR Access Logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      mcycle <= {E203_XLEN{1'b0}};\n      mcycleh <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n      minstreth <= {E203_XLEN{1'b0}};\n      counterstop <= {E203_XLEN{1'b0}};\n      itcmnohold <= {E203_XLEN{1'b0}};\n      mdvnob2b <= {E203_XLEN{1'b0}};\n      mcgstop <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB80: mcycleh <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hB82: minstreth <= wbck_csr_dat;\n        12'hBFF: counterstop <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Privilege Mode Logic\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Interface\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n\n  // Clock Gating Control\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n\n  // ITCM No Hold-up Feature\n  assign itcm_nohold = itcmnohold[0];\n\n  // Mul/Div No Back-to-Back Feature\n  assign mdv_nob2b = mdvnob2b[0];\n\n  // CSR EPC and DPC Read\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n\n  // CSR MTVEC Read\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 3, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction handling\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_i_valid & nice_req_ready & ~nice_i_xs_off;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  // FIFO instance for instruction tags\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instruction tag writeback\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 4, "code": "module e203_exu_disp (\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 5, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n        else\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n    end\n\n    wire rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n`endif\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 3, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_x0 = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n  wire csr_rd_en_int = csr_i_valid & (csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_i_rdwen : 1'b1);\n  wire csr_wr_en_int = csr_i_valid & (csr_i_info[E203_DECINFO_CSR_CSRRW] | (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_x0) | (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_x0));\n  wire [E203_XLEN-1:0] csr_wbck_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                                      csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                                      (csr_op1 & ~read_csr_dat);\n  wire csr_ena_int = csr_o_valid & csr_o_ready;\n  wire csr_sel_nice_int = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  wire csr_o_valid_int = csr_i_valid & (csr_sel_nice_int ? nice_csr_ready : 1'b1);\n  wire nice_csr_valid_int = csr_i_valid & csr_o_ready & csr_sel_nice_int;\n\n  // Assignments\n  assign csr_i_ready = csr_o_ready;\n  assign csr_ena = csr_ena_int;\n  assign csr_wr_en = csr_wr_en_int;\n  assign csr_rd_en = csr_rd_en_int;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n  assign wbck_csr_dat = csr_wbck_dat;\n  assign csr_o_valid = csr_o_valid_int;\n  assign csr_o_wbck_wdat = csr_sel_nice_int ? nice_csr_rdata : read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n  assign csr_sel_nice = csr_sel_nice_int;\n  assign nice_csr_valid = nice_csr_valid_int;\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en_int;\n  assign nice_csr_wdata = csr_wbck_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 6, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (oitf_valid[dis_ptr_r] == 1'b0);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && oitf_valid[ret_ptr_r]) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (oitf_rdidx[dis_ptr_r] == disp_i_rs1idx) && oitf_rdwen[dis_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (oitf_rdidx[dis_ptr_r] == disp_i_rs2idx) && oitf_rdwen[dis_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (oitf_rdidx[dis_ptr_r] == disp_i_rs3idx) && oitf_rdwen[dis_ptr_r]);\n  assign oitfrd_match_disprd = (oitf_rdidx[dis_ptr_r] == disp_i_rdidx) && oitf_rdwen[dis_ptr_r];\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 3, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Operand Selection\n  assign bjp_req_alu_op1 = (bjp_i_info[E203_DECINFO_BJP_JUMP]) ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = (bjp_i_info[E203_DECINFO_BJP_JUMP]) ? \n                           ((bjp_i_info[E203_DECINFO_RV32]) ? 32'd4 : 32'd2) : \n                           bjp_i_rs2;\n\n  // ALU Operation Requests\n  assign bjp_req_alu_cmp_eq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  assign bjp_req_alu_cmp_ne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  assign bjp_req_alu_cmp_lt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  assign bjp_req_alu_cmp_gt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  assign bjp_req_alu_cmp_ltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  assign bjp_req_alu_cmp_gtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  assign bjp_req_alu_add     = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = (bjp_i_info[E203_DECINFO_BJP_JUMP]) ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Commit Signals\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 7, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 4, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_INSTR_SIZE-1:0] i_instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] i_rs2idx;\n  wire i_mulhsu;\n  wire i_mul;\n  wire i_div;\n  wire i_rem;\n  wire i_divu;\n  wire i_remu;\n  wire i_rv32;\n  wire i_bjp;\n  wire i_jal;\n  wire i_jalr;\n  wire i_bxx;\n  wire [E203_RFIDX_WIDTH-1:0] i_jalr_rs1idx;\n  wire [E203_XLEN-1:0] i_bjp_imm;\n\n  // Assign input instruction\n  assign i_instr = instr;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 4, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready || nice_i_xs_off;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = !nice_i_xs_off;\n\n  // Instruction tag FIFO\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign fifo_i_vld = nice_req_valid && nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid && nice_o_itag_ready;\n\n  // Multi-cycle operation completion\n  assign nice_rsp_multicyc_ready = fifo_o_vld && nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid && nice_req_ready;\n  \nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 1, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definitions\n  localparam ICB_STATE_IDLE   = 2'b00;\n  localparam ICB_STATE_1ST    = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND    = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  // State Transition Conditions\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_valid;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_rsp_ready;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu2itcm_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && ifu_rsp_ready;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (ifu_req_valid ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         state_2nd_exit_ena ? (ifu_req_valid ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         icb_state;\n\n  // Output Logic\n  assign ifu_req_ready = icb_state == ICB_STATE_IDLE;\n  assign ifu_rsp_valid = icb_state == ICB_STATE_2ND;\n  assign ifu_rsp_err = ifu2itcm_icb_rsp_err || ifu2biu_icb_rsp_err;\n  assign ifu_rsp_instr = ifu2itcm_icb_rsp_rdata[31:0];\n\n  // ITCM Interface\n  assign ifu2itcm_icb_cmd_valid = icb_state == ICB_STATE_1ST;\n  assign ifu2itcm_icb_cmd_addr = ifu_req_pc;\n  assign ifu2itcm_icb_rsp_ready = ifu_rsp_ready;\n\n  // System Memory Interface\n  assign ifu2biu_icb_cmd_valid = icb_state == ICB_STATE_1ST;\n  assign ifu2biu_icb_cmd_addr = ifu_req_pc;\n  assign ifu2biu_icb_rsp_ready = ifu_rsp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 8, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 14, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 1, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n// ALU operation logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 5, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the internal decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused signals are not connected\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 3, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file definition\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 14, "code": "module e203_extend_csr (\n  input         clk,\n  input         rst_n,\n  input         nice_csr_valid,\n  output        nice_csr_ready,\n  input  [31:0] nice_csr_addr,\n  input         nice_csr_wr,\n  input  [31:0] nice_csr_wdata,\n  output [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 9, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 6, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 4, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for x1 register\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 7, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    wire rst_final_n = test_mode ? rst_n : rst_sync_n;\n\n    assign rst_core = ~rst_final_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = ~rst_final_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~rst_final_n;\n`endif\n    assign rst_aon = ~rst_final_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 19, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    // FPGA Mode: Direct connection\n    assign clk_out = clk_in;\n`else\n    // Gating Mode: Clock gating logic\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 15, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 6, "code": "module e203_ifu_minidec #(\n    parameter E203_INSTR_SIZE = 32,\n    parameter E203_RFIDX_WIDTH = 5,\n    parameter E203_XLEN = 32\n)(\n    input  [E203_INSTR_SIZE-1:0] instr,\n    output dec_rs1en,\n    output dec_rs2en,\n    output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n    output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n    output dec_mulhsu,\n    output dec_mul,\n    output dec_div,\n    output dec_rem,\n    output dec_divu,\n    output dec_remu,\n    output dec_rv32,\n    output dec_bjp,\n    output dec_jal,\n    output dec_jalr,\n    output dec_bxx,\n    output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n    output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n    // Internal signals\n    wire i_prdt_taken = 1'b0;\n    wire i_muldiv_b2b = 1'b0;\n    wire i_misalgn = 1'b0;\n    wire i_buserr = 1'b0;\n    wire dbg_mode = 1'b0;\n    wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n    wire [E203_XLEN-1:0] i_pc = {E203_XLEN{1'b0}};\n\n    // Instantiate the execution unit decoder\n    e203_exu_decode u_e203_exu_decode (\n        .i_instr(i_instr),\n        .i_pc(i_pc),\n        .i_prdt_taken(i_prdt_taken),\n        .i_muldiv_b2b(i_muldiv_b2b),\n        .i_misalgn(i_misalgn),\n        .i_buserr(i_buserr),\n        .dbg_mode(dbg_mode),\n        .dec_rs1en(dec_rs1en),\n        .dec_rs2en(dec_rs2en),\n        .dec_rs1idx(dec_rs1idx),\n        .dec_rs2idx(dec_rs2idx),\n        .dec_mulhsu(dec_mulhsu),\n        .dec_mul(dec_mul),\n        .dec_div(dec_div),\n        .dec_rem(dec_rem),\n        .dec_divu(dec_divu),\n        .dec_remu(dec_remu),\n        .dec_rv32(dec_rv32),\n        .dec_bjp(dec_bjp),\n        .dec_jal(dec_jal),\n        .dec_jalr(dec_jalr),\n        .dec_bxx(dec_bxx),\n        .dec_jalr_rs1idx(dec_jalr_rs1idx),\n        .dec_bjp_imm(dec_bjp_imm)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 10, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 4, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1;\n  wire csr_sel_nice;\n  wire nice_csr_valid;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr;\n  wire nice_csr_wr;\n  wire [31:0] nice_csr_wdata;\n  wire [31:0] nice_csr_rdata;\n  wire nice_xs_off;\n\n  // Operand preparation\n  assign csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  assign csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  // CSR control signals\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  // CSR write-back data\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        (csr_op1 & ~read_csr_dat);\n\n  // Error handling\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready;\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 8, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n        end else if (test_mode) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b0}};\n        end else if (MASTER) begin\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    assign rst_core = test_mode ? ~rst_n : rst_sync[RST_SYNC_LEVEL-1];\n    assign rst_itcm = rst_core;\n    assign rst_dtcm = rst_core;\n    assign rst_aon  = rst_core;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 5, "code": "module e203_ifu_litebpu #(\n    parameter E203_PC_SIZE = 32,\n    parameter E203_XLEN = 32,\n    parameter E203_RFIDX_WIDTH = 5\n)(\n    input clk,\n    input rst_n,\n    input [E203_PC_SIZE-1:0] pc,\n    input dec_jal,\n    input dec_jalr,\n    input dec_bxx,\n    input [E203_XLEN-1:0] dec_bjp_imm,\n    input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n    input oitf_empty,\n    input ir_empty,\n    input ir_rs1en,\n    input jalr_rs1idx_cam_irrdidx,\n    input dec_i_valid,\n    input ir_valid_clr,\n    input [E203_XLEN-1:0] rf2bpu_x1,\n    input [E203_XLEN-1:0] rf2bpu_rs1,\n    output prdt_taken,\n    output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n    output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n    output bpu_wait,\n    output bpu2rf_rs1_ena\n);\n\n    // Internal signals\n    wire jalr_rs1xn_dep;\n    wire jalr_rs1xn_dep_ir_clr;\n    wire rs1xn_rdrf_set;\n    wire rs1xn_rdrf_clr;\n    wire rs1xn_rdrf_ena;\n    wire rs1xn_rdrf_nxt;\n    reg rs1xn_rdrf_r;\n\n    // Prediction logic\n    assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n    assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc : \n                             (dec_jalr_rs1idx == 0) ? 0 : \n                             (dec_jalr_rs1idx == 1) ? rf2bpu_x1 : rf2bpu_rs1;\n    assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n    // Dependency detection\n    assign jalr_rs1xn_dep = ~oitf_empty & ir_rs1en & jalr_rs1idx_cam_irrdidx;\n    assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n    // Read state management\n    assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                            (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                            (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n    assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n    assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n    assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n    // State update\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            rs1xn_rdrf_r <= 1'b0;\n        else if (rs1xn_rdrf_ena)\n            rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n    end\n\n    // Control signals\n    assign bpu_wait = rs1xn_rdrf_r;\n    assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 1, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 6, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 6, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL prediction\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Calculate prdt_pc_add_op1\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc :\n                           (dec_jalr_rs1idx == 0) ? 0 :\n                           (dec_jalr_rs1idx == 1) ? rf2bpu_x1 : rf2bpu_rs1;\n\n  // Calculate prdt_pc_add_op2\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency check for JALR\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // rs1xn_rdrf state machine\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else if (rs1xn_rdrf_ena)\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\n  // Control signals\n  assign bpu_wait = rs1xn_rdrf_r;\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 5, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for instruction forwarding and handshaking\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface signals\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 7, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the internal decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused signals\n    // .dec_misalgn(),\n    // .dec_buserr(),\n    // .dec_ilegl(),\n    // .dec_rs1x0(),\n    // .dec_rs2x0(),\n    // .dec_rdwen(),\n    // .dec_rdidx(),\n    // .dec_info(),\n    // .dec_imm(),\n    // .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 8, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 3, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_o_ready,\n  output wire ifu_o_valid,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire ifu_rsp_need_replay;\n  wire ifetch_replay_req;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n\n  // Instantiate submodules\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_r),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(ir_empty),\n    .ir_rs1en(ir_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Define the rest of the logic here...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 5, "code": "module e203_exu_alu_csrctrl (\n  input         csr_i_valid,\n  output        csr_i_ready,\n  input  [31:0] csr_i_rs1,\n  input  [11:0] csr_i_info,\n  input         csr_i_rdwen,\n  output        csr_ena,\n  output        csr_wr_en,\n  output        csr_rd_en,\n  output [11:0] csr_idx,\n  input         csr_access_ilgl,\n  input  [31:0] read_csr_dat,\n  output [31:0] wbck_csr_dat,\n  output        csr_o_valid,\n  input         csr_o_ready,\n  output [31:0] csr_o_wbck_wdat,\n  output        csr_o_wbck_err,\n  input         clk,\n  input         rst_n\n);\n\n  // Internal signals\n  wire csr_sel_nice;\n  wire nice_csr_valid;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr;\n  wire nice_csr_wr;\n  wire [31:0] nice_csr_wdata;\n  wire [31:0] nice_csr_rdata;\n  wire nice_xs_off;\n\n  // CSR enable logic\n  assign csr_ena = csr_i_valid && csr_o_ready;\n\n  // CSR read enable logic\n  assign csr_rd_en = csr_i_valid && (csr_i_info[0] || csr_i_info[1] || csr_i_info[2]);\n\n  // CSR write enable logic\n  assign csr_wr_en = csr_i_valid && (csr_i_info[0] || (csr_i_info[1] && !csr_i_info[5]) || (csr_i_info[2] && !csr_i_info[5]));\n\n  // CSR index logic\n  assign csr_idx = csr_i_info[11:0];\n\n  // Write-back data logic\n  assign wbck_csr_dat = (csr_i_info[0]) ? csr_i_rs1 :\n                        (csr_i_info[1]) ? (csr_i_rs1 | read_csr_dat) :\n                        (csr_i_info[2]) ? (~csr_i_rs1 & read_csr_dat) : 32'b0;\n\n  // CSR output valid logic\n  assign csr_o_valid = csr_i_valid && csr_o_ready;\n\n  // CSR output write-back data logic\n  assign csr_o_wbck_wdat = read_csr_dat;\n\n  // CSR output write-back error logic\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) && !nice_xs_off;\n  assign nice_csr_valid = csr_sel_nice && csr_i_valid && csr_o_ready;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 7, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  assign brchmis_flush_pc = \n    cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n    cmt_i_bjp & ~cmt_i_bjp_prdt ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    cmt_i_dret ? csr_dpc_r :\n    csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 5, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 7, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL and JALR prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Calculate prediction PC operands\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency detection for JALR\n  assign jalr_rs1xn_dep = ~oitf_empty & jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // BPU wait logic\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1xn_dep) |\n                    (dec_jalr & (dec_jalr_rs1idx != 0) & (jalr_rs1xn_dep | ~ir_empty));\n\n  // RS1 read enable logic\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) &\n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // RS1 read state management\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      rs1xn_rdrf_r <= 1'b0;\n    end else if (rs1xn_rdrf_ena) begin\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n    end\n  end\n\n  // RS1 read enable output\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 2, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  input ifu2itcm_icb_rsp_valid,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output ifu2itcm_icb_rsp_ready,\n  input ppi_icb_rsp_valid,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output ppi_icb_rsp_ready\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .inspect_pc(inspect_pc),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .pc_rtvec(pc_rtvec)\n  );\n\n  e203_exu u_e203_exu (\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle)\n  );\n\n  e203_lsu u_e203_lsu (\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r)\n  );\n\n  e203_biu u_e203_biu (\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 6, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 8, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n  \n  // LSU ICB Bus Interface\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  // External ICB Bus Interface (Optional)\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n\n  // DTCM RAM Interface\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signal declarations\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 10, "code": "module e203_biu (\n  output biu_active,\n  input  clk,\n  input  rst_n,\n  // LSU ICB Interface\n  input  lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input  lsu2biu_icb_cmd_read,\n  input  [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input  [1:0] lsu2biu_icb_cmd_burst,\n  input  [1:0] lsu2biu_icb_cmd_beat,\n  input  lsu2biu_icb_cmd_lock,\n  input  lsu2biu_icb_cmd_excl,\n  input  [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input  lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  // IFU ICB Interface\n  input  ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  ifu2biu_icb_cmd_read,\n  input  [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input  [1:0] ifu2biu_icb_cmd_burst,\n  input  [1:0] ifu2biu_icb_cmd_beat,\n  input  ifu2biu_icb_cmd_lock,\n  input  ifu2biu_icb_cmd_excl,\n  input  [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input  ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  // PPI ICB Interface\n  input  [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input  ppi_icb_enable,\n  input  ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output [1:0] ppi_icb_cmd_burst,\n  output [1:0] ppi_icb_cmd_beat,\n  output ppi_icb_cmd_lock,\n  output ppi_icb_cmd_excl,\n  output [1:0] ppi_icb_cmd_size,\n  input  ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input  ppi_icb_rsp_err,\n  input  ppi_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  // CLINT ICB Interface\n  input  [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input  clint_icb_enable,\n  input  clint_icb_cmd_ready,\n  output clint_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output clint_icb_cmd_read,\n  output [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output [1:0] clint_icb_cmd_burst,\n  output [1:0] clint_icb_cmd_beat,\n  output clint_icb_cmd_lock,\n  output clint_icb_cmd_excl,\n  output [1:0] clint_icb_cmd_size,\n  input  clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input  clint_icb_rsp_err,\n  input  clint_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  // PLIC ICB Interface\n  input  [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input  plic_icb_enable,\n  input  plic_icb_cmd_ready,\n  output plic_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output plic_icb_cmd_read,\n  output [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output [1:0] plic_icb_cmd_burst,\n  output [1:0] plic_icb_cmd_beat,\n  output plic_icb_cmd_lock,\n  output plic_icb_cmd_excl,\n  output [1:0] plic_icb_cmd_size,\n  input  plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input  plic_icb_rsp_err,\n  input  plic_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  // FIO ICB Interface\n  input  [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input  fio_icb_enable,\n  input  fio_icb_cmd_ready,\n  output fio_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output fio_icb_cmd_read,\n  output [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output [1:0] fio_icb_cmd_burst,\n  output [1:0] fio_icb_cmd_beat,\n  output fio_icb_cmd_lock,\n  output fio_icb_cmd_excl,\n  output [1:0] fio_icb_cmd_size,\n  input  fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input  fio_icb_rsp_err,\n  input  fio_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  // MEM ICB Interface\n  input  mem_icb_enable,\n  input  mem_icb_cmd_ready,\n  output mem_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output mem_icb_cmd_read,\n  output [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output [1:0] mem_icb_cmd_burst,\n  output [1:0] mem_icb_cmd_beat,\n  output mem_icb_cmd_lock,\n  output mem_icb_cmd_excl,\n  output [1:0] mem_icb_cmd_size,\n  input  mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input  mem_icb_rsp_err,\n  input  mem_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 5, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 16, "code": "module e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 4, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Internal signals\n  wire bjp_is_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_is_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_is_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_is_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_is_fencei= bjp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // Result retrieval and commit signals\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp = bjp_is_bxx | bjp_is_jump;\n  assign bjp_o_cmt_mret = bjp_is_mret;\n  assign bjp_o_cmt_dret = bjp_is_dret;\n  assign bjp_o_cmt_fencei = bjp_is_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 7, "code": "module e203_exu_longpwbck (\n  input  wire                  lsu_wbck_i_valid,\n  output wire                  lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire                  lsu_wbck_i_err,\n  input  wire                  lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire                  lsu_cmt_i_ld,\n  input  wire                  lsu_cmt_i_st,\n  output wire                  longp_wbck_o_valid,\n  input  wire                  longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0]  longp_wbck_o_wdat,\n  output wire [4:0]            longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire                  longp_wbck_o_rdfpu,\n  output wire                  longp_excp_o_valid,\n  input  wire                  longp_excp_o_ready,\n  output wire                  longp_excp_o_insterr,\n  output wire                  longp_excp_o_ld,\n  output wire                  longp_excp_o_st,\n  output wire                  longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire                  oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire                  oitf_ret_rdwen,\n  input  wire                  oitf_ret_rdfpu,\n  output wire                  oitf_ret_ena,\n  input  wire                  clk,\n  input  wire                  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  wire                  nice_longp_wbck_i_valid,\n  output wire                  nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire                  nice_longp_wbck_i_err\n`endif\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  // Arbitration logic\n  assign wbck_i_valid = lsu_wbck_i_valid\n`ifdef E203_HAS_NICE\n                      | nice_longp_wbck_i_valid\n`endif\n                      ;\n  assign wbck_i_ready = lsu_wbck_i_ready\n`ifdef E203_HAS_NICE\n                      & nice_longp_wbck_i_ready\n`endif\n                      ;\n  assign wbck_i_err = lsu_wbck_i_err\n`ifdef E203_HAS_NICE\n                    | nice_longp_wbck_i_err\n`endif\n                    ;\n  assign wbck_i_wdat = lsu_wbck_i_wdat\n`ifdef E203_HAS_NICE\n                     | nice_longp_wbck_i_wdat\n`endif\n                     ;\n  assign wbck_i_itag = lsu_wbck_i_itag\n`ifdef E203_HAS_NICE\n                     | nice_longp_wbck_i_itag\n`endif\n                     ;\n\n  // Write-back logic\n  assign longp_wbck_o_valid = wbck_i_valid & oitf_ret_rdwen & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0; // Example flag assignment\n\n  // Exception handling\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  // OITF control\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 1, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 2, "code": "module e203_exu_alu_lsuagu (\n  input  wire                 agu_i_valid,\n  output wire                 agu_i_ready,\n  input  wire [E203_XLEN-1:0] agu_i_rs1,\n  input  wire [E203_XLEN-1:0] agu_i_rs2,\n  input  wire [E203_XLEN-1:0] agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                 agu_i_longpipe,\n  input  wire                 flush_req,\n  input  wire                 flush_pulse,\n  output wire                 amo_wait,\n  input  wire                 oitf_empty,\n  output wire                 agu_o_valid,\n  input  wire                 agu_o_ready,\n  output wire [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output wire                 agu_o_wbck_err,\n  output wire                 agu_o_cmt_misalgn,\n  output wire                 agu_o_cmt_ld,\n  output wire                 agu_o_cmt_stamo,\n  output wire                 agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                 agu_icb_cmd_valid,\n  input  wire                 agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                 agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                 agu_icb_cmd_back2agu,\n  output wire                 agu_icb_cmd_lock,\n  output wire                 agu_icb_cmd_excl,\n  output wire [1:0]           agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                 agu_icb_cmd_usign,\n  input  wire                 agu_icb_rsp_valid,\n  output wire                 agu_icb_rsp_ready,\n  input  wire                 agu_icb_rsp_err,\n  input  wire                 agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0] agu_req_alu_op1,\n  output wire [E203_XLEN-1:0] agu_req_alu_op2,\n  output wire                 agu_req_alu_swap,\n  output wire                 agu_req_alu_add,\n  output wire                 agu_req_alu_and,\n  output wire                 agu_req_alu_or,\n  output wire                 agu_req_alu_xor,\n  output wire                 agu_req_alu_max,\n  output wire                 agu_req_alu_min,\n  output wire                 agu_req_alu_maxu,\n  output wire                 agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire                 agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0] agu_sbf_0_r,\n  output wire                 agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0] agu_sbf_1_r,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 3, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR Access Logic\n  assign csr_access_ilgl = 1'b0; // No illegal access in this design\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h344: read_csr_dat = mip;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // CSR Write Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= {E203_XLEN{1'b0}};\n      mie <= {E203_XLEN{1'b0}};\n      mip <= {E203_XLEN{1'b0}};\n      mtvec <= {E203_XLEN{1'b0}};\n      mscratch <= {E203_XLEN{1'b0}};\n      mepc <= {E203_PC_SIZE{1'b0}};\n      mcause <= {E203_XLEN{1'b0}};\n      mbadaddr <= {E203_XLEN{1'b0}};\n      mcycle <= {E203_XLEN{1'b0}};\n      mcycleh <= {E203_XLEN{1'b0}};\n      minstret <= {E203_XLEN{1'b0}};\n      minstreth <= {E203_XLEN{1'b0}};\n      counterstop <= {E203_XLEN{1'b0}};\n      mcgstop <= {E203_XLEN{1'b0}};\n      itcmnohold <= {E203_XLEN{1'b0}};\n      mdvnob2b <= {E203_XLEN{1'b0}};\n    end else if (csr_ena && csr_wr_en) begin\n      case (csr_idx)\n        12'h300: mstatus <= wbck_csr_dat;\n        12'h304: mie <= wbck_csr_dat;\n        12'h344: mip <= wbck_csr_dat;\n        12'h305: mtvec <= wbck_csr_dat;\n        12'h340: mscratch <= wbck_csr_dat;\n        12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n        12'h342: mcause <= wbck_csr_dat;\n        12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n        12'hB00: mcycle <= wbck_csr_dat;\n        12'hB80: mcycleh <= wbck_csr_dat;\n        12'hB02: minstret <= wbck_csr_dat;\n        12'hB82: minstreth <= wbck_csr_dat;\n        12'hBFF: counterstop <= wbck_csr_dat;\n      endcase\n    end\n  end\n\n  // Other logic and assignments\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 2, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal signals and logic implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 7, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n  // Internal logic and submodule instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 7, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 8, "code": "module e203_exu_branchslv (\n  input wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input wire cmt_i_rv32,\n  input wire cmt_i_dret,\n  input wire cmt_i_mret,\n  input wire cmt_i_fencei,\n  input wire cmt_i_bjp,\n  input wire cmt_i_bjp_prdt,\n  input wire cmt_i_bjp_rslv,\n  input wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input wire [E203_XLEN-1:0] cmt_i_imm,\n  input wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input wire nonalu_excpirq_flush_req_raw,\n  input wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input wire clk,\n  input wire rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) |\n                    cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~flush_need | (flush_need & brchmis_flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n                            (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n                            (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n                            (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                            cmt_i_dret ? csr_dpc_r : csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 15, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 6, "code": "module e203_exu_alu_csrctrl (\n  input         csr_i_valid,\n  output        csr_i_ready,\n  input  [31:0] csr_i_rs1,\n  input  [31:0] csr_i_info,\n  input         csr_i_rdwen,\n  output        csr_ena,\n  output        csr_wr_en,\n  output        csr_rd_en,\n  output [11:0] csr_idx,\n  input         csr_access_ilgl,\n  input  [31:0] read_csr_dat,\n  output [31:0] wbck_csr_dat,\n  output        csr_o_valid,\n  input         csr_o_ready,\n  output [31:0] csr_o_wbck_wdat,\n  output        csr_o_wbck_err,\n  input         clk,\n  input         rst_n\n);\n\n  // Internal signals\n  wire csr_sel_nice;\n  wire nice_csr_valid;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr;\n  wire nice_csr_wr;\n  wire [31:0] nice_csr_wdata;\n  wire [31:0] nice_csr_rdata;\n  wire nice_xs_off;\n\n  // CSR control logic\n  assign csr_ena = csr_i_valid && csr_o_ready;\n  assign csr_wr_en = csr_i_valid && csr_i_rdwen;\n  assign csr_rd_en = csr_i_valid && !csr_i_rdwen;\n  assign csr_idx = csr_i_info[11:0];\n  assign wbck_csr_dat = csr_i_rs1;\n  assign csr_o_valid = csr_i_valid && csr_o_ready;\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) && !nice_xs_off;\n  assign nice_csr_valid = csr_sel_nice && csr_i_valid && csr_o_ready;\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 17, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 8, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 4, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signal declarations\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      misa <= 0;\n      mvendorid <= 536;\n      marchid <= 'hE203;\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'h344: mip <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Output assignments\n  assign csr_access_ilgl = 0;\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = 0;\n  assign wr_dpc_ena = 0;\n  assign wr_dscratch_ena = 0;\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 9, "code": "module e203_ifu_minidec #(\n    parameter E203_INSTR_SIZE = 32,\n    parameter E203_RFIDX_WIDTH = 5,\n    parameter E203_XLEN = 32\n)(\n    input  [E203_INSTR_SIZE-1:0] instr,\n    output                       dec_rs1en,\n    output                       dec_rs2en,\n    output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n    output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n    output                       dec_mulhsu,\n    output                       dec_mul,\n    output                       dec_div,\n    output                       dec_rem,\n    output                       dec_divu,\n    output                       dec_remu,\n    output                       dec_rv32,\n    output                       dec_bjp,\n    output                       dec_jal,\n    output                       dec_jalr,\n    output                       dec_bxx,\n    output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n    output [E203_XLEN-1:0]       dec_bjp_imm\n);\n\n    // Internal signals\n    wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n    wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n    wire [E203_XLEN-1:0]        bjp_imm;\n\n    // Instantiate the internal decoder module\n    e203_exu_decode u_e203_exu_decode (\n        .i_instr(instr),\n        .i_pc(0),\n        .i_prdt_taken(0),\n        .i_muldiv_b2b(0),\n        .i_misalgn(0),\n        .i_buserr(0),\n        .dbg_mode(0),\n        .dec_rs1en(dec_rs1en),\n        .dec_rs2en(dec_rs2en),\n        .dec_rs1idx(rs1idx),\n        .dec_rs2idx(rs2idx),\n        .dec_mulhsu(dec_mulhsu),\n        .dec_mul(dec_mul),\n        .dec_div(dec_div),\n        .dec_rem(dec_rem),\n        .dec_divu(dec_divu),\n        .dec_remu(dec_remu),\n        .dec_rv32(dec_rv32),\n        .dec_bjp(dec_bjp),\n        .dec_jal(dec_jal),\n        .dec_jalr(dec_jalr),\n        .dec_bxx(dec_bxx),\n        .dec_jalr_rs1idx(dec_jalr_rs1idx),\n        .dec_bjp_imm(bjp_imm),\n        .dec_misalgn(),\n        .dec_buserr(),\n        .dec_ilegl(),\n        .dec_rs1x0(),\n        .dec_rs2x0(),\n        .dec_rdwen(),\n        .dec_rdidx(),\n        .dec_info(),\n        .dec_imm(),\n        .dec_pc()\n    );\n\n    // Assign outputs\n    assign dec_rs1idx = rs1idx;\n    assign dec_rs2idx = rs2idx;\n    assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 8, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  `ifdef E203_HAS_NICE\n  input  wire nice_mem_holdup,\n  `endif\n\n  `ifdef E203_HAS_ITCM\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n  `endif\n\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n  // LSU implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 8, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n// Implementation of the decode logic goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 3, "code": "module e203_exu_alu_lsuagu (\n  input  wire                  agu_i_valid,\n  output wire                  agu_i_ready,\n  input  wire [E203_XLEN-1:0]  agu_i_rs1,\n  input  wire [E203_XLEN-1:0]  agu_i_rs2,\n  input  wire [E203_XLEN-1:0]  agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                  agu_i_longpipe,\n  input  wire                  flush_req,\n  input  wire                  flush_pulse,\n  output wire                  amo_wait,\n  input  wire                  oitf_empty,\n  output wire                  agu_o_valid,\n  input  wire                  agu_o_ready,\n  output wire [E203_XLEN-1:0]  agu_o_wbck_wdat,\n  output wire                  agu_o_wbck_err,\n  output wire                  agu_o_cmt_misalgn,\n  output wire                  agu_o_cmt_ld,\n  output wire                  agu_o_cmt_stamo,\n  output wire                  agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                  agu_icb_cmd_valid,\n  input  wire                  agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                  agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]  agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                  agu_icb_cmd_back2agu,\n  output wire                  agu_icb_cmd_lock,\n  output wire                  agu_icb_cmd_excl,\n  output wire [1:0]            agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                  agu_icb_cmd_usign,\n  input  wire                  agu_icb_rsp_valid,\n  output wire                  agu_icb_rsp_ready,\n  input  wire                  agu_icb_rsp_err,\n  input  wire                  agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]  agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  output wire                  agu_req_alu_swap,\n  output wire                  agu_req_alu_add,\n  output wire                  agu_req_alu_and,\n  output wire                  agu_req_alu_or,\n  output wire                  agu_req_alu_xor,\n  output wire                  agu_req_alu_max,\n  output wire                  agu_req_alu_min,\n  output wire                  agu_req_alu_maxu,\n  output wire                  agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire                  agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_0_r,\n  output wire                  agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 10, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused signals are not connected\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 11, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output [1:0] ppi_icb_cmd_burst,\n  output [1:0] ppi_icb_cmd_beat,\n  output ppi_icb_cmd_lock,\n  output ppi_icb_cmd_excl,\n  output [1:0] ppi_icb_cmd_size,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input ppi_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output clint_icb_cmd_read,\n  output [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output [1:0] clint_icb_cmd_burst,\n  output [1:0] clint_icb_cmd_beat,\n  output clint_icb_cmd_lock,\n  output clint_icb_cmd_excl,\n  output [1:0] clint_icb_cmd_size,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input clint_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output plic_icb_cmd_read,\n  output [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output [1:0] plic_icb_cmd_burst,\n  output [1:0] plic_icb_cmd_beat,\n  output plic_icb_cmd_lock,\n  output plic_icb_cmd_excl,\n  output [1:0] plic_icb_cmd_size,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input plic_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output fio_icb_cmd_read,\n  output [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output [1:0] fio_icb_cmd_burst,\n  output [1:0] fio_icb_cmd_beat,\n  output fio_icb_cmd_lock,\n  output fio_icb_cmd_excl,\n  output [1:0] fio_icb_cmd_size,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input fio_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output mem_icb_cmd_read,\n  output [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output [1:0] mem_icb_cmd_burst,\n  output [1:0] mem_icb_cmd_beat,\n  output mem_icb_cmd_lock,\n  output mem_icb_cmd_excl,\n  output [1:0] mem_icb_cmd_size,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input mem_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 5, "code": "module e203_exu_csr (\n  input  wire        csr_ena,\n  input  wire        csr_wr_en,\n  input  wire        csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire        csr_access_ilgl,\n  output wire        tm_stop,\n  output wire        core_cgstop,\n  output wire        tcm_cgstop,\n  output wire        itcm_nohold,\n  output wire        mdv_nob2b,\n  output wire [31:0] read_csr_dat,\n  input  wire [31:0] wbck_csr_dat,\n  input  wire [31:0] core_mhartid,\n  input  wire        ext_irq_r,\n  input  wire        sft_irq_r,\n  input  wire        tmr_irq_r,\n  output wire        status_mie_r,\n  output wire        mtie_r,\n  output wire        msie_r,\n  output wire        meie_r,\n  output wire        wr_dcsr_ena,\n  output wire        wr_dpc_ena,\n  output wire        wr_dscratch_ena,\n  input  wire [31:0] dcsr_r,\n  input  wire [31:0] dpc_r,\n  input  wire [31:0] dscratch_r,\n  output wire        u_mode,\n  output wire        s_mode,\n  output wire        h_mode,\n  output wire        m_mode,\n  input  wire [31:0] cmt_badaddr,\n  input  wire        cmt_badaddr_ena,\n  input  wire [31:0] cmt_epc,\n  input  wire        cmt_epc_ena,\n  input  wire [31:0] cmt_cause,\n  input  wire        cmt_cause_ena,\n  input  wire        cmt_status_ena,\n  input  wire        cmt_instret_ena,\n  input  wire        cmt_mret_ena,\n  output wire [31:0] csr_epc_r,\n  output wire [31:0] csr_dpc_r,\n  output wire [31:0] csr_mtvec_r,\n  input  wire        clk_aon,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal signals and registers\n  reg [31:0] mstatus;\n  reg [31:0] mie;\n  reg [31:0] mip;\n  reg [31:0] mtvec;\n  reg [31:0] mscratch;\n  reg [31:0] mepc;\n  reg [31:0] mcause;\n  reg [31:0] mbadaddr;\n  reg [31:0] mcycle;\n  reg [31:0] mcycleh;\n  reg [31:0] minstret;\n  reg [31:0] minstreth;\n  reg [31:0] counterstop;\n  reg [31:0] mcgstop;\n  reg [31:0] itcmnohold;\n  reg [31:0] mdvnob2b;\n  reg [31:0] dcsr;\n  reg [31:0] dpc;\n  reg [31:0] dscratch;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'b0;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mtvec <= 32'b0;\n      mscratch <= 32'b0;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      mcycle <= 32'b0;\n      mcycleh <= 32'b0;\n      minstret <= 32'b0;\n      minstreth <= 32'b0;\n      counterstop <= 32'b0;\n      mcgstop <= 32'b0;\n      itcmnohold <= 32'b0;\n      mdvnob2b <= 32'b0;\n      dcsr <= 32'b0;\n      dpc <= 32'b0;\n      dscratch <= 32'b0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          12'h7B0: dcsr <= wbck_csr_dat;\n          12'h7B1: dpc <= wbck_csr_dat;\n          12'h7B2: dscratch <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      12'h7B0: read_csr_dat = dcsr;\n      12'h7B1: read_csr_dat = dpc;\n      12'h7B2: read_csr_dat = dscratch;\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // Output assignments\n  assign csr_access_ilgl = 1'b0;\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7B0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7B1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7B2);\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 7, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] oitf_pc [E203_OITF_DEPTH-1:0];\n  reg oitf_rdwen [E203_OITF_DEPTH-1:0];\n  reg oitf_rdfpu [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n  assign dis_ptr = dis_ptr_r;\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n  assign ret_ptr = ret_ptr_r;\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen & ~oitf_rdfpu);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen & ~oitf_rdfpu);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen & ~oitf_rdfpu);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\n  // Full and empty conditions\n  assign oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 5, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Commit Signals\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 2, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire itcm_nohold,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input  wire ifu2itcm_icb_cmd_ready,\n  input  wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire ifu2biu_icb_cmd_ready,\n  input  wire ifu2biu_icb_rsp_valid,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input  wire ifu_halt_req,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 9, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n  // Internal signals and logic to decode instructions\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 11, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 9, "code": "module e203_lsu(\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic\n  // Additional signals for other ICB interfaces\n);\n\n// Internal logic and submodule instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 5, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 7, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? \n                                 {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : \n                                 csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n                     csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen |\n                     csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                     csr_i_info[E203_DECINFO_CSR_CSRRC]\n                   );\n\n  assign csr_wr_en = csr_i_valid & (\n                     csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                     (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_zero) |\n                     (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_zero)\n                   );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_i_valid & csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_sel_nice & csr_i_valid & csr_o_ready;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  assign csr_o_valid = csr_sel_nice ? (csr_i_valid & nice_csr_ready) : csr_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 6, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Output Assignments\n  assign csr_access_ilgl = 0;\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = 0;\n  assign wr_dpc_ena = 0;\n  assign wr_dscratch_ena = 0;\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 4, "code": "module e203_exu_alu_lsuagu (\n  input  wire agu_i_valid,\n  output wire agu_i_ready,\n  input  wire [E203_XLEN-1:0] agu_i_rs1,\n  input  wire [E203_XLEN-1:0] agu_i_rs2,\n  input  wire [E203_XLEN-1:0] agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire agu_i_longpipe,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  output wire agu_o_valid,\n  input  wire agu_o_ready,\n  output wire [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output wire agu_o_wbck_err,\n  output wire agu_o_cmt_misalgn,\n  output wire agu_o_cmt_ld,\n  output wire agu_o_cmt_stamo,\n  output wire agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_cmd_usign,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0] agu_req_alu_op1,\n  output wire [E203_XLEN-1:0] agu_req_alu_op2,\n  output wire agu_req_alu_swap,\n  output wire agu_req_alu_add,\n  output wire agu_req_alu_and,\n  output wire agu_req_alu_or,\n  output wire agu_req_alu_xor,\n  output wire agu_req_alu_max,\n  output wire agu_req_alu_min,\n  output wire agu_req_alu_maxu,\n  output wire agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0] agu_sbf_0_r,\n  output wire agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0] agu_sbf_1_r,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 2, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [12-1:0]            csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [2-1:0]             agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 8, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n  `ifdef E203_HAS_NICE\n  ,input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n  `endif\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 6, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic, if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  assign read_src1_dat = (read_src1_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? {E203_XLEN{1'b0}} : regfile[read_src2_idx];\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 10, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n  // Decode logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 9, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Flush Need Generation\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                    cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush Target Calculation\n  wire [E203_PC_SIZE-1:0] flush_target = \n    cmt_i_dret ? csr_dpc_r :\n    cmt_i_mret ? csr_epc_r :\n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline Flush Control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Controls the ready signal for the instruction\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & brchmis_flush_ack);\n\n  // Special Signal Commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 3, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 11, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0]    i_pc,\n  input                        i_prdt_taken,\n  input                        i_misalgn,\n  input                        i_buserr,\n  input                        i_muldiv_b2b,\n  input                        dbg_mode,\n  output                       dec_rs1x0,\n  output                       dec_rs2x0,\n  output                       dec_rs1en,\n  output                       dec_rs2en,\n  output                       dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0]       dec_imm,\n  output [E203_PC_SIZE-1:0]    dec_pc,\n  output                       dec_misalgn,\n  output                       dec_buserr,\n  output                       dec_ilegl,\n  output                       dec_mulhsu,\n  output                       dec_mul,\n  output                       dec_div,\n  output                       dec_rem,\n  output                       dec_divu,\n  output                       dec_remu,\n  output                       dec_rv32,\n  output                       dec_bjp,\n  output                       dec_jal,\n  output                       dec_jalr,\n  output                       dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0]       dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input                       nice_xs_off,\n  output                      dec_nice,\n  output                      nice_cmt_off_ilgl_o\n`endif\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 10, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) | \n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  // Ready signal control\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_req & brchmis_flush_ack);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 11, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush Need Generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush Target Calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline Flush Control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special Signal Commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  // Ready Signal Control\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_req & brchmis_flush_ack);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 2, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 12, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output [1:0] ppi_icb_cmd_burst,\n  output [1:0] ppi_icb_cmd_beat,\n  output ppi_icb_cmd_lock,\n  output ppi_icb_cmd_excl,\n  output [1:0] ppi_icb_cmd_size,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input ppi_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output clint_icb_cmd_read,\n  output [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output [1:0] clint_icb_cmd_burst,\n  output [1:0] clint_icb_cmd_beat,\n  output clint_icb_cmd_lock,\n  output clint_icb_cmd_excl,\n  output [1:0] clint_icb_cmd_size,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input clint_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output plic_icb_cmd_read,\n  output [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output [1:0] plic_icb_cmd_burst,\n  output [1:0] plic_icb_cmd_beat,\n  output plic_icb_cmd_lock,\n  output plic_icb_cmd_excl,\n  output [1:0] plic_icb_cmd_size,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input plic_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output fio_icb_cmd_read,\n  output [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output [1:0] fio_icb_cmd_burst,\n  output [1:0] fio_icb_cmd_beat,\n  output fio_icb_cmd_lock,\n  output fio_icb_cmd_excl,\n  output [1:0] fio_icb_cmd_size,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input fio_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output mem_icb_cmd_read,\n  output [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output [1:0] mem_icb_cmd_burst,\n  output [1:0] mem_icb_cmd_beat,\n  output mem_icb_cmd_lock,\n  output mem_icb_cmd_excl,\n  output [1:0] mem_icb_cmd_size,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input mem_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 9, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n  wire wbck_i_buserr;\n  wire [E203_ADDR_SIZE-1:0] wbck_i_badaddr;\n  wire wbck_i_ld;\n  wire wbck_i_st;\n\n  // Arbitration logic\n  assign wbck_i_valid = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_valid : nice_longp_wbck_i_valid;\n  assign wbck_i_wdat = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_wdat : nice_longp_wbck_i_wdat;\n  assign wbck_i_itag = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_itag : nice_longp_wbck_i_itag;\n  assign wbck_i_err = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_wbck_i_err : nice_longp_wbck_i_err;\n  assign wbck_i_buserr = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_cmt_i_buserr : 1'b0;\n  assign wbck_i_badaddr = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_cmt_i_badaddr : {E203_ADDR_SIZE{1'b0}};\n  assign wbck_i_ld = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_cmt_i_ld : 1'b0;\n  assign wbck_i_st = (oitf_ret_ptr == lsu_wbck_i_itag) ? lsu_cmt_i_st : 1'b0;\n\n  // Write-back and exception logic\n  assign lsu_wbck_i_ready = wbck_i_ready;\n  assign nice_longp_wbck_i_ready = wbck_i_ready;\n\n  assign longp_wbck_o_valid = wbck_i_valid && !wbck_i_err && oitf_ret_rdwen;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = {wbck_i_ld, wbck_i_st, wbck_i_err, wbck_i_buserr, 1'b0};\n\n  assign longp_excp_o_valid = wbck_i_valid && wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = wbck_i_ld;\n  assign longp_excp_o_st = wbck_i_st;\n  assign longp_excp_o_buserr = wbck_i_buserr;\n  assign longp_excp_o_badaddr = wbck_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign wbck_i_ready = (longp_wbck_o_ready && !wbck_i_err) || (longp_excp_o_ready && wbck_i_err);\n  assign oitf_ret_ena = wbck_i_valid && wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 3, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 10, "code": "module e203_srams (\n    input wire itcm_ram_sd,\n    input wire itcm_ram_ds,\n    input wire itcm_ram_ls,\n    input wire itcm_ram_cs,\n    input wire itcm_ram_we,\n    input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n    input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n    input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n    output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n    input wire clk_itcm_ram,\n    input wire rst_itcm,\n\n    input wire dtcm_ram_sd,\n    input wire dtcm_ram_ds,\n    input wire dtcm_ram_ls,\n    input wire dtcm_ram_cs,\n    input wire dtcm_ram_we,\n    input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n    input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n    input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n    output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n    input wire clk_dtcm_ram,\n    input wire rst_dtcm\n);\n\ngenerate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n        // ITCM RAM instantiation\n    end\nendgenerate\n\ngenerate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n        // DTCM RAM instantiation\n    end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 13, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  \n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  \n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  \n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  \n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  \n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  \n  // MEM ICB Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic\n// ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 9, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n        end else begin\n            always @(posedge clk) begin\n                rst_sync <= {RST_SYNC_LEVEL{!rst_n}};\n            end\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? !rst_n : rst_sync[RST_SYNC_LEVEL-1];\n    assign rst_itcm = test_mode ? !rst_n : rst_sync[RST_SYNC_LEVEL-1];\n    assign rst_dtcm = test_mode ? !rst_n : rst_sync[RST_SYNC_LEVEL-1];\n    assign rst_aon = test_mode ? !rst_n : rst_sync[RST_SYNC_LEVEL-1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 2, "code": "module e203_cpu (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire [E203_PC_SIZE-1:0] pc_rtvec,\n    input wire [E203_HART_ID_W-1:0] core_mhartid,\n    input wire dbg_irq_a,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire [E203_PC_SIZE-1:0] dcsr_r,\n    input wire [E203_PC_SIZE-1:0] dpc_r,\n    input wire [31:0] dscratch_r,\n    input wire dbg_mode,\n    input wire dbg_halt_r,\n    input wire dbg_step_r,\n    input wire dbg_ebreakm_r,\n    input wire dbg_stopcycle,\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n    input wire ext2dtcm_icb_cmd_valid,\n    output wire ext2dtcm_icb_cmd_ready,\n    input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n    input wire ext2dtcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n    output wire ext2dtcm_icb_rsp_valid,\n    input wire ext2dtcm_icb_rsp_ready,\n    output wire ext2dtcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n    input wire ppi_icb_enable,\n    output wire ppi_icb_cmd_valid,\n    input wire ppi_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n    output wire ppi_icb_cmd_read,\n    output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n    input wire ppi_icb_rsp_valid,\n    output wire ppi_icb_rsp_ready,\n    input wire ppi_icb_rsp_err,\n    input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n    input wire clint_icb_enable,\n    output wire clint_icb_cmd_valid,\n    input wire clint_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n    output wire clint_icb_cmd_read,\n    output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n    input wire clint_icb_rsp_valid,\n    output wire clint_icb_rsp_ready,\n    input wire clint_icb_rsp_err,\n    input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n    input wire plic_icb_enable,\n    output wire plic_icb_cmd_valid,\n    input wire plic_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n    output wire plic_icb_cmd_read,\n    output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n    input wire plic_icb_rsp_valid,\n    output wire plic_icb_rsp_ready,\n    input wire plic_icb_rsp_err,\n    input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n    input wire fio_icb_enable,\n    output wire fio_icb_cmd_valid,\n    input wire fio_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n    output wire fio_icb_cmd_read,\n    output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n    input wire fio_icb_rsp_valid,\n    output wire fio_icb_rsp_ready,\n    input wire fio_icb_rsp_err,\n    input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n    input wire mem_icb_enable,\n    output wire mem_icb_cmd_valid,\n    input wire mem_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n    output wire mem_icb_cmd_read,\n    output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n    input wire mem_icb_rsp_valid,\n    output wire mem_icb_rsp_ready,\n    input wire mem_icb_rsp_err,\n    input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n    input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n    input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n    output wire inspect_pc,\n    output wire inspect_dbg_irq,\n    output wire inspect_mem_cmd_valid,\n    output wire inspect_mem_cmd_ready,\n    output wire inspect_mem_rsp_valid,\n    output wire inspect_mem_rsp_ready,\n    output wire inspect_core_clk,\n    output wire core_csr_clk,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire core_wfi,\n    output wire tm_stop,\n    output wire [E203_PC_SIZE-1:0] cmt_dpc,\n    output wire cmt_dpc_ena,\n    output wire [2:0] cmt_dcause,\n    output wire cmt_dcause_ena,\n    output wire dbg_irq_r,\n    output wire wr_dcsr_ena,\n    output wire wr_dpc_ena,\n    output wire wr_dscratch_ena,\n    output wire [31:0] wr_csr_nxt,\n    output wire itcm_ls,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n    output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n    output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n    output wire clk_itcm_ram,\n    output wire dtcm_ls,\n    output wire dtcm_ram_cs,\n    output wire dtcm_ram_we,\n    output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n    output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n    output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n    output wire clk_dtcm_ram\n);\n\n// Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 10, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n`ifdef E203_HAS_ITCM\n    output wire rst_itcm,\n`endif\n`ifdef E203_HAS_DTCM\n    output wire rst_dtcm,\n`endif\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin : master_mode\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin : slave_mode\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    wire rst_final_n = test_mode ? rst_n : rst_sync_n;\n\n    assign rst_core = ~rst_final_n;\n`ifdef E203_HAS_ITCM\n    assign rst_itcm = ~rst_final_n;\n`endif\n`ifdef E203_HAS_DTCM\n    assign rst_dtcm = ~rst_final_n;\n`endif\n    assign rst_aon = ~rst_final_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 9, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 10, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n// Internal logic and module instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 4, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram,\n  output wire itcm_active\n);\n\n// Internal signals and module instantiations would go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 6, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Operation Requests\n  wire is_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire is_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire is_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire is_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire is_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire is_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire is_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = is_beq;\n  assign bjp_req_alu_cmp_ne  = is_bne;\n  assign bjp_req_alu_cmp_lt  = is_blt;\n  assign bjp_req_alu_cmp_gt  = is_bgt;\n  assign bjp_req_alu_cmp_ltu = is_bltu;\n  assign bjp_req_alu_cmp_gtu = is_bgtu;\n  assign bjp_req_alu_add     = is_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 1, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 9, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 10, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n`endif\n);\n\n  // Internal logic for write-back and exception handling\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 12, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire mulhsu, mul, div, rem, divu, remu;\n  wire rv32, bjp, jal, jalr, bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Instantiate the internal decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(rs1idx),\n    .dec_rs2idx(rs2idx),\n    .dec_mulhsu(mulhsu),\n    .dec_mul(mul),\n    .dec_div(div),\n    .dec_rem(rem),\n    .dec_divu(divu),\n    .dec_remu(remu),\n    .dec_rv32(rv32),\n    .dec_bjp(bjp),\n    .dec_jal(jal),\n    .dec_jalr(jalr),\n    .dec_bxx(bxx),\n    .dec_jalr_rs1idx(jalr_rs1idx),\n    .dec_bjp_imm(bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\n  // Connect internal signals to outputs\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 5, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 7, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake Logic\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Request Generation\n  wire bjp_is_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 4, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n\n  // Handshake logic\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  // Halt control logic\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  // Pipeline flush control\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (clk, rst_n, dly_flush_ena, dly_flush_nxt, dly_flush_r);\n\n  // IR control\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (clk, rst_n, ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r);\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (clk, rst_n, ir_valid_set, ifu_err_nxt, ifu_err_r);\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (clk, rst_n, ir_valid_set, prdt_taken, ifu_prdt_taken_r);\n  sirv_gnrl_dfflr #(1) ifu_muldiv_b2b_dfflr (clk, rst_n, ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r);\n\n  // Instruction storage\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (clk, rst_n, ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r[31:16]);\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (clk, rst_n, ir_lo_ena, ifu_ir_nxt[15:0], ifu_ir_r[15:0]);\n\n  // Source register index storage\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (clk, rst_n, ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r);\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (clk, rst_n, ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r);\n\n  // PC control logic\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (clk, rst_n, ir_pc_vld_set, ifu_pc_nxt, ifu_pc_r);\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  // Outstanding request control\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (clk, rst_n, out_flag_ena, out_flag_nxt, out_flag_r);\n\n  // PC pending state control\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (clk, rst_n, pc_newpend_ena, pc_newpend_nxt, pc_newpend_r);\n\n  // Fetch request generation\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  assign ifu_req_pc = pc_r;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  // Response processing control\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Halt acknowledgment output\n  assign ifu_halt_ack = halt_ack_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 12, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n  `endif\n);\n  // Decode logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 4, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 3, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 3, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]          muldiv_sbf_0_r,\n  output wire [32:0]          muldiv_sbf_1_r\n);\n\n  // ALU operations\n  wire [E203_XLEN-1:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_add_res)\n                         | ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res)\n                         | ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res)\n                         | ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res)\n                         | ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res)\n                         | ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res)\n                         | ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)\n                         | ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operations\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_eq = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_eq;\n\n  // AGU operations\n  wire [E203_XLEN-1:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operations\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = (muldiv_req_alu_add ? muldiv_add_res : muldiv_sub_res);\n\n  // Shared buffers\n  reg [32:0] sbf_0_r;\n  reg [32:0] sbf_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 33'b0;\n      sbf_1_r <= 33'b0;\n    end else begin\n      if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 9, "code": "module e203_dtcm_ctrl (\n  input  wire                          clk,\n  input  wire                          rst_n,\n  input  wire                          test_mode,\n  input  wire                          tcm_cgstop,\n  output wire                          dtcm_active,\n\n  input  wire                          lsu2dtcm_icb_cmd_valid,\n  output wire                          lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                          lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]                   lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                    lsu2dtcm_icb_cmd_wmask,\n  output wire                          lsu2dtcm_icb_rsp_valid,\n  input  wire                          lsu2dtcm_icb_rsp_ready,\n  output wire                          lsu2dtcm_icb_rsp_err,\n  output wire [31:0]                   lsu2dtcm_icb_rsp_rdata,\n\n  input  wire                          ext2dtcm_icb_cmd_valid,\n  output wire                          ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                          ext2dtcm_icb_cmd_read,\n  input  wire [31:0]                   ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]                    ext2dtcm_icb_cmd_wmask,\n  output wire                          ext2dtcm_icb_rsp_valid,\n  input  wire                          ext2dtcm_icb_rsp_ready,\n  output wire                          ext2dtcm_icb_rsp_err,\n  output wire [31:0]                   ext2dtcm_icb_rsp_rdata,\n\n  output wire                          dtcm_ram_cs,\n  output wire                          dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0]   dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0]   dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]   dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0]   dtcm_ram_dout,\n  output wire                          clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (DTCM_ARBT_I_NUM),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({ext2dtcm_icb_cmd_read,  lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr  ({ext2dtcm_icb_cmd_addr,  lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata ({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({ext2dtcm_icb_rsp_err,   lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata ({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 11, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  // Arbitration logic\n  assign wbck_i_valid = (lsu_wbck_i_valid && (oitf_ret_ptr == lsu_wbck_i_itag)) ||\n                        (nice_longp_wbck_i_valid && (oitf_ret_ptr == nice_longp_wbck_i_itag));\n  assign wbck_i_ready = (wbck_i_valid && longp_wbck_o_ready && longp_excp_o_ready);\n  assign wbck_i_err = (lsu_wbck_i_valid && lsu_wbck_i_err) ||\n                      (nice_longp_wbck_i_valid && nice_longp_wbck_i_err);\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat : nice_longp_wbck_i_wdat;\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag : nice_longp_wbck_i_itag;\n\n  // Write-back logic\n  assign longp_wbck_o_valid = wbck_i_valid && !wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0; // Placeholder for additional flags\n\n  // Exception handling\n  assign longp_excp_o_valid = wbck_i_valid && wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  // OITF control\n  assign oitf_ret_ena = wbck_i_ready;\n\n  // Ready signals\n  assign lsu_wbck_i_ready = wbck_i_ready && (oitf_ret_ptr == lsu_wbck_i_itag);\n  assign nice_longp_wbck_i_ready = wbck_i_ready && (oitf_ret_ptr == nice_longp_wbck_i_itag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 18, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 12, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] next_pc;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign brchmis_flush_add_op1 = (cmt_i_dret) ? csr_dpc_r : \n                                 (cmt_i_mret) ? csr_epc_r : \n                                 cmt_i_pc;\n  assign brchmis_flush_add_op2 = (cmt_i_bjp & ~cmt_i_bjp_prdt) ? cmt_i_imm : \n                                 (cmt_i_rv32) ? 32'd4 : 32'd2;\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  // Ready signal control\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_req & brchmis_flush_ack);\n\n  // brchmis_flush_pc calculation\n  assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n                            (cmt_i_pc + ((cmt_i_rv32) ? 32'd4 : 32'd2)) :\n                            (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n                            (cmt_i_pc + cmt_i_imm) :\n                            (cmt_i_dret) ? csr_dpc_r : csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 19, "code": "module e203_extend_csr (\n  input wire clk,\n  input wire rst_n,\n  input wire nice_csr_valid,\n  output wire nice_csr_ready,\n  input wire [31:0] nice_csr_addr,\n  input wire nice_csr_wr,\n  input wire [31:0] nice_csr_wdata,\n  output wire [31:0] nice_csr_rdata\n);\n\n  // Assign fixed values to outputs\n  assign nice_csr_ready = 1'b1;\n  assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 4, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU logic implementation goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 5, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 10, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Write-back error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 16, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 4, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 7, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n      mstatus <= 32'b0;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mtvec <= 32'b0;\n      mscratch <= 32'b0;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      misa <= 32'b0;\n      mvendorid <= 32'b0;\n      marchid <= 32'b0;\n      mimpid <= 32'b0;\n      mhartid <= 32'b0;\n      mcycle <= 32'b0;\n      mcycleh <= 32'b0;\n      minstret <= 32'b0;\n      minstreth <= 32'b0;\n      counterstop <= 32'b0;\n      mcgstop <= 32'b0;\n      itcmnohold <= 32'b0;\n      mdvnob2b <= 32'b0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // Mode status\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt enable status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR write enable\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n\n  // CSR read outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Illegal access flag\n  assign csr_access_ilgl = 1'b0;\n\n  // Clock gating and other control signals\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 4, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Internal logic and submodule instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 11, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 11, "code": "module e203_lsu (\n  input  wire                     commit_mret,\n  input  wire                     commit_trap,\n  input  wire                     excp_active,\n  output wire                     lsu_active,\n\n  output wire                     lsu_o_valid,\n  input  wire                     lsu_o_ready,\n  output wire [XLEN-1:0]          lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0]    lsu_o_wbck_itag,\n  output wire                     lsu_o_wbck_err,\n  output wire                     lsu_o_cmt_ld,\n  output wire                     lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0]     lsu_o_cmt_badaddr,\n  output wire                     lsu_o_cmt_buserr,\n\n  input  wire                     agu_icb_cmd_valid,\n  output wire                     agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]     agu_icb_cmd_addr,\n  input  wire                     agu_icb_cmd_read,\n  input  wire [XLEN-1:0]          agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]        agu_icb_cmd_wmask,\n  input  wire                     agu_icb_cmd_lock,\n  input  wire                     agu_icb_cmd_excl,\n  input  wire [1:0]               agu_icb_cmd_size,\n  input  wire                     agu_icb_cmd_back2agu,\n  input  wire                     agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0]    agu_icb_cmd_itag,\n  output wire                     agu_icb_rsp_valid,\n  input  wire                     agu_icb_rsp_ready,\n  output wire                     agu_icb_rsp_err,\n  output wire                     agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0]          agu_icb_rsp_rdata,\n\n  input  wire                     nice_mem_holdup,\n  input  wire                     itcm_region_indic,\n  input  wire                     dtcm_region_indic,\n\n  output wire                     biu_icb_cmd_valid,\n  input  wire                     biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0]     biu_icb_cmd_addr,\n  output wire                     biu_icb_cmd_read,\n  output wire [XLEN-1:0]          biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0]        biu_icb_cmd_wmask,\n  output wire                     biu_icb_cmd_lock,\n  output wire                     biu_icb_cmd_excl,\n  output wire [1:0]               biu_icb_cmd_size,\n  input  wire                     biu_icb_rsp_valid,\n  output wire                     biu_icb_rsp_ready,\n  input  wire                     biu_icb_rsp_err,\n  input  wire                     biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0]          biu_icb_rsp_rdata\n);\n\n  // Internal logic for LSU\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 6, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for handling NICE operations\n  assign nice_i_ready = nice_req_ready || nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  assign fifo_i_vld = nice_i_valid && !nice_i_xs_off && nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  assign nice_rsp_multicyc_ready = fifo_o_vld;\n  assign nice_o_itag_valid = fifo_o_vld && nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  assign nice_o_valid = nice_i_valid && nice_req_ready && !nice_i_xs_off;\n  assign nice_o_longpipe = !nice_i_xs_off;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 6, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 10, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\nsirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 8, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Request Generation\n  wire bjp_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = bjp_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_bgtu;\n  assign bjp_req_alu_add     = bjp_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 14, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n  // Internal signals and logic for arbitration, buffering, and splitting\n  // would be implemented here based on the design document specifications.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 8, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset all CSRs to default values\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      dcsr <= 0;\n      dpc <= 0;\n      dscratch <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          12'h7b0: if (dbg_mode) dcsr <= wbck_csr_dat;\n          12'h7b1: if (dbg_mode) dpc <= wbck_csr_dat;\n          12'h7b2: if (dbg_mode) dscratch <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode signals\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug signals\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n\n  // CSR outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n\n  // Illegal access flag\n  assign csr_access_ilgl = 0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 7, "code": "module e203_exu_disp (\n  input wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input wire oitf_empty,\n  input wire amo_wait,\n  input wire disp_i_valid,\n  output wire disp_i_ready,\n  input wire disp_i_rs1x0,\n  input wire disp_i_rs2x0,\n  input wire disp_i_rs1en,\n  input wire disp_i_rs2en,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input wire [E203_XLEN-1:0] disp_i_rs1,\n  input wire [E203_XLEN-1:0] disp_i_rs2,\n  input wire disp_i_rdwen,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input wire [E203_XLEN-1:0] disp_i_imm,\n  input wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input wire disp_i_misalgn,\n  input wire disp_i_buserr,\n  input wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input wire disp_o_alu_ready,\n  input wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input wire oitfrd_match_disprs1,\n  input wire oitfrd_match_disprs2,\n  input wire oitfrd_match_disprs3,\n  input wire oitfrd_match_disprd,\n  input wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 8, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculation\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc :\n                           (dec_jalr_rs1idx == 0) ? 0 :\n                           (dec_jalr_rs1idx == 1) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency detection\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // State machine for rs1 read\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Register read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  // Wait signal\n  assign bpu_wait = dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1xn_dep;\n\n  // State update\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 9, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_bxx & bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bxx & bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_bxx & bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bxx & bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bxx & bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bxx & bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  assign bjp_o_cmt_bjp = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret = bjp_i_mret;\n  assign bjp_o_cmt_dret = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n\n  assign bjp_o_cmt_prdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 5, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack\n);\n\n// Internal signal declarations\nwire ifu_req_hsked;\nwire ifu_rsp_hsked;\nwire ifu_ir_o_hsked;\nwire pipe_flush_hsked;\nwire reset_flag_r;\nwire reset_req_r;\nwire halt_ack_r;\nwire dly_flush_r;\nwire ir_valid_r;\nwire ir_pc_vld_r;\nwire ifu_err_r;\nwire ifu_prdt_taken_r;\nwire ifu_muldiv_b2b_r;\nwire [E203_INSTR_SIZE-1:0] ifu_ir_r;\nwire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\nwire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\nwire [E203_PC_SIZE-1:0] ifu_pc_r;\nwire [E203_PC_SIZE-1:0] pc_r;\nwire out_flag_r;\nwire pc_newpend_r;\n\n// Instantiate submodules\nsirv_gnrl_dffrs #(1) reset_flag_dffrs (\n  .dnxt(1'b0),\n  .qout(reset_flag_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) reset_req_dfflr (\n  .lden(reset_req_set | reset_req_clr),\n  .dnxt(reset_req_set | (~reset_req_clr)),\n  .qout(reset_req_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// Additional submodule instantiations and logic here...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 7, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 12, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 7, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 10, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_valid;\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 17, "code": "module e203_dtcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_DTCM_RAM_AW-1:0] addr,\n  input wire [E203_DTCM_RAM_MW-1:0] wem,\n  input wire [E203_DTCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 13, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 9, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus, mie, mip, mtvec, mscratch, mepc, mcause, mbadaddr, misa;\n  reg [E203_XLEN-1:0] mcycle, mcycleh, minstret, minstreth;\n  reg [E203_XLEN-1:0] mvendorid, marchid, mimpid, mhartid;\n  reg [E203_XLEN-1:0] counterstop, mcgstop, itcmnohold, mdvnob2b;\n  reg [E203_XLEN-1:0] dcsr, dpc, dscratch;\n  reg [E203_XLEN-1:0] csr_data;\n  reg csr_illegal;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic\n      mstatus <= 32'h0;\n      mie <= 32'h0;\n      mip <= 32'h0;\n      mtvec <= 32'h0;\n      mscratch <= 32'h0;\n      mepc <= 32'h0;\n      mcause <= 32'h0;\n      mbadaddr <= 32'h0;\n      misa <= 32'h0;\n      mcycle <= 32'h0;\n      mcycleh <= 32'h0;\n      minstret <= 32'h0;\n      minstreth <= 32'h0;\n      mvendorid <= 32'h0;\n      marchid <= 32'h0;\n      mimpid <= 32'h0;\n      mhartid <= 32'h0;\n      counterstop <= 32'h0;\n      mcgstop <= 32'h0;\n      itcmnohold <= 32'h0;\n      mdvnob2b <= 32'h0;\n      dcsr <= 32'h0;\n      dpc <= 32'h0;\n      dscratch <= 32'h0;\n      csr_illegal <= 1'b0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'h7b0: if (dbg_mode) dcsr <= wbck_csr_dat;\n          12'h7b1: if (dbg_mode) dpc <= wbck_csr_dat;\n          12'h7b2: if (dbg_mode) dscratch <= wbck_csr_dat;\n          default: csr_illegal <= 1'b1;\n        endcase\n      end else if (csr_rd_en) begin\n        case (csr_idx)\n          12'h300: csr_data <= mstatus;\n          12'h304: csr_data <= mie;\n          12'h305: csr_data <= mtvec;\n          12'h340: csr_data <= mscratch;\n          12'h341: csr_data <= mepc;\n          12'h342: csr_data <= mcause;\n          12'h343: csr_data <= mbadaddr;\n          12'hB00: csr_data <= mcycle;\n          12'hB80: csr_data <= mcycleh;\n          12'hB02: csr_data <= minstret;\n          12'hB82: csr_data <= minstreth;\n          12'h7b0: if (dbg_mode) csr_data <= dcsr;\n          12'h7b1: if (dbg_mode) csr_data <= dpc;\n          12'h7b2: if (dbg_mode) csr_data <= dscratch;\n          default: csr_illegal <= 1'b1;\n        endcase\n      end\n    end\n  end\n\n  // Output assignments\n  assign read_csr_dat = csr_data;\n  assign csr_access_ilgl = csr_illegal;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en && dbg_mode;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en && dbg_mode;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en && dbg_mode;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 5, "code": "module e203_exu_alu (\n  input  i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input  nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input  [31:0] nice_csr_rdata,\n  input  nice_xs_off,\n  output amo_wait,\n  input  oitf_empty,\n  input  [E203_ITAG_WIDTH-1:0] i_itag,\n  input  [E203_XLEN-1:0] i_rs1,\n  input  [E203_XLEN-1:0] i_rs2,\n  input  [E203_XLEN-1:0] i_imm,\n  input  [E203_DECINFO_WIDTH-1:0] i_info,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  i_pc_vld,\n  input  [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  i_rdwen,\n  input  i_ilegl,\n  input  i_buserr,\n  input  i_misalgn,\n  input  flush_req,\n  input  flush_pulse,\n  output cmt_o_valid,\n  input  cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input  wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [12-1:0] csr_idx,\n  input  nonflush_cmt_ena,\n  input  csr_access_ilgl,\n  input  [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [2-1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input  nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input  nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input  nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  i_nice_cmt_off_ilgl,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 17, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input wire itcm_active\n    , output wire itcm_ls\n    , output wire clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input wire dtcm_active\n    , output wire dtcm_ls\n    , output wire clk_dtcm\n    `endif\n);\n\n    // Clock gating logic for IFU\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    // Clock gating logic for EXU\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    // Clock gating logic for LSU\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    // Clock gating logic for BIU\n    wire biu_clk_en = core_cgstop | core_biu_active;\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    `ifdef E203_HAS_ITCM\n    // ITCM clock control\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n\n    assign itcm_ls = ~itcm_clk_en;\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    // DTCM clock control\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n\n    assign dtcm_ls = ~dtcm_clk_en;\n    `endif\n\n    // Always-on clock\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 6, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_FLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n  wire [4:0] wbck_i_flags;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n  assign wbck_i_flags = longp_wbck_i_valid ? longp_wbck_i_flags : 5'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat[E203_XLEN-1:0];\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 5, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 13, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  wire [E203_INSTR_SIZE-1:0] i_instr = instr;\n  wire [E203_RFIDX_WIDTH-1:0] i_pc = {E203_RFIDX_WIDTH{1'b0}};\n  wire i_prdt_taken = 1'b0;\n  wire i_muldiv_b2b = 1'b0;\n  wire i_misalgn = 1'b0;\n  wire i_buserr = 1'b0;\n  wire dbg_mode = 1'b0;\n\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 3, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire itcm_nohold,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input  wire ifu2itcm_icb_cmd_ready,\n  input  wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire ifu2biu_icb_cmd_ready,\n  input  wire ifu2biu_icb_rsp_valid,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input  wire ifu_halt_req,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(ifu2biu_icb_cmd_valid),\n    .ifu_req_seq_rv32(ifu2biu_icb_cmd_addr),\n    .ifu_req_last_pc(ifu2biu_icb_rsp_ready),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(ifu2biu_icb_cmd_valid),\n    .ifu_req_seq_rv32(ifu2biu_icb_cmd_addr),\n    .ifu_req_last_pc(ifu2biu_icb_rsp_ready),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(pipe_flush_add_op1),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_o_ready),\n    .ifu_rsp_valid(ifu_o_valid),\n    .ifu_rsp_err(ifu_o_buserr),\n    .ifu_rsp_instr(ifu_o_ir),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 6, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 7, "code": "module e203_exu_alu_muldiv (\n  input  wire                 mdv_nob2b,\n  input  wire                 muldiv_i_valid,\n  output wire                 muldiv_i_ready,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs1,\n  input  wire [E203_XLEN-1:0] muldiv_i_rs2,\n  input  wire [E203_XLEN-1:0] muldiv_i_imm,\n  input  wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire                 muldiv_i_longpipe,\n  input  wire                 flush_pulse,\n  output wire                 muldiv_o_valid,\n  input  wire                 muldiv_o_ready,\n  output wire [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output wire                 muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire                 muldiv_req_alu_add,\n  output wire                 muldiv_req_alu_sub,\n  input  wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire                 muldiv_sbf_0_ena,\n  output wire [33:0]          muldiv_sbf_0_nxt,\n  input  wire [33:0]          muldiv_sbf_0_r,\n  output wire                 muldiv_sbf_1_ena,\n  output wire [33:0]          muldiv_sbf_1_nxt,\n  input  wire [33:0]          muldiv_sbf_1_r,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 8, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 8, "code": "module e203_exu_disp (\n  input wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input wire oitf_empty,\n  input wire amo_wait,\n  input wire disp_i_valid,\n  output wire disp_i_ready,\n  input wire disp_i_rs1x0,\n  input wire disp_i_rs2x0,\n  input wire disp_i_rs1en,\n  input wire disp_i_rs2en,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input wire [E203_XLEN-1:0] disp_i_rs1,\n  input wire [E203_XLEN-1:0] disp_i_rs2,\n  input wire disp_i_rdwen,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input wire [E203_XLEN-1:0] disp_i_imm,\n  input wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input wire disp_i_misalgn,\n  input wire disp_i_buserr,\n  input wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input wire disp_o_alu_ready,\n  input wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input wire oitfrd_match_disprs1,\n  input wire oitfrd_match_disprs2,\n  input wire oitfrd_match_disprs3,\n  input wire oitfrd_match_disprd,\n  input wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 8, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  wire oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  assign dis_ready = !oitf_full;\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n\n  integer i;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      ret_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n      ret_ptr_flag <= 0;\n      oitf_valid <= 0;\n    end else begin\n      if (dis_ena && dis_ready) begin\n        oitf_valid[dis_ptr_r] <= 1'b1;\n        oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n        oitf_pc[dis_ptr_r] <= disp_i_pc;\n        oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n        oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n        dis_ptr_r <= dis_ptr_r + 1'b1;\n        if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n      end\n      if (ret_ena && !oitf_empty) begin\n        oitf_valid[ret_ptr_r] <= 1'b0;\n        ret_ptr_r <= ret_ptr_r + 1'b1;\n        if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n      end\n    end\n  end\n\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 9, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_rdwen;\n  reg [E203_OITF_DEPTH-1:0] fifo_rdfpu;\n  reg [E203_RFIDX_WIDTH-1:0] fifo_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] fifo_pc [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  wire oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  assign dis_ready = !oitf_full;\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n  assign ret_rdidx = fifo_rdidx[ret_ptr_r];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_r];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_r];\n  assign ret_pc = fifo_pc[ret_ptr_r];\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      ret_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n      ret_ptr_flag <= 0;\n    end else begin\n      if (dis_ena && dis_ready) begin\n        fifo_rdwen[dis_ptr_r] <= disp_i_rdwen;\n        fifo_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n        fifo_rdidx[dis_ptr_r] <= disp_i_rdidx;\n        fifo_pc[dis_ptr_r] <= disp_i_pc;\n        dis_ptr_r <= dis_ptr_r + 1;\n        if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n      end\n      if (ret_ena && !oitf_empty) begin\n        ret_ptr_r <= ret_ptr_r + 1;\n        if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n      end\n    end\n  end\n\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == fifo_rdidx[ret_ptr_r]) && fifo_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == fifo_rdidx[ret_ptr_r]) && fifo_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == fifo_rdidx[ret_ptr_r]) && fifo_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == fifo_rdidx[ret_ptr_r]) && fifo_rdwen[ret_ptr_r]);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 13, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  // Ready signal control\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_req & brchmis_flush_ack);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 11, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n      // ITCM RAM module instantiation\n      // Add ITCM RAM specific logic here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n      // DTCM RAM module instantiation\n      // Add DTCM RAM specific logic here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 18, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .DP(E203_DTCM_RAM_DP),\n    .DW(E203_DTCM_RAM_DW),\n    .FORCE_X2ZERO(1),\n    .MW(E203_DTCM_RAM_MW),\n    .AW(E203_DTCM_RAM_AW)\n  ) u_203_dtcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 2, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 5, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 11, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire bjp_is_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_is_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n\n  // ALU request signals\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write back data\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp    = bjp_is_bxx | bjp_is_jump;\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 8, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 13, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 10, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_icb_rsp_err(arbt_icb_rsp_err),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 12, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire is_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire is_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire is_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire is_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n\n  // Operand selection\n  assign bjp_req_alu_op1 = is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = is_jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq  = is_beq;\n  assign bjp_req_alu_cmp_ne  = is_bne;\n  assign bjp_req_alu_cmp_lt  = is_blt;\n  assign bjp_req_alu_cmp_gt  = is_bgt;\n  assign bjp_req_alu_cmp_ltu = is_bltu;\n  assign bjp_req_alu_cmp_gtu = is_bgtu;\n  assign bjp_req_alu_add     = is_jump;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write-back data\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp    = bjp_i_valid;\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 12, "code": "module e203_exu_longpwbck (\n  input  wire                  lsu_wbck_i_valid,\n  output wire                  lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire                  lsu_wbck_i_err,\n  input  wire                  lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire                  lsu_cmt_i_ld,\n  input  wire                  lsu_cmt_i_st,\n  output wire                  longp_wbck_o_valid,\n  input  wire                  longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0]  longp_wbck_o_wdat,\n  output wire [4:0]            longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire                  longp_wbck_o_rdfpu,\n  output wire                  longp_excp_o_valid,\n  input  wire                  longp_excp_o_ready,\n  output wire                  longp_excp_o_insterr,\n  output wire                  longp_excp_o_ld,\n  output wire                  longp_excp_o_st,\n  output wire                  longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire                  oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire                  oitf_ret_rdwen,\n  input  wire                  oitf_ret_rdfpu,\n  output wire                  oitf_ret_ena,\n  input  wire                  clk,\n  input  wire                  rst_n\n  `ifdef E203_HAS_NICE\n  ,\n  input  wire                  nice_longp_wbck_i_valid,\n  output wire                  nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire                  nice_longp_wbck_i_err\n  `endif\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_rdwen;\n  wire wbck_i_rdfpu;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire [E203_PC_SIZE-1:0] wbck_i_pc;\n\n  // Write-back arbitration logic\n  assign wbck_i_valid = (oitf_ret_ptr == lsu_wbck_i_itag) && lsu_wbck_i_valid && !oitf_empty;\n  assign wbck_i_ready = longp_wbck_o_ready && longp_excp_o_ready;\n  assign wbck_i_err = lsu_wbck_i_err;\n  assign wbck_i_rdwen = oitf_ret_rdwen;\n  assign wbck_i_rdfpu = oitf_ret_rdfpu;\n  assign wbck_i_wdat = lsu_wbck_i_wdat;\n  assign wbck_i_rdidx = oitf_ret_rdidx;\n  assign wbck_i_itag = oitf_ret_ptr;\n  assign wbck_i_pc = oitf_ret_pc;\n\n  // LSU write-back ready signal\n  assign lsu_wbck_i_ready = wbck_i_ready;\n\n  // Long-pipeline write-back valid signal\n  assign longp_wbck_o_valid = wbck_i_valid && wbck_i_rdwen && !wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = wbck_i_rdidx;\n  assign longp_wbck_o_rdfpu = wbck_i_rdfpu;\n  assign longp_wbck_o_flags = 5'b0; // Placeholder for additional status flags\n\n  // Exception handling\n  assign longp_excp_o_valid = wbck_i_valid && wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = wbck_i_pc;\n\n  // OITF control logic\n  assign oitf_ret_ena = wbck_i_valid && wbck_i_ready;\n\n  `ifdef E203_HAS_NICE\n    // NICE write-back ready signal\n    assign nice_longp_wbck_i_ready = wbck_i_ready;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 4, "code": "module e203_ifu (\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  input itcm_nohold,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  input ifu_o_ready,\n  input pipe_flush_req,\n  output pipe_flush_ack,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input ifu2itcm_icb_cmd_ready,\n  input ifu2itcm_icb_rsp_valid,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_ready,\n  input ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_err,\n  input [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input ifu_halt_req,\n  output ifu_halt_ack,\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 14, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // Synchronizer for external interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Synchronizer for software interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Synchronizer for timer interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Synchronizer for debug interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 11, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 5, "code": "module e203_exu_alu_dpath (\n  input  wire                     alu_req_alu,\n  input  wire                     alu_req_alu_add,\n  input  wire                     alu_req_alu_sub,\n  input  wire                     alu_req_alu_xor,\n  input  wire                     alu_req_alu_sll,\n  input  wire                     alu_req_alu_srl,\n  input  wire                     alu_req_alu_sra,\n  input  wire                     alu_req_alu_or,\n  input  wire                     alu_req_alu_and,\n  input  wire [E203_XLEN-1:0]     alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     alu_req_alu_op2,\n  input  wire                     bjp_req_alu,\n  input  wire [E203_XLEN-1:0]     bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     bjp_req_alu_op2,\n  input  wire                     agu_req_alu,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_op2,\n  input  wire                     muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                     muldiv_req_alu_add,\n  input  wire                     muldiv_req_alu_sub,\n  input  wire                     muldiv_sbf_0_ena,\n  input  wire [32:0]              muldiv_sbf_0_nxt,\n  input  wire                     muldiv_sbf_1_ena,\n  input  wire [32:0]              muldiv_sbf_1_nxt,\n  input  wire                     clk,\n  input  wire                     rst_n,\n  output wire [E203_XLEN-1:0]     alu_req_alu_res,\n  output wire [E203_XLEN-1:0]     bjp_req_alu_add_res,\n  output wire                     bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0]     agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]              muldiv_sbf_0_r,\n  output wire [32:0]              muldiv_sbf_1_r\n);\n\n  // ALU operations\n  wire [E203_XLEN-1:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  // ALU result selection\n  assign alu_req_alu_res = \n      ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n      ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n      ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n      ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n      ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n      ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res) |\n      ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n      ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operations\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n\n  // AGU operations\n  wire [E203_XLEN-1:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operations\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = \n      ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res) |\n      ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared buffers\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 3, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  output ppi_icb_cmd_valid,\n  input ppi_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask\n);\n\n// Instantiate submodules\ne203_ifu u_e203_ifu (\n  .clk(clk),\n  .rst_n(rst_n),\n  .inspect_pc(inspect_pc),\n  .ifu_active(ifu_active),\n  .itcm_nohold(itcm_nohold),\n  .pc_rtvec(pc_rtvec),\n  .ifu_o_ir(ifu_o_ir),\n  .ifu_o_pc(ifu_o_pc),\n  .ifu_o_pc_vld(ifu_o_pc_vld),\n  .ifu_o_misalgn(ifu_o_misalgn),\n  .ifu_o_buserr(ifu_o_buserr),\n  .ifu_o_rs1idx(ifu_o_rs1idx),\n  .ifu_o_rs2idx(ifu_o_rs2idx),\n  .ifu_o_prdt_taken(ifu_o_prdt_taken),\n  .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n  .ifu_o_valid(ifu_o_valid),\n  .ifu_o_ready(ifu_o_ready),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n  .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n  .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n  .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n  .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n  .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n  .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n  .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n  .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n  .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n  .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n  .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n  .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n  .ifu_halt_req(ifu_halt_req),\n  .ifu_halt_ack(ifu_halt_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu)\n);\n\ne203_exu u_e203_exu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .exu_active(exu_active),\n  .excp_active(excp_active),\n  .core_wfi(core_wfi),\n  .tm_stop(tm_stop),\n  .itcm_nohold(itcm_nohold),\n  .core_cgstop(core_cgstop),\n  .tcm_cgstop(tcm_cgstop),\n  .core_mhartid(core_mhartid),\n  .dbg_irq_r(dbg_irq_r),\n  .lcl_irq_r(lcl_irq_r),\n  .evt_r(evt_r),\n  .ext_irq_r(ext_irq_r),\n  .sft_irq_r(sft_irq_r),\n  .tmr_irq_r(tmr_irq_r),\n  .wfi_halt_ifu_req(wfi_halt_ifu_req),\n  .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu),\n  .test_mode(test_mode),\n  .clk_aon(clk_aon),\n  .clk(clk),\n  .rst_n(rst_n),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle),\n  .i_valid(i_valid),\n  .i_ready(i_ready),\n  .i_ir(i_ir),\n  .i_pc(i_pc),\n  .i_pc_vld(i_pc_vld),\n  .i_misalgn(i_misalgn),\n  .i_buserr(i_buserr),\n  .i_prdt_taken(i_prdt_taken),\n  .i_muldiv_b2b(i_muldiv_b2b),\n  .i_rs1idx(i_rs1idx),\n  .i_rs2idx(i_rs2idx),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_csr_valid(nice_csr_valid),\n  .nice_csr_ready(nice_csr_ready),\n  .nice_csr_addr(nice_csr_addr),\n  .nice_csr_wr(nice_csr_wr),\n  .nice_csr_wdata(nice_csr_wdata),\n  .nice_csr_rdata(nice_csr_rdata),\n  .nice_req_valid(nice_req_valid),\n  .nice_req_ready(nice_req_ready),\n  .nice_req_inst(nice_req_inst),\n  .nice_req_rs1(nice_req_rs1),\n  .nice_req_rs2(nice_req_rs2),\n  .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n  .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n  .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n  .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n);\n\ne203_lsu u_e203_lsu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .excp_active(excp_active),\n  .lsu_active(lsu_active),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_mem_holdup(nice_mem_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .dtcm_region_indic(dtcm_region_indic),\n  .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n  .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n  .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n  .ppi_icb_cmd_read(ppi_icb_cmd_read),\n  .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n  .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n  .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n  .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n  .ppi_icb_rsp_err(ppi_icb_rsp_err),\n  .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n);\n\ne203_biu u_e203_biu (\n  .biu_active(biu_active),\n  .clk(clk),\n  .rst_n(rst_n),\n  .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n  .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n  .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n  .ppi_icb_cmd_read(ppi_icb_cmd_read),\n  .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n  .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n  .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n  .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n  .ppi_icb_rsp_err(ppi_icb_rsp_err),\n  .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n  .clint_region_indic(clint_region_indic),\n  .clint_icb_enable(clint_icb_enable),\n  .plic_region_indic(plic_region_indic),\n  .plic_icb_enable(plic_icb_enable),\n  .mem_icb_enable(mem_icb_enable)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 11, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n// Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 3, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 5, "code": "module e203_ifu(\n  input clk,\n  input rst_n,\n  input itcm_nohold,\n  input ifu_o_ready,\n  input pipe_flush_req,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input ifu2itcm_icb_cmd_ready,\n  input ifu2itcm_icb_rsp_valid,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_ready,\n  input ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_err,\n  input [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input ifu_halt_req,\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu,\n\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  output pipe_flush_ack,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output ifu2itcm_icb_rsp_ready,\n  output ifu2biu_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output ifu2biu_icb_rsp_ready,\n  output ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(),\n    .ifu_req_seq_rv32(),\n    .ifu_req_last_pc(),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(),\n    .ifu_req_seq_rv32(),\n    .ifu_req_last_pc(),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(),\n    .ifu_rsp_valid(),\n    .ifu_rsp_err(),\n    .ifu_rsp_instr(),\n    .ifu2itcm_icb_cmd_valid(),\n    .ifu2itcm_icb_cmd_addr(),\n    .ifu2itcm_icb_rsp_ready(),\n    .ifu2biu_icb_cmd_valid(),\n    .ifu2biu_icb_cmd_addr(),\n    .ifu2biu_icb_rsp_ready()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 13, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n  `ifdef E203_HAS_NICE\n  ,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n  `endif\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 9, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 3, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n  // Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 6, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 12, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_extend_csr", "codeid": 20, "code": "module e203_extend_csr (\n    input wire clk,\n    input wire rst_n,\n    input wire nice_csr_valid,\n    output wire nice_csr_ready,\n    input wire [31:0] nice_csr_addr,\n    input wire nice_csr_wr,\n    input wire [31:0] nice_csr_wdata,\n    output wire [31:0] nice_csr_rdata\n);\n\n    // Assign fixed values to outputs\n    assign nice_csr_ready = 1'b1;\n    assign nice_csr_rdata = 32'b0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 9, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 6, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [12-1:0]            csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [2-1:0]             agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 8, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 2, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 10, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 2, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      icb_state <= ICB_STATE_IDLE;\n    else if (icb_state_ena)\n      icb_state <= icb_state_nxt;\n  end\n\n  wire icb_sta_is_idle    = (icb_state == ICB_STATE_IDLE);\n  wire icb_sta_is_1st     = (icb_state == ICB_STATE_1ST);\n  wire icb_sta_is_wait2nd = (icb_state == ICB_STATE_WAIT2ND);\n  wire icb_sta_is_2nd     = (icb_state == ICB_STATE_2ND);\n\n  // Request Handshake\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // State Transition Conditions\n  wire state_idle_exit_ena = icb_sta_is_idle & ifu_req_hsked;\n  wire state_1st_exit_ena = icb_sta_is_1st & (ifu_icb_rsp_hsked | i_ifu_rsp_hsked);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_sta_is_2nd & i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n\n  // Next State Logic\n  assign icb_state_nxt = \n    state_idle_exit_ena    ? ICB_STATE_1ST :\n    state_1st_exit_ena     ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND) : ICB_STATE_IDLE) :\n    state_wait2nd_exit_ena ? ICB_STATE_2ND :\n    state_2nd_exit_ena     ? (ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n    ICB_STATE_IDLE;\n\n  // Other logic and module instantiations go here...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 11, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 7, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [2-1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 13, "code": "module e203_dtcm_ctrl (\n  input  wire                         clk,\n  input  wire                         rst_n,\n  input  wire                         test_mode,\n  input  wire                         tcm_cgstop,\n  output wire                         dtcm_active,\n\n  input  wire                         lsu2dtcm_icb_cmd_valid,\n  output wire                         lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr, \n  input  wire                         lsu2dtcm_icb_cmd_read, \n  input  wire [32-1:0]                lsu2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]                 lsu2dtcm_icb_cmd_wmask,\n  output wire                         lsu2dtcm_icb_rsp_valid,\n  input  wire                         lsu2dtcm_icb_rsp_ready,\n  output wire                         lsu2dtcm_icb_rsp_err,\n  output wire [32-1:0]                lsu2dtcm_icb_rsp_rdata,\n\n  input  wire                         ext2dtcm_icb_cmd_valid,\n  output wire                         ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr, \n  input  wire                         ext2dtcm_icb_cmd_read, \n  input  wire [32-1:0]                ext2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]                 ext2dtcm_icb_cmd_wmask,\n  output wire                         ext2dtcm_icb_rsp_valid,\n  input  wire                         ext2dtcm_icb_rsp_ready,\n  output wire                         ext2dtcm_icb_rsp_err,\n  output wire [32-1:0]                ext2dtcm_icb_rsp_rdata,\n\n  output wire                         dtcm_ram_cs,  \n  output wire                         dtcm_ram_we,  \n  output wire [E203_DTCM_RAM_AW-1:0]  dtcm_ram_addr, \n  output wire [E203_DTCM_RAM_MW-1:0]  dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_din,          \n  input  wire [E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout,\n  output wire                         clk_dtcm_ram\n);\n\n  // Internal signals for arbitration and SRAM control\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [32-1:0] arbt_icb_cmd_wdata;\n  wire [4-1:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [32-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the arbitration module\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM control module\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 14, "code": "module e203_dtcm_ctrl (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  input  wire                     test_mode,\n  input  wire                     tcm_cgstop,\n  output wire                     dtcm_active,\n\n  input  wire                     lsu2dtcm_icb_cmd_valid,\n  output wire                     lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr, \n  input  wire                     lsu2dtcm_icb_cmd_read, \n  input  wire [32-1:0]            lsu2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]             lsu2dtcm_icb_cmd_wmask,\n  output wire                     lsu2dtcm_icb_rsp_valid,\n  input  wire                     lsu2dtcm_icb_rsp_ready,\n  output wire                     lsu2dtcm_icb_rsp_err,\n  output wire [32-1:0]            lsu2dtcm_icb_rsp_rdata,\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n  input  wire                     ext2dtcm_icb_cmd_valid,\n  output wire                     ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr, \n  input  wire                     ext2dtcm_icb_cmd_read, \n  input  wire [32-1:0]            ext2dtcm_icb_cmd_wdata,\n  input  wire [4-1:0]             ext2dtcm_icb_cmd_wmask,\n  output wire                     ext2dtcm_icb_rsp_valid,\n  input  wire                     ext2dtcm_icb_rsp_ready,\n  output wire                     ext2dtcm_icb_rsp_err,\n  output wire [32-1:0]            ext2dtcm_icb_rsp_rdata,\n  `endif//}\n\n  output wire                     dtcm_ram_cs,  \n  output wire                     dtcm_ram_we,  \n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr, \n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,          \n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire                     clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [32-1:0] arbt_icb_cmd_wdata;\n  wire [4-1:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [32-1:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME (0),\n    .ALLOW_0CYCL_RSP (0),\n    .FIFO_OUTS_NUM (E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY (0),\n    .USR_W (1),\n    .ARBT_NUM (DTCM_ARBT_I_NUM),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .DW (E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W (DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid (arbt_icb_cmd_valid),\n    .o_icb_cmd_ready (arbt_icb_cmd_ready),\n    .o_icb_cmd_read  (arbt_icb_cmd_read ),\n    .o_icb_cmd_addr  (arbt_icb_cmd_addr ),\n    .o_icb_cmd_wdata (arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask (arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid (arbt_icb_rsp_valid),\n    .o_icb_rsp_ready (arbt_icb_rsp_ready),\n    .o_icb_rsp_err   (arbt_icb_rsp_err  ),\n    .o_icb_rsp_rdata (arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready ({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid ({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read  ({ext2dtcm_icb_cmd_read , lsu2dtcm_icb_cmd_read }),\n    .i_bus_icb_cmd_addr  ({ext2dtcm_icb_cmd_addr , lsu2dtcm_icb_cmd_addr }),\n    .i_bus_icb_cmd_wdata ({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask ({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid ({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready ({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err   ({ext2dtcm_icb_rsp_err  , lsu2dtcm_icb_rsp_err  }),\n    .i_bus_icb_rsp_rdata ({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk                 (clk),\n    .rst_n               (rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW (E203_DTCM_DATA_WIDTH),\n    .AW (E203_DTCM_ADDR_WIDTH),\n    .MW (E203_DTCM_WMSK_WIDTH),\n    .AW_LSB (2),\n    .USR_W (1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active (dtcm_active),\n    .tcm_cgstop       (tcm_cgstop),\n    .i_icb_cmd_valid  (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready  (arbt_icb_cmd_ready),\n    .i_icb_cmd_read   (arbt_icb_cmd_read ),\n    .i_icb_cmd_addr   (arbt_icb_cmd_addr ),\n    .i_icb_cmd_wdata  (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask  (arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid  (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready  (arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata  (arbt_icb_rsp_rdata),\n    .i_icb_rsp_err    (arbt_icb_rsp_err  ),\n    .ram_cs           (dtcm_ram_cs),\n    .ram_we           (dtcm_ram_we),\n    .ram_addr         (dtcm_ram_addr),\n    .ram_wem          (dtcm_ram_wem),\n    .ram_din          (dtcm_ram_din),\n    .ram_dout         (dtcm_ram_dout),\n    .clk_ram          (clk_dtcm_ram),\n    .test_mode        (test_mode),\n    .clk              (clk),\n    .rst_n            (rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 3, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and state machine logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 3, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 12, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n// Internal signals and module instantiations would be here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 7, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for instruction forwarding and handshaking\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Logic for multi-cycle operation and FIFO\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 8, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Control Signal Preparation Logic\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) : {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE Interface Logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n  assign csr_i_ready = csr_o_ready & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 9, "code": "module e203_exu_alu_lsuagu (\n  input  wire                     agu_i_valid,\n  output wire                     agu_i_ready,\n  input  wire [`E203_XLEN-1:0]    agu_i_rs1,\n  input  wire [`E203_XLEN-1:0]    agu_i_rs2,\n  input  wire [`E203_XLEN-1:0]    agu_i_imm,\n  input  wire [`E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [`E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                     agu_i_longpipe,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  output wire                     agu_o_valid,\n  input  wire                     agu_o_ready,\n  output wire [`E203_XLEN-1:0]    agu_o_wbck_wdat,\n  output wire                     agu_o_wbck_err,\n  output wire                     agu_o_cmt_misalgn,\n  output wire                     agu_o_cmt_ld,\n  output wire                     agu_o_cmt_stamo,\n  output wire                     agu_o_cmt_buserr,\n  output wire [`E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [`E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [`E203_XLEN-1:0]    agu_icb_cmd_wdata,\n  output wire [`E203_XLEN/8-1:0]  agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire [`E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                     agu_icb_cmd_usign,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [`E203_XLEN-1:0]    agu_icb_rsp_rdata,\n  output wire [`E203_XLEN-1:0]    agu_req_alu_op1,\n  output wire [`E203_XLEN-1:0]    agu_req_alu_op2,\n  output wire                     agu_req_alu_swap,\n  output wire                     agu_req_alu_add,\n  output wire                     agu_req_alu_and,\n  output wire                     agu_req_alu_or,\n  output wire                     agu_req_alu_xor,\n  output wire                     agu_req_alu_max,\n  output wire                     agu_req_alu_min,\n  output wire                     agu_req_alu_maxu,\n  output wire                     agu_req_alu_minu,\n  input  wire [`E203_XLEN-1:0]    agu_req_alu_res,\n  output wire                     agu_sbf_0_ena,\n  output wire [`E203_XLEN-1:0]    agu_sbf_0_nxt,\n  input  wire [`E203_XLEN-1:0]    agu_sbf_0_r,\n  output wire                     agu_sbf_1_ena,\n  output wire [`E203_XLEN-1:0]    agu_sbf_1_nxt,\n  input  wire [`E203_XLEN-1:0]    agu_sbf_1_r,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 4, "code": "module e203_cpu (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire [E203_PC_SIZE-1:0] pc_rtvec,\n    input wire [31:0] dcsr_r,\n    input wire [E203_PC_SIZE-1:0] dpc_r,\n    input wire [31:0] dscratch_r,\n    input wire dbg_mode,\n    input wire dbg_halt_r,\n    input wire dbg_step_r,\n    input wire dbg_ebreakm_r,\n    input wire dbg_stopcycle,\n    input wire [E203_HART_ID_W-1:0] core_mhartid,\n    input wire dbg_irq_a,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n    input wire ext2dtcm_icb_cmd_valid,\n    output wire ext2dtcm_icb_cmd_ready,\n    input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n    input wire ext2dtcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n    output wire ext2dtcm_icb_rsp_valid,\n    input wire ext2dtcm_icb_rsp_ready,\n    output wire ext2dtcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n    input wire ppi_icb_enable,\n    input wire ppi_icb_cmd_ready,\n    output wire ppi_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n    output wire ppi_icb_cmd_read,\n    output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n    input wire ppi_icb_rsp_valid,\n    output wire ppi_icb_rsp_ready,\n    input wire ppi_icb_rsp_err,\n    input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n    input wire clint_icb_enable,\n    input wire clint_icb_cmd_ready,\n    output wire clint_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n    output wire clint_icb_cmd_read,\n    output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n    input wire clint_icb_rsp_valid,\n    output wire clint_icb_rsp_ready,\n    input wire clint_icb_rsp_err,\n    input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n    input wire plic_icb_enable,\n    input wire plic_icb_cmd_ready,\n    output wire plic_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n    output wire plic_icb_cmd_read,\n    output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n    input wire plic_icb_rsp_valid,\n    output wire plic_icb_rsp_ready,\n    input wire plic_icb_rsp_err,\n    input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n    input wire fio_icb_enable,\n    input wire fio_icb_cmd_ready,\n    output wire fio_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n    output wire fio_icb_cmd_read,\n    output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n    input wire fio_icb_rsp_valid,\n    output wire fio_icb_rsp_ready,\n    input wire fio_icb_rsp_err,\n    input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n    input wire mem_icb_enable,\n    input wire mem_icb_cmd_ready,\n    output wire mem_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n    output wire mem_icb_cmd_read,\n    output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n    input wire mem_icb_rsp_valid,\n    output wire mem_icb_rsp_ready,\n    input wire mem_icb_rsp_err,\n    input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n    input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n    input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n    output wire [E203_PC_SIZE-1:0] inspect_pc,\n    output wire inspect_dbg_irq,\n    output wire inspect_mem_cmd_valid,\n    output wire inspect_mem_cmd_ready,\n    output wire inspect_mem_rsp_valid,\n    output wire inspect_mem_rsp_ready,\n    output wire inspect_core_clk,\n    output wire core_csr_clk,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire core_wfi,\n    output wire tm_stop,\n    output wire [E203_PC_SIZE-1:0] cmt_dpc,\n    output wire cmt_dpc_ena,\n    output wire [2:0] cmt_dcause,\n    output wire cmt_dcause_ena,\n    output wire dbg_irq_r,\n    output wire wr_dcsr_ena,\n    output wire wr_dpc_ena,\n    output wire wr_dscratch_ena,\n    output wire [31:0] wr_csr_nxt,\n    output wire itcm_ls,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n    output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n    output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n    output wire clk_itcm_ram,\n    output wire dtcm_ls,\n    output wire dtcm_ram_cs,\n    output wire dtcm_ram_we,\n    output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n    output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n    output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n    output wire clk_dtcm_ram\n);\n\n// Submodule instantiations and connections go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 14, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n  // Implementation of the decode logic goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 9, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n  // Additional NICE interface signals\n  `ifdef E203_HAS_CSR_NICE\n  , input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n  `endif\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_x0 = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_zimm = csr_i_info[E203_DECINFO_CSR_ZIMMM];\n  wire [11:0] csr_csridx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {{E203_XLEN-5{1'b0}}, csr_zimm} : csr_i_rs1;\n\n  wire csr_rd_en_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_i_rdwen :\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] || csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] ||\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] && !csr_op1_is_x0) ||\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] && !csr_op1_is_x0);\n\n  assign csr_rd_en = csr_i_valid && csr_rd_en_pre;\n  assign csr_wr_en = csr_i_valid && csr_wr_en_pre;\n  assign csr_idx = csr_csridx;\n\n  wire csr_ena_pre = csr_rd_en || csr_wr_en;\n  assign csr_ena = csr_ena_pre && csr_o_ready;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) : {E203_XLEN{1'b0}};\n\n  assign csr_o_valid = csr_i_valid && csr_ena_pre;\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  `ifdef E203_HAS_CSR_NICE\n  wire csr_sel_nice_pre = (csr_idx[11:8] == 4'hE);\n  assign csr_sel_nice = csr_sel_nice_pre && !nice_xs_off;\n\n  assign nice_csr_valid = csr_sel_nice && csr_i_valid && csr_o_ready;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  assign csr_o_valid = csr_sel_nice ? (csr_i_valid && nice_csr_ready) : (csr_i_valid && csr_ena_pre);\n  assign csr_o_wbck_wdat = csr_sel_nice ? nice_csr_rdata : read_csr_dat;\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 18, "code": "module e203_clk_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire core_cgstop,\n  input  wire core_ifu_active,\n  input  wire core_exu_active,\n  input  wire core_lsu_active,\n  input  wire core_biu_active,\n  input  wire core_wfi,\n  output wire clk_aon,\n  output wire clk_core_ifu,\n  output wire clk_core_exu,\n  output wire clk_core_lsu,\n  output wire clk_core_biu\n  `ifdef E203_HAS_ITCM\n  , input  wire itcm_active,\n  output wire itcm_ls,\n  output wire clk_itcm\n  `endif\n  `ifdef E203_HAS_DTCM\n  , input  wire dtcm_active,\n  output wire dtcm_ls,\n  output wire clk_dtcm\n  `endif\n);\n\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n  wire exu_clk_en = core_cgstop | core_exu_active;\n  wire lsu_clk_en = core_cgstop | core_lsu_active;\n  wire biu_clk_en = core_cgstop | core_biu_active;\n\n  e203_clkgate u_ifu_clkgate (\n    .clk_in  (clk),\n    .en     (ifu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate (\n    .clk_in  (clk),\n    .en     (exu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate (\n    .clk_in  (clk),\n    .en     (lsu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate (\n    .clk_in  (clk),\n    .en     (biu_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_core_biu)\n  );\n\n  `ifdef E203_HAS_ITCM\n  reg itcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      itcm_active_r <= 1'b0;\n    else\n      itcm_active_r <= itcm_active;\n  end\n\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n\n  e203_clkgate u_itcm_clkgate (\n    .clk_in  (clk),\n    .en     (itcm_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_itcm)\n  );\n\n  assign itcm_ls = ~itcm_clk_en;\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  reg dtcm_active_r;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      dtcm_active_r <= 1'b0;\n    else\n      dtcm_active_r <= dtcm_active;\n  end\n\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n\n  e203_clkgate u_dtcm_clkgate (\n    .clk_in  (clk),\n    .en     (dtcm_clk_en),\n    .test_mode (test_mode),\n    .clk_out (clk_dtcm)\n  );\n\n  assign dtcm_ls = ~dtcm_clk_en;\n  `endif\n\n  assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 6, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n\n  // Instantiate submodules\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_r),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(~ir_valid_r),\n    .ir_rs1en(dec2ifu_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Reset control logic\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Halt control logic\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Pipeline flush control\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // IR control logic\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Fetch request generation and control\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  assign ifu_o_ir = ifu_ir_r;\n  assign ifu_o_pc = ifu_pc_r;\n  assign ifu_o_pc_vld = ir_pc_vld_r;\n  assign ifu_o_rs1idx = ir_rs1idx_r;\n  assign ifu_o_rs2idx = ir_rs2idx_r;\n  assign ifu_o_prdt_taken = ifu_prdt_taken_r;\n  assign ifu_o_misalgn = 1'b0;\n  assign ifu_o_buserr = ifu_err_r;\n  assign ifu_o_muldiv_b2b = ifu_muldiv_b2b_r;\n  assign ifu_o_valid = ir_valid_r;\n\n  assign ifu_halt_ack = halt_ack_r;\n  assign inspect_pc = pc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 15, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Bus Arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM Controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 15, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0]    i_pc,\n  input                        i_prdt_taken,\n  input                        i_misalgn,\n  input                        i_buserr,\n  input                        i_muldiv_b2b,\n  input                        dbg_mode,\n  input                        nice_xs_off,\n  output                       dec_rs1x0,\n  output                       dec_rs2x0,\n  output                       dec_rs1en,\n  output                       dec_rs2en,\n  output                       dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0]       dec_imm,\n  output [E203_PC_SIZE-1:0]    dec_pc,\n  output                       dec_misalgn,\n  output                       dec_buserr,\n  output                       dec_ilegl,\n  output                       dec_mulhsu,\n  output                       dec_mul,\n  output                       dec_div,\n  output                       dec_rem,\n  output                       dec_divu,\n  output                       dec_remu,\n  output                       dec_rv32,\n  output                       dec_bjp,\n  output                       dec_jal,\n  output                       dec_jalr,\n  output                       dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0]       dec_bjp_imm,\n  output                       dec_nice,\n  output                       nice_cmt_off_ilgl_o\n);\n\n// Module implementation goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 13, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 6, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 4, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 5, "code": "module e203_cpu (\n  input wire [E203_PC-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire [E203_PC-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n// Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 6, "code": "module e203_exu_alu_dpath (\n  input wire alu_req_alu,\n  input wire alu_req_alu_add,\n  input wire alu_req_alu_sub,\n  input wire alu_req_alu_xor,\n  input wire alu_req_alu_sll,\n  input wire alu_req_alu_srl,\n  input wire alu_req_alu_sra,\n  input wire alu_req_alu_or,\n  input wire alu_req_alu_and,\n  input wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input wire bjp_req_alu,\n  input wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input wire agu_req_alu,\n  input wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input wire muldiv_req_alu,\n  input wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input wire muldiv_req_alu_add,\n  input wire muldiv_req_alu_sub,\n  input wire muldiv_sbf_0_ena,\n  input wire [32:0] muldiv_sbf_0_nxt,\n  input wire muldiv_sbf_1_ena,\n  input wire [32:0] muldiv_sbf_1_nxt,\n  input wire clk,\n  input wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal signal declarations\n  wire [E203_XLEN-1:0] alu_res;\n  wire [E203_XLEN-1:0] bjp_add_res;\n  wire bjp_cmp_res;\n  wire [E203_XLEN-1:0] agu_res;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n  reg [32:0] sbf_0;\n  reg [32:0] sbf_1;\n\n  // ALU operation logic\n  always @(*) begin\n    case (1'b1)\n      alu_req_alu_add: alu_res = alu_req_alu_op1 + alu_req_alu_op2;\n      alu_req_alu_sub: alu_res = alu_req_alu_op1 - alu_req_alu_op2;\n      alu_req_alu_xor: alu_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n      alu_req_alu_sll: alu_res = alu_req_alu_op1 << alu_req_alu_op2;\n      alu_req_alu_srl: alu_res = alu_req_alu_op1 >> alu_req_alu_op2;\n      alu_req_alu_sra: alu_res = alu_req_alu_op1 >>> alu_req_alu_op2;\n      alu_req_alu_or:  alu_res = alu_req_alu_op1 | alu_req_alu_op2;\n      alu_req_alu_and: alu_res = alu_req_alu_op1 & alu_req_alu_op2;\n      default: alu_res = {E203_XLEN{1'b0}};\n    endcase\n  end\n\n  // BJP operation logic\n  always @(*) begin\n    bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n    bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n  end\n\n  // AGU operation logic\n  always @(*) begin\n    agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n  end\n\n  // MULDIV operation logic\n  always @(*) begin\n    if (muldiv_req_alu_add)\n      muldiv_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n    else if (muldiv_req_alu_sub)\n      muldiv_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n    else\n      muldiv_res = {E203_ALU_ADDER_WIDTH{1'b0}};\n  end\n\n  // Shared buffer logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0 <= 33'b0;\n      sbf_1 <= 33'b0;\n    end else begin\n      if (muldiv_sbf_0_ena)\n        sbf_0 <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena)\n        sbf_1 <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  // Output assignments\n  assign alu_req_alu_res = alu_res;\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n  assign agu_req_alu_res = agu_res;\n  assign muldiv_req_alu_res = muldiv_res;\n  assign muldiv_sbf_0_r = sbf_0;\n  assign muldiv_sbf_1_r = sbf_1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 7, "code": "module e203_exu_alu_dpath (\n  input wire alu_req_alu,\n  input wire alu_req_alu_add,\n  input wire alu_req_alu_sub,\n  input wire alu_req_alu_xor,\n  input wire alu_req_alu_sll,\n  input wire alu_req_alu_srl,\n  input wire alu_req_alu_sra,\n  input wire alu_req_alu_or,\n  input wire alu_req_alu_and,\n  input wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input wire bjp_req_alu,\n  input wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input wire agu_req_alu,\n  input wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input wire muldiv_req_alu,\n  input wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input wire muldiv_req_alu_add,\n  input wire muldiv_req_alu_sub,\n  input wire muldiv_sbf_0_ena,\n  input wire [32:0] muldiv_sbf_0_nxt,\n  input wire muldiv_sbf_1_ena,\n  input wire [32:0] muldiv_sbf_1_nxt,\n  input wire clk,\n  input wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal logic and submodule instantiation would go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 4, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle\n);\n\n  // Internal signals and logic for e203_core module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 6, "code": "module e203_itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram,\n  output wire itcm_active\n);\n\n  // Internal signals and module instantiations would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 6, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(),\n    .ifu_req_seq_rv32(),\n    .ifu_req_last_pc(),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(),\n    .ifu_req_seq_rv32(),\n    .ifu_req_last_pc(),\n    .ifu_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(),\n    .ifu_rsp_valid(),\n    .ifu_rsp_err(),\n    .ifu_rsp_instr(),\n    .ifu2itcm_icb_cmd_valid(),\n    .ifu2itcm_icb_cmd_addr(),\n    .ifu2itcm_icb_rsp_ready(),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 7, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_o_ready,\n  output wire ifu_o_valid,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  // Halt control logic\n  wire halt_ack_r;\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & oitf_empty;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  // IR control logic\n  wire ir_valid_r;\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req) & (~ifu_rsp_err);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n\n  // PC control logic\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_nxt = pc_r + (ifu_req_seq ? 3'd4 : 3'd2);\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  // Fetch request generation\n  wire ifu_new_req = (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_err);\n  wire ifu_req_valid_pre = ifu_new_req | reset_req_r | pipe_flush_req;\n  wire ifu_req_valid = ifu_req_valid_pre & (~ir_valid_r);\n\n  // Fetch response processing\n  wire ifu_rsp_ready = ifu_ir_o_hsked & (~pipe_flush_req);\n\n  // Output assignments\n  assign ifu_req_pc = pc_r;\n  assign ifu_req_seq = ~pipe_flush_req;\n  assign ifu_req_seq_rv32 = 1'b1;\n  assign ifu_req_last_pc = pc_r;\n  assign ifu_o_ir = ifu_rsp_instr;\n  assign ifu_o_pc = pc_r;\n  assign ifu_o_pc_vld = ir_valid_r;\n  assign ifu_o_rs1idx = dec2ifu_rdidx;\n  assign ifu_o_rs2idx = dec2ifu_rdidx;\n  assign ifu_o_prdt_taken = 1'b0;\n  assign ifu_o_misalgn = 1'b0;\n  assign ifu_o_buserr = ifu_rsp_err;\n  assign ifu_o_muldiv_b2b = 1'b0;\n  assign ifu_o_valid = ir_valid_r;\n  assign ifu_halt_ack = halt_ack_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 9, "code": "module e203_exu_disp (\n  input wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input wire oitf_empty,\n  input wire amo_wait,\n  input wire disp_i_valid,\n  output wire disp_i_ready,\n  input wire disp_i_rs1x0,\n  input wire disp_i_rs2x0,\n  input wire disp_i_rs1en,\n  input wire disp_i_rs2en,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input wire [E203_XLEN-1:0] disp_i_rs1,\n  input wire [E203_XLEN-1:0] disp_i_rs2,\n  input wire disp_i_rdwen,\n  input wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input wire [E203_XLEN-1:0] disp_i_imm,\n  input wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input wire disp_i_misalgn,\n  input wire disp_i_buserr,\n  input wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input wire disp_o_alu_ready,\n  input wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input wire oitfrd_match_disprs1,\n  input wire oitfrd_match_disprs2,\n  input wire oitfrd_match_disprs3,\n  input wire oitfrd_match_disprd,\n  input wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals and logic for dispatching instructions\n  // to ALU and OITF, handling dependencies, and managing WFI requests.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 8, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [12-1:0]            csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [2-1:0]             agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 7, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal signals and logic for the e203_lsu_ctrl module\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 7, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 13, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire bjp_i_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_i_bxx  = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_i_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_i_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_i_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_i_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_i_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_i_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_i_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_i_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_i_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  // ALU operand selection\n  assign bjp_req_alu_op1 = bjp_i_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_i_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq  = bjp_i_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_i_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_i_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_i_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_i_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_i_bgtu;\n  assign bjp_req_alu_add     = bjp_i_jump;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = bjp_i_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp   = bjp_i_bxx | bjp_i_jump;\n  assign bjp_o_cmt_mret  = bjp_i_mret;\n  assign bjp_o_cmt_dret  = bjp_i_dret;\n  assign bjp_o_cmt_fencei = bjp_i_fencei;\n  assign bjp_o_cmt_prdt  = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  // Valid-Ready Handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 10, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg dis_flag, ret_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_reg != ret_ptr_reg) || (dis_flag == ret_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      dis_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo[dis_ptr_reg] <= {disp_i_rdidx, disp_i_pc, disp_i_rdwen, disp_i_rdfpu};\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == E203_OITF_DEPTH-1) dis_flag <= ~dis_flag;\n    end\n  end\n\n  // Retirement logic\n  assign oitf_empty = (dis_ptr_reg == ret_ptr_reg) && (dis_flag == ret_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      ret_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      {ret_rdidx, ret_pc, ret_rdwen, ret_rdfpu} <= fifo[ret_ptr_reg];\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == E203_OITF_DEPTH-1) ret_flag <= ~ret_flag;\n    end\n  end\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+E203_PC_SIZE]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+E203_PC_SIZE]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+E203_PC_SIZE]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+E203_PC_SIZE]);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 15, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output clint_icb_cmd_read,\n  output [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output plic_icb_cmd_read,\n  output [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output fio_icb_cmd_read,\n  output [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output mem_icb_cmd_read,\n  output [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n// ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 4, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 14, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output                       dec_rs1en,\n  output                       dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output                       dec_mulhsu,\n  output                       dec_mul,\n  output                       dec_div,\n  output                       dec_rem,\n  output                       dec_divu,\n  output                       dec_remu,\n  output                       dec_rv32,\n  output                       dec_bjp,\n  output                       dec_jal,\n  output                       dec_jalr,\n  output                       dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0]       dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire                        mulhsu;\n  wire                        mul;\n  wire                        div;\n  wire                        rem;\n  wire                        divu;\n  wire                        remu;\n  wire                        rv32;\n  wire                        bjp;\n  wire                        jal;\n  wire                        jalr;\n  wire                        bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0]        bjp_imm;\n\n  // Instantiate the internal decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(rs1idx),\n    .dec_rs2idx(rs2idx),\n    .dec_mulhsu(mulhsu),\n    .dec_mul(mul),\n    .dec_div(div),\n    .dec_rem(rem),\n    .dec_divu(divu),\n    .dec_remu(remu),\n    .dec_rv32(rv32),\n    .dec_bjp(bjp),\n    .dec_jal(jal),\n    .dec_jalr(jalr),\n    .dec_bxx(bxx),\n    .dec_jalr_rs1idx(jalr_rs1idx),\n    .dec_bjp_imm(bjp_imm)\n  );\n\n  // Connect internal signals to output ports\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 11, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_rdwen;\n  reg [E203_OITF_DEPTH-1:0] fifo_rdfpu;\n  reg [E203_RFIDX_WIDTH-1:0] fifo_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] fifo_pc [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      fifo_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      fifo_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      fifo_pc[dis_ptr_r] <= disp_i_pc;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1)\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1)\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  assign ret_rdidx = fifo_rdidx[ret_ptr_r];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_r];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_r];\n  assign ret_pc = fifo_pc[ret_ptr_r];\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs1idx) & ~fifo_rdfpu);\n  assign oitfrd_match_disprs2 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs2idx) & ~fifo_rdfpu);\n  assign oitfrd_match_disprs3 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs3idx) & ~fifo_rdfpu);\n  assign oitfrd_match_disprd = |(fifo_rdwen & (fifo_rdidx == disp_i_rdidx) & ~fifo_rdfpu);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 5, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 9, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc : \n                           (dec_jalr_rs1idx == 0) ? 0 : \n                           (dec_jalr_rs1idx == 1) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency logic\n  assign jalr_rs1xn_dep = ~oitf_empty & ~ir_empty & ir_rs1en & jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1xn_dep) |\n                    (dec_jalr & (dec_jalr_rs1idx != 0) & (jalr_rs1xn_dep | ~rs1xn_rdrf_r));\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // DFFLR instance\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Control signal\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 16, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n// Internal signals\nwire arbt_icb_cmd_valid;\nwire arbt_icb_cmd_ready;\nwire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\nwire arbt_icb_cmd_read;\nwire [31:0] arbt_icb_cmd_wdata;\nwire [3:0] arbt_icb_cmd_wmask;\nwire arbt_icb_rsp_valid;\nwire arbt_icb_rsp_ready;\nwire arbt_icb_rsp_err;\nwire [31:0] arbt_icb_rsp_rdata;\n\n// Arbitration logic\nsirv_gnrl_icb_arbt #(\n  .ARBT_SCHEME(0),\n  .ALLOW_0CYCL_RSP(0),\n  .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n  .FIFO_CUT_READY(0),\n  .USR_W(1),\n  .ARBT_NUM(`ifdef E203_HAS_DTCM_EXTITF 2 `else 1 `endif),\n  .AW(E203_DTCM_ADDR_WIDTH),\n  .DW(E203_DTCM_DATA_WIDTH),\n  .ARBT_PTR_W(`ifdef E203_HAS_DTCM_EXTITF 1 `else 1 `endif)\n) u_dtcm_icb_arbt (\n  .o_icb_cmd_valid(arbt_icb_cmd_valid),\n  .o_icb_cmd_ready(arbt_icb_cmd_ready),\n  .o_icb_cmd_read(arbt_icb_cmd_read),\n  .o_icb_cmd_addr(arbt_icb_cmd_addr),\n  .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n  .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n  .o_icb_rsp_valid(arbt_icb_rsp_valid),\n  .o_icb_rsp_ready(arbt_icb_rsp_ready),\n  .o_icb_rsp_err(arbt_icb_rsp_err),\n  .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n  .i_bus_icb_cmd_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_ready, `endif lsu2dtcm_icb_cmd_ready}),\n  .i_bus_icb_cmd_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_valid, `endif lsu2dtcm_icb_cmd_valid}),\n  .i_bus_icb_cmd_read({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_read, `endif lsu2dtcm_icb_cmd_read}),\n  .i_bus_icb_cmd_addr({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_addr, `endif lsu2dtcm_icb_cmd_addr}),\n  .i_bus_icb_cmd_wdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wdata, `endif lsu2dtcm_icb_cmd_wdata}),\n  .i_bus_icb_cmd_wmask({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_cmd_wmask, `endif lsu2dtcm_icb_cmd_wmask}),\n  .i_bus_icb_rsp_valid({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_valid, `endif lsu2dtcm_icb_rsp_valid}),\n  .i_bus_icb_rsp_ready({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_ready, `endif lsu2dtcm_icb_rsp_ready}),\n  .i_bus_icb_rsp_err({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_err, `endif lsu2dtcm_icb_rsp_err}),\n  .i_bus_icb_rsp_rdata({`ifdef E203_HAS_DTCM_EXTITF ext2dtcm_icb_rsp_rdata, `endif lsu2dtcm_icb_rsp_rdata}),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// SRAM control logic\nsirv_sram_icb_ctrl #(\n  .DW(E203_DTCM_DATA_WIDTH),\n  .AW(E203_DTCM_ADDR_WIDTH),\n  .MW(E203_DTCM_WMSK_WIDTH),\n  .AW_LSB(2),\n  .USR_W(1)\n) u_sram_icb_ctrl (\n  .sram_ctrl_active(dtcm_active),\n  .tcm_cgstop(tcm_cgstop),\n  .i_icb_cmd_valid(arbt_icb_cmd_valid),\n  .i_icb_cmd_ready(arbt_icb_cmd_ready),\n  .i_icb_cmd_read(arbt_icb_cmd_read),\n  .i_icb_cmd_addr(arbt_icb_cmd_addr),\n  .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n  .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n  .i_icb_rsp_valid(arbt_icb_rsp_valid),\n  .i_icb_rsp_ready(arbt_icb_rsp_ready),\n  .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n  .i_icb_rsp_err(arbt_icb_rsp_err),\n  .ram_cs(dtcm_ram_cs),\n  .ram_we(dtcm_ram_we),\n  .ram_addr(dtcm_ram_addr),\n  .ram_wem(dtcm_ram_wem),\n  .ram_din(dtcm_ram_din),\n  .ram_dout(dtcm_ram_dout),\n  .clk_ram(clk_dtcm_ram),\n  .test_mode(test_mode),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 8, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operations\n  wire [E203_XLEN-1:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = \n    ({E203_XLEN{alu_req_alu_add}} & alu_add_res) |\n    ({E203_XLEN{alu_req_alu_sub}} & alu_sub_res) |\n    ({E203_XLEN{alu_req_alu_xor}} & alu_xor_res) |\n    ({E203_XLEN{alu_req_alu_sll}} & alu_sll_res) |\n    ({E203_XLEN{alu_req_alu_srl}} & alu_srl_res) |\n    ({E203_XLEN{alu_req_alu_sra}} & alu_sra_res) |\n    ({E203_XLEN{alu_req_alu_or}}  & alu_or_res)  |\n    ({E203_XLEN{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operations\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_eq = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_eq;\n\n  // AGU operations\n  wire [E203_XLEN-1:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operations\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = \n    ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_add_res) |\n    ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared buffers\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 6, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 10, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Implementation of the dispatch logic goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 9, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  // Implement the logic for ALU operations here\n\n  // BJP operation logic\n  // Implement the logic for BJP operations here\n\n  // AGU operation logic\n  // Implement the logic for AGU operations here\n\n  // MULDIV operation logic\n  // Implement the logic for MULDIV operations here\n\n  // Shared Buffers (SBFs) logic\n  // Implement the logic for shared buffers here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 5, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 11, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 6, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 17, "code": "module e203_dtcm_ctrl (\n  input  wire                     clk,\n  input  wire                     rst_n,\n  input  wire                     test_mode,\n  input  wire                     tcm_cgstop,\n  output wire                     dtcm_active,\n\n  input  wire                     lsu2dtcm_icb_cmd_valid,\n  output wire                     lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire                     lsu2dtcm_icb_cmd_read,\n  input  wire [31:0]              lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0]               lsu2dtcm_icb_cmd_wmask,\n  output wire                     lsu2dtcm_icb_rsp_valid,\n  input  wire                     lsu2dtcm_icb_rsp_ready,\n  output wire                     lsu2dtcm_icb_rsp_err,\n  output wire [31:0]              lsu2dtcm_icb_rsp_rdata,\n\n`ifdef E203_HAS_DTCM_EXTITF\n  input  wire                     ext2dtcm_icb_cmd_valid,\n  output wire                     ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire                     ext2dtcm_icb_cmd_read,\n  input  wire [31:0]              ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0]               ext2dtcm_icb_cmd_wmask,\n  output wire                     ext2dtcm_icb_rsp_valid,\n  input  wire                     ext2dtcm_icb_rsp_ready,\n  output wire                     ext2dtcm_icb_rsp_err,\n  output wire [31:0]              ext2dtcm_icb_rsp_rdata,\n`endif\n\n  output wire                     dtcm_ram_cs,\n  output wire                     dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire                     clk_dtcm_ram\n);\n\n// Internal signals and logic\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 10, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 14, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_rsp_valid,\n  input clint_icb_cmd_ready,\n  output clint_icb_rsp_valid,\n  input plic_icb_cmd_ready,\n  output plic_icb_rsp_valid,\n  input fio_icb_cmd_ready,\n  output fio_icb_rsp_valid,\n  input mem_icb_cmd_ready,\n  output mem_icb_rsp_valid,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 10, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena,\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'b0;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mscratch <= 32'b0;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      mtvec <= 32'b0;\n      mcycle <= 32'b0;\n      mcycleh <= 32'b0;\n      minstret <= 32'b0;\n      minstreth <= 32'b0;\n      counterstop <= 32'b0;\n      mcgstop <= 32'b0;\n      itcmnohold <= 32'b0;\n      mdvnob2b <= 32'b0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'h344: mip <= wbck_csr_dat;\n          12'hb00: mcycle <= wbck_csr_dat;\n          12'hb80: mcycleh <= wbck_csr_dat;\n          12'hb02: minstret <= wbck_csr_dat;\n          12'hb82: minstreth <= wbck_csr_dat;\n          12'hbff: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hb00: read_csr_dat = mcycle;\n      12'hb80: read_csr_dat = mcycleh;\n      12'hb02: read_csr_dat = minstret;\n      12'hb82: read_csr_dat = minstreth;\n      12'hbff: read_csr_dat = counterstop;\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // Mode Logic\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt Logic\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Logic\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 6, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n  // Module instantiations and internal logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 7, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 7, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_pulse,\n  output flush_req,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 7, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire itcm_nohold,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input  wire ifu2itcm_icb_cmd_ready,\n  input  wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire ifu2biu_icb_cmd_ready,\n  input  wire ifu2biu_icb_rsp_valid,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input  wire ifu_halt_req,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 8, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  output pipe_flush_req,\n  output flush_pulse,\n  output flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input pipe_flush_ack,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 8, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  [ADDR_SIZE-1:0] itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 9, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [12-1:0]            csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [2-1:0]             agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 10, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [2-1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 8, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 7, "code": "module e203_cpu (\n  input  wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input  wire [31:0] dcsr_r,\n  input  wire [E203_PC_SIZE-1:0] dpc_r,\n  input  wire [31:0] dscratch_r,\n  input  wire dbg_mode,\n  input  wire dbg_halt_r,\n  input  wire dbg_step_r,\n  input  wire dbg_ebreakm_r,\n  input  wire dbg_stopcycle,\n  input  wire [E203_HART_ID_W-1:0] core_mhartid,\n  input  wire dbg_irq_a,\n  input  wire ext_irq_a,\n  input  wire sft_irq_a,\n  input  wire tmr_irq_a,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input  wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input  wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input  wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input  wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input  wire ppi_icb_rsp_err,\n  input  wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input  wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input  wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input  wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input  wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input  wire clint_icb_rsp_err,\n  input  wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input  wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input  wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input  wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input  wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input  wire plic_icb_rsp_err,\n  input  wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input  wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input  wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input  wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input  wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input  wire fio_icb_rsp_err,\n  input  wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input  wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input  wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input  wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input  wire mem_icb_rsp_err,\n  input  wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n// Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 19, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 11, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 15, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 4, "code": "module e203_ifu_ift2icb (\n  input  wire        itcm_nohold,\n  input  wire        ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire        ifu_req_seq,\n  input  wire        ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire        ifu_rsp_ready,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire        ifu_req_ready,\n  output wire        ifu_rsp_valid,\n  output wire        ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire        ifu2itcm_icb_cmd_valid,\n  input  wire        ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire        ifu2itcm_icb_rsp_valid,\n  output wire        ifu2itcm_icb_rsp_ready,\n  input  wire        ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire        ifu2biu_icb_cmd_valid,\n  input  wire        ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire        ifu2biu_icb_rsp_valid,\n  output wire        ifu2biu_icb_rsp_ready,\n  input  wire        ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and state machine declarations\n  reg [1:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 2'b00);\n  wire icb_sta_is_1st = (icb_state == 2'b01);\n  wire icb_sta_is_wait2nd = (icb_state == 2'b10);\n  wire icb_sta_is_2nd = (icb_state == 2'b11);\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 2'b00;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  // State transition conditions\n  wire state_idle_exit_ena = icb_sta_is_idle & ifu_req_hsked;\n  wire state_1st_exit_ena = icb_sta_is_1st & (ifu_icb_rsp2leftover ? ifu_icb_rsp_hsked : i_ifu_rsp_hsked);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_sta_is_2nd & i_ifu_rsp_hsked;\n\n  // State update control\n  wire icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n  reg [1:0] icb_state_nxt;\n  always @(*) begin\n    case (icb_state)\n      2'b00: icb_state_nxt = state_idle_exit_ena ? 2'b01 : 2'b00;\n      2'b01: icb_state_nxt = state_1st_exit_ena ? (req_need_2uop_r ? 2'b10 : 2'b00) : 2'b01;\n      2'b10: icb_state_nxt = state_wait2nd_exit_ena ? 2'b11 : 2'b10;\n      2'b11: icb_state_nxt = state_2nd_exit_ena ? (ifu_req_hsked ? 2'b01 : 2'b00) : 2'b11;\n      default: icb_state_nxt = 2'b00;\n    endcase\n  end\n\n  // Bypass buffer implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  wire [31:0] ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  // Lane operation implementation\n  wire ifu_req_lane_cross = (PC_SIZE == 32) ? (ifu_req_pc[1] == 1) : (ifu_req_pc[2:1] == 2'b11);\n  wire ifu_req_lane_begin = (PC_SIZE == 32) ? (ifu_req_pc[1] == 0) : (ifu_req_pc[2:1] == 2'b00);\n\n  // Request feature registering\n  reg req_same_cross_holdup_r;\n  reg req_need_2uop_r;\n  reg req_need_0uop_r;\n\n  // Target indication registering\n  reg icb_cmd2itcm_r;\n  reg icb_cmd2biu_r;\n\n  // Address alignment information\n  reg [1:0] icb_cmd_addr_2_1_r;\n\n  // Leftover buffer implementation\n  reg [15:0] leftover_r;\n  reg leftover_err_r;\n\n  // Response generation implementation\n  wire rsp_instr_sel_leftover = icb_sta_is_1st & req_same_cross_holdup_r;\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  // ICB command generation implementation\n  wire ifu_icb_cmd_valid = ifu_req_hsked & ~req_need_0uop_r;\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = ifu_req_last_pc + (req_need_2uop_r ? 2 : 0);\n\n  // Handshake control implementation\n  wire ifu_req_ready_condi = icb_sta_is_idle | (req_need_0uop_r & icb_sta_is_1st) | (req_need_2uop_r & icb_sta_is_2nd);\n  assign ifu_req_ready = ifu_icb_cmd_ready & ifu_req_ready_condi;\n\n  // Data alignment implementation\n  wire [15:0] ifu_icb_rsp_rdata_lsb16 = ifu_icb_rsp_rdata[15:0];\n\n  // ICB response merge implementation\n  wire ifu_icb_rsp_err = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_err : ifu2biu_icb_rsp_err;\n  wire ifu_icb_rsp_valid = icb_cmd2itcm_r ? ifu2itcm_icb_rsp_valid : ifu2biu_icb_rsp_valid;\n\n  // ICB request distribution implementation\n  wire ifu_icb_cmd2biu = ~ifu_icb_cmd2itcm;\n  wire ifu2biu_icb_cmd_valid_pre = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr;\n\n  // System memory interface implementation\n  assign ifu2biu_icb_cmd_addr = ifu2biu_icb_cmd_addr_pre;\n  assign ifu2biu_icb_cmd_valid = ifu2biu_icb_cmd_valid_pre;\n  assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 8, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n  wire ifu_req_ready;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 5, "code": "module e203_core(\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  e203_ifu u_e203_ifu(\n    .inspect_pc(inspect_pc),\n    .ifu_active(),\n    .itcm_nohold(),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(),\n    .ifu_o_pc(),\n    .ifu_o_pc_vld(),\n    .ifu_o_misalgn(),\n    .ifu_o_buserr(),\n    .ifu_o_rs1idx(),\n    .ifu_o_rs2idx(),\n    .ifu_o_prdt_taken(),\n    .ifu_o_muldiv_b2b(),\n    .ifu_o_valid(),\n    .ifu_o_ready(),\n    .pipe_flush_req(),\n    .pipe_flush_ack(),\n    .pipe_flush_add_op1(),\n    .pipe_flush_add_op2(),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata)\n  );\n\n  e203_exu u_e203_exu(\n    .commit_mret(),\n    .commit_trap(),\n    .exu_active(),\n    .excp_active(),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(),\n    .wfi_halt_ifu_ack(),\n    .oitf_empty(),\n    .rf2ifu_x1(),\n    .rf2ifu_rs1(),\n    .dec2ifu_rden(),\n    .dec2ifu_rs1en(),\n    .dec2ifu_rdidx(),\n    .dec2ifu_mulhsu(),\n    .dec2ifu_div(),\n    .dec2ifu_rem(),\n    .dec2ifu_divu(),\n    .dec2ifu_remu(),\n    .test_mode(),\n    .clk_aon(),\n    .clk(),\n    .rst_n(),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle)\n  );\n\n  e203_lsu u_e203_lsu(\n    .commit_mret(),\n    .commit_trap(),\n    .excp_active(),\n    .lsu_active(),\n    .lsu_o_valid(),\n    .lsu_o_ready(),\n    .lsu_o_wbck_wdat(),\n    .lsu_o_wbck_itag(),\n    .lsu_o_wbck_err(),\n    .lsu_o_cmt_ld(),\n    .lsu_o_cmt_st(),\n    .lsu_o_cmt_badaddr(),\n    .lsu_o_cmt_buserr(),\n    .agu_icb_cmd_valid(),\n    .agu_icb_cmd_ready(),\n    .agu_icb_cmd_addr(),\n    .agu_icb_cmd_read(),\n    .agu_icb_cmd_wdata(),\n    .agu_icb_cmd_wmask(),\n    .agu_icb_cmd_lock(),\n    .agu_icb_cmd_excl(),\n    .agu_icb_cmd_size(),\n    .agu_icb_cmd_back2agu(),\n    .agu_icb_cmd_usign(),\n    .agu_icb_cmd_itag(),\n    .agu_icb_rsp_valid(),\n    .agu_icb_rsp_ready(),\n    .agu_icb_rsp_err(),\n    .agu_icb_rsp_excl_ok(),\n    .agu_icb_rsp_rdata()\n  );\n\n  e203_biu u_e203_biu(\n    .biu_active(),\n    .clk(),\n    .rst_n(),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 9, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 8, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_valid,\n  input wire ifu_req_ready,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  // Halt control logic\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  // Pipeline flush control\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (clk, rst_n, dly_flush_ena, dly_flush_nxt, dly_flush_r);\n\n  // IR (Instruction Register) control\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  sirv_gnrl_dfflr #(1) ir_pc_vld_dfflr (clk, rst_n, ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r);\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (clk, rst_n, ir_valid_set, ifu_err_nxt, ifu_err_r);\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (clk, rst_n, ir_valid_set, prdt_taken, ifu_prdt_taken_r);\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ifu_muldiv_b2b_dfflr (clk, rst_n, ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r);\n\n  // IR instruction storage implementation\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (clk, rst_n, ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r_hi);\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (clk, rst_n, ir_lo_ena, ifu_ir_nxt[15:0], ifu_ir_r_lo);\n\n  // Source register index storage\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (clk, rst_n, ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (clk, rst_n, ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r);\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n\n  // PC generation and update\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  // Response processing control\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Outstanding request control\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (clk, rst_n, out_flag_ena, out_flag_nxt, out_flag_r);\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal = minidec_jal;\n  wire dec_jalr = minidec_jalr;\n  wire dec_bxx = minidec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm = minidec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx = minidec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr = ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1 = rf2ifu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1 = rf2ifu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (clk, rst_n, pc_newpend_ena, pc_newpend_nxt, pc_newpend_r);\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  // State output interface\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 6, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .inspect_pc(inspect_pc),\n    .ifu_active(),\n    .itcm_nohold(),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(),\n    .ifu_o_pc(),\n    .ifu_o_pc_vld(),\n    .ifu_o_misalgn(),\n    .ifu_o_buserr(),\n    .ifu_o_rs1idx(),\n    .ifu_o_rs2idx(),\n    .ifu_o_prdt_taken(),\n    .ifu_o_muldiv_b2b(),\n    .ifu_o_valid(),\n    .ifu_o_ready(),\n    .pipe_flush_req(),\n    .pipe_flush_ack(),\n    .pipe_flush_add_op1(),\n    .pipe_flush_add_op2(),\n    .pipe_flush_pc(),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(),\n    .commit_trap(),\n    .exu_active(),\n    .excp_active(),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(),\n    .wfi_halt_ifu_ack(),\n    .oitf_empty(),\n    .rf2ifu_x1(),\n    .rf2ifu_rs1(),\n    .dec2ifu_rden(),\n    .dec2ifu_rs1en(),\n    .dec2ifu_rdidx(),\n    .dec2ifu_mulhsu(),\n    .dec2ifu_div(),\n    .dec2ifu_rem(),\n    .dec2ifu_divu(),\n    .dec2ifu_remu(),\n    .test_mode(),\n    .clk_aon(),\n    .clk(),\n    .rst_n(),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(),\n    .commit_trap(),\n    .excp_active(),\n    .lsu_active(),\n    .lsu_o_valid(),\n    .lsu_o_ready(),\n    .lsu_o_wbck_wdat(),\n    .lsu_o_wbck_itag(),\n    .lsu_o_wbck_err(),\n    .lsu_o_cmt_ld(),\n    .lsu_o_cmt_st(),\n    .lsu_o_cmt_badaddr(),\n    .lsu_o_cmt_buserr(),\n    .agu_icb_cmd_valid(),\n    .agu_icb_cmd_ready(),\n    .agu_icb_cmd_addr(),\n    .agu_icb_cmd_read(),\n    .agu_icb_cmd_wdata(),\n    .agu_icb_cmd_wmask(),\n    .agu_icb_cmd_lock(),\n    .agu_icb_cmd_excl(),\n    .agu_icb_cmd_size(),\n    .agu_icb_cmd_back2agu(),\n    .agu_icb_cmd_usign(),\n    .agu_icb_cmd_itag(),\n    .agu_icb_rsp_valid(),\n    .agu_icb_rsp_ready(),\n    .agu_icb_rsp_err(),\n    .agu_icb_rsp_excl_ok(),\n    .agu_icb_rsp_rdata()\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(),\n    .clk(),\n    .rst_n(),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 8, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n  // Module instantiations and internal logic here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 10, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // x1 register output\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 11, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [12-1:0]            csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [2-1:0]             agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 11, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_XLEN-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] mcgstop;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      mcgstop <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode settings\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt enable status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug CSR enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en;\n\n  // CSR read outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Clock gating and stop signals\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\n  // Illegal access flag\n  assign csr_access_ilgl = 0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 12, "code": "module e203_lsu (\n  input  wire        commit_mret,\n  input  wire        commit_trap,\n  input  wire        excp_active,\n  output wire        lsu_active,\n\n  output wire        lsu_o_valid,\n  input  wire        lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire        lsu_o_wbck_err,\n  output wire        lsu_o_cmt_ld,\n  output wire        lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire        lsu_o_cmt_buserr,\n\n  input  wire        agu_icb_cmd_valid,\n  output wire        agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire        agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire        agu_icb_cmd_lock,\n  input  wire        agu_icb_cmd_excl,\n  input  wire [1:0]  agu_icb_cmd_size,\n  input  wire        agu_icb_cmd_back2agu,\n  input  wire        agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire        agu_icb_rsp_valid,\n  input  wire        agu_icb_rsp_ready,\n  output wire        agu_icb_rsp_err,\n  output wire        agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire        nice_mem_holdup,\n  input  wire        itcm_region_indic,\n  input  wire        dtcm_region_indic,\n\n  output wire        nice_icb_cmd_valid,\n  input  wire        nice_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  output wire        nice_icb_cmd_read,\n  output wire [XLEN-1:0] nice_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire        nice_icb_cmd_lock,\n  output wire        nice_icb_cmd_excl,\n  output wire [1:0]  nice_icb_cmd_size,\n  input  wire        nice_icb_rsp_valid,\n  output wire        nice_icb_rsp_ready,\n  input  wire        nice_icb_rsp_err,\n  input  wire        nice_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] nice_icb_rsp_rdata,\n\n  output wire        dcache_icb_cmd_valid,\n  input  wire        dcache_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output wire        dcache_icb_cmd_read,\n  output wire [XLEN-1:0] dcache_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output wire        dcache_icb_cmd_lock,\n  output wire        dcache_icb_cmd_excl,\n  output wire [1:0]  dcache_icb_cmd_size,\n  input  wire        dcache_icb_rsp_valid,\n  output wire        dcache_icb_rsp_ready,\n  input  wire        dcache_icb_rsp_err,\n  input  wire        dcache_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output wire        dtcm_icb_cmd_valid,\n  input  wire        dtcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dtcm_icb_cmd_addr,\n  output wire        dtcm_icb_cmd_read,\n  output wire [XLEN-1:0] dtcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output wire        dtcm_icb_cmd_lock,\n  output wire        dtcm_icb_cmd_excl,\n  output wire [1:0]  dtcm_icb_cmd_size,\n  input  wire        dtcm_icb_rsp_valid,\n  output wire        dtcm_icb_rsp_ready,\n  input  wire        dtcm_icb_rsp_err,\n  input  wire        dtcm_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] dtcm_icb_rsp_rdata,\n\n  output wire        itcm_icb_cmd_valid,\n  input  wire        itcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] itcm_icb_cmd_addr,\n  output wire        itcm_icb_cmd_read,\n  output wire [XLEN-1:0] itcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output wire        itcm_icb_cmd_lock,\n  output wire        itcm_icb_cmd_excl,\n  output wire [1:0]  itcm_icb_cmd_size,\n  input  wire        itcm_icb_rsp_valid,\n  output wire        itcm_icb_rsp_ready,\n  input  wire        itcm_icb_rsp_err,\n  input  wire        itcm_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] itcm_icb_rsp_rdata,\n\n  output wire        biu_icb_cmd_valid,\n  input  wire        biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire        biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire        biu_icb_cmd_lock,\n  output wire        biu_icb_cmd_excl,\n  output wire [1:0]  biu_icb_cmd_size,\n  input  wire        biu_icb_rsp_valid,\n  output wire        biu_icb_rsp_ready,\n  input  wire        biu_icb_rsp_err,\n  input  wire        biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 12, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      misa <= 0;\n      mvendorid <= 536;\n      marchid <= 'hE203;\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      dcsr <= 0;\n      dpc <= 0;\n      dscratch <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'h344: mip <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          12'h7b0: if (dbg_mode) dcsr <= wbck_csr_dat;\n          12'h7b1: if (dbg_mode) dpc <= wbck_csr_dat;\n          12'h7b2: if (dbg_mode) dscratch <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'h344: read_csr_dat = mip;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = counterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode and Interrupt Logic\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 18, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 8, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 10, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 14, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire bjp_is_beq    = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne    = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt    = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt    = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu   = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu   = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump   = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_is_bxx    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_is_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_is_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_is_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  // Operand selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write-back data\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp    = bjp_is_bxx | bjp_is_jump;\n  assign bjp_o_cmt_mret   = bjp_is_mret;\n  assign bjp_o_cmt_dret   = bjp_is_dret;\n  assign bjp_o_cmt_fencei = bjp_is_fencei;\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 15, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Internal signals\n  wire is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire is_bxx = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire is_mret = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire is_dret = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire is_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  wire is_beq = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire is_bne = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire is_blt = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire is_bgt = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n\n  // ALU operand selection\n  assign bjp_req_alu_op1 = is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq = is_beq;\n  assign bjp_req_alu_cmp_ne = is_bne;\n  assign bjp_req_alu_cmp_lt = is_blt;\n  assign bjp_req_alu_cmp_gt = is_bgt;\n  assign bjp_req_alu_cmp_ltu = is_bltu;\n  assign bjp_req_alu_cmp_gtu = is_bgtu;\n  assign bjp_req_alu_add = is_jump;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write-back data\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp = is_bxx | is_jump;\n  assign bjp_o_cmt_mret = is_mret;\n  assign bjp_o_cmt_dret = is_dret;\n  assign bjp_o_cmt_fencei = is_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 15, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk_int;\n  wire core_wfi_int;\n  wire tm_stop_int;\n  wire dbg_irq_r_int;\n  wire ext_irq_a_int;\n  wire sft_irq_a_int;\n  wire tmr_irq_a_int;\n  wire tcm_sd_int;\n  wire tcm_ds_int;\n  wire ext2itcm_icb_cmd_valid_int;\n  wire ext2itcm_icb_cmd_ready_int;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr_int;\n  wire ext2itcm_icb_cmd_read_int;\n  wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata_int;\n  wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask_int;\n  wire ext2itcm_icb_rsp_valid_int;\n  wire ext2itcm_icb_rsp_ready_int;\n  wire ext2itcm_icb_rsp_err_int;\n  wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata_int;\n  wire ext2dtcm_icb_cmd_valid_int;\n  wire ext2dtcm_icb_cmd_ready_int;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr_int;\n  wire ext2dtcm_icb_cmd_read_int;\n  wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata_int;\n  wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask_int;\n  wire ext2dtcm_icb_rsp_valid_int;\n  wire ext2dtcm_icb_rsp_ready_int;\n  wire ext2dtcm_icb_rsp_err_int;\n  wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata_int;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk_int),\n    .core_wfi(core_wfi_int),\n    .tm_stop(tm_stop_int),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r_int),\n    .ext_irq_a(ext_irq_a_int),\n    .sft_irq_a(sft_irq_a_int),\n    .tmr_irq_a(tmr_irq_a_int),\n    .tcm_sd(tcm_sd_int),\n    .tcm_ds(tcm_ds_int),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid_int),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready_int),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr_int),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read_int),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata_int),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask_int),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid_int),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready_int),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err_int),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata_int),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid_int),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready_int),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr_int),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read_int),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata_int),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask_int),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid_int),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready_int),\n    .ext2dtcm_icb_rsp_err(ext2dtcm_icb_rsp_err_int),\n    .ext2dtcm_icb_rsp_rdata(ext2dtcm_icb_rsp_rdata_int),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_srams\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd_int),\n    .itcm_ram_ds(tcm_ds_int),\n    .itcm_ram_ls(),\n    .itcm_ram_cs(),\n    .itcm_ram_we(),\n    .itcm_ram_addr(),\n    .itcm_ram_wem(),\n    .itcm_ram_din(),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(),\n    .rst_itcm(),\n    .dtcm_ram_sd(),\n    .dtcm_ram_ds(),\n    .dtcm_ram_ls(),\n    .dtcm_ram_cs(),\n    .dtcm_ram_we(),\n    .dtcm_ram_addr(),\n    .dtcm_ram_wem(),\n    .dtcm_ram_din(),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(),\n    .rst_dtcm(),\n    .test_mode()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 9, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire ppi_region_indic,\n  input wire ppi_icb_enable,\n  input wire ppi_icb_cmd_ready,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire clint_region_indic,\n  input wire clint_icb_enable,\n  input wire clint_icb_cmd_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire plic_region_indic,\n  input wire plic_icb_enable,\n  input wire plic_icb_cmd_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire fio_region_indic,\n  input wire fio_icb_enable,\n  input wire fio_icb_cmd_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  input wire mem_icb_cmd_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 11, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 9, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n  // Internal logic and module instantiations go here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 10, "code": "module e203_cpu (\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n// Submodule instantiations and internal logic would be defined here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 12, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 13, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 9, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_pulse,\n  output flush_req,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 14, "code": "module e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 7, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire lsu2itcm_icb_cmd_ready_n2w;\n  wire lsu2itcm_icb_rsp_valid_n2w;\n  wire lsu2itcm_icb_rsp_err_n2w;\n  wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata_n2w;\n\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready_n2w),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid_n2w),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err_n2w),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata_n2w),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Additional module instances and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 10, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL prediction\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculations\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc :\n                           (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency checks\n  assign jalr_rs1xn_dep = ~oitf_empty & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1);\n  assign jalr_rs1xn_dep_ir_clr = jalr_rs1idx_cam_irrdidx & ir_valid_clr;\n\n  // Read request logic\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      rs1xn_rdrf_r <= 1'b0;\n    end else if (rs1xn_rdrf_ena) begin\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n    end\n  end\n\n  // Control signals\n  assign bpu_wait = jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr;\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 10, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1;\n  wire csr_op1_imm;\n  wire csr_op1_reg;\n  wire csr_rd_en_int;\n  wire csr_wr_en_int;\n  wire csr_ena_int;\n  wire csr_sel_nice_int;\n  wire nice_csr_valid_int;\n\n  // Operand 1 preparation\n  assign csr_op1_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM] ? csr_i_info[E203_DECINFO_CSR_ZIMMM] : csr_i_rs1;\n  assign csr_op1_reg = csr_i_info[E203_DECINFO_CSR_RS1IS0] ? 0 : csr_i_rs1;\n  assign csr_op1 = csr_i_info[E203_DECINFO_CSR_RS1IMM] ? csr_op1_imm : csr_op1_reg;\n\n  // CSR read enable\n  assign csr_rd_en_int = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  // CSR write enable\n  assign csr_wr_en_int = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  // CSR index\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // CSR enable\n  assign csr_ena_int = csr_o_valid & csr_o_ready & ~csr_sel_nice_int;\n\n  // CSR write-back data\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) : 0;\n\n  // CSR output valid\n  assign csr_o_valid = csr_i_valid & nice_csr_ready;\n\n  // CSR output write-back data\n  assign csr_o_wbck_wdat = csr_sel_nice_int ? nice_csr_rdata : read_csr_dat;\n\n  // CSR output write-back error\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE CSR selection\n  assign csr_sel_nice_int = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n\n  // NICE CSR valid\n  assign nice_csr_valid_int = csr_i_valid & csr_o_ready;\n\n  // NICE CSR address\n  assign nice_csr_addr = {csr_idx, 20'b0};\n\n  // NICE CSR write enable\n  assign nice_csr_wr = csr_wr_en_int;\n\n  // NICE CSR write data\n  assign nice_csr_wdata = csr_op1;\n\n  // Output assignments\n  assign csr_i_ready = csr_o_ready;\n  assign csr_ena = csr_ena_int;\n  assign csr_wr_en = csr_wr_en_int;\n  assign csr_rd_en = csr_rd_en_int;\n  assign csr_sel_nice = csr_sel_nice_int;\n  assign nice_csr_valid = nice_csr_valid_int;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 9, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 16, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal signals\n  wire bjp_is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_is_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp   = bjp_i_valid;\n  assign bjp_o_cmt_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt  = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n  assign bjp_o_cmt_rslv  = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write-back data\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err  = 1'b0;\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 11, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n  // Module instantiations and internal logic go here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 16, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output [1:0] ppi_icb_cmd_burst,\n  output [1:0] ppi_icb_cmd_beat,\n  output ppi_icb_cmd_lock,\n  output ppi_icb_cmd_excl,\n  output [1:0] ppi_icb_cmd_size,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input ppi_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output clint_icb_cmd_read,\n  output [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output [1:0] clint_icb_cmd_burst,\n  output [1:0] clint_icb_cmd_beat,\n  output clint_icb_cmd_lock,\n  output clint_icb_cmd_excl,\n  output [1:0] clint_icb_cmd_size,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input clint_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output plic_icb_cmd_read,\n  output [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output [1:0] plic_icb_cmd_burst,\n  output [1:0] plic_icb_cmd_beat,\n  output plic_icb_cmd_lock,\n  output plic_icb_cmd_excl,\n  output [1:0] plic_icb_cmd_size,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input plic_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output fio_icb_cmd_read,\n  output [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output [1:0] fio_icb_cmd_burst,\n  output [1:0] fio_icb_cmd_beat,\n  output fio_icb_cmd_lock,\n  output fio_icb_cmd_excl,\n  output [1:0] fio_icb_cmd_size,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input fio_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output mem_icb_cmd_read,\n  output [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output [1:0] mem_icb_cmd_burst,\n  output [1:0] mem_icb_cmd_beat,\n  output mem_icb_cmd_lock,\n  output mem_icb_cmd_excl,\n  output [1:0] mem_icb_cmd_size,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input mem_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 9, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_ready;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(pipe_flush_pc),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 10, "code": "module e203_exu_alu_lsuagu (\n  input agu_i_valid,\n  output agu_i_ready,\n  input [E203_XLEN-1:0] agu_i_rs1,\n  input [E203_XLEN-1:0] agu_i_rs2,\n  input [E203_XLEN-1:0] agu_i_imm,\n  input [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input flush_req,\n  input flush_pulse,\n  output amo_wait,\n  input oitf_empty,\n  output agu_o_valid,\n  input agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input [E203_XLEN-1:0] agu_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 8, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram,\n  output wire itcm_active\n);\n\n  // Internal signals and logic for ITCM controller\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 16, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 9, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire [E203_PC_SIZE-1:0] inspect_pc\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  // Halt control logic\n  wire halt_ack_r;\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & oitf_empty;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  // Pipeline flush control\n  wire dly_flush_r;\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (clk, rst_n, dly_flush_ena, dly_flush_nxt, dly_flush_r);\n\n  // IR control\n  wire ir_valid_r;\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req) & (~ifu_rsp_err);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_add_op1 = (pipe_flush_req) ? pipe_flush_add_op1 : pc_r;\n  wire [E203_PC_SIZE-1:0] pc_add_op2 = (pipe_flush_req) ? pipe_flush_add_op2 : 3'd4;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  wire [E203_PC_SIZE-1:0] pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  // Fetch request generation\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_err);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | pipe_flush_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  // Response processing control\n  wire ifu_rsp2ir_ready = (pipe_flush_req) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Outstanding request control\n  wire out_flag_r;\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (clk, rst_n, out_flag_ena, out_flag_nxt, out_flag_r);\n\n  // Mini-decoder interface\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_rsp_instr;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire prdt_taken;\n  wire bpu_wait;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring\n  wire pc_newpend_r;\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (clk, rst_n, pc_newpend_ena, pc_newpend_nxt, pc_newpend_r);\n\n  // Output assignments\n  assign ifu_req_pc = pc_r;\n  assign ifu_req_seq = (~pipe_flush_req) & (~ifu_rsp_err) & (~bpu_wait);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n  assign ifu_o_ir = ifu_rsp_instr;\n  assign ifu_o_pc = pc_r;\n  assign ifu_o_pc_vld = ir_pc_vld_r;\n  assign ifu_o_rs1idx = ir_rs1idx_r;\n  assign ifu_o_rs2idx = ir_rs2idx_r;\n  assign ifu_o_prdt_taken = prdt_taken;\n  assign ifu_o_misalgn = 1'b0;\n  assign ifu_o_buserr = ifu_rsp_err;\n  assign ifu_o_muldiv_b2b = ifu_muldiv_b2b_r;\n  assign ifu_o_valid = ir_valid_r;\n  assign ifu_halt_ack = halt_ack_r;\n  assign inspect_pc = pc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 13, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena,\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] epc;\n  reg [E203_XLEN-1:0] cause;\n  reg [E203_XLEN-1:0] badaddr;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      mcgstop <= 0;\n      epc <= 0;\n      cause <= 0;\n      badaddr <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode Logic\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt Logic\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Logic\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n\n  // Custom Logic\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 12, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_rdwen;\n  reg [E203_OITF_DEPTH-1:0] fifo_rdfpu;\n  reg [E203_RFIDX_WIDTH-1:0] fifo_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] fifo_pc [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg dis_flag, ret_flag;\n\n  // Dispatch and retirement pointers\n  assign dis_ptr = dis_ptr_reg;\n  assign ret_ptr = ret_ptr_reg;\n\n  // Full and empty conditions\n  wire oitf_full = (dis_ptr_reg == ret_ptr_reg) && (dis_flag != ret_flag);\n  assign oitf_empty = (dis_ptr_reg == ret_ptr_reg) && (dis_flag == ret_flag);\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      dis_flag <= 0;\n    end else if (dis_ena && !oitf_full) begin\n      fifo_rdwen[dis_ptr_reg] <= disp_i_rdwen;\n      fifo_rdfpu[dis_ptr_reg] <= disp_i_rdfpu;\n      fifo_rdidx[dis_ptr_reg] <= disp_i_rdidx;\n      fifo_pc[dis_ptr_reg] <= disp_i_pc;\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == (E203_OITF_DEPTH-1))\n        dis_flag <= ~dis_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      ret_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == (E203_OITF_DEPTH-1))\n        ret_flag <= ~ret_flag;\n    end\n  end\n\n  // Output signals for retiring instruction\n  assign ret_rdidx = fifo_rdidx[ret_ptr_reg];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_reg];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_reg];\n  assign ret_pc = fifo_pc[ret_ptr_reg];\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && fifo_rdwen[dis_ptr_reg] && (disp_i_rs1idx == fifo_rdidx[dis_ptr_reg]));\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && fifo_rdwen[dis_ptr_reg] && (disp_i_rs2idx == fifo_rdidx[dis_ptr_reg]));\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && fifo_rdwen[dis_ptr_reg] && (disp_i_rs3idx == fifo_rdidx[dis_ptr_reg]));\n  assign oitfrd_match_disprd = (disp_i_rdwen && fifo_rdwen[dis_ptr_reg] && (disp_i_rdidx == fifo_rdidx[dis_ptr_reg]));\n\n  // Ready signal for dispatch\n  assign dis_ready = !oitf_full;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 16, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire csr_clk;\n  wire core_wfi_signal;\n  wire timer_stop;\n  wire [E203_PC_SIZE-1:0] reset_vector;\n  wire debug_irq;\n  wire external_irq;\n  wire software_irq;\n  wire timer_irq;\n  wire tcm_shutdown;\n  wire tcm_deep_sleep;\n  wire itcm_cmd_valid;\n  wire itcm_cmd_ready;\n  wire [E203_ITCM_ADDR_WIDTH-1:0] itcm_cmd_addr;\n  wire itcm_cmd_read;\n  wire [E203_XLEN-1:0] itcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] itcm_cmd_wmask;\n  wire itcm_rsp_valid;\n  wire itcm_rsp_ready;\n  wire itcm_rsp_err;\n  wire [E203_XLEN-1:0] itcm_rsp_rdata;\n  wire dtcm_cmd_valid;\n  wire dtcm_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] dtcm_cmd_addr;\n  wire dtcm_cmd_read;\n  wire [E203_XLEN-1:0] dtcm_cmd_wdata;\n  wire [E203_XLEN/8-1:0] dtcm_cmd_wmask;\n  wire dtcm_rsp_valid;\n  wire dtcm_rsp_ready;\n  wire dtcm_rsp_err;\n  wire [E203_XLEN-1:0] dtcm_rsp_rdata;\n\n  // Core module instantiation\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(csr_clk),\n    .core_wfi(core_wfi_signal),\n    .tm_stop(timer_stop),\n    .pc_rtvec(reset_vector),\n    .dbg_irq_r(debug_irq),\n    .ext_irq_a(external_irq),\n    .sft_irq_a(software_irq),\n    .tmr_irq_a(timer_irq),\n    .tcm_sd(tcm_shutdown),\n    .tcm_ds(tcm_deep_sleep),\n    .ext2itcm_icb_cmd_valid(itcm_cmd_valid),\n    .ext2itcm_icb_cmd_ready(itcm_cmd_ready),\n    .ext2itcm_icb_cmd_addr(itcm_cmd_addr),\n    .ext2itcm_icb_cmd_read(itcm_cmd_read),\n    .ext2itcm_icb_cmd_wdata(itcm_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(itcm_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(itcm_rsp_valid),\n    .ext2itcm_icb_rsp_ready(itcm_rsp_ready),\n    .ext2itcm_icb_rsp_err(itcm_rsp_err),\n    .ext2itcm_icb_rsp_rdata(itcm_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(dtcm_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(dtcm_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(dtcm_cmd_addr),\n    .ext2dtcm_icb_cmd_read(dtcm_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(dtcm_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(dtcm_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(dtcm_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(dtcm_rsp_ready),\n    .ext2dtcm_icb_rsp_err(dtcm_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(dtcm_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assignments\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = csr_clk;\n  assign core_wfi = core_wfi_signal;\n  assign tm_stop = timer_stop;\n  assign dbg_irq_r = debug_irq;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 11, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU logic implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 12, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Internal logic for dispatching instructions to ALU and OITF\n  // Handling operand forwarding, dependencies, and WFI requests\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 11, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 15, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr = instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the internal decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(i_instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 7, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate the IFU module\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  // Instantiate the EXU module\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  // Instantiate the LSU module\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  // Instantiate the BIU module\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_icb_cmd_valid(clint_icb_cmd_valid),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_cmd_addr(clint_icb_cmd_addr),\n    .clint_icb_cmd_read(clint_icb_cmd_read),\n    .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_icb_cmd_valid(plic_icb_cmd_valid),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_cmd_addr(plic_icb_cmd_addr),\n    .plic_icb_cmd_read(plic_icb_cmd_read),\n    .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .mem_icb_cmd_valid(mem_icb_cmd_valid),\n    .mem_icb_cmd_ready(mem_icb_cmd_ready),\n    .mem_icb_cmd_addr(mem_icb_cmd_addr),\n    .mem_icb_cmd_read(mem_icb_cmd_read),\n    .mem_icb_cmd_wdata(mem_icb_cmd_wdata),\n    .mem_icb_cmd_wmask(mem_icb_cmd_wmask),\n    .mem_icb_rsp_valid(mem_icb_rsp_valid),\n    .mem_icb_rsp_ready(mem_icb_rsp_ready),\n    .mem_icb_rsp_err(mem_icb_rsp_err),\n    .mem_icb_rsp_rdata(mem_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 12, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire [E203_PC_SIZE-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire cmt_dpc_ena,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dcause_ena,\n  output wire [2:0] cmt_dcause,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n  // Submodule instantiations and internal logic would be here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 12, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [2-1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 10, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack,\n  output wire [E203_PC_SIZE-1:0] inspect_pc\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire ifu_rsp_need_replay;\n  wire ifetch_replay_req;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n\n  // Instantiate submodules and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 11, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  `endif\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_r;\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  wire ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_r;\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (clk, rst_n, dly_flush_ena, dly_flush_nxt, dly_flush_r);\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR (Instruction Register) control\n  wire ir_valid_r;\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n\n  wire ir_pc_vld_r;\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  sirv_gnrl_dfflr #(1) ir_pc_vld_dfflr (clk, rst_n, ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r);\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (clk, rst_n, ir_valid_set, ifu_rsp_err, ifu_err_r);\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (clk, rst_n, ir_valid_set, prdt_taken, ifu_prdt_taken_r);\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ifu_muldiv_b2b_dfflr (clk, rst_n, ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r);\n\n  wire [31:16] ifu_hi_ir_r;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (clk, rst_n, ir_hi_ena, ifu_ir_nxt[31:16], ifu_hi_ir_r);\n\n  wire [15:0] ifu_lo_ir_r;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (clk, rst_n, ir_lo_ena, ifu_ir_nxt[15:0], ifu_lo_ir_r);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (clk, rst_n, ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (clk, rst_n, ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r);\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n\n  `ifndef E203_TIMING_BOOST\n  assign pc_add_op1 = pipe_flush_req ? pipe_flush_add_op1 : \n                      dly_pipe_flush_req ? pc_r : \n                      ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : \n                      pc_r;\n\n  assign pc_add_op2 = pipe_flush_req ? pipe_flush_add_op2 : \n                      dly_pipe_flush_req ? 0 : \n                      ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : \n                      pc_incr_ofst;\n  `else\n  assign pc_add_op1 = ifetch_replay_req ? pc_r : \n                      bjp_req ? prdt_pc_add_op1 : \n                      ifu_reset_req ? pc_rtvec : \n                      pc_r;\n\n  assign pc_add_op2 = ifetch_replay_req ? 0 : \n                      bjp_req ? prdt_pc_add_op2 : \n                      ifu_reset_req ? 0 : \n                      pc_incr_ofst;\n  `endif\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n\n  wire ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  wire ifu_req_seq_rv32 = minidec_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  `ifndef E203_TIMING_BOOST\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `else\n  assign pc_nxt = pipe_flush_req ? {pipe_flush_pc[E203_PC_SIZE-1:1], 1'b0} : \n                  dly_pipe_flush_req ? {pc_r[E203_PC_SIZE-1:1], 1'b0} : \n                  {pc_nxt_pre[E203_PC_SIZE-1:1], 1'b0};\n  `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  wire inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  wire ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  wire ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (clk, rst_n, out_flag_ena, out_flag_nxt, out_flag_r);\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_r;\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (clk, rst_n, pc_newpend_ena, pc_newpend_nxt, pc_newpend_r);\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\n  // Assertion check implementation\n  // FPGA-related control\n  // Enable additional checks when not in FPGA implementation.\n  // Controlled by the FPGA_SOURCE macro.\n  // The assertion is enabled or disabled by the DISABLE_SV_ASSERTION macro.\n\n  // Key signal check\n  // CHECK_IFU_REQ_VALID_NO_X: Check the validity of the ifu_req_valid signal.\n  // Check object: ifu_req_valid signal.\n  // Check content: Ensure that the signal does not have an X value.\n  // Trigger condition: On the rising edge of the clock and when the reset is inactive.\n  // Error handling: Trigger a fatal error when an X value is detected.\n\n  // Timing-related checks\n  // Check the clock edge of all DFF instances.\n  // Check the validity of the asynchronous reset signal.\n  // Check the state transition of key control signals.\n\n  // Special case handling\n  // FPU-related handling\n  // When E203_HAS_FPU is not defined:\n  // minidec_fpu = 1'b0.\n  // minidec_fpu_rs1en = 1'b0.\n  // minidec_fpu_rs2en = 1'b0.\n  // minidec_fpu_rs3en = 1'b0.\n  // minidec_fpu_rs1fpu = 1'b0.\n  // minidec_fpu_rs2fpu = 1'b0.\n  // minidec_fpu_rs3fpu = 1'b0.\n  // minidec_fpu_rs1idx = E203_RFIDX_WIDTH'b0.\n  // minidec_fpu_rs2idx = E203_RFIDX_WIDTH'b0.\n\n  // Timing optimization-related handling\n  // When E203_TIMING_BOOST is defined:\n  // Modify the PC calculation logic.\n  // Simplify the flush processing flow.\n  // Optimize the critical path delay.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 12, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 8, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  output ppi_icb_cmd_valid,\n  input ppi_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .inspect_pc(inspect_pc),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .pc_rtvec(pc_rtvec),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid)\n  );\n\n  e203_exu u_e203_exu (\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle)\n  );\n\n  e203_lsu u_e203_lsu (\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask)\n  );\n\n  e203_biu u_e203_biu (\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 12, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 10, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 17, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 12, "code": "module e203_srams (\n  input  wire        itcm_ram_sd,\n  input  wire        itcm_ram_ds,\n  input  wire        itcm_ram_ls,\n  input  wire        itcm_ram_cs,\n  input  wire        itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire        clk_itcm_ram,\n  input  wire        rst_itcm,\n\n  input  wire        dtcm_ram_sd,\n  input  wire        dtcm_ram_ds,\n  input  wire        dtcm_ram_ls,\n  input  wire        dtcm_ram_cs,\n  input  wire        dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire        clk_dtcm_ram,\n  input  wire        rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin : u_e203_itcm_ram\n      // ITCM RAM module instantiation\n      // Add your ITCM RAM instantiation code here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin : u_e203_dtcm_ram\n      // DTCM RAM module instantiation\n      // Add your DTCM RAM instantiation code here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 11, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1;\n  wire csr_op1_is_imm;\n  wire csr_op1_is_reg;\n  wire csr_op1_is_zero;\n  wire csr_op1_is_imm5;\n  wire csr_op1_is_reg_rs1;\n  wire csr_op1_is_reg_rs1_is0;\n  wire csr_op1_is_reg_rs1_is1;\n  wire csr_op1_is_reg_rs1_is2;\n  wire csr_op1_is_reg_rs1_is3;\n  wire csr_op1_is_reg_rs1_is4;\n  wire csr_op1_is_reg_rs1_is5;\n  wire csr_op1_is_reg_rs1_is6;\n  wire csr_op1_is_reg_rs1_is7;\n  wire csr_op1_is_reg_rs1_is8;\n  wire csr_op1_is_reg_rs1_is9;\n  wire csr_op1_is_reg_rs1_is10;\n  wire csr_op1_is_reg_rs1_is11;\n  wire csr_op1_is_reg_rs1_is12;\n  wire csr_op1_is_reg_rs1_is13;\n  wire csr_op1_is_reg_rs1_is14;\n  wire csr_op1_is_reg_rs1_is15;\n  wire csr_op1_is_reg_rs1_is16;\n  wire csr_op1_is_reg_rs1_is17;\n  wire csr_op1_is_reg_rs1_is18;\n  wire csr_op1_is_reg_rs1_is19;\n  wire csr_op1_is_reg_rs1_is20;\n  wire csr_op1_is_reg_rs1_is21;\n  wire csr_op1_is_reg_rs1_is22;\n  wire csr_op1_is_reg_rs1_is23;\n  wire csr_op1_is_reg_rs1_is24;\n  wire csr_op1_is_reg_rs1_is25;\n  wire csr_op1_is_reg_rs1_is26;\n  wire csr_op1_is_reg_rs1_is27;\n  wire csr_op1_is_reg_rs1_is28;\n  wire csr_op1_is_reg_rs1_is29;\n  wire csr_op1_is_reg_rs1_is30;\n  wire csr_op1_is_reg_rs1_is31;\n  wire csr_op1_is_reg_rs1_is32;\n  wire csr_op1_is_reg_rs1_is33;\n  wire csr_op1_is_reg_rs1_is34;\n  wire csr_op1_is_reg_rs1_is35;\n  wire csr_op1_is_reg_rs1_is36;\n  wire csr_op1_is_reg_rs1_is37;\n  wire csr_op1_is_reg_rs1_is38;\n  wire csr_op1_is_reg_rs1_is39;\n  wire csr_op1_is_reg_rs1_is40;\n  wire csr_op1_is_reg_rs1_is41;\n  wire csr_op1_is_reg_rs1_is42;\n  wire csr_op1_is_reg_rs1_is43;\n  wire csr_op1_is_reg_rs1_is44;\n  wire csr_op1_is_reg_rs1_is45;\n  wire csr_op1_is_reg_rs1_is46;\n  wire csr_op1_is_reg_rs1_is47;\n  wire csr_op1_is_reg_rs1_is48;\n  wire csr_op1_is_reg_rs1_is49;\n  wire csr_op1_is_reg_rs1_is50;\n  wire csr_op1_is_reg_rs1_is51;\n  wire csr_op1_is_reg_rs1_is52;\n  wire csr_op1_is_reg_rs1_is53;\n  wire csr_op1_is_reg_rs1_is54;\n  wire csr_op1_is_reg_rs1_is55;\n  wire csr_op1_is_reg_rs1_is56;\n  wire csr_op1_is_reg_rs1_is57;\n  wire csr_op1_is_reg_rs1_is58;\n  wire csr_op1_is_reg_rs1_is59;\n  wire csr_op1_is_reg_rs1_is60;\n  wire csr_op1_is_reg_rs1_is61;\n  wire csr_op1_is_reg_rs1_is62;\n  wire csr_op1_is_reg_rs1_is63;\n\n  // CSR Control Logic\n  assign csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  assign csr_op1_is_reg = ~csr_op1_is_imm;\n  assign csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  assign csr_op1_is_imm5 = csr_i_info[E203_DECINFO_CSR_ZIMMM];\n  assign csr_op1_is_reg_rs1 = csr_op1_is_reg & ~csr_op1_is_zero;\n  assign csr_op1_is_reg_rs1_is0 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 0);\n  assign csr_op1_is_reg_rs1_is1 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 1);\n  assign csr_op1_is_reg_rs1_is2 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 2);\n  assign csr_op1_is_reg_rs1_is3 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 3);\n  assign csr_op1_is_reg_rs1_is4 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 4);\n  assign csr_op1_is_reg_rs1_is5 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 5);\n  assign csr_op1_is_reg_rs1_is6 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 6);\n  assign csr_op1_is_reg_rs1_is7 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 7);\n  assign csr_op1_is_reg_rs1_is8 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 8);\n  assign csr_op1_is_reg_rs1_is9 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 9);\n  assign csr_op1_is_reg_rs1_is10 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 10);\n  assign csr_op1_is_reg_rs1_is11 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 11);\n  assign csr_op1_is_reg_rs1_is12 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 12);\n  assign csr_op1_is_reg_rs1_is13 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 13);\n  assign csr_op1_is_reg_rs1_is14 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 14);\n  assign csr_op1_is_reg_rs1_is15 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 15);\n  assign csr_op1_is_reg_rs1_is16 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 16);\n  assign csr_op1_is_reg_rs1_is17 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 17);\n  assign csr_op1_is_reg_rs1_is18 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 18);\n  assign csr_op1_is_reg_rs1_is19 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 19);\n  assign csr_op1_is_reg_rs1_is20 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 20);\n  assign csr_op1_is_reg_rs1_is21 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 21);\n  assign csr_op1_is_reg_rs1_is22 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 22);\n  assign csr_op1_is_reg_rs1_is23 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 23);\n  assign csr_op1_is_reg_rs1_is24 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 24);\n  assign csr_op1_is_reg_rs1_is25 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 25);\n  assign csr_op1_is_reg_rs1_is26 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 26);\n  assign csr_op1_is_reg_rs1_is27 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 27);\n  assign csr_op1_is_reg_rs1_is28 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 28);\n  assign csr_op1_is_reg_rs1_is29 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 29);\n  assign csr_op1_is_reg_rs1_is30 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 30);\n  assign csr_op1_is_reg_rs1_is31 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 31);\n  assign csr_op1_is_reg_rs1_is32 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 32);\n  assign csr_op1_is_reg_rs1_is33 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 33);\n  assign csr_op1_is_reg_rs1_is34 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 34);\n  assign csr_op1_is_reg_rs1_is35 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 35);\n  assign csr_op1_is_reg_rs1_is36 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 36);\n  assign csr_op1_is_reg_rs1_is37 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 37);\n  assign csr_op1_is_reg_rs1_is38 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 38);\n  assign csr_op1_is_reg_rs1_is39 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 39);\n  assign csr_op1_is_reg_rs1_is40 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 40);\n  assign csr_op1_is_reg_rs1_is41 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 41);\n  assign csr_op1_is_reg_rs1_is42 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 42);\n  assign csr_op1_is_reg_rs1_is43 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 43);\n  assign csr_op1_is_reg_rs1_is44 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 44);\n  assign csr_op1_is_reg_rs1_is45 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 45);\n  assign csr_op1_is_reg_rs1_is46 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 46);\n  assign csr_op1_is_reg_rs1_is47 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 47);\n  assign csr_op1_is_reg_rs1_is48 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 48);\n  assign csr_op1_is_reg_rs1_is49 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 49);\n  assign csr_op1_is_reg_rs1_is50 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 50);\n  assign csr_op1_is_reg_rs1_is51 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 51);\n  assign csr_op1_is_reg_rs1_is52 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 52);\n  assign csr_op1_is_reg_rs1_is53 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 53);\n  assign csr_op1_is_reg_rs1_is54 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 54);\n  assign csr_op1_is_reg_rs1_is55 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 55);\n  assign csr_op1_is_reg_rs1_is56 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 56);\n  assign csr_op1_is_reg_rs1_is57 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 57);\n  assign csr_op1_is_reg_rs1_is58 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 58);\n  assign csr_op1_is_reg_rs1_is59 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 59);\n  assign csr_op1_is_reg_rs1_is60 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 60);\n  assign csr_op1_is_reg_rs1_is61 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 61);\n  assign csr_op1_is_reg_rs1_is62 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 62);\n  assign csr_op1_is_reg_rs1_is63 = csr_op1_is_reg_rs1 & (csr_i_rs1 == 63);\n\n  // CSR Read/Write Enable Logic\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_zero) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // CSR Enable Logic\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  // CSR Write-Back Data Logic\n  assign wbck_csr_dat = (csr_i_info[E203_DECINFO_CSR_CSRRW]) ? csr_op1 :\n                        (csr_i_info[E203_DECINFO_CSR_CSRRS]) ? (csr_op1 | read_csr_dat) :\n                        (csr_i_info[E203_DECINFO_CSR_CSRRC]) ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  // CSR Output Valid Logic\n  assign csr_o_valid = csr_i_valid & csr_o_ready;\n\n  // CSR Output Write-Back Data Logic\n  assign csr_o_wbck_wdat = read_csr_dat;\n\n  // CSR Output Write-Back Error Logic\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE Interface Logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready;\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 11, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 7, "code": "module e203_exu_wbck (\n  input wire alu_wbck_i_valid,\n  output wire alu_wbck_i_ready,\n  input wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input wire longp_wbck_i_valid,\n  output wire longp_wbck_i_ready,\n  input wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input wire [4:0] longp_wbck_i_flags,\n  input wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input wire longp_wbck_i_rdfpu,\n  output wire rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input wire clk,\n  input wire rst_n\n);\n\n  wire wbck_i_valid;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n  wire [4:0] wbck_i_flags;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n  assign wbck_i_flags = longp_wbck_i_valid ? longp_wbck_i_flags : 5'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 8, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 12, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // ALU operation logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 13, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Implementation of the ALU logic goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 16, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n// Decode logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 13, "code": "module e203_lsu (\n  input  wire                 commit_mret,\n  input  wire                 commit_trap,\n  input  wire                 excp_active,\n  output wire                 lsu_active,\n\n  output wire                 lsu_o_valid,\n  input  wire                 lsu_o_ready,\n  output wire [XLEN-1:0]      lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire                 lsu_o_wbck_err,\n  output wire                 lsu_o_cmt_ld,\n  output wire                 lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire                 lsu_o_cmt_buserr,\n\n  input  wire                 agu_icb_cmd_valid,\n  output wire                 agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire                 agu_icb_cmd_read,\n  input  wire [XLEN-1:0]      agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]    agu_icb_cmd_wmask,\n  input  wire                 agu_icb_cmd_lock,\n  input  wire                 agu_icb_cmd_excl,\n  input  wire [1:0]           agu_icb_cmd_size,\n  input  wire                 agu_icb_cmd_back2agu,\n  input  wire                 agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                 agu_icb_rsp_valid,\n  input  wire                 agu_icb_rsp_ready,\n  output wire                 agu_icb_rsp_err,\n  output wire                 agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0]      agu_icb_rsp_rdata,\n\n  input  wire                 nice_mem_holdup,\n  input  wire                 itcm_region_indic,\n  input  wire                 dtcm_region_indic,\n\n  output wire                 biu_icb_cmd_valid,\n  input  wire                 biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire                 biu_icb_cmd_read,\n  output wire [XLEN-1:0]      biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0]    biu_icb_cmd_wmask,\n  output wire                 biu_icb_cmd_lock,\n  output wire                 biu_icb_cmd_excl,\n  output wire [1:0]           biu_icb_cmd_size,\n  input  wire                 biu_icb_rsp_valid,\n  output wire                 biu_icb_rsp_ready,\n  input  wire                 biu_icb_rsp_err,\n  input  wire                 biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0]      biu_icb_rsp_rdata\n);\n\n  // Internal logic and submodule instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 17, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Core module instantiation\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .tcm_sd(tcm_sd),\n    .tcm_ds(tcm_ds),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err(ext2dtcm_icb_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(ext2dtcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // SRAM module instantiation\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(),\n    .itcm_ram_cs(),\n    .itcm_ram_we(),\n    .itcm_ram_addr(),\n    .itcm_ram_wem(),\n    .itcm_ram_din(),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(),\n    .rst_itcm(),\n    .dtcm_ram_sd(),\n    .dtcm_ram_ds(),\n    .dtcm_ram_ls(),\n    .dtcm_ram_cs(),\n    .dtcm_ram_we(),\n    .dtcm_ram_addr(),\n    .dtcm_ram_wem(),\n    .dtcm_ram_din(),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(),\n    .rst_dtcm(),\n    .test_mode()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 12, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire csr_sel_nice;\n  wire nice_csr_valid;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr;\n  wire nice_csr_wr;\n  wire [31:0] nice_csr_wdata;\n  wire [31:0] nice_csr_rdata;\n  wire nice_xs_off;\n\n  // CSR enable logic\n  assign csr_ena = csr_i_valid & csr_o_ready;\n\n  // CSR read enable logic\n  assign csr_rd_en = csr_i_valid & (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen |\n                                    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n                                    csr_i_info[E203_DECINFO_CSR_CSRRC]);\n\n  // CSR write enable logic\n  assign csr_wr_en = csr_i_valid & (csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                                    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n                                    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]));\n\n  // CSR index logic\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  // Write-back data logic\n  assign wbck_csr_dat = (csr_i_info[E203_DECINFO_CSR_CSRRW]) ? csr_i_rs1 :\n                        (csr_i_info[E203_DECINFO_CSR_CSRRS]) ? (csr_i_rs1 | read_csr_dat) :\n                        (csr_i_info[E203_DECINFO_CSR_CSRRC]) ? (~csr_i_rs1 & read_csr_dat) : read_csr_dat;\n\n  // CSR output valid logic\n  assign csr_o_valid = csr_ena & csr_o_ready;\n\n  // CSR output write-back data logic\n  assign csr_o_wbck_wdat = read_csr_dat;\n\n  // CSR output write-back error logic\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_sel_nice & csr_i_valid & csr_o_ready;\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = csr_i_rs1;\n  assign csr_o_wbck_wdat = csr_sel_nice ? nice_csr_rdata : read_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 8, "code": "module e203_exu_nice (\n  input nice_i_xs_off,\n  input nice_i_valid,\n  output nice_i_ready,\n  input [E203_XLEN-1:0] nice_i_instr,\n  input [E203_XLEN-1:0] nice_i_rs1,\n  input [E203_XLEN-1:0] nice_i_rs2,\n  input [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output nice_o_longpipe,\n  output nice_o_valid,\n  input nice_o_ready,\n  output nice_o_itag_valid,\n  input nice_o_itag_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for NICE interface\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Logic for multi-cycle operation\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  assign nice_rsp_multicyc_ready = fifo_o_vld;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 9, "code": "module e203_exu_nice (\n  input  wire        nice_i_xs_off,\n  input  wire        nice_i_valid,\n  output wire        nice_i_ready,\n  input  wire [E203_XLEN-1:0] nice_i_instr,\n  input  wire [E203_XLEN-1:0] nice_i_rs1,\n  input  wire [E203_XLEN-1:0] nice_i_rs2,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire        nice_o_longpipe,\n  output wire        nice_o_valid,\n  input  wire        nice_o_ready,\n  output wire        nice_o_itag_valid,\n  input  wire        nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire        nice_rsp_multicyc_valid,\n  output wire        nice_rsp_multicyc_ready,\n  output wire        nice_req_valid,\n  input  wire        nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  assign nice_rsp_multicyc_ready = fifo_o_vld;\n  assign nice_o_itag_valid = fifo_o_vld;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n  \n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 10, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction handling\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & nice_o_itag_ready;\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n  \n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 14, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n`ifdef E203_HAS_NICE\n  ,input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n`endif\n);\n\n// Module implementation goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 9, "code": "module e203_itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram,\n  output wire itcm_active\n);\n\n  // Instantiate the LSU to ITCM data width conversion module\n  sirv_gnrl_icb_n2w #(\n    .AW(E203_ITCM_ADDR_WIDTH),\n    .USR_W(1),\n    .FIFO_OUTS_NUM(E203_ITCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .X_W(32),\n    .Y_W(E203_ITCM_DATA_WIDTH)\n  ) u_itcm_icb_lsu2itcm_n2w (\n    .i_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .i_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .i_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .i_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .i_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .i_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .i_icb_cmd_lock(1'b0),\n    .i_icb_cmd_excl(1'b0),\n    .i_icb_cmd_size(2'b10),\n    .i_icb_cmd_burst(2'b00),\n    .i_icb_cmd_beat(2'b00),\n    .i_icb_cmd_usr(1'b0),\n    .i_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .i_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .i_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .i_icb_rsp_excl_ok(1'b0),\n    .i_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .i_icb_rsp_usr(1'b0),\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the Bus Arbiter Module\n  sirv_gnrl_icb_arbt #(\n    .AW(32),\n    .DW(64),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(4),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(),\n    .o_icb_cmd_ready(),\n    .o_icb_cmd_read(),\n    .o_icb_cmd_addr(),\n    .o_icb_cmd_wdata(),\n    .o_icb_cmd_wmask(),\n    .o_icb_cmd_burst(),\n    .o_icb_cmd_beat(),\n    .o_icb_cmd_lock(),\n    .o_icb_cmd_excl(),\n    .o_icb_cmd_size(),\n    .o_icb_cmd_usr(),\n    .o_icb_rsp_valid(),\n    .o_icb_rsp_ready(),\n    .o_icb_rsp_err(),\n    .o_icb_rsp_excl_ok(),\n    .o_icb_rsp_rdata(),\n    .o_icb_rsp_usr(),\n    .i_bus_icb_cmd_ready(),\n    .i_bus_icb_cmd_valid(),\n    .i_bus_icb_cmd_read(),\n    .i_bus_icb_cmd_addr(),\n    .i_bus_icb_cmd_wdata(),\n    .i_bus_icb_cmd_wmask(),\n    .i_bus_icb_cmd_burst(),\n    .i_bus_icb_cmd_beat(),\n    .i_bus_icb_cmd_lock(),\n    .i_bus_icb_cmd_excl(),\n    .i_bus_icb_cmd_size(),\n    .i_bus_icb_cmd_usr(),\n    .i_bus_icb_rsp_valid(),\n    .i_bus_icb_rsp_ready(),\n    .i_bus_icb_rsp_err(),\n    .i_bus_icb_rsp_excl_ok(),\n    .i_bus_icb_rsp_rdata(),\n    .i_bus_icb_rsp_usr(),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM Controller Module\n  sirv_sram_icb_ctrl #(\n    .DW(32),\n    .MW(4),\n    .AW(32),\n    .AW_LSB(3),\n    .USR_W(3)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(),\n    .i_icb_cmd_ready(),\n    .i_icb_cmd_read(),\n    .i_icb_cmd_addr(),\n    .i_icb_cmd_wdata(),\n    .i_icb_cmd_wmask(),\n    .i_icb_cmd_usr(),\n    .i_icb_rsp_valid(),\n    .i_icb_rsp_ready(),\n    .i_icb_rsp_rdata(),\n    .i_icb_rsp_usr(),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 13, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 12, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal signals and logic implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 5, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n// Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 15, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n,\n  input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 13, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [11:0]              csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 14, "code": "module e203_lsu(\n  input  wire                         commit_mret,\n  input  wire                         commit_trap,\n  input  wire                         excp_active,\n  output wire                         lsu_active,\n\n  output wire                         lsu_o_valid,\n  input  wire                         lsu_o_ready,\n  output wire [XLEN-1:0]              lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0]        lsu_o_wbck_itag,\n  output wire                         lsu_o_wbck_err,\n  output wire                         lsu_o_cmt_ld,\n  output wire                         lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0]         lsu_o_cmt_badaddr,\n  output wire                         lsu_o_cmt_buserr,\n\n  input  wire                         agu_icb_cmd_valid,\n  output wire                         agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0]         agu_icb_cmd_addr,\n  input  wire                         agu_icb_cmd_read,\n  input  wire [XLEN-1:0]              agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0]            agu_icb_cmd_wmask,\n  input  wire                         agu_icb_cmd_lock,\n  input  wire                         agu_icb_cmd_excl,\n  input  wire [1:0]                   agu_icb_cmd_size,\n  input  wire                         agu_icb_cmd_back2agu,\n  input  wire                         agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0]        agu_icb_cmd_itag,\n  output wire                         agu_icb_rsp_valid,\n  input  wire                         agu_icb_rsp_ready,\n  output wire                         agu_icb_rsp_err,\n  output wire                         agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0]              agu_icb_rsp_rdata,\n\n  input  wire                         nice_mem_holdup,\n  input  wire                         itcm_region_indic,\n  input  wire                         dtcm_region_indic,\n\n  output wire                         biu_icb_cmd_valid,\n  input  wire                         biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0]         biu_icb_cmd_addr,\n  output wire                         biu_icb_cmd_read,\n  output wire [XLEN-1:0]              biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0]            biu_icb_cmd_wmask,\n  output wire                         biu_icb_cmd_lock,\n  output wire                         biu_icb_cmd_excl,\n  output wire [1:0]                   biu_icb_cmd_size,\n  input  wire                         biu_icb_rsp_valid,\n  output wire                         biu_icb_rsp_ready,\n  input  wire                         biu_icb_rsp_err,\n  input  wire                         biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0]              biu_icb_rsp_rdata\n);\n\n// Internal logic and module instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clkgate", "codeid": 20, "code": "module e203_clkgate (\n    input  wire clk_in,\n    input  wire test_mode,\n    input  wire clock_en,\n    output wire clk_out\n);\n\n`ifdef FPGA_SOURCE\n    assign clk_out = clk_in;\n`else\n    reg enb;\n    always @ (negedge clk_in or posedge test_mode) begin\n        if (test_mode)\n            enb <= 1'b1;\n        else\n            enb <= clock_en;\n    end\n\n    assign clk_out = clk_in & enb;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 13, "code": "module e203_exu_alu_dpath (\n  input  wire alu_req_alu,\n  input  wire alu_req_alu_add,\n  input  wire alu_req_alu_sub,\n  input  wire alu_req_alu_xor,\n  input  wire alu_req_alu_sll,\n  input  wire alu_req_alu_srl,\n  input  wire alu_req_alu_sra,\n  input  wire alu_req_alu_or,\n  input  wire alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire muldiv_req_alu_add,\n  input  wire muldiv_req_alu_sub,\n  input  wire muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire clk,\n  input  wire rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 12, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack,\n  output wire [E203_PC_SIZE-1:0] inspect_pc\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire ifu_rsp_need_replay;\n  wire ifetch_replay_req;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // Instantiate submodules\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_r),\n    .dec_rs1en(ir_rs1en),\n    .dec_rs2en(),\n    .dec_rs1idx(ir_rs1idx_r),\n    .dec_rs2idx(ir_rs2idx_r),\n    .dec_mulhsu(),\n    .dec_mul(),\n    .dec_div(),\n    .dec_rem(),\n    .dec_divu(),\n    .dec_remu(),\n    .dec_rv32(),\n    .dec_bjp(),\n    .dec_jal(),\n    .dec_jalr(),\n    .dec_bxx(),\n    .dec_jalr_rs1idx(),\n    .dec_bjp_imm()\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(),\n    .dec_jalr(),\n    .dec_bxx(),\n    .dec_bjp_imm(),\n    .dec_jalr_rs1idx(),\n    .oitf_empty(oitf_empty),\n    .ir_empty(ir_empty),\n    .ir_rs1en(ir_rs1en),\n    .jalr_rs1idx_cam_irrdidx(),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_r),\n    .rf2bpu_x1(rf2bpu_x1),\n    .rf2bpu_rs1(rf2bpu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // DFF and DFFLR instances\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_r),\n    .dnxt(1'b0),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_r),\n    .dnxt(1'b0),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_r),\n    .dnxt(1'b0),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_r),\n    .dnxt(1'b0),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_r),\n    .dnxt(1'b0),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ifu_err_r),\n    .dnxt(1'b0),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ifu_prdt_taken_r),\n    .dnxt(1'b0),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ifu_muldiv_b2b_r),\n    .dnxt(1'b0),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_INSTR_SIZE-16) ifu_hi_ir_dfflr (\n    .lden(ifu_ir_r[31:16]),\n    .dnxt(1'b0),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ifu_ir_r[15:0]),\n    .dnxt(1'b0),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_r),\n    .dnxt(1'b0),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_r),\n    .dnxt(1'b0),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ifu_pc_r),\n    .dnxt(1'b0),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_r),\n    .dnxt(1'b0),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_r),\n    .dnxt(1'b0),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_r),\n    .dnxt(1'b0),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for handshake signals\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Logic for request and response control\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Logic for PC and instruction control\n  assign ifu_req_pc = pc_r;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  // Output assignments\n  assign ifu_o_ir = ifu_ir_r;\n  assign ifu_o_pc = ifu_pc_r;\n  assign ifu_o_pc_vld = ir_pc_vld_r;\n  assign ifu_o_rs1idx = ir_rs1idx_r;\n  assign ifu_o_rs2idx = ir_rs2idx_r;\n  assign ifu_o_prdt_taken = ifu_prdt_taken_r;\n  assign ifu_o_misalgn = 1'b0;\n  assign ifu_o_buserr = ifu_err_r;\n  assign ifu_o_muldiv_b2b = ifu_muldiv_b2b_r;\n  assign ifu_o_valid = ir_valid_r;\n  assign pipe_flush_ack = pipe_flush_hsked;\n  assign ifu_halt_ack = halt_ack_r;\n  assign inspect_pc = pc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 16, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire mulhsu, mul, div, rem, divu, remu;\n  wire rv32, bjp, jal, jalr, bxx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Instantiate the execution unit decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(rs1idx),\n    .dec_rs2idx(rs2idx),\n    .dec_mulhsu(mulhsu),\n    .dec_mul(mul),\n    .dec_div(div),\n    .dec_rem(rem),\n    .dec_divu(divu),\n    .dec_remu(remu),\n    .dec_rv32(rv32),\n    .dec_bjp(bjp),\n    .dec_jal(jal),\n    .dec_jalr(jalr),\n    .dec_bxx(bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\n  // Connect internal signals to outputs\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 14, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 13, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [4:0] csr_op1_imm = csr_i_info[E203_DECINFO_CSR_ZIMMM +: 5];\n  wire [11:0] csr_op1_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX +: 12];\n\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_op1_imm} : csr_i_rs1;\n\n  wire csr_rd_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_i_rdwen :\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] || csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_raw = csr_i_info[E203_DECINFO_CSR_CSRRW] ||\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] && !csr_op1_is_zero) ||\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] && !csr_op1_is_zero);\n\n  assign csr_rd_en = csr_i_valid && csr_rd_en_raw;\n  assign csr_wr_en = csr_i_valid && csr_wr_en_raw;\n  assign csr_idx = csr_op1_idx;\n  assign csr_ena = csr_o_valid && csr_o_ready && !csr_sel_nice;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) : {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) && !nice_xs_off;\n  assign nice_csr_valid = csr_i_valid && csr_o_ready && csr_sel_nice;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  assign csr_o_valid = csr_i_valid && (csr_sel_nice ? nice_csr_ready : 1'b1);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 14, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1;\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_x0 = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire csr_op1_is_reg = ~csr_op1_is_imm;\n\n  assign csr_op1 = csr_op1_is_imm ? csr_i_info[E203_DECINFO_CSR_ZIMMM] : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_x0) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_x0)\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  assign wbck_csr_dat = \n    csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n    csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n    csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n    {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n  assign csr_i_ready = csr_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 11, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction forwarding\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_i_valid & nice_req_ready & ~nice_i_xs_off;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag_valid = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline indication\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 10, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 14, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [32:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [32:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0]          muldiv_sbf_0_r,\n  output wire [32:0]          muldiv_sbf_1_r\n);\n\n// ALU operations\nwire [E203_XLEN-1:0] alu_res_add = alu_req_alu_op1 + alu_req_alu_op2;\nwire [E203_XLEN-1:0] alu_res_sub = alu_req_alu_op1 - alu_req_alu_op2;\nwire [E203_XLEN-1:0] alu_res_xor = alu_req_alu_op1 ^ alu_req_alu_op2;\nwire [E203_XLEN-1:0] alu_res_sll = alu_req_alu_op1 << alu_req_alu_op2[4:0];\nwire [E203_XLEN-1:0] alu_res_srl = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\nwire [E203_XLEN-1:0] alu_res_sra = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\nwire [E203_XLEN-1:0] alu_res_or  = alu_req_alu_op1 | alu_req_alu_op2;\nwire [E203_XLEN-1:0] alu_res_and = alu_req_alu_op1 & alu_req_alu_op2;\n\n// BJP operations\nwire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\nwire bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n// AGU operations\nwire [E203_XLEN-1:0] agu_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n// MULDIV operations\nwire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_add = muldiv_req_alu_op1 + muldiv_req_alu_op2;\nwire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_sub = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n// Shared Buffers\nreg [32:0] sbf_0_r;\nreg [32:0] sbf_1_r;\n\nalways @(posedge clk or negedge rst_n) begin\n  if (!rst_n) begin\n    sbf_0_r <= 33'b0;\n    sbf_1_r <= 33'b0;\n  end else begin\n    if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n    if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n  end\nend\n\n// Output assignments\nassign alu_req_alu_res = alu_req_alu_add ? alu_res_add :\n                         alu_req_alu_sub ? alu_res_sub :\n                         alu_req_alu_xor ? alu_res_xor :\n                         alu_req_alu_sll ? alu_res_sll :\n                         alu_req_alu_srl ? alu_res_srl :\n                         alu_req_alu_sra ? alu_res_sra :\n                         alu_req_alu_or  ? alu_res_or  :\n                         alu_req_alu_and ? alu_res_and : 0;\n\nassign bjp_req_alu_add_res = bjp_add_res;\nassign bjp_req_alu_cmp_res = bjp_cmp_res;\nassign agu_req_alu_res = agu_res;\n\nassign muldiv_req_alu_res = muldiv_req_alu_add ? muldiv_res_add :\n                            muldiv_req_alu_sub ? muldiv_res_sub : 0;\n\nassign muldiv_sbf_0_r = sbf_0_r;\nassign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 9, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  output ppi_icb_cmd_valid,\n  input ppi_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask\n);\n\n  e203_ifu u_e203_ifu (\n    .inspect_pc(inspect_pc),\n    .ifu_active(),\n    .itcm_nohold(),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(),\n    .ifu_o_pc(),\n    .ifu_o_pc_vld(),\n    .ifu_o_misalgn(),\n    .ifu_o_buserr(),\n    .ifu_o_rs1idx(),\n    .ifu_o_rs2idx(),\n    .ifu_o_prdt_taken(),\n    .ifu_o_muldiv_b2b(),\n    .ifu_o_valid(),\n    .ifu_o_ready(),\n    .pipe_flush_req(),\n    .pipe_flush_ack(),\n    .pipe_flush_add_op1(),\n    .pipe_flush_add_op2(),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(),\n    .commit_trap(),\n    .exu_active(),\n    .excp_active(),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(),\n    .wfi_halt_ifu_ack(),\n    .oitf_empty(),\n    .rf2ifu_x1(),\n    .rf2ifu_rs1(),\n    .dec2ifu_rden(),\n    .dec2ifu_rs1en(),\n    .dec2ifu_rdidx(),\n    .dec2ifu_mulhsu(),\n    .dec2ifu_div(),\n    .dec2ifu_rem(),\n    .dec2ifu_divu(),\n    .dec2ifu_remu(),\n    .test_mode(),\n    .clk_aon(),\n    .clk(),\n    .rst_n(),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(),\n    .commit_trap(),\n    .excp_active(),\n    .lsu_active(),\n    .lsu_o_valid(),\n    .lsu_o_ready(),\n    .lsu_o_wbck_wdat(),\n    .lsu_o_wbck_itag(),\n    .lsu_o_wbck_err(),\n    .lsu_o_cmt_ld(),\n    .lsu_o_cmt_st(),\n    .lsu_o_cmt_badaddr(),\n    .lsu_o_cmt_buserr(),\n    .agu_icb_cmd_valid(),\n    .agu_icb_cmd_ready(),\n    .agu_icb_cmd_addr(),\n    .agu_icb_cmd_read(),\n    .agu_icb_cmd_wdata(),\n    .agu_icb_cmd_wmask(),\n    .agu_icb_cmd_lock(),\n    .agu_icb_cmd_excl(),\n    .agu_icb_cmd_size(),\n    .agu_icb_cmd_back2agu(),\n    .agu_icb_cmd_usign(),\n    .agu_icb_cmd_itag(),\n    .agu_icb_rsp_valid(),\n    .agu_icb_rsp_ready(),\n    .agu_icb_rsp_err(),\n    .agu_icb_rsp_excl_ok(),\n    .agu_icb_rsp_rdata()\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(),\n    .clk(),\n    .rst_n(),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 15, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 15, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Write-back error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Handshake signals\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 10, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_pulse,\n  output flush_req,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 16, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 11, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 9, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 17, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Operation Requests\n  wire bjp_is_beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne  = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt  = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt  = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add     = bjp_is_jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Commit Signals\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 6, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and state machine implementation\n\n  // State machine states\n  localparam ICB_STATE_IDLE   = 2'b00;\n  localparam ICB_STATE_1ST    = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND    = 2'b11;\n\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n\n  // State transition logic\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end else begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r) begin\n            icb_state_nxt = ICB_STATE_WAIT2ND;\n          end else begin\n            icb_state_nxt = ICB_STATE_IDLE;\n          end\n        end else begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end else begin\n          icb_state_nxt = ICB_STATE_WAIT2ND;\n        end\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end else begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end\n      end\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n\n  // State update\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Additional logic for request handling, data alignment, and response generation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 17, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 11, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculations\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 5'd0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 5'd1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency and wait logic\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr | ~ir_rs1en;\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 5'd1) & jalr_rs1xn_dep) |\n                    (dec_jalr & (dec_jalr_rs1idx != 5'd0) & (jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr));\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 5'd0) & (dec_jalr_rs1idx != 5'd1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else if (rs1xn_rdrf_ena)\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 12, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 18, "code": "module e203_exu_alu_bjp (\n  input  wire                  bjp_i_valid,\n  output wire                  bjp_i_ready,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs1,\n  input  wire [E203_XLEN-1:0]  bjp_i_rs2,\n  input  wire [E203_XLEN-1:0]  bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                  bjp_o_valid,\n  input  wire                  bjp_o_ready,\n  output wire [E203_XLEN-1:0]  bjp_o_wbck_wdat,\n  output wire                  bjp_o_wbck_err,\n  output wire                  bjp_o_cmt_bjp,\n  output wire                  bjp_o_cmt_mret,\n  output wire                  bjp_o_cmt_dret,\n  output wire                  bjp_o_cmt_fencei,\n  output wire                  bjp_o_cmt_prdt,\n  output wire                  bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0]  bjp_req_alu_op2,\n  output wire                  bjp_req_alu_cmp_eq,\n  output wire                  bjp_req_alu_cmp_ne,\n  output wire                  bjp_req_alu_cmp_lt,\n  output wire                  bjp_req_alu_cmp_gt,\n  output wire                  bjp_req_alu_cmp_ltu,\n  output wire                  bjp_req_alu_cmp_gtu,\n  output wire                  bjp_req_alu_add,\n  input  wire                  bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0]  bjp_req_alu_add_res,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN == 32 ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = |bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 19, "code": "module e203_clk_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire core_cgstop,\n    input wire core_ifu_active,\n    input wire core_exu_active,\n    input wire core_lsu_active,\n    input wire core_biu_active,\n    input wire core_wfi,\n    output wire clk_aon,\n    output wire clk_core_ifu,\n    output wire clk_core_exu,\n    output wire clk_core_lsu,\n    output wire clk_core_biu\n`ifdef E203_HAS_ITCM\n    ,\n    input wire itcm_active,\n    output wire itcm_ls,\n    output wire clk_itcm\n`endif\n`ifdef E203_HAS_DTCM\n    ,\n    input wire dtcm_active,\n    output wire dtcm_ls,\n    output wire clk_dtcm\n`endif\n);\n\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    wire biu_clk_en = core_cgstop | core_biu_active;\n\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n`ifdef E203_HAS_ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n    assign itcm_ls = ~itcm_clk_en;\n\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n`endif\n\n`ifdef E203_HAS_DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n    assign dtcm_ls = ~dtcm_clk_en;\n\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n`endif\n\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 13, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (oitf_valid[dis_ptr_r] == 1'b0);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && oitf_valid[ret_ptr_r]) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 18, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 15, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [31:0] alu_req_alu_op1,\n  input  wire [31:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [31:0] bjp_req_alu_op1,\n  input  wire [31:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [31:0] agu_req_alu_op1,\n  input  wire [31:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [34:0] muldiv_req_alu_op1,\n  input  wire [34:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [31:0] alu_req_alu_res,\n  output wire [31:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [31:0] agu_req_alu_res,\n  output wire [34:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operations\n  wire [31:0] alu_add_res = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [31:0] alu_sub_res = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [31:0] alu_xor_res = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [31:0] alu_sll_res = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [31:0] alu_srl_res = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [31:0] alu_sra_res = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n  wire [31:0] alu_or_res  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [31:0] alu_and_res = alu_req_alu_op1 & alu_req_alu_op2;\n\n  assign alu_req_alu_res = \n    ({32{alu_req_alu_add}} & alu_add_res) |\n    ({32{alu_req_alu_sub}} & alu_sub_res) |\n    ({32{alu_req_alu_xor}} & alu_xor_res) |\n    ({32{alu_req_alu_sll}} & alu_sll_res) |\n    ({32{alu_req_alu_srl}} & alu_srl_res) |\n    ({32{alu_req_alu_sra}} & alu_sra_res) |\n    ({32{alu_req_alu_or }} & alu_or_res ) |\n    ({32{alu_req_alu_and}} & alu_and_res);\n\n  // BJP operations\n  wire [31:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire        bjp_cmp_res = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n\n  // AGU operations\n  wire [31:0] agu_add_res = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_add_res;\n\n  // MULDIV operations\n  wire [34:0] muldiv_add_res = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [34:0] muldiv_sub_res = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = \n    ({35{muldiv_req_alu_add}} & muldiv_add_res) |\n    ({35{muldiv_req_alu_sub}} & muldiv_sub_res);\n\n  // Shared Buffers\n  reg [32:0] sbf_0_r;\n  reg [32:0] sbf_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 33'b0;\n      sbf_1_r <= 33'b0;\n    end else begin\n      if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 14, "code": "module e203_exu_alu (\n  input  wire                     i_valid,\n  output wire                     i_ready,\n  output wire                     i_longpipe,\n  output wire                     nice_csr_valid,\n  input  wire                     nice_csr_ready,\n  output wire [31:0]              nice_csr_addr,\n  output wire                     nice_csr_wr,\n  output wire [31:0]              nice_csr_wdata,\n  input  wire [31:0]              nice_csr_rdata,\n  input  wire                     nice_xs_off,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0]     i_rs1,\n  input  wire [E203_XLEN-1:0]     i_rs2,\n  input  wire [E203_XLEN-1:0]     i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0]  i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire                     i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire                     i_rdwen,\n  input  wire                     i_ilegl,\n  input  wire                     i_buserr,\n  input  wire                     i_misalgn,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     cmt_o_valid,\n  input  wire                     cmt_o_ready,\n  output wire                     cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0]  cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0]     cmt_o_imm,\n  output wire                     cmt_o_rv32,\n  output wire                     cmt_o_bjp,\n  output wire                     cmt_o_mret,\n  output wire                     cmt_o_dret,\n  output wire                     cmt_o_ecall,\n  output wire                     cmt_o_ebreak,\n  output wire                     cmt_o_fencei,\n  output wire                     cmt_o_wfi,\n  output wire                     cmt_o_ifu_misalgn,\n  output wire                     cmt_o_ifu_buserr,\n  output wire                     cmt_o_ifu_ilegl,\n  output wire                     cmt_o_bjp_prdt,\n  output wire                     cmt_o_bjp_rslv,\n  output wire                     cmt_o_misalgn,\n  output wire                     cmt_o_ld,\n  output wire                     cmt_o_stamo,\n  output wire                     cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire                     wbck_o_valid,\n  input  wire                     wbck_o_ready,\n  output wire [E203_XLEN-1:0]     wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire                     mdv_nob2b,\n  output wire                     csr_ena,\n  output wire                     csr_wr_en,\n  output wire                     csr_rd_en,\n  output wire [12-1:0]            csr_idx,\n  input  wire                     nonflush_cmt_ena,\n  input  wire                     csr_access_ilgl,\n  input  wire [E203_XLEN-1:0]     read_csr_dat,\n  output wire [E203_XLEN-1:0]     wbck_csr_dat,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [2-1:0]             agu_icb_cmd_size,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire                     nice_req_valid,\n  input  wire                     nice_req_ready,\n  output wire [E203_XLEN-1:0]     nice_req_instr,\n  output wire [E203_XLEN-1:0]     nice_req_rs1,\n  output wire [E203_XLEN-1:0]     nice_req_rs2,\n  input  wire                     nice_rsp_multicyc_valid,\n  output wire                     nice_rsp_multicyc_ready,\n  output wire                     nice_longp_wbck_valid,\n  input  wire                     nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire                     i_nice_cmt_off_ilgl,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 16, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [33:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [33:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [33:0] muldiv_sbf_0_r,\n  output wire [33:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_res_add = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sub = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_xor = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_or  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_and = alu_req_alu_op1 & alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sll = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_srl = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_sra = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_res_add) |\n                           ({E203_XLEN{alu_req_alu_sub}} & alu_res_sub) |\n                           ({E203_XLEN{alu_req_alu_xor}} & alu_res_xor) |\n                           ({E203_XLEN{alu_req_alu_or }} & alu_res_or)  |\n                           ({E203_XLEN{alu_req_alu_and}} & alu_res_and) |\n                           ({E203_XLEN{alu_req_alu_sll}} & alu_res_sll) |\n                           ({E203_XLEN{alu_req_alu_srl}} & alu_res_srl) |\n                           ({E203_XLEN{alu_req_alu_sra}} & alu_res_sra);\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_add_res = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_eq = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_eq;\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_res_add = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_res_add;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_add = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_sub = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_res_add) |\n                              ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_res_sub);\n\n  // Shared buffer logic\n  reg [33:0] sbf_0_r;\n  reg [33:0] sbf_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 34'b0;\n      sbf_1_r <= 34'b0;\n    end else begin\n      if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 19, "code": "module e203_dtcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire dtcm_active,\n  input  wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input  wire lsu2dtcm_icb_cmd_read,\n  input  wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input  wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input  wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n  input  wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input  wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input  wire ext2dtcm_icb_cmd_read,\n  input  wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input  wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input  wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 17, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operations\n  wire [E203_XLEN-1:0] alu_res_add = alu_req_alu_op1 + alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sub = alu_req_alu_op1 - alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_xor = alu_req_alu_op1 ^ alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_or  = alu_req_alu_op1 | alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_and = alu_req_alu_op1 & alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res_sll = alu_req_alu_op1 << alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_srl = alu_req_alu_op1 >> alu_req_alu_op2[4:0];\n  wire [E203_XLEN-1:0] alu_res_sra = $signed(alu_req_alu_op1) >>> alu_req_alu_op2[4:0];\n\n  assign alu_req_alu_res = ({E203_XLEN{alu_req_alu_add}} & alu_res_add)\n                         | ({E203_XLEN{alu_req_alu_sub}} & alu_res_sub)\n                         | ({E203_XLEN{alu_req_alu_xor}} & alu_res_xor)\n                         | ({E203_XLEN{alu_req_alu_or}}  & alu_res_or)\n                         | ({E203_XLEN{alu_req_alu_and}} & alu_res_and)\n                         | ({E203_XLEN{alu_req_alu_sll}} & alu_res_sll)\n                         | ({E203_XLEN{alu_req_alu_srl}} & alu_res_srl)\n                         | ({E203_XLEN{alu_req_alu_sra}} & alu_res_sra);\n\n  // BJP operations\n  wire [E203_XLEN-1:0] bjp_res_add = bjp_req_alu_op1 + bjp_req_alu_op2;\n  wire bjp_cmp_eq = (bjp_req_alu_op1 == bjp_req_alu_op2);\n\n  assign bjp_req_alu_add_res = bjp_res_add;\n  assign bjp_req_alu_cmp_res = bjp_cmp_eq;\n\n  // AGU operations\n  wire [E203_XLEN-1:0] agu_res_add = agu_req_alu_op1 + agu_req_alu_op2;\n\n  assign agu_req_alu_res = agu_res_add;\n\n  // MULDIV operations\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_add = muldiv_req_alu_op1 + muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res_sub = muldiv_req_alu_op1 - muldiv_req_alu_op2;\n\n  assign muldiv_req_alu_res = ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_add}} & muldiv_res_add)\n                            | ({E203_ALU_ADDER_WIDTH{muldiv_req_alu_sub}} & muldiv_res_sub);\n\n  // Shared Buffers (SBFs)\n  sirv_gnrl_dffl #(33) sbf_0_dffl (\n    .lden (muldiv_sbf_0_ena),\n    .dnxt (muldiv_sbf_0_nxt),\n    .qout (muldiv_sbf_0_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dffl #(33) sbf_1_dffl (\n    .lden (muldiv_sbf_1_ena),\n    .dnxt (muldiv_sbf_1_nxt),\n    .qout (muldiv_sbf_1_r),\n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 14, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 13, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ram", "codeid": 20, "code": "module e203_dtcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_DTCM_RAM_AW-1:0] addr,\n    input wire [E203_DTCM_RAM_MW-1:0] wem,\n    input wire [E203_DTCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_DTCM_RAM_DW-1:0] dout\n);\n\n    sirv_gnrl_ram #(\n        .DP(E203_DTCM_RAM_DP),\n        .DW(E203_DTCM_RAM_DW),\n        .FORCE_X2ZERO(1),\n        .MW(E203_DTCM_RAM_MW),\n        .AW(E203_DTCM_RAM_AW)\n    ) u_203_dtcm_gnrl_ram (\n        .sd(sd),\n        .ds(ds),\n        .ls(ls),\n        .rst_n(rst_n),\n        .clk(clk),\n        .cs(cs),\n        .we(we),\n        .addr(addr),\n        .din(din),\n        .wem(wem),\n        .dout(dout)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 10, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n// Instantiate submodules\ne203_ifu u_e203_ifu (\n  .inspect_pc(inspect_pc),\n  .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n  .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n  .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n  .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n  .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n  .pc_rtvec(pc_rtvec),\n  .core_mhartid(core_mhartid)\n);\n\ne203_exu u_e203_exu (\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle)\n);\n\ne203_lsu u_e203_lsu (\n  .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n  .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n  .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n  .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata)\n);\n\ne203_biu u_e203_biu (\n  .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n  .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n  .ppi_icb_rsp_err(ppi_icb_rsp_err),\n  .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 18, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // ALU operation logic\n  wire [E203_XLEN-1:0] alu_op1 = alu_req_alu_op1;\n  wire [E203_XLEN-1:0] alu_op2 = alu_req_alu_op2;\n  wire [E203_XLEN-1:0] alu_res;\n\n  assign alu_res = (alu_req_alu_add) ? (alu_op1 + alu_op2) :\n                   (alu_req_alu_sub) ? (alu_op1 - alu_op2) :\n                   (alu_req_alu_xor) ? (alu_op1 ^ alu_op2) :\n                   (alu_req_alu_sll) ? (alu_op1 << alu_op2[4:0]) :\n                   (alu_req_alu_srl) ? (alu_op1 >> alu_op2[4:0]) :\n                   (alu_req_alu_sra) ? (alu_op1 >>> alu_op2[4:0]) :\n                   (alu_req_alu_or)  ? (alu_op1 | alu_op2) :\n                   (alu_req_alu_and) ? (alu_op1 & alu_op2) : 0;\n\n  assign alu_req_alu_res = alu_res;\n\n  // BJP operation logic\n  wire [E203_XLEN-1:0] bjp_op1 = bjp_req_alu_op1;\n  wire [E203_XLEN-1:0] bjp_op2 = bjp_req_alu_op2;\n  wire [E203_XLEN-1:0] bjp_add_res;\n  wire bjp_cmp_res;\n\n  assign bjp_add_res = bjp_op1 + bjp_op2;\n  assign bjp_cmp_res = (bjp_op1 == bjp_op2);\n\n  assign bjp_req_alu_add_res = bjp_add_res;\n  assign bjp_req_alu_cmp_res = bjp_cmp_res;\n\n  // AGU operation logic\n  wire [E203_XLEN-1:0] agu_op1 = agu_req_alu_op1;\n  wire [E203_XLEN-1:0] agu_op2 = agu_req_alu_op2;\n  wire [E203_XLEN-1:0] agu_res;\n\n  assign agu_res = agu_op1 + agu_op2;\n\n  assign agu_req_alu_res = agu_res;\n\n  // MULDIV operation logic\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_op1 = muldiv_req_alu_op1;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_op2 = muldiv_req_alu_op2;\n  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_res;\n\n  assign muldiv_res = (muldiv_req_alu_add) ? (muldiv_op1 + muldiv_op2) :\n                      (muldiv_req_alu_sub) ? (muldiv_op1 - muldiv_op2) : 0;\n\n  assign muldiv_req_alu_res = muldiv_res;\n\n  // Shared Buffer logic\n  reg [32:0] sbf_0_r;\n  reg [32:0] sbf_1_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      sbf_0_r <= 33'b0;\n      sbf_1_r <= 33'b0;\n    end else begin\n      if (muldiv_sbf_0_ena) sbf_0_r <= muldiv_sbf_0_nxt;\n      if (muldiv_sbf_1_ena) sbf_1_r <= muldiv_sbf_1_nxt;\n    end\n  end\n\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 15, "code": "module e203_exu_alu (\n  input i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  input nice_xs_off,\n  output amo_wait,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] i_itag,\n  input [E203_XLEN-1:0] i_rs1,\n  input [E203_XLEN-1:0] i_rs2,\n  input [E203_XLEN-1:0] i_imm,\n  input [E203_DECINFO_WIDTH-1:0] i_info,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input [E203_INSTR_SIZE-1:0] i_instr,\n  input i_pc_vld,\n  input [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input i_rdwen,\n  input i_ilegl,\n  input i_buserr,\n  input i_misalgn,\n  input flush_req,\n  input flush_pulse,\n  output cmt_o_valid,\n  input cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [12-1:0] csr_idx,\n  input nonflush_cmt_ena,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [2-1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input i_nice_cmt_off_ilgl,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_clk_ctrl", "codeid": 20, "code": "module e203_clk_ctrl (\n    input clk,\n    input rst_n,\n    input test_mode,\n    input core_cgstop,\n    input core_ifu_active,\n    input core_exu_active,\n    input core_lsu_active,\n    input core_biu_active,\n    input core_wfi,\n    output clk_aon,\n    output clk_core_ifu,\n    output clk_core_exu,\n    output clk_core_lsu,\n    output clk_core_biu\n    `ifdef E203_HAS_ITCM\n    , input itcm_active,\n    output itcm_ls,\n    output clk_itcm\n    `endif\n    `ifdef E203_HAS_DTCM\n    , input dtcm_active,\n    output dtcm_ls,\n    output clk_dtcm\n    `endif\n);\n\n    wire ifu_clk_en = core_cgstop | (core_ifu_active & ~core_wfi);\n    wire exu_clk_en = core_cgstop | core_exu_active;\n    wire lsu_clk_en = core_cgstop | core_lsu_active;\n    wire biu_clk_en = core_cgstop | core_biu_active;\n\n    e203_clkgate u_ifu_clkgate (\n        .clk_in(clk),\n        .en(ifu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_ifu)\n    );\n\n    e203_clkgate u_exu_clkgate (\n        .clk_in(clk),\n        .en(exu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_exu)\n    );\n\n    e203_clkgate u_lsu_clkgate (\n        .clk_in(clk),\n        .en(lsu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_lsu)\n    );\n\n    e203_clkgate u_biu_clkgate (\n        .clk_in(clk),\n        .en(biu_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_core_biu)\n    );\n\n    `ifdef E203_HAS_ITCM\n    reg itcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            itcm_active_r <= 1'b0;\n        else\n            itcm_active_r <= itcm_active;\n    end\n\n    wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n\n    e203_clkgate u_itcm_clkgate (\n        .clk_in(clk),\n        .en(itcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_itcm)\n    );\n\n    assign itcm_ls = ~itcm_clk_en;\n    `endif\n\n    `ifdef E203_HAS_DTCM\n    reg dtcm_active_r;\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            dtcm_active_r <= 1'b0;\n        else\n            dtcm_active_r <= dtcm_active;\n    end\n\n    wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n\n    e203_clkgate u_dtcm_clkgate (\n        .clk_in(clk),\n        .en(dtcm_clk_en),\n        .test_mode(test_mode),\n        .clk_out(clk_dtcm)\n    );\n\n    assign dtcm_ls = ~dtcm_clk_en;\n    `endif\n\n    assign clk_aon = clk;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 10, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pipe_flush_pc),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(),\n    .ifu_req_seq_rv32(),\n    .ifu_req_last_pc(),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu2itcm_icb_cmd_valid),\n    .ifu_req_pc(ifu2itcm_icb_cmd_addr),\n    .ifu_req_seq(),\n    .ifu_req_seq_rv32(),\n    .ifu_req_last_pc(),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(),\n    .ifu_rsp_valid(),\n    .ifu_rsp_err(),\n    .ifu_rsp_instr(),\n    .ifu2itcm_icb_cmd_valid(),\n    .ifu2itcm_icb_cmd_addr(),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(),\n    .ifu2biu_icb_cmd_addr(),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 17, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  \n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_ready,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_ready,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_ready,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_ready,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 15, "code": "module e203_exu_alu_muldiv (\n  input wire mdv_nob2b,\n  input wire muldiv_i_valid,\n  output wire muldiv_i_ready,\n  input wire [E203_XLEN-1:0] muldiv_i_rs1,\n  input wire [E203_XLEN-1:0] muldiv_i_rs2,\n  input wire [E203_XLEN-1:0] muldiv_i_imm,\n  input wire [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input wire [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output wire muldiv_i_longpipe,\n  input wire flush_pulse,\n  output wire muldiv_o_valid,\n  input wire muldiv_o_ready,\n  output wire [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output wire muldiv_o_wbck_err,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output wire muldiv_req_alu_add,\n  output wire muldiv_req_alu_sub,\n  input wire [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire muldiv_sbf_0_ena,\n  output wire [33:0] muldiv_sbf_0_nxt,\n  input wire [33:0] muldiv_sbf_0_r,\n  output wire muldiv_sbf_1_ena,\n  output wire [33:0] muldiv_sbf_1_nxt,\n  input wire [33:0] muldiv_sbf_1_r,\n  input wire clk,\n  input wire rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 15, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_i_rdwen : 1'b1);\n  assign csr_wr_en = csr_i_valid & (csr_i_info[E203_DECINFO_CSR_CSRRW] | (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_op1_is_zero) | (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_op1_is_zero));\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (read_csr_dat | csr_op1) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (read_csr_dat & ~csr_op1) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = csr_op1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 16, "code": "module e203_exu_alu_csrctrl (\n  input         csr_i_valid,\n  output        csr_i_ready,\n  input  [31:0] csr_i_rs1,\n  input  [31:0] csr_i_info,\n  input         csr_i_rdwen,\n  output        csr_ena,\n  output        csr_wr_en,\n  output        csr_rd_en,\n  output [11:0] csr_idx,\n  input         csr_access_ilgl,\n  input  [31:0] read_csr_dat,\n  output [31:0] wbck_csr_dat,\n  output        csr_o_valid,\n  input         csr_o_ready,\n  output [31:0] csr_o_wbck_wdat,\n  output        csr_o_wbck_err,\n  input         clk,\n  input         rst_n\n);\n\n  // Internal signals\n  wire [31:0] csr_op1;\n  wire csr_sel_nice;\n  wire nice_csr_valid;\n  wire nice_csr_ready;\n  wire [31:0] nice_csr_addr;\n  wire nice_csr_wr;\n  wire [31:0] nice_csr_wdata;\n  wire [31:0] nice_csr_rdata;\n  wire nice_xs_off;\n\n  // Control signal logic\n  assign csr_rd_en = csr_i_valid & (csr_i_info[0] | csr_i_info[1] | csr_i_info[2]);\n  assign csr_wr_en = csr_i_valid & (csr_i_info[0] | (csr_i_info[1] & ~csr_i_info[4]) | (csr_i_info[2] & ~csr_i_info[4]));\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n  assign csr_idx = csr_i_info[31:20];\n\n  // Operand preparation\n  assign csr_op1 = csr_i_info[3] ? {27'b0, csr_i_info[19:15]} : csr_i_rs1;\n\n  // Write-back data preparation\n  assign wbck_csr_dat = csr_i_info[0] ? csr_op1 :\n                        csr_i_info[1] ? (csr_op1 | read_csr_dat) :\n                        (csr_op1 & ~read_csr_dat);\n\n  // Error handling\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  // NICE CSR address and data\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 19, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 14, "code": "module e203_exu_csr (\n  input  wire        nonflush_cmt_ena,\n  input  wire        csr_ena,\n  input  wire        csr_wr_en,\n  input  wire        csr_rd_en,\n  input  wire [11:0] csr_idx,\n  output wire        csr_access_ilgl,\n  output wire        tm_stop,\n  output wire        core_cgstop,\n  output wire        tcm_cgstop,\n  output wire        itcm_nohold,\n  output wire        mdv_nob2b,\n  output wire [31:0] read_csr_dat,\n  input  wire [31:0] wbck_csr_dat,\n  input  wire [31:0] core_mhartid,\n  input  wire        ext_irq_r,\n  input  wire        sft_irq_r,\n  input  wire        tmr_irq_r,\n  output wire        status_mie_r,\n  output wire        mtie_r,\n  output wire        msie_r,\n  output wire        meie_r,\n  output wire        wr_dcsr_ena,\n  output wire        wr_dpc_ena,\n  output wire        wr_dscratch_ena,\n  input  wire [31:0] dcsr_r,\n  input  wire [31:0] dpc_r,\n  input  wire [31:0] dscratch_r,\n  output wire        u_mode,\n  output wire        s_mode,\n  output wire        h_mode,\n  output wire        m_mode,\n  input  wire [31:0] cmt_badaddr,\n  input  wire        cmt_badaddr_ena,\n  input  wire [31:0] cmt_epc,\n  input  wire        cmt_epc_ena,\n  input  wire [31:0] cmt_cause,\n  input  wire        cmt_cause_ena,\n  input  wire        cmt_status_ena,\n  input  wire        cmt_instret_ena,\n  input  wire        cmt_mret_ena,\n  output wire [31:0] csr_epc_r,\n  output wire [31:0] csr_dpc_r,\n  output wire [31:0] csr_mtvec_r,\n  input  wire        clk_aon,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal registers and wires\n  reg [31:0] mstatus;\n  reg [31:0] mie;\n  reg [31:0] mip;\n  reg [31:0] mtvec;\n  reg [31:0] mscratch;\n  reg [31:0] mepc;\n  reg [31:0] mcause;\n  reg [31:0] mbadaddr;\n  reg [31:0] mcycle;\n  reg [31:0] mcycleh;\n  reg [31:0] minstret;\n  reg [31:0] minstreth;\n  reg [31:0] counterstop;\n  reg [31:0] mcgstop;\n  reg [31:0] itcmnohold;\n  reg [31:0] mdvnob2b;\n  reg [31:0] dcsr;\n  reg [31:0] dpc;\n  reg [31:0] dscratch;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 32'b0;\n      mie <= 32'b0;\n      mip <= 32'b0;\n      mtvec <= 32'b0;\n      mscratch <= 32'b0;\n      mepc <= 32'b0;\n      mcause <= 32'b0;\n      mbadaddr <= 32'b0;\n      mcycle <= 32'b0;\n      mcycleh <= 32'b0;\n      minstret <= 32'b0;\n      minstreth <= 32'b0;\n      counterstop <= 32'b0;\n      mcgstop <= 32'b0;\n      itcmnohold <= 32'b0;\n      mdvnob2b <= 32'b0;\n      dcsr <= 32'b0;\n      dpc <= 32'b0;\n      dscratch <= 32'b0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          12'h7b0: dcsr <= wbck_csr_dat;\n          12'h7b1: dpc <= wbck_csr_dat;\n          12'h7b2: dscratch <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = 32'b0;\n    endcase\n  end\n\n  // Output assignments\n  assign csr_access_ilgl = 1'b0;\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b0);\n  assign wr_dpc_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b1);\n  assign wr_dscratch_ena = dbg_mode && csr_wr_en && (csr_idx == 12'h7b2);\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 12, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 10, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n\n  // IFU Interface\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  // LSU Interface\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  // External Interface\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n\n  // RAM Interface\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals and module instances go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 12, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction forwarding logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  assign nice_rsp_multicyc_ready = fifo_o_vld;\n  assign nice_o_itag_valid = fifo_o_vld;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 14, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~flush_need | flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  assign brchmis_flush_pc = \n    (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n    (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n    cmt_i_dret ? csr_dpc_r :\n    csr_epc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 18, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 16, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 11, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_icb_cmd_valid(clint_icb_cmd_valid),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_cmd_addr(clint_icb_cmd_addr),\n    .clint_icb_cmd_read(clint_icb_cmd_read),\n    .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_icb_cmd_valid(plic_icb_cmd_valid),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_cmd_addr(plic_icb_cmd_addr),\n    .plic_icb_cmd_read(plic_icb_cmd_read),\n    .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 19, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n  // PPI Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  output ppi_icb_cmd_ready,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_valid,\n  output ppi_icb_rsp_err,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  // CLINT Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  output clint_icb_cmd_ready,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_valid,\n  output clint_icb_rsp_err,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  // PLIC Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  output plic_icb_cmd_ready,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_valid,\n  output plic_icb_rsp_err,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  // FIO Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  output fio_icb_cmd_ready,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_valid,\n  output fio_icb_rsp_err,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  // MEM Interface\n  input mem_icb_enable,\n  output mem_icb_cmd_ready,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_valid,\n  output mem_icb_rsp_err,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n  // Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 17, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Control Signal Preparation Logic\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_zero = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    ((csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC]) & ~csr_op1_is_zero)\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  assign wbck_csr_dat = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                        csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                        csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                        {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE Interface Logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 18, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Internal signals\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire csr_op1_is_0 = csr_i_info[E203_DECINFO_CSR_RS1IS0];\n  wire csr_op1_is_not_0 = ~csr_op1_is_0;\n  wire csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  wire csr_rd_en_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_i_rdwen :\n                       csr_i_info[E203_DECINFO_CSR_CSRRS] | csr_i_info[E203_DECINFO_CSR_CSRRC];\n\n  wire csr_wr_en_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRS] & csr_op1_is_not_0) |\n                       (csr_i_info[E203_DECINFO_CSR_CSRRC] & csr_op1_is_not_0);\n\n  assign csr_rd_en = csr_i_valid & csr_rd_en_pre;\n  assign csr_wr_en = csr_i_valid & csr_wr_en_pre;\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  wire csr_ena_pre = csr_o_valid & csr_o_ready;\n  assign csr_ena = csr_ena_pre & ~csr_sel_nice;\n\n  wire [E203_XLEN-1:0] csr_wbck_csr_dat_pre = csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n                                              csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n                                              csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n                                              {E203_XLEN{1'b0}};\n\n  assign wbck_csr_dat = csr_wbck_csr_dat_pre;\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  wire csr_sel_nice_pre = (csr_idx[11:8] == 4'hE);\n  assign csr_sel_nice = csr_sel_nice_pre & ~nice_xs_off;\n\n  assign nice_csr_valid = csr_i_valid & csr_sel_nice & csr_o_ready;\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n\n  assign nice_csr_addr = {20'b0, csr_idx};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = csr_wbck_csr_dat_pre;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 13, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // NICE logic\n  assign nice_i_ready = nice_req_ready || nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid && !nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  assign fifo_i_vld = nice_req_valid && nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n\n  assign nice_o_valid = fifo_o_vld && nice_rsp_multicyc_valid;\n  assign fifo_o_rdy = nice_o_ready && nice_rsp_multicyc_valid;\n  assign nice_o_itag_valid = fifo_o_vld && nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_vld && nice_o_itag_ready;\n\n  assign nice_o_longpipe = !nice_i_xs_off;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 11, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 19, "code": "module e203_exu_alu_dpath (\n  input  wire                 alu_req_alu,\n  input  wire                 alu_req_alu_add,\n  input  wire                 alu_req_alu_sub,\n  input  wire                 alu_req_alu_xor,\n  input  wire                 alu_req_alu_sll,\n  input  wire                 alu_req_alu_srl,\n  input  wire                 alu_req_alu_sra,\n  input  wire                 alu_req_alu_or,\n  input  wire                 alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire                 bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire                 agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire                 muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire                 muldiv_req_alu_add,\n  input  wire                 muldiv_req_alu_sub,\n  input  wire                 muldiv_sbf_0_ena,\n  input  wire [33:0]          muldiv_sbf_0_nxt,\n  input  wire                 muldiv_sbf_1_ena,\n  input  wire [33:0]          muldiv_sbf_1_nxt,\n  input  wire                 clk,\n  input  wire                 rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire                 bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [33:0]          muldiv_sbf_0_r,\n  output wire [33:0]          muldiv_sbf_1_r\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 16, "code": "module e203_exu_alu (\n  input i_valid,\n  output i_ready,\n  output i_longpipe,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  input nice_xs_off,\n  output amo_wait,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] i_itag,\n  input [E203_XLEN-1:0] i_rs1,\n  input [E203_XLEN-1:0] i_rs2,\n  input [E203_XLEN-1:0] i_imm,\n  input [E203_DECINFO_WIDTH-1:0] i_info,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input [E203_INSTR_SIZE-1:0] i_instr,\n  input i_pc_vld,\n  input [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input i_rdwen,\n  input i_ilegl,\n  input i_buserr,\n  input i_misalgn,\n  input flush_req,\n  input flush_pulse,\n  output cmt_o_valid,\n  input cmt_o_ready,\n  output cmt_o_pc_vld,\n  output [E203_PC_SIZE-1:0] cmt_o_pc,\n  output [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output [E203_XLEN-1:0] cmt_o_imm,\n  output cmt_o_rv32,\n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,\n  output cmt_o_bjp_rslv,\n  output cmt_o_misalgn,\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr,\n  output [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wbck_o_valid,\n  input wbck_o_ready,\n  output [E203_XLEN-1:0] wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input mdv_nob2b,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [12-1:0] csr_idx,\n  input nonflush_cmt_ena,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [2-1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_instr,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  output nice_longp_wbck_valid,\n  input nice_longp_wbck_ready,\n  output [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input i_nice_cmt_off_ilgl,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 12, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL prediction\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // PC adder operands\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc :\n                           (dec_jalr_rs1idx == 0) ? 0 :\n                           (dec_jalr_rs1idx == 1) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // JALR dependency check\n  assign jalr_rs1xn_dep = ~oitf_empty & ~ir_empty & ir_rs1en & ~jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // BPU wait logic\n  assign bpu_wait = dec_jalr & ((dec_jalr_rs1idx == 1 & jalr_rs1xn_dep) |\n                                (dec_jalr_rs1idx != 0 & dec_jalr_rs1idx != 1 & jalr_rs1xn_dep));\n\n  // RS1 read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_ena;\n\n  // RS1 read state management\n  assign rs1xn_rdrf_ena = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr &\n                          (dec_jalr_rs1idx != 0 & dec_jalr_rs1idx != 1) &\n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_ena | (~rs1xn_rdrf_r & ~rs1xn_rdrf_ena);\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 12, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .inspect_pc(inspect_pc),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready)\n  );\n\n  e203_exu u_e203_exu (\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle)\n  );\n\n  e203_lsu u_e203_lsu (\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 13, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 13, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n// Instantiate submodules\ne203_ifu u_e203_ifu (\n  .clk(clk),\n  .rst_n(rst_n),\n  .inspect_pc(inspect_pc),\n  .ifu_active(ifu_active),\n  .itcm_nohold(itcm_nohold),\n  .pc_rtvec(pc_rtvec),\n  .ifu_o_ir(ifu_o_ir),\n  .ifu_o_pc(ifu_o_pc),\n  .ifu_o_pc_vld(ifu_o_pc_vld),\n  .ifu_o_misalgn(ifu_o_misalgn),\n  .ifu_o_buserr(ifu_o_buserr),\n  .ifu_o_rs1idx(ifu_o_rs1idx),\n  .ifu_o_rs2idx(ifu_o_rs2idx),\n  .ifu_o_prdt_taken(ifu_o_prdt_taken),\n  .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n  .ifu_o_valid(ifu_o_valid),\n  .ifu_o_ready(ifu_o_ready),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .pipe_flush_pc(pipe_flush_pc),\n  .ifu2itcm_holdup(ifu2itcm_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n  .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n  .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n  .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n  .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n  .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n  .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n  .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n  .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n  .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n  .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n  .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n  .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n  .ifu_halt_req(ifu_halt_req),\n  .ifu_halt_ack(ifu_halt_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu)\n);\n\ne203_exu u_e203_exu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .exu_active(exu_active),\n  .excp_active(excp_active),\n  .core_wfi(core_wfi),\n  .tm_stop(tm_stop),\n  .itcm_nohold(itcm_nohold),\n  .core_cgstop(core_cgstop),\n  .tcm_cgstop(tcm_cgstop),\n  .core_mhartid(core_mhartid),\n  .dbg_irq_r(dbg_irq_r),\n  .lcl_irq_r(lcl_irq_r),\n  .evt_r(evt_r),\n  .ext_irq_r(ext_irq_r),\n  .sft_irq_r(sft_irq_r),\n  .tmr_irq_r(tmr_irq_r),\n  .wfi_halt_ifu_req(wfi_halt_ifu_req),\n  .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n  .oitf_empty(oitf_empty),\n  .rf2ifu_x1(rf2ifu_x1),\n  .rf2ifu_rs1(rf2ifu_rs1),\n  .dec2ifu_rden(dec2ifu_rden),\n  .dec2ifu_rs1en(dec2ifu_rs1en),\n  .dec2ifu_rdidx(dec2ifu_rdidx),\n  .dec2ifu_mulhsu(dec2ifu_mulhsu),\n  .dec2ifu_div(dec2ifu_div),\n  .dec2ifu_rem(dec2ifu_rem),\n  .dec2ifu_divu(dec2ifu_divu),\n  .dec2ifu_remu(dec2ifu_remu),\n  .test_mode(test_mode),\n  .clk_aon(clk_aon),\n  .clk(clk),\n  .rst_n(rst_n),\n  .cmt_dpc(cmt_dpc),\n  .cmt_dpc_ena(cmt_dpc_ena),\n  .cmt_dcause(cmt_dcause),\n  .cmt_dcause_ena(cmt_dcause_ena),\n  .wr_dcsr_ena(wr_dcsr_ena),\n  .wr_dpc_ena(wr_dpc_ena),\n  .wr_dscratch_ena(wr_dscratch_ena),\n  .wr_csr_nxt(wr_csr_nxt),\n  .dcsr_r(dcsr_r),\n  .dpc_r(dpc_r),\n  .dscratch_r(dscratch_r),\n  .dbg_mode(dbg_mode),\n  .dbg_halt_r(dbg_halt_r),\n  .dbg_step_r(dbg_step_r),\n  .dbg_ebreakm_r(dbg_ebreakm_r),\n  .dbg_stopcycle(dbg_stopcycle),\n  .i_valid(i_valid),\n  .i_ready(i_ready),\n  .i_ir(i_ir),\n  .i_pc(i_pc),\n  .i_pc_vld(i_pc_vld),\n  .i_misalgn(i_misalgn),\n  .i_buserr(i_buserr),\n  .i_prdt_taken(i_prdt_taken),\n  .i_muldiv_b2b(i_muldiv_b2b),\n  .i_rs1idx(i_rs1idx),\n  .i_rs2idx(i_rs2idx),\n  .pipe_flush_ack(pipe_flush_ack),\n  .pipe_flush_req(pipe_flush_req),\n  .pipe_flush_add_op1(pipe_flush_add_op1),\n  .pipe_flush_add_op2(pipe_flush_add_op2),\n  .pipe_flush_pc(pipe_flush_pc),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_csr_valid(nice_csr_valid),\n  .nice_csr_ready(nice_csr_ready),\n  .nice_csr_addr(nice_csr_addr),\n  .nice_csr_wr(nice_csr_wr),\n  .nice_csr_wdata(nice_csr_wdata),\n  .nice_csr_rdata(nice_csr_rdata),\n  .nice_req_valid(nice_req_valid),\n  .nice_req_ready(nice_req_ready),\n  .nice_req_inst(nice_req_inst),\n  .nice_req_rs1(nice_req_rs1),\n  .nice_req_rs2(nice_req_rs2),\n  .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n  .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n  .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n  .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n);\n\ne203_lsu u_e203_lsu (\n  .commit_mret(commit_mret),\n  .commit_trap(commit_trap),\n  .excp_active(excp_active),\n  .lsu_active(lsu_active),\n  .lsu_o_valid(lsu_o_valid),\n  .lsu_o_ready(lsu_o_ready),\n  .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n  .lsu_o_wbck_itag(lsu_o_wbck_itag),\n  .lsu_o_wbck_err(lsu_o_wbck_err),\n  .lsu_o_cmt_ld(lsu_o_cmt_ld),\n  .lsu_o_cmt_st(lsu_o_cmt_st),\n  .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n  .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n  .agu_icb_cmd_valid(agu_icb_cmd_valid),\n  .agu_icb_cmd_ready(agu_icb_cmd_ready),\n  .agu_icb_cmd_addr(agu_icb_cmd_addr),\n  .agu_icb_cmd_read(agu_icb_cmd_read),\n  .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n  .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n  .agu_icb_cmd_lock(agu_icb_cmd_lock),\n  .agu_icb_cmd_excl(agu_icb_cmd_excl),\n  .agu_icb_cmd_size(agu_icb_cmd_size),\n  .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n  .agu_icb_cmd_usign(agu_icb_cmd_usign),\n  .agu_icb_cmd_itag(agu_icb_cmd_itag),\n  .agu_icb_rsp_valid(agu_icb_rsp_valid),\n  .agu_icb_rsp_ready(agu_icb_rsp_ready),\n  .agu_icb_rsp_err(agu_icb_rsp_err),\n  .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n  .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n  .nice_mem_holdup(nice_mem_holdup),\n  .itcm_region_indic(itcm_region_indic),\n  .dtcm_region_indic(dtcm_region_indic),\n  .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n  .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n  .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n  .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n  .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n  .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n  .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n  .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n  .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n  .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n  .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n  .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n  .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n  .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n  .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n  .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n  .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n  .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n  .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n  .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n  .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n  .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n  .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n  .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n  .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n  .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n  .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n  .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n  .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n  .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n  .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n  .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n  .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n  .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n  .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n  .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n  .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n  .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n  .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n  .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n  .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n  .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n);\n\ne203_biu u_e203_biu (\n  .biu_active(biu_active),\n  .clk(clk),\n  .rst_n(rst_n),\n  .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n  .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n  .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n  .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n  .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n  .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n  .lsu2biu_icb_cmd_burst(lsu2biu_icb_cmd_burst),\n  .lsu2biu_icb_cmd_beat(lsu2biu_icb_cmd_beat),\n  .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n  .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n  .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n  .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n  .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n  .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n  .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n  .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n  .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n  .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n  .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n  .ifu2biu_icb_cmd_read(ifu2biu_icb_cmd_read),\n  .ifu2biu_icb_cmd_wdata(ifu2biu_icb_cmd_wdata),\n  .ifu2biu_icb_cmd_wmask(ifu2biu_icb_cmd_wmask),\n  .ifu2biu_icb_cmd_burst(ifu2biu_icb_cmd_burst),\n  .ifu2biu_icb_cmd_beat(ifu2biu_icb_cmd_beat),\n  .ifu2biu_icb_cmd_lock(ifu2biu_icb_cmd_lock),\n  .ifu2biu_icb_cmd_excl(ifu2biu_icb_cmd_excl),\n  .ifu2biu_icb_cmd_size(ifu2biu_icb_cmd_size),\n  .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n  .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n  .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n  .ifu2biu_icb_rsp_excl_ok(ifu2biu_icb_rsp_excl_ok),\n  .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n  .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n  .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n  .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n  .ppi_icb_cmd_read(ppi_icb_cmd_read),\n  .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n  .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n  .ppi_icb_cmd_burst(ppi_icb_cmd_burst),\n  .ppi_icb_cmd_beat(ppi_icb_cmd_beat),\n  .ppi_icb_cmd_lock(ppi_icb_cmd_lock),\n  .ppi_icb_cmd_excl(ppi_icb_cmd_excl),\n  .ppi_icb_cmd_size(ppi_icb_cmd_size),\n  .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n  .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n  .ppi_icb_rsp_err(ppi_icb_rsp_err),\n  .ppi_icb_rsp_excl_ok(ppi_icb_rsp_excl_ok),\n  .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n  .clint_icb_cmd_valid(clint_icb_cmd_valid),\n  .clint_icb_cmd_ready(clint_icb_cmd_ready),\n  .clint_icb_cmd_addr(clint_icb_cmd_addr),\n  .clint_icb_cmd_read(clint_icb_cmd_read),\n  .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n  .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n  .clint_icb_cmd_burst(clint_icb_cmd_burst),\n  .clint_icb_cmd_beat(clint_icb_cmd_beat),\n  .clint_icb_cmd_lock(clint_icb_cmd_lock),\n  .clint_icb_cmd_excl(clint_icb_cmd_excl),\n  .clint_icb_cmd_size(clint_icb_cmd_size),\n  .clint_icb_rsp_valid(clint_icb_rsp_valid),\n  .clint_icb_rsp_ready(clint_icb_rsp_ready),\n  .clint_icb_rsp_err(clint_icb_rsp_err),\n  .clint_icb_rsp_excl_ok(clint_icb_rsp_excl_ok),\n  .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n  .plic_icb_cmd_valid(plic_icb_cmd_valid),\n  .plic_icb_cmd_ready(plic_icb_cmd_ready),\n  .plic_icb_cmd_addr(plic_icb_cmd_addr),\n  .plic_icb_cmd_read(plic_icb_cmd_read),\n  .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n  .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n  .plic_icb_cmd_burst(plic_icb_cmd_burst),\n  .plic_icb_cmd_beat(plic_icb_cmd_beat),\n  .plic_icb_cmd_lock(plic_icb_cmd_lock),\n  .plic_icb_cmd_excl(plic_icb_cmd_excl),\n  .plic_icb_cmd_size(plic_icb_cmd_size),\n  .plic_icb_rsp_valid(plic_icb_rsp_valid),\n  .plic_icb_rsp_ready(plic_icb_rsp_ready),\n  .plic_icb_rsp_err(plic_icb_rsp_err),\n  .plic_icb_rsp_excl_ok(plic_icb_rsp_excl_ok),\n  .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n  .mem_icb_cmd_valid(mem_icb_cmd_valid),\n  .mem_icb_cmd_ready(mem_icb_cmd_ready),\n  .mem_icb_cmd_addr(mem_icb_cmd_addr),\n  .mem_icb_cmd_read(mem_icb_cmd_read),\n  .mem_icb_cmd_wdata(mem_icb_cmd_wdata),\n  .mem_icb_cmd_wmask(mem_icb_cmd_wmask),\n  .mem_icb_cmd_burst(mem_icb_cmd_burst),\n  .mem_icb_cmd_beat(mem_icb_cmd_beat),\n  .mem_icb_cmd_lock(mem_icb_cmd_lock),\n  .mem_icb_cmd_excl(mem_icb_cmd_excl),\n  .mem_icb_cmd_size(mem_icb_cmd_size),\n  .mem_icb_rsp_valid(mem_icb_rsp_valid),\n  .mem_icb_rsp_ready(mem_icb_rsp_ready),\n  .mem_icb_rsp_err(mem_icb_rsp_err),\n  .mem_icb_rsp_excl_ok(mem_icb_rsp_excl_ok),\n  .mem_icb_rsp_rdata(mem_icb_rsp_rdata)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 13, "code": "module e203_srams (\n    input wire itcm_ram_sd,\n    input wire itcm_ram_ds,\n    input wire itcm_ram_ls,\n    input wire itcm_ram_cs,\n    input wire itcm_ram_we,\n    input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n    input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n    input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n    output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n    input wire clk_itcm_ram,\n    input wire rst_itcm,\n\n    input wire dtcm_ram_sd,\n    input wire dtcm_ram_ds,\n    input wire dtcm_ram_ls,\n    input wire dtcm_ram_cs,\n    input wire dtcm_ram_we,\n    input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n    input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n    input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n    output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n    input wire clk_dtcm_ram,\n    input wire rst_dtcm\n);\n\n`ifdef E203_HAS_ITCM\n    e203_itcm_ram u_e203_itcm_ram (\n        .sd(itcm_ram_sd),\n        .ds(itcm_ram_ds),\n        .ls(itcm_ram_ls),\n        .cs(itcm_ram_cs),\n        .we(itcm_ram_we),\n        .addr(itcm_ram_addr),\n        .wem(itcm_ram_wem),\n        .din(itcm_ram_din),\n        .dout(itcm_ram_dout),\n        .clk(clk_itcm_ram),\n        .rst_n(rst_itcm)\n    );\n`endif\n\n`ifdef E203_HAS_DTCM\n    e203_dtcm_ram u_e203_dtcm_ram (\n        .sd(dtcm_ram_sd),\n        .ds(dtcm_ram_ds),\n        .ls(dtcm_ram_ls),\n        .cs(dtcm_ram_cs),\n        .we(dtcm_ram_we),\n        .addr(dtcm_ram_addr),\n        .wem(dtcm_ram_wem),\n        .din(dtcm_ram_din),\n        .dout(dtcm_ram_dout),\n        .clk(clk_dtcm_ram),\n        .rst_n(rst_dtcm)\n    );\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 16, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Write-back error for special instructions\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n\n  // Calculation result\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 19, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Valid-Ready Handshake\n  assign bjp_i_ready = bjp_o_ready;\n  assign bjp_o_valid = bjp_i_valid;\n\n  // ALU Requests\n  wire beq  = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bne  = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire blt  = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bgt  = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bltu = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bgtu = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire jump = bjp_i_info[E203_DECINFO_BJP_JUMP];\n\n  assign bjp_req_alu_cmp_eq  = beq;\n  assign bjp_req_alu_cmp_ne  = bne;\n  assign bjp_req_alu_cmp_lt  = blt;\n  assign bjp_req_alu_cmp_gt  = bgt;\n  assign bjp_req_alu_cmp_ltu = bltu;\n  assign bjp_req_alu_cmp_gtu = bgtu;\n  assign bjp_req_alu_add     = jump;\n\n  // Operand Selection\n  assign bjp_req_alu_op1 = jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = jump ? (E203_XLEN == 32 ? 4 : 2) : bjp_i_rs2;\n\n  // BJP Resolved Result\n  assign bjp_o_cmt_rslv = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write Back Data Transfer\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n\n  // Write Back Err Generation\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Communication with Commit Module\n  assign bjp_o_cmt_bjp    = bjp_i_info[E203_DECINFO_BJP_BXX];\n  assign bjp_o_cmt_mret   = bjp_i_info[E203_DECINFO_BJP_MRET];\n  assign bjp_o_cmt_dret   = bjp_i_info[E203_DECINFO_BJP_DRET];\n  assign bjp_o_cmt_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n  assign bjp_o_cmt_prdt   = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 13, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n// Module logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 14, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 14, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] fifo_rdwen;\n  reg [E203_RFIDX_WIDTH-1:0] fifo_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] fifo_pc [0:E203_OITF_DEPTH-1];\n  reg [E203_OITF_DEPTH-1:0] fifo_rdfpu;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (dis_ptr_r != ret_ptr_r) || (dis_ptr_flag == ret_ptr_flag);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      fifo_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      fifo_pc[dis_ptr_r] <= disp_i_pc;\n      fifo_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1)\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1)\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  assign ret_rdidx = fifo_rdidx[ret_ptr_r];\n  assign ret_pc = fifo_pc[ret_ptr_r];\n  assign ret_rdwen = fifo_rdwen[ret_ptr_r];\n  assign ret_rdfpu = fifo_rdfpu[ret_ptr_r];\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs1idx) & ~fifo_rdfpu);\n  assign oitfrd_match_disprs2 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs2idx) & ~fifo_rdfpu);\n  assign oitfrd_match_disprs3 = |(fifo_rdwen & (fifo_rdidx == disp_i_rs3idx) & ~fifo_rdfpu);\n  assign oitfrd_match_disprd = |(fifo_rdwen & (fifo_rdidx == disp_i_rdidx) & ~fifo_rdfpu);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 11, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_dpath", "codeid": 20, "code": "module e203_exu_alu_dpath (\n  input  wire        alu_req_alu,\n  input  wire        alu_req_alu_add,\n  input  wire        alu_req_alu_sub,\n  input  wire        alu_req_alu_xor,\n  input  wire        alu_req_alu_sll,\n  input  wire        alu_req_alu_srl,\n  input  wire        alu_req_alu_sra,\n  input  wire        alu_req_alu_or,\n  input  wire        alu_req_alu_and,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] alu_req_alu_op2,\n  input  wire        bjp_req_alu,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  input  wire        agu_req_alu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op1,\n  input  wire [E203_XLEN-1:0] agu_req_alu_op2,\n  input  wire        muldiv_req_alu,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input  wire        muldiv_req_alu_add,\n  input  wire        muldiv_req_alu_sub,\n  input  wire        muldiv_sbf_0_ena,\n  input  wire [32:0] muldiv_sbf_0_nxt,\n  input  wire        muldiv_sbf_1_ena,\n  input  wire [32:0] muldiv_sbf_1_nxt,\n  input  wire        clk,\n  input  wire        rst_n,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  output wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  output wire        bjp_req_alu_cmp_res,\n  output wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire [E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output wire [32:0] muldiv_sbf_0_r,\n  output wire [32:0] muldiv_sbf_1_r\n);\n\n  // Internal logic for ALU operations\n  // Implement the logic for arithmetic, logical, shift, and other operations\n  // based on the input control signals and operands.\n\n  // Shared Buffer 0\n  sirv_gnrl_dffl #(.DW(33)) sbf_0_dffl (\n    .lden(muldiv_sbf_0_ena),\n    .dnxt(muldiv_sbf_0_nxt),\n    .qout(muldiv_sbf_0_r),\n    .clk(clk)\n  );\n\n  // Shared Buffer 1\n  sirv_gnrl_dffl #(.DW(33)) sbf_1_dffl (\n    .lden(muldiv_sbf_1_ena),\n    .dnxt(muldiv_sbf_1_nxt),\n    .qout(muldiv_sbf_1_r),\n    .clk(clk)\n  );\n\n  // Additional logic for handling requests from BJP, AGU, and MULDIV units\n  // Implement the logic for handling requests and generating results\n  // based on the input control signals and operands.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 15, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_req & brchmis_flush_ack;\n\n  // Ready signal control\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_req & brchmis_flush_ack) | nonalu_excpirq_flush_req_raw;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 13, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 17, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Handshake signals\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 7, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  // State machine registers\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n\n  // State machine logic\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked) begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end else begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked) begin\n          if (req_need_2uop_r) begin\n            icb_state_nxt = ICB_STATE_WAIT2ND;\n          end else begin\n            icb_state_nxt = ICB_STATE_IDLE;\n          end\n        end else begin\n          icb_state_nxt = ICB_STATE_1ST;\n        end\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready) begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end else begin\n          icb_state_nxt = ICB_STATE_WAIT2ND;\n        end\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked) begin\n          icb_state_nxt = ICB_STATE_IDLE;\n        end else begin\n          icb_state_nxt = ICB_STATE_2ND;\n        end\n      end\n      default: begin\n        icb_state_nxt = ICB_STATE_IDLE;\n      end\n    endcase\n  end\n\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  // Handshake signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // Additional logic for request and response handling\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 12, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_pulse,\n  output flush_req,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 15, "code": "module e203_exu_alu_lsuagu (\n  input  wire          agu_i_valid,\n  output wire          agu_i_ready,\n  input  wire [31:0]   agu_i_rs1,\n  input  wire [31:0]   agu_i_rs2,\n  input  wire [31:0]   agu_i_imm,\n  input  wire [15:0]   agu_i_info,\n  input  wire [3:0]    agu_i_itag,\n  output wire          agu_i_longpipe,\n  input  wire          flush_req,\n  input  wire          flush_pulse,\n  output wire          amo_wait,\n  input  wire          oitf_empty,\n  output wire          agu_o_valid,\n  input  wire          agu_o_ready,\n  output wire [31:0]   agu_o_wbck_wdat,\n  output wire          agu_o_wbck_err,\n  output wire          agu_o_cmt_misalgn,\n  output wire          agu_o_cmt_ld,\n  output wire          agu_o_cmt_stamo,\n  output wire          agu_o_cmt_buserr,\n  output wire [31:0]   agu_o_cmt_badaddr,\n  output wire          agu_icb_cmd_valid,\n  input  wire          agu_icb_cmd_ready,\n  output wire [31:0]   agu_icb_cmd_addr,\n  output wire          agu_icb_cmd_read,\n  output wire [31:0]   agu_icb_cmd_wdata,\n  output wire [3:0]    agu_icb_cmd_wmask,\n  output wire          agu_icb_cmd_back2agu,\n  output wire          agu_icb_cmd_lock,\n  output wire          agu_icb_cmd_excl,\n  output wire [1:0]    agu_icb_cmd_size,\n  output wire [3:0]    agu_icb_cmd_itag,\n  output wire          agu_icb_cmd_usign,\n  input  wire          agu_icb_rsp_valid,\n  output wire          agu_icb_rsp_ready,\n  input  wire          agu_icb_rsp_err,\n  input  wire          agu_icb_rsp_excl_ok,\n  input  wire [31:0]   agu_icb_rsp_rdata,\n  output wire [31:0]   agu_req_alu_op1,\n  output wire [31:0]   agu_req_alu_op2,\n  output wire          agu_req_alu_swap,\n  output wire          agu_req_alu_add,\n  output wire          agu_req_alu_and,\n  output wire          agu_req_alu_or,\n  output wire          agu_req_alu_xor,\n  output wire          agu_req_alu_max,\n  output wire          agu_req_alu_min,\n  output wire          agu_req_alu_maxu,\n  output wire          agu_req_alu_minu,\n  input  wire [31:0]   agu_req_alu_res,\n  output wire          agu_sbf_0_ena,\n  output wire [31:0]   agu_sbf_0_nxt,\n  input  wire [31:0]   agu_sbf_0_r,\n  output wire          agu_sbf_1_ena,\n  output wire [31:0]   agu_sbf_1_nxt,\n  input  wire [31:0]   agu_sbf_1_r,\n  input  wire          clk,\n  input  wire          rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 16, "code": "module e203_exu_longpwbck (\n  input  wire lsu_wbck_i_valid,\n  output wire lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire lsu_wbck_i_err,\n  input  wire lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire lsu_cmt_i_ld,\n  input  wire lsu_cmt_i_st,\n  output wire longp_wbck_o_valid,\n  input  wire longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output wire [4:0] longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire longp_wbck_o_rdfpu,\n  output wire longp_excp_o_valid,\n  input  wire longp_excp_o_ready,\n  output wire longp_excp_o_insterr,\n  output wire longp_excp_o_ld,\n  output wire longp_excp_o_st,\n  output wire longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire oitf_ret_rdwen,\n  input  wire oitf_ret_rdfpu,\n  output wire oitf_ret_ena,\n  input  wire clk,\n  input  wire rst_n\n  `ifdef E203_HAS_NICE\n  ,\n  input  wire nice_longp_wbck_i_valid,\n  output wire nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire nice_longp_wbck_i_err\n  `endif\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n  wire wbck_i_err;\n  wire wbck_i_buserr;\n  wire [E203_ADDR_SIZE-1:0] wbck_i_badaddr;\n  wire wbck_i_ld;\n  wire wbck_i_st;\n\n  // Arbitration logic\n  assign wbck_i_valid = lsu_wbck_i_valid\n    `ifdef E203_HAS_NICE\n    || nice_longp_wbck_i_valid\n    `endif\n    ;\n\n  assign wbck_i_ready = lsu_wbck_i_ready\n    `ifdef E203_HAS_NICE\n    && nice_longp_wbck_i_ready\n    `endif\n    ;\n\n  assign wbck_i_wdat = lsu_wbck_i_valid ? lsu_wbck_i_wdat\n    `ifdef E203_HAS_NICE\n    : nice_longp_wbck_i_wdat\n    `endif\n    ;\n\n  assign wbck_i_itag = lsu_wbck_i_valid ? lsu_wbck_i_itag\n    `ifdef E203_HAS_NICE\n    : nice_longp_wbck_i_itag\n    `endif\n    ;\n\n  assign wbck_i_err = lsu_wbck_i_valid ? lsu_wbck_i_err\n    `ifdef E203_HAS_NICE\n    : nice_longp_wbck_i_err\n    `endif\n    ;\n\n  assign wbck_i_buserr = lsu_cmt_i_buserr;\n  assign wbck_i_badaddr = lsu_cmt_i_badaddr;\n  assign wbck_i_ld = lsu_cmt_i_ld;\n  assign wbck_i_st = lsu_cmt_i_st;\n\n  // Write-back and exception logic\n  assign longp_wbck_o_valid = wbck_i_valid && !wbck_i_err && oitf_ret_rdwen;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = oitf_ret_rdidx;\n  assign longp_wbck_o_rdfpu = oitf_ret_rdfpu;\n  assign longp_wbck_o_flags = 5'b0; // Example flags\n\n  assign longp_excp_o_valid = wbck_i_valid && wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = wbck_i_ld;\n  assign longp_excp_o_st = wbck_i_st;\n  assign longp_excp_o_buserr = wbck_i_buserr;\n  assign longp_excp_o_badaddr = wbck_i_badaddr;\n  assign longp_excp_o_pc = oitf_ret_pc;\n\n  assign oitf_ret_ena = wbck_i_valid && wbck_i_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 17, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [2-1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 14, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 14, "code": "module e203_srams (\n  input wire itcm_ram_sd,\n  input wire itcm_ram_ds,\n  input wire itcm_ram_ls,\n  input wire itcm_ram_cs,\n  input wire itcm_ram_we,\n  input wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire clk_itcm_ram,\n  input wire rst_itcm,\n\n  input wire dtcm_ram_sd,\n  input wire dtcm_ram_ds,\n  input wire dtcm_ram_ls,\n  input wire dtcm_ram_cs,\n  input wire dtcm_ram_we,\n  input wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk_dtcm_ram,\n  input wire rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin : u_e203_itcm_ram\n      // ITCM RAM logic here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin : u_e203_dtcm_ram\n      // DTCM RAM logic here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 13, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n  // Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 18, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire [E203_PC_SIZE-1:0] core_pc;\n  wire core_dbg_irq;\n  wire core_mem_cmd_valid;\n  wire core_mem_cmd_ready;\n  wire core_mem_rsp_valid;\n  wire core_mem_rsp_ready;\n  wire core_clk;\n  wire core_csr_clk;\n  wire core_wfi;\n  wire core_tm_stop;\n\n  // Instantiate e203_cpu\n  e203_cpu u_e203_cpu (\n    .inspect_pc(core_pc),\n    .inspect_dbg_irq(core_dbg_irq),\n    .inspect_mem_cmd_valid(core_mem_cmd_valid),\n    .inspect_mem_cmd_ready(core_mem_cmd_ready),\n    .inspect_mem_rsp_valid(core_mem_rsp_valid),\n    .inspect_mem_rsp_ready(core_mem_rsp_ready),\n    .inspect_core_clk(core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(core_tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate e203_srams\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err(ext2dtcm_icb_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(ext2dtcm_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Assign outputs\n  assign inspect_pc = core_pc;\n  assign inspect_dbg_irq = core_dbg_irq;\n  assign inspect_mem_cmd_valid = core_mem_cmd_valid;\n  assign inspect_mem_cmd_ready = core_mem_cmd_ready;\n  assign inspect_mem_rsp_valid = core_mem_rsp_valid;\n  assign inspect_mem_rsp_ready = core_mem_rsp_ready;\n  assign inspect_core_clk = core_clk;\n  assign core_csr_clk = core_csr_clk;\n  assign core_wfi = core_wfi;\n  assign tm_stop = core_tm_stop;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 17, "code": "module e203_exu_alu_muldiv (\n  input  mdv_nob2b,\n  input  muldiv_i_valid,\n  output muldiv_i_ready,\n  input  [E203_XLEN-1:0] muldiv_i_rs1,\n  input  [E203_XLEN-1:0] muldiv_i_rs2,\n  input  [E203_XLEN-1:0] muldiv_i_imm,\n  input  [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input  flush_pulse,\n  output muldiv_o_valid,\n  input  muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input  [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input  [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input  [33:0] muldiv_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 19, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  output clint_icb_rsp_ready,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  output plic_icb_rsp_ready,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  output fio_icb_rsp_ready,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  output mem_icb_rsp_ready,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n\n  // Core module instantiation\n  e203_cpu u_e203_cpu (\n    .inspect_pc(inspect_pc),\n    .inspect_dbg_irq(inspect_dbg_irq),\n    .inspect_mem_cmd_valid(inspect_mem_cmd_valid),\n    .inspect_mem_cmd_ready(inspect_mem_cmd_ready),\n    .inspect_mem_rsp_valid(inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready(inspect_mem_rsp_ready),\n    .inspect_core_clk(inspect_core_clk),\n    .core_csr_clk(core_csr_clk),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .pc_rtvec(pc_rtvec),\n    .dbg_irq_r(dbg_irq_r),\n    .ext_irq_a(ext_irq_a),\n    .sft_irq_a(sft_irq_a),\n    .tmr_irq_a(tmr_irq_a),\n    .tcm_sd(tcm_sd),\n    .tcm_ds(tcm_ds),\n    .ext2itcm_icb_cmd_valid(ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready(ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr(ext2itcm_icb_cmd_addr),\n    .ext2itcm_icb_cmd_read(ext2itcm_icb_cmd_read),\n    .ext2itcm_icb_cmd_wdata(ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask(ext2itcm_icb_cmd_wmask),\n    .ext2itcm_icb_rsp_valid(ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready(ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err(ext2itcm_icb_rsp_err),\n    .ext2itcm_icb_rsp_rdata(ext2itcm_icb_rsp_rdata),\n    .ext2dtcm_icb_cmd_valid(ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready(ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr(ext2dtcm_icb_cmd_addr),\n    .ext2dtcm_icb_cmd_read(ext2dtcm_icb_cmd_read),\n    .ext2dtcm_icb_cmd_wdata(ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask(ext2dtcm_icb_cmd_wmask),\n    .ext2dtcm_icb_rsp_valid(ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready(ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err(ext2dtcm_icb_rsp_err),\n    .ext2dtcm_icb_rsp_rdata(ext2dtcm_icb_rsp_rdata),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .fio_icb_cmd_ready(fio_icb_cmd_ready),\n    .fio_icb_rsp_valid(fio_icb_rsp_valid),\n    .fio_icb_rsp_ready(fio_icb_rsp_ready),\n    .fio_icb_rsp_err(fio_icb_rsp_err),\n    .fio_icb_rsp_rdata(fio_icb_rsp_rdata),\n    .mem_icb_cmd_ready(mem_icb_cmd_ready),\n    .mem_icb_rsp_valid(mem_icb_rsp_valid),\n    .mem_icb_rsp_ready(mem_icb_rsp_ready),\n    .mem_icb_rsp_err(mem_icb_rsp_err),\n    .mem_icb_rsp_rdata(mem_icb_rsp_rdata),\n    .clk(clk),\n    .rst_n(rst_n),\n    .test_mode(test_mode)\n  );\n\n  // SRAM module instantiation\n  e203_srams u_e203_srams (\n    .itcm_ram_sd(tcm_sd),\n    .itcm_ram_ds(tcm_ds),\n    .itcm_ram_ls(1'b0),\n    .itcm_ram_cs(1'b1),\n    .itcm_ram_we(1'b0),\n    .itcm_ram_addr(0),\n    .itcm_ram_wem(0),\n    .itcm_ram_din(0),\n    .itcm_ram_dout(),\n    .clk_itcm_ram(clk),\n    .rst_itcm(rst_n),\n    .dtcm_ram_sd(tcm_sd),\n    .dtcm_ram_ds(tcm_ds),\n    .dtcm_ram_ls(1'b0),\n    .dtcm_ram_cs(1'b1),\n    .dtcm_ram_we(1'b0),\n    .dtcm_ram_addr(0),\n    .dtcm_ram_wem(0),\n    .dtcm_ram_din(0),\n    .dtcm_ram_dout(),\n    .clk_dtcm_ram(clk),\n    .rst_dtcm(rst_n),\n    .test_mode(test_mode)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 11, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 15, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] mcgstop;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      mcgstop <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Output assignments\n  assign csr_access_ilgl = 0;\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n  assign wr_dcsr_ena = 0;\n  assign wr_dpc_ena = 0;\n  assign wr_dscratch_ena = 0;\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 11, "code": "module e203_itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram,\n  output wire itcm_active\n);\n\n  // Internal signals and logic for ITCM controller\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 13, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 18, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 10, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 17, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  input  nice_xs_off,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 13, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack\n);\n\n// Internal signal declarations\nwire ifu_req_hsked;\nwire ifu_rsp_hsked;\nwire ifu_ir_o_hsked;\nwire pipe_flush_hsked;\nwire reset_flag_r;\nwire reset_req_r;\nwire halt_ack_r;\nwire dly_flush_r;\nwire ir_valid_r;\nwire ir_pc_vld_r;\nwire ifu_err_r;\nwire ifu_prdt_taken_r;\nwire ifu_muldiv_b2b_r;\nwire [E203_INSTR_SIZE-1:0] ifu_ir_r;\nwire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\nwire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\nwire [E203_PC_SIZE-1:0] ifu_pc_r;\nwire [E203_PC_SIZE-1:0] pc_r;\nwire out_flag_r;\nwire pc_newpend_r;\n\n// Instantiate submodules\nsirv_gnrl_dffrs #(1) reset_flag_dffrs (\n  .dnxt(1'b0),\n  .qout(reset_flag_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) reset_req_dfflr (\n  .lden(reset_req_ena),\n  .dnxt(reset_req_nxt),\n  .qout(reset_req_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) halt_ack_dfflr (\n  .lden(halt_ack_ena),\n  .dnxt(halt_ack_nxt),\n  .qout(halt_ack_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) dly_flush_dfflr (\n  .lden(dly_flush_ena),\n  .dnxt(dly_flush_nxt),\n  .qout(dly_flush_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) ir_valid_dfflr (\n  .lden(ir_valid_ena),\n  .dnxt(ir_valid_nxt),\n  .qout(ir_valid_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n  .lden(ir_pc_vld_ena),\n  .dnxt(ir_pc_vld_nxt),\n  .qout(ir_pc_vld_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) ifu_err_dfflr (\n  .lden(ir_valid_set),\n  .dnxt(ifu_err_nxt),\n  .qout(ifu_err_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n  .lden(ir_valid_set),\n  .dnxt(prdt_taken),\n  .qout(ifu_prdt_taken_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n  .lden(ir_valid_set),\n  .dnxt(ifu_muldiv_b2b_nxt),\n  .qout(ifu_muldiv_b2b_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n  .lden(ir_hi_ena),\n  .dnxt(ifu_ir_nxt[31:16]),\n  .qout(ifu_ir_r[31:16]),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n  .lden(ir_lo_ena),\n  .dnxt(ifu_ir_nxt[15:0]),\n  .qout(ifu_ir_r[15:0]),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n  .lden(ir_rs1idx_ena),\n  .dnxt(ir_rs1idx_nxt),\n  .qout(ir_rs1idx_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n  .lden(ir_rs2idx_ena),\n  .dnxt(ir_rs2idx_nxt),\n  .qout(ir_rs2idx_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n  .lden(ir_pc_vld_set),\n  .dnxt(ifu_pc_nxt),\n  .qout(ifu_pc_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n  .lden(pc_ena),\n  .dnxt(pc_nxt),\n  .qout(pc_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) out_flag_dfflr (\n  .lden(out_flag_ena),\n  .dnxt(out_flag_nxt),\n  .qout(out_flag_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\nsirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n  .lden(pc_newpend_ena),\n  .dnxt(pc_newpend_nxt),\n  .qout(pc_newpend_r),\n  .clk(clk),\n  .rst_n(rst_n)\n);\n\n// Additional logic and connections go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 11, "code": "module e203_exu_wbck (\n  input  wire                  alu_wbck_i_valid,\n  output wire                  alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_valid,\n  output wire                  longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  wire [4:0]            longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                  longp_wbck_i_rdfpu,\n  output wire                  rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 8, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n// Internal signals and logic implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 18, "code": "module e203_exu_alu(\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [2-1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 9, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and logic\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 12, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_ready = rf_wbck_o_ena;\n\n  assign longp_wbck_i_ready = ~alu_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 14, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction forwarding logic\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid & nice_o_itag_ready;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag_valid = fifo_o_vld;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 14, "code": "module e203_exu_disp (\n  input  wire                     wfi_halt_exu_req,\n  output wire                     wfi_halt_exu_ack,\n  input  wire                     oitf_empty,\n  input  wire                     amo_wait,\n  input  wire                     disp_i_valid,\n  output wire                     disp_i_ready,\n  input  wire                     disp_i_rs1x0,\n  input  wire                     disp_i_rs2x0,\n  input  wire                     disp_i_rs1en,\n  input  wire                     disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]     disp_i_rs1,\n  input  wire [E203_XLEN-1:0]     disp_i_rs2,\n  input  wire                     disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]     disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0]  disp_i_pc,\n  input  wire                     disp_i_misalgn,\n  input  wire                     disp_i_buserr,\n  input  wire                     disp_i_ilegl,\n  output wire                     disp_o_alu_valid,\n  input  wire                     disp_o_alu_ready,\n  input  wire                     disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]     disp_o_alu_rs2,\n  output wire                     disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]     disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0]  disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                     disp_o_alu_misalgn,\n  output wire                     disp_o_alu_buserr,\n  output wire                     disp_o_alu_ilegl,\n  input  wire                     oitfrd_match_disprs1,\n  input  wire                     oitfrd_match_disprs2,\n  input  wire                     oitfrd_match_disprs3,\n  input  wire                     oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                     disp_oitf_ena,\n  input  wire                     disp_oitf_ready,\n  output wire                     disp_oitf_rs1fpu,\n  output wire                     disp_oitf_rs2fpu,\n  output wire                     disp_oitf_rs3fpu,\n  output wire                     disp_oitf_rdfpu,\n  output wire                     disp_oitf_rs1en,\n  output wire                     disp_oitf_rs2en,\n  output wire                     disp_oitf_rs3en,\n  output wire                     disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0]  disp_oitf_pc,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n  // Internal logic for dispatching instructions to ALU and OITF\n  // Handling operand forwarding, dependencies, and WFI requests\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 12, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 13, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 12, "code": "module e203_itcm_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire tcm_cgstop,\n    input wire ifu2itcm_icb_cmd_valid,\n    output wire ifu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n    input wire ifu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n    output wire ifu2itcm_icb_rsp_valid,\n    input wire ifu2itcm_icb_rsp_ready,\n    output wire ifu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n    input wire lsu2itcm_icb_cmd_valid,\n    output wire lsu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n    input wire lsu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n    output wire lsu2itcm_icb_rsp_valid,\n    input wire lsu2itcm_icb_rsp_ready,\n    output wire lsu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n    output wire itcm_active,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [RAM_AW-1:0] itcm_ram_addr,\n    output wire [RAM_MW-1:0] itcm_ram_wem,\n    output wire [RAM_DW-1:0] itcm_ram_din,\n    input wire [RAM_DW-1:0] itcm_ram_dout,\n    output wire clk_itcm_ram\n);\n\n// Internal signals and logic for ITCM controller\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 19, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [2-1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 14, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 19, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 15, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // Instantiate FIFO\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for instruction forwarding and handshaking\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Logic for multi-cycle operation support\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag_valid = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Logic for long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Logic for commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_muldiv", "codeid": 20, "code": "module e203_exu_alu_muldiv (\n  input mdv_nob2b,\n  input muldiv_i_valid,\n  output muldiv_i_ready,\n  input [E203_XLEN-1:0] muldiv_i_rs1,\n  input [E203_XLEN-1:0] muldiv_i_rs2,\n  input [E203_XLEN-1:0] muldiv_i_imm,\n  input [E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input [E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n  output muldiv_i_longpipe,\n  input flush_pulse,\n  output muldiv_o_valid,\n  input muldiv_o_ready,\n  output [E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output muldiv_req_alu_add,\n  output muldiv_req_alu_sub,\n  input [E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n  output muldiv_sbf_0_ena,\n  output [33:0] muldiv_sbf_0_nxt,\n  input [33:0] muldiv_sbf_0_r,\n  output muldiv_sbf_1_ena,\n  output [33:0] muldiv_sbf_1_nxt,\n  input [33:0] muldiv_sbf_1_r,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 11, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Internal signals and logic for e203_ifu_ifetch and e203_ifu_ift2icb modules\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 16, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= {wbck_csr_dat[E203_PC_SIZE-1:1], 1'b0};\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // Read CSR data\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // CSR illegal access\n  assign csr_access_ilgl = 1'b0;\n\n  // Mode signals\n  assign u_mode = 1'b0;\n  assign s_mode = 1'b0;\n  assign h_mode = 1'b0;\n  assign m_mode = 1'b1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug signals\n  assign wr_dcsr_ena = 1'b0;\n  assign wr_dpc_ena = 1'b0;\n  assign wr_dscratch_ena = 1'b0;\n\n  // Clock gating and stop signals\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\n  // CSR read outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 16, "code": "module e203_exu_alu_lsuagu (\n  input  agu_i_valid,\n  output agu_i_ready,\n  input  [E203_XLEN-1:0] agu_i_rs1,\n  input  [E203_XLEN-1:0] agu_i_rs2,\n  input  [E203_XLEN-1:0] agu_i_imm,\n  input  [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output agu_i_longpipe,\n  input  flush_req,\n  input  flush_pulse,\n  output amo_wait,\n  input  oitf_empty,\n  output agu_o_valid,\n  input  agu_o_ready,\n  output [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,\n  output agu_o_cmt_misalgn,\n  output agu_o_cmt_ld,\n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output agu_icb_cmd_valid,\n  input  agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_cmd_usign,\n  input  agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input  agu_icb_rsp_err,\n  input  agu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output [E203_XLEN-1:0] agu_req_alu_op1,\n  output [E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add,\n  output agu_req_alu_and,\n  output agu_req_alu_or,\n  output agu_req_alu_xor,\n  output agu_req_alu_max,\n  output agu_req_alu_min,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [E203_XLEN-1:0] agu_req_alu_res,\n  output agu_sbf_0_ena,\n  output [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_0_r,\n  output agu_sbf_1_ena,\n  output [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [E203_XLEN-1:0] agu_sbf_1_r,\n  input  clk,\n  input  rst_n\n);\n\n// Module implementation goes here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 10, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  // State machine registers\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      icb_state <= ICB_STATE_IDLE;\n    else if (icb_state_ena)\n      icb_state <= icb_state_nxt;\n  end\n\n  // State transition conditions\n  wire icb_sta_is_idle    = (icb_state == ICB_STATE_IDLE);\n  wire icb_sta_is_1st     = (icb_state == ICB_STATE_1ST);\n  wire icb_sta_is_wait2nd = (icb_state == ICB_STATE_WAIT2ND);\n  wire icb_sta_is_2nd     = (icb_state == ICB_STATE_2ND);\n\n  // Request handshake\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n\n  // ICB command handshake\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n\n  // ICB response handshake\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n\n  // Internal response handshake\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // State transition enable\n  assign icb_state_ena = icb_sta_is_idle & ifu_req_hsked |\n                         icb_sta_is_1st & (ifu_icb_rsp_hsked | i_ifu_rsp_hsked) |\n                         icb_sta_is_wait2nd & ifu_icb_cmd_ready |\n                         icb_sta_is_2nd & i_ifu_rsp_hsked;\n\n  // Next state logic\n  assign icb_state_nxt = icb_sta_is_idle    ? ICB_STATE_1ST :\n                         icb_sta_is_1st     ? (ifu_icb_rsp_hsked ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE) :\n                         icb_sta_is_wait2nd ? ICB_STATE_2ND :\n                         icb_sta_is_2nd     ? ICB_STATE_IDLE : ICB_STATE_IDLE;\n\n  // Output logic\n  assign ifu_req_ready = icb_sta_is_idle | (icb_sta_is_1st & ifu_icb_rsp_hsked);\n  assign ifu_rsp_valid = i_ifu_rsp_hsked;\n  assign ifu_rsp_err   = i_ifu_rsp_err;\n  assign ifu_rsp_instr = i_ifu_rsp_instr;\n\n  // ITCM interface\n  assign ifu2itcm_icb_cmd_valid = icb_sta_is_1st & ifu_icb_cmd2itcm;\n  assign ifu2itcm_icb_cmd_addr  = ifu_icb_cmd_addr;\n  assign ifu2itcm_icb_rsp_ready = icb_sta_is_1st & ifu_icb_rsp2itcm;\n\n  // System memory interface\n  assign ifu2biu_icb_cmd_valid = icb_sta_is_1st & ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr  = ifu_icb_cmd_addr;\n  assign ifu2biu_icb_rsp_ready = icb_sta_is_1st & ifu_icb_rsp2biu;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 14, "code": "module e203_cpu (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire [E203_PC_SIZE-1:0] pc_rtvec,\n    input wire [31:0] dcsr_r,\n    input wire [E203_PC_SIZE-1:0] dpc_r,\n    input wire [31:0] dscratch_r,\n    input wire dbg_mode,\n    input wire dbg_halt_r,\n    input wire dbg_step_r,\n    input wire dbg_ebreakm_r,\n    input wire dbg_stopcycle,\n    input wire [E203_HART_ID_W-1:0] core_mhartid,\n    input wire dbg_irq_a,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n    input wire ext2dtcm_icb_cmd_valid,\n    output wire ext2dtcm_icb_cmd_ready,\n    input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n    input wire ext2dtcm_icb_cmd_read,\n    input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n    input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n    output wire ext2dtcm_icb_rsp_valid,\n    input wire ext2dtcm_icb_rsp_ready,\n    output wire ext2dtcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n    input wire ppi_icb_enable,\n    output wire ppi_icb_cmd_valid,\n    input wire ppi_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n    output wire ppi_icb_cmd_read,\n    output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n    output wire ppi_icb_cmd_lock,\n    output wire ppi_icb_cmd_excl,\n    output wire [1:0] ppi_icb_cmd_size,\n    input wire ppi_icb_rsp_valid,\n    output wire ppi_icb_rsp_ready,\n    input wire ppi_icb_rsp_err,\n    input wire ppi_icb_rsp_excl_ok,\n    input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n    input wire clint_icb_enable,\n    output wire clint_icb_cmd_valid,\n    input wire clint_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n    output wire clint_icb_cmd_read,\n    output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n    output wire clint_icb_cmd_lock,\n    output wire clint_icb_cmd_excl,\n    output wire [1:0] clint_icb_cmd_size,\n    input wire clint_icb_rsp_valid,\n    output wire clint_icb_rsp_ready,\n    input wire clint_icb_rsp_err,\n    input wire clint_icb_rsp_excl_ok,\n    input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n    input wire plic_icb_enable,\n    output wire plic_icb_cmd_valid,\n    input wire plic_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n    output wire plic_icb_cmd_read,\n    output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n    output wire plic_icb_cmd_lock,\n    output wire plic_icb_cmd_excl,\n    output wire [1:0] plic_icb_cmd_size,\n    input wire plic_icb_rsp_valid,\n    output wire plic_icb_rsp_ready,\n    input wire plic_icb_rsp_err,\n    input wire plic_icb_rsp_excl_ok,\n    input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n    input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n    input wire fio_icb_enable,\n    output wire fio_icb_cmd_valid,\n    input wire fio_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n    output wire fio_icb_cmd_read,\n    output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n    output wire fio_icb_cmd_lock,\n    output wire fio_icb_cmd_excl,\n    output wire [1:0] fio_icb_cmd_size,\n    input wire fio_icb_rsp_valid,\n    output wire fio_icb_rsp_ready,\n    input wire fio_icb_rsp_err,\n    input wire fio_icb_rsp_excl_ok,\n    input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n    input wire mem_icb_enable,\n    output wire mem_icb_cmd_valid,\n    input wire mem_icb_cmd_ready,\n    output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n    output wire mem_icb_cmd_read,\n    output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n    output wire mem_icb_cmd_lock,\n    output wire mem_icb_cmd_excl,\n    output wire [1:0] mem_icb_cmd_size,\n    input wire mem_icb_rsp_valid,\n    output wire mem_icb_rsp_ready,\n    input wire mem_icb_rsp_err,\n    input wire mem_icb_rsp_excl_ok,\n    input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n    input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n    input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n    output wire inspect_pc,\n    output wire inspect_dbg_irq,\n    output wire inspect_mem_cmd_valid,\n    output wire inspect_mem_cmd_ready,\n    output wire inspect_mem_rsp_valid,\n    output wire inspect_mem_rsp_ready,\n    output wire inspect_core_clk,\n    output wire core_csr_clk,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire core_wfi,\n    output wire tm_stop,\n    output wire [E203_PC_SIZE-1:0] cmt_dpc,\n    output wire cmt_dpc_ena,\n    output wire [2:0] cmt_dcause,\n    output wire cmt_dcause_ena,\n    output wire dbg_irq_r,\n    output wire wr_dcsr_ena,\n    output wire wr_dpc_ena,\n    output wire wr_dscratch_ena,\n    output wire [31:0] wr_csr_nxt,\n    output wire ext2itcm_icb_cmd_ready,\n    output wire ext2itcm_icb_rsp_valid,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n    output wire ext2dtcm_icb_cmd_ready,\n    output wire ext2dtcm_icb_rsp_valid,\n    output wire ext2dtcm_icb_rsp_err,\n    output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n    output wire ppi_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n    output wire ppi_icb_cmd_read,\n    output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n    output wire ppi_icb_cmd_lock,\n    output wire ppi_icb_cmd_excl,\n    output wire [1:0] ppi_icb_cmd_size,\n    output wire ppi_icb_rsp_ready,\n    output wire clint_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n    output wire clint_icb_cmd_read,\n    output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n    output wire clint_icb_cmd_lock,\n    output wire clint_icb_cmd_excl,\n    output wire [1:0] clint_icb_cmd_size,\n    output wire clint_icb_rsp_ready,\n    output wire plic_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n    output wire plic_icb_cmd_read,\n    output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n    output wire plic_icb_cmd_lock,\n    output wire plic_icb_cmd_excl,\n    output wire [1:0] plic_icb_cmd_size,\n    output wire plic_icb_rsp_ready,\n    output wire fio_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n    output wire fio_icb_cmd_read,\n    output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n    output wire fio_icb_cmd_lock,\n    output wire fio_icb_cmd_excl,\n    output wire [1:0] fio_icb_cmd_size,\n    output wire fio_icb_rsp_ready,\n    output wire mem_icb_cmd_valid,\n    output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n    output wire mem_icb_cmd_read,\n    output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n    output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n    output wire mem_icb_cmd_lock,\n    output wire mem_icb_cmd_excl,\n    output wire [1:0] mem_icb_cmd_size,\n    output wire mem_icb_rsp_ready,\n    output wire itcm_ls,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n    output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n    output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n    output wire clk_itcm_ram,\n    output wire dtcm_ls,\n    output wire dtcm_ram_cs,\n    output wire dtcm_ram_we,\n    output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n    output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n    output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n    output wire clk_dtcm_ram\n);\n\n// Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 15, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n  // Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 16, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Logic for NICE interface\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Logic for instruction tagging and multi-cycle operations\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Commit interface logic\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n  \nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 13, "code": "module e203_exu_wbck (\n  input                   alu_wbck_i_valid,\n  output                  alu_wbck_i_ready,\n  input  [E203_XLEN-1:0]  alu_wbck_i_wdat,\n  input  [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input                   longp_wbck_i_valid,\n  output                  longp_wbck_i_ready,\n  input  [E203_FLEN-1:0]  longp_wbck_i_wdat,\n  input  [4:0]            longp_wbck_i_flags,\n  input  [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input                   longp_wbck_i_rdfpu,\n  output                  rf_wbck_o_ena,\n  output [E203_XLEN-1:0]  rf_wbck_o_wdat,\n  output [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input                   clk,\n  input                   rst_n\n);\n\n  wire wbck_sel_longp = longp_wbck_i_valid;\n  wire wbck_sel_alu = alu_wbck_i_valid & ~longp_wbck_i_valid;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_sel_longp | (wbck_sel_alu & ~longp_wbck_i_rdfpu);\n  assign rf_wbck_o_wdat = wbck_sel_longp ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_sel_longp ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 18, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // ALU operation logic\n  // Implement the logic for ALU operations based on alu_i_info signals\n  // Generate alu_req_alu_* signals based on the decoded instruction type\n\n  // Operand selection logic\n  // Select the correct operands based on alu_i_info signals\n  // Assign alu_req_alu_op1 and alu_req_alu_op2\n\n  // Result handling logic\n  // Assign alu_o_wbck_wdat with the result from alu_req_alu_res\n\n  // Special instruction handling\n  // Handle ecall, ebreak, and wfi instructions\n  // Set alu_o_cmt_ecall, alu_o_cmt_ebreak, and alu_o_cmt_wfi accordingly\n\n  // Valid-ready handshake logic\n  // Implement the valid-ready handshake between input and output\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 12, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input wire itcm_nohold,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_holdup,\n  input wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_bjp", "codeid": 20, "code": "module e203_exu_alu_bjp (\n  input  wire                 bjp_i_valid,\n  output wire                 bjp_i_ready,\n  input  wire [E203_XLEN-1:0] bjp_i_rs1,\n  input  wire [E203_XLEN-1:0] bjp_i_rs2,\n  input  wire [E203_XLEN-1:0] bjp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] bjp_i_pc,\n  input  wire [E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  output wire                 bjp_o_valid,\n  input  wire                 bjp_o_ready,\n  output wire [E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output wire                 bjp_o_wbck_err,\n  output wire                 bjp_o_cmt_bjp,\n  output wire                 bjp_o_cmt_mret,\n  output wire                 bjp_o_cmt_dret,\n  output wire                 bjp_o_cmt_fencei,\n  output wire                 bjp_o_cmt_prdt,\n  output wire                 bjp_o_cmt_rslv,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op1,\n  output wire [E203_XLEN-1:0] bjp_req_alu_op2,\n  output wire                 bjp_req_alu_cmp_eq,\n  output wire                 bjp_req_alu_cmp_ne,\n  output wire                 bjp_req_alu_cmp_lt,\n  output wire                 bjp_req_alu_cmp_gt,\n  output wire                 bjp_req_alu_cmp_ltu,\n  output wire                 bjp_req_alu_cmp_gtu,\n  output wire                 bjp_req_alu_add,\n  input  wire                 bjp_req_alu_cmp_res,\n  input  wire [E203_XLEN-1:0] bjp_req_alu_add_res,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  // Internal signals\n  wire bjp_is_beq   = bjp_i_info[E203_DECINFO_BJP_BEQ];\n  wire bjp_is_bne   = bjp_i_info[E203_DECINFO_BJP_BNE];\n  wire bjp_is_blt   = bjp_i_info[E203_DECINFO_BJP_BLT];\n  wire bjp_is_bgt   = bjp_i_info[E203_DECINFO_BJP_BGT];\n  wire bjp_is_bltu  = bjp_i_info[E203_DECINFO_BJP_BLTU];\n  wire bjp_is_bgtu  = bjp_i_info[E203_DECINFO_BJP_BGTU];\n  wire bjp_is_jump  = bjp_i_info[E203_DECINFO_BJP_JUMP];\n  wire bjp_is_bxx   = bjp_i_info[E203_DECINFO_BJP_BXX];\n  wire bjp_is_mret  = bjp_i_info[E203_DECINFO_BJP_MRET];\n  wire bjp_is_dret  = bjp_i_info[E203_DECINFO_BJP_DRET];\n  wire bjp_is_fencei = bjp_i_info[E203_DECINFO_BJP_FENCEI];\n\n  // ALU operation requests\n  assign bjp_req_alu_cmp_eq = bjp_is_beq;\n  assign bjp_req_alu_cmp_ne = bjp_is_bne;\n  assign bjp_req_alu_cmp_lt = bjp_is_blt;\n  assign bjp_req_alu_cmp_gt = bjp_is_bgt;\n  assign bjp_req_alu_cmp_ltu = bjp_is_bltu;\n  assign bjp_req_alu_cmp_gtu = bjp_is_bgtu;\n  assign bjp_req_alu_add = bjp_is_jump;\n\n  // Operand selection\n  assign bjp_req_alu_op1 = bjp_is_jump ? bjp_i_pc : bjp_i_rs1;\n  assign bjp_req_alu_op2 = bjp_is_jump ? (bjp_i_info[E203_DECINFO_RV32] ? 32'd4 : 32'd2) : bjp_i_rs2;\n\n  // BJP resolved result\n  assign bjp_o_cmt_rslv = bjp_is_jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  // Write-back data\n  assign bjp_o_wbck_wdat = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err = 1'b0;\n\n  // Commit signals\n  assign bjp_o_cmt_bjp = bjp_is_bxx | bjp_is_jump;\n  assign bjp_o_cmt_mret = bjp_is_mret;\n  assign bjp_o_cmt_dret = bjp_is_dret;\n  assign bjp_o_cmt_fencei = bjp_is_fencei;\n  assign bjp_o_cmt_prdt = bjp_i_info[E203_DECINFO_BJP_BPRDT];\n\n  // Valid-ready handshake\n  assign bjp_o_valid = bjp_i_valid;\n  assign bjp_i_ready = bjp_o_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 17, "code": "module e203_exu_alu_lsuagu (\n  input wire agu_i_valid,\n  output wire agu_i_ready,\n  input wire [E203_XLEN-1:0] agu_i_rs1,\n  input wire [E203_XLEN-1:0] agu_i_rs2,\n  input wire [E203_XLEN-1:0] agu_i_imm,\n  input wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire agu_i_longpipe,\n  input wire flush_req,\n  input wire flush_pulse,\n  output wire amo_wait,\n  input wire oitf_empty,\n  output wire agu_o_valid,\n  input wire agu_o_ready,\n  output wire [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output wire agu_o_wbck_err,\n  output wire agu_o_cmt_misalgn,\n  output wire agu_o_cmt_ld,\n  output wire agu_o_cmt_stamo,\n  output wire agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire agu_icb_cmd_valid,\n  input wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_cmd_usign,\n  input wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input wire agu_icb_rsp_err,\n  input wire agu_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0] agu_req_alu_op1,\n  output wire [E203_XLEN-1:0] agu_req_alu_op2,\n  output wire agu_req_alu_swap,\n  output wire agu_req_alu_add,\n  output wire agu_req_alu_and,\n  output wire agu_req_alu_or,\n  output wire agu_req_alu_xor,\n  output wire agu_req_alu_max,\n  output wire agu_req_alu_min,\n  output wire agu_req_alu_maxu,\n  output wire agu_req_alu_minu,\n  input wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input wire [E203_XLEN-1:0] agu_sbf_0_r,\n  output wire agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input wire [E203_XLEN-1:0] agu_sbf_1_r,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 13, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == 5'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == 5'd1);\n  wire dec_jalr_rs1xn = ~(dec_jalr_rs1x0 | dec_jalr_rs1x1);\n\n  wire jalr_rs1xn_dep = (~oitf_empty) | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  wire jalr_rs1xn_dep_ir_clr = ir_valid_clr & (~ir_rs1en | ~jalr_rs1idx_cam_irrdidx);\n\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set | rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  wire rs1xn_rdrf_r;\n  wire jalr_rs1xn_rdrf = dec_jalr_rs1xn & rs1xn_rdrf_r;\n\n  assign prdt_pc_add_op1 = \n    ({E203_PC_SIZE{dec_bxx | dec_jal}} & pc)\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x0}} & {E203_PC_SIZE{1'b0}})\n  | ({E203_PC_SIZE{dec_jalr & dec_jalr_rs1x1}} & rf2bpu_x1)\n  | ({E203_PC_SIZE{jalr_rs1xn_rdrf}} & rf2bpu_rs1);\n\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  assign bpu_wait = dec_jalr & dec_jalr_rs1x1 & (~oitf_empty)\n                  | jalr_rs1xn_dep & (~jalr_rs1xn_dep_ir_clr);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 18, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0]    i_pc,\n  input                        i_prdt_taken,\n  input                        i_misalgn,\n  input                        i_buserr,\n  input                        i_muldiv_b2b,\n  input                        dbg_mode,\n  output                       dec_rs1x0,\n  output                       dec_rs2x0,\n  output                       dec_rs1en,\n  output                       dec_rs2en,\n  output                       dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0]       dec_imm,\n  output [E203_PC_SIZE-1:0]    dec_pc,\n  output                       dec_misalgn,\n  output                       dec_buserr,\n  output                       dec_ilegl,\n  output                       dec_mulhsu,\n  output                       dec_mul,\n  output                       dec_div,\n  output                       dec_rem,\n  output                       dec_divu,\n  output                       dec_remu,\n  output                       dec_rv32,\n  output                       dec_bjp,\n  output                       dec_jal,\n  output                       dec_jalr,\n  output                       dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0]       dec_bjp_imm\n  `ifdef E203_HAS_NICE\n  , input                      nice_xs_off,\n  output                       dec_nice,\n  output                       nice_cmt_off_ilgl_o\n  `endif\n);\n  // Decode logic here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 17, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output                       dec_rs1en,\n  output                       dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output                       dec_mulhsu,\n  output                       dec_mul,\n  output                       dec_div,\n  output                       dec_rem,\n  output                       dec_divu,\n  output                       dec_remu,\n  output                       dec_rv32,\n  output                       dec_bjp,\n  output                       dec_jal,\n  output                       dec_jalr,\n  output                       dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0]       dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire [E203_XLEN-1:0]        bjp_imm;\n  wire                        rs1en;\n  wire                        rs2en;\n  wire                        mulhsu;\n  wire                        mul;\n  wire                        div;\n  wire                        rem;\n  wire                        divu;\n  wire                        remu;\n  wire                        rv32;\n  wire                        bjp;\n  wire                        jal;\n  wire                        jalr;\n  wire                        bxx;\n\n  // Instantiate the internal decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(rs1en),\n    .dec_rs2en(rs2en),\n    .dec_rs1idx(rs1idx),\n    .dec_rs2idx(rs2idx),\n    .dec_mulhsu(mulhsu),\n    .dec_mul(mul),\n    .dec_div(div),\n    .dec_rem(rem),\n    .dec_divu(divu),\n    .dec_remu(remu),\n    .dec_rv32(rv32),\n    .dec_bjp(bjp),\n    .dec_jal(jal),\n    .dec_jalr(jalr),\n    .dec_bxx(bxx),\n    .dec_jalr_rs1idx(rs1idx),\n    .dec_bjp_imm(bjp_imm),\n    .dec_misalgn(),\n    .dec_buserr(),\n    .dec_ilegl(),\n    .dec_rs1x0(),\n    .dec_rs2x0(),\n    .dec_rdwen(),\n    .dec_rdidx(),\n    .dec_info(),\n    .dec_imm(),\n    .dec_pc()\n  );\n\n  // Connect internal signals to output ports\n  assign dec_rs1en = rs1en;\n  assign dec_rs2en = rs2en;\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 15, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu", "codeid": 20, "code": "module e203_exu (\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wfi_halt_ifu_req,\n  input wfi_halt_ifu_ack,\n  output oitf_empty,\n  output [E203_XLEN-1:0] rf2ifu_x1,\n  output [E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div,\n  output dec2ifu_rem,\n  output dec2ifu_divu,\n  output dec2ifu_remu,\n  input test_mode,\n  input clk_aon,\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [E203_XLEN-1:0] wr_csr_nxt,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input i_valid,\n  output i_ready,\n  input [E203_INSTR_SIZE-1:0] i_ir,\n  input [E203_PC_SIZE-1:0] i_pc,\n  input i_pc_vld,\n  input i_misalgn,\n  input i_buserr,\n  input i_prdt_taken,\n  input i_muldiv_b2b,\n  input [E203_RFIDX_WIDTH-1:0] i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] i_rs2idx,\n  input pipe_flush_ack,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input lsu_o_valid,\n  output lsu_o_ready,\n  input [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  input lsu_o_wbck_err,\n  input lsu_o_cmt_ld,\n  input lsu_o_cmt_st,\n  input [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  input lsu_o_cmt_buserr,\n  output agu_icb_cmd_valid,\n  input agu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output agu_icb_cmd_read,\n  output [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output agu_icb_cmd_lock,\n  output agu_icb_cmd_excl,\n  output [1:0] agu_icb_cmd_size,\n  output agu_icb_cmd_back2agu,\n  output agu_icb_cmd_usign,\n  output [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input agu_icb_rsp_valid,\n  output agu_icb_rsp_ready,\n  input agu_icb_rsp_err,\n  input agu_icb_rsp_excl_ok,\n  input [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata,\n  output nice_req_valid,\n  input nice_req_ready,\n  output [E203_XLEN-1:0] nice_req_inst,\n  output [E203_XLEN-1:0] nice_req_rs1,\n  output [E203_XLEN-1:0] nice_req_rs2,\n  input nice_rsp_multicyc_valid,\n  output nice_rsp_multicyc_ready,\n  input [E203_XLEN-1:0] nice_rsp_multicyc_dat,\n  input nice_rsp_multicyc_err\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 16, "code": "module e203_exu_branchslv (\n  input  wire        cmt_i_valid,\n  output wire        cmt_i_ready,\n  input  wire        cmt_i_rv32,\n  input  wire        cmt_i_dret,\n  input  wire        cmt_i_mret,\n  input  wire        cmt_i_fencei,\n  input  wire        cmt_i_bjp,\n  input  wire        cmt_i_bjp_prdt,\n  input  wire        cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire        nonalu_excpirq_flush_req_raw,\n  input  wire        brchmis_flush_ack,\n  output wire        brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire        cmt_mret_ena,\n  output wire        cmt_dret_ena,\n  output wire        cmt_fencei_ena,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret | flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = \n        (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n        cmt_i_dret ? csr_dpc_r :\n        csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 11, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and registers\n  reg [1:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 2'b00);\n  wire icb_sta_is_1st = (icb_state == 2'b01);\n  wire icb_sta_is_wait2nd = (icb_state == 2'b10);\n  wire icb_sta_is_2nd = (icb_state == 2'b11);\n\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 2'b00;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  // State transition conditions\n  wire state_idle_exit_ena = icb_sta_is_idle & ifu_req_hsked;\n  wire state_1st_exit_ena = icb_sta_is_1st & (ifu_icb_rsp2leftover ? ifu_icb_rsp_hsked : i_ifu_rsp_hsked);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_sta_is_2nd & i_ifu_rsp_hsked;\n\n  // Next state logic\n  always @(*) begin\n    case (icb_state)\n      2'b00: icb_state_nxt = state_idle_exit_ena ? 2'b01 : 2'b00;\n      2'b01: icb_state_nxt = state_1st_exit_ena ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? 2'b11 : 2'b10) : 2'b00) : 2'b01;\n      2'b10: icb_state_nxt = state_wait2nd_exit_ena ? 2'b11 : 2'b10;\n      2'b11: icb_state_nxt = state_2nd_exit_ena ? (ifu_req_hsked ? 2'b01 : 2'b00) : 2'b11;\n      default: icb_state_nxt = 2'b00;\n    endcase\n  end\n\n  // Enable signal for state update\n  assign icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n\n  // Additional logic for request handling, response generation, etc.\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 15, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 16, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 16, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 14, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack,\n  output wire [E203_PC_SIZE-1:0] inspect_pc\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n\n  // Module instantiations\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_nxt),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(ir_empty),\n    .ir_rs1en(ir_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Handshake signals\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  assign reset_req_set = (~reset_req_r) & reset_flag_r;\n  assign reset_req_clr = reset_req_r & ifu_req_hsked;\n  assign reset_req_ena = reset_req_set | reset_req_clr;\n  assign reset_req_nxt = reset_req_set | (~reset_req_clr);\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  assign halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  assign halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  assign halt_ack_ena = halt_ack_set | halt_ack_clr;\n  assign halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  assign dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  assign dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  assign dly_flush_ena = dly_flush_set | dly_flush_clr;\n  assign dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  assign dly_pipe_flush_req = dly_flush_r;\n  assign pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  assign ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  assign ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  assign ir_valid_ena = ir_valid_set | ir_valid_clr;\n  assign ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n\n  assign ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  assign ir_pc_vld_clr = ir_valid_clr;\n  assign ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  assign ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n\n  assign ifu_err_nxt = ifu_rsp_err;\n  assign ifu_muldiv_b2b_nxt = dec2ifu_mulhsu | dec2ifu_div | dec2ifu_rem | dec2ifu_divu | dec2ifu_remu;\n\n  assign ir_hi_ena = ir_valid_set & minidec_rv32;\n  assign ir_lo_ena = ir_valid_set;\n\n  assign ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                         ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                         bpu2rf_rs1_ena;\n  assign ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n\n  assign ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                         ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  assign ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n\n  // PC control logic\n  assign pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  assign pc_add_op1 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op1 :\n                      dly_pipe_flush_req ? pc_r :\n                      `endif\n                      ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec :\n                      pc_r;\n\n  assign pc_add_op2 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op2 :\n                      dly_pipe_flush_req ? 0 :\n                      `endif\n                      ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 :\n                      pc_incr_ofst;\n\n  assign pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  assign pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  assign pc_nxt = `ifndef E203_TIMING_BOOST\n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                  `else\n                  pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n                  dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n                  {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                  `endif\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  assign ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  assign new_req_condi = (~out_flag_r) | out_flag_clr;\n  assign ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  assign ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  assign out_flag_set = ifu_req_hsked;\n  assign out_flag_clr = ifu_rsp_hsked;\n  assign out_flag_ena = out_flag_set | out_flag_clr;\n  assign out_flag_nxt = out_flag_set | (~out_flag_clr);\n\n  // Mini-decoder interface implementation\n  assign instr = ifu_ir_nxt;\n  assign minidec_rv32 = dec_rv32;\n  assign minidec_bjp = dec_bjp;\n  assign minidec_jal = dec_jal;\n  assign minidec_jalr = dec_jalr;\n  assign minidec_bxx = dec_bxx;\n  assign minidec_rs1en = dec_rs1en;\n  assign minidec_rs2en = dec_rs2en;\n  assign minidec_rs1idx = dec_rs1idx;\n  assign minidec_rs2idx = dec_rs2idx;\n  assign minidec_jalr_rs1idx = dec_jalr_rs1idx;\n  assign minidec_bjp_imm = dec_bjp_imm;\n  assign minidec_mul = dec_mul;\n  assign minidec_div = dec_div;\n  assign minidec_rem = dec_rem;\n  assign minidec_divu = dec_divu;\n  assign minidec_remu = dec_remu;\n\n  // BPU interface and control\n  assign pc = pc_r;\n  assign dec_jal = minidec_jal;\n  assign dec_jalr = minidec_jalr;\n  assign dec_bxx = minidec_bxx;\n  assign dec_bjp_imm = minidec_bjp_imm;\n  assign dec_jalr_rs1idx = minidec_jalr_rs1idx;\n  assign dec_i_valid = ifu_rsp_valid;\n  assign ir_valid_clr = ir_valid_clr;\n  assign bpu_wait = bpu_wait;\n  assign prdt_taken = prdt_taken;\n  assign prdt_pc_add_op1 = prdt_pc_add_op1;\n  assign prdt_pc_add_op2 = prdt_pc_add_op2;\n  assign bpu2rf_rs1_ena = bpu2rf_rs1_ena;\n  assign rf2bpu_x1 = rf2ifu_x1;\n  assign rf2bpu_rs1 = rf2ifu_rs1;\n\n  // State monitoring and control\n  assign pc_newpend_set = pc_ena;\n  assign pc_newpend_clr = ir_pc_vld_set;\n  assign pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  assign pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n\n  assign ifu_rsp_need_replay = 1'b0;\n  assign ifetch_replay_req = 1'b0;\n\n  assign ir_empty = ~ir_valid_r;\n  assign ir_rs1en = dec2ifu_rs1en;\n  assign ir_rden = dec2ifu_rden;\n  assign ir_rdidx = dec2ifu_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 17, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena,\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_XLEN-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] mcgstop;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      mcgstop <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode Logic\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Interface\n  assign wr_dcsr_ena = dbg_mode;\n  assign wr_dpc_ena = dbg_mode;\n  assign wr_dscratch_ena = dbg_mode;\n\n  // Clock Gating Control\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n\n  // ITCM No Hold-up\n  assign itcm_nohold = itcmnohold[0];\n\n  // Mul/Div No Back-to-Back\n  assign mdv_nob2b = mdvnob2b[0];\n\n  // CSR Illegal Access\n  assign csr_access_ilgl = 0;\n\n  // CSR EPC and DPC\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 17, "code": "module e203_exu_longpwbck (\n  input  wire                  lsu_wbck_i_valid,\n  output wire                  lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire                  lsu_wbck_i_err,\n  input  wire                  lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire                  lsu_cmt_i_ld,\n  input  wire                  lsu_cmt_i_st,\n  output wire                  longp_wbck_o_valid,\n  input  wire                  longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0]  longp_wbck_o_wdat,\n  output wire [4:0]            longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire                  longp_wbck_o_rdfpu,\n  output wire                  longp_excp_o_valid,\n  input  wire                  longp_excp_o_ready,\n  output wire                  longp_excp_o_insterr,\n  output wire                  longp_excp_o_ld,\n  output wire                  longp_excp_o_st,\n  output wire                  longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire                  oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire                  oitf_ret_rdwen,\n  input  wire                  oitf_ret_rdfpu,\n  output wire                  oitf_ret_ena,\n  input  wire                  clk,\n  input  wire                  rst_n\n`ifdef E203_HAS_NICE\n  ,\n  input  wire                  nice_longp_wbck_i_valid,\n  output wire                  nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire                  nice_longp_wbck_i_err\n`endif\n);\n\n  // Internal signals\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire wbck_i_err;\n  wire wbck_i_rdwen;\n  wire wbck_i_rdfpu;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire [E203_PC_SIZE-1:0] wbck_i_pc;\n  wire [E203_ITAG_WIDTH-1:0] wbck_i_itag;\n\n  // Write-back arbitration logic\n  assign wbck_i_valid = (oitf_ret_ptr == lsu_wbck_i_itag) & lsu_wbck_i_valid & ~oitf_empty;\n  assign wbck_i_ready = longp_wbck_o_ready & longp_excp_o_ready;\n  assign wbck_i_err = lsu_wbck_i_err;\n  assign wbck_i_rdwen = oitf_ret_rdwen;\n  assign wbck_i_rdfpu = oitf_ret_rdfpu;\n  assign wbck_i_wdat = lsu_wbck_i_wdat;\n  assign wbck_i_rdidx = oitf_ret_rdidx;\n  assign wbck_i_pc = oitf_ret_pc;\n  assign wbck_i_itag = oitf_ret_ptr;\n\n  // Write-back output logic\n  assign longp_wbck_o_valid = wbck_i_valid & wbck_i_rdwen & ~wbck_i_err;\n  assign longp_wbck_o_wdat = wbck_i_wdat;\n  assign longp_wbck_o_rdidx = wbck_i_rdidx;\n  assign longp_wbck_o_rdfpu = wbck_i_rdfpu;\n  assign longp_wbck_o_flags = 5'b0; // Placeholder for additional flags\n\n  // Exception output logic\n  assign longp_excp_o_valid = wbck_i_valid & wbck_i_err;\n  assign longp_excp_o_insterr = wbck_i_err;\n  assign longp_excp_o_ld = lsu_cmt_i_ld;\n  assign longp_excp_o_st = lsu_cmt_i_st;\n  assign longp_excp_o_buserr = lsu_cmt_i_buserr;\n  assign longp_excp_o_badaddr = lsu_cmt_i_badaddr;\n  assign longp_excp_o_pc = wbck_i_pc;\n\n  // OITF control logic\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\n`ifdef E203_HAS_NICE\n  // NICE write-back arbitration logic\n  wire nice_wbck_i_valid = (oitf_ret_ptr == nice_longp_wbck_i_itag) & nice_longp_wbck_i_valid & ~oitf_empty;\n  wire nice_wbck_i_ready = longp_wbck_o_ready & longp_excp_o_ready;\n  wire nice_wbck_i_err = nice_longp_wbck_i_err;\n  wire [E203_XLEN-1:0] nice_wbck_i_wdat = nice_longp_wbck_i_wdat;\n\n  assign nice_longp_wbck_i_ready = nice_wbck_i_ready;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 14, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 13, "code": "module e203_ifu (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire itcm_nohold,\n  input  wire ifu_o_ready,\n  input  wire pipe_flush_req,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input  wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input  wire ifu2itcm_icb_cmd_ready,\n  input  wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_err,\n  input  wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire ifu2biu_icb_cmd_ready,\n  input  wire ifu2biu_icb_rsp_valid,\n  input  wire ifu2biu_icb_rsp_err,\n  input  wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input  wire ifu_halt_req,\n  input  wire oitf_empty,\n  input  wire [E203_XLEN-1:0] rf2ifu_x1,\n  input  wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input  wire dec2ifu_rs1en,\n  input  wire dec2ifu_rden,\n  input  wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  wire dec2ifu_mulhsu,\n  input  wire dec2ifu_div,\n  input  wire dec2ifu_rem,\n  input  wire dec2ifu_divu,\n  input  wire dec2ifu_remu,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 16, "code": "module e203_cpu (\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n// Instantiate submodules here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 17, "code": "module e203_exu_disp (\n  input  wire wfi_halt_exu_req,\n  output wire wfi_halt_exu_ack,\n  input  wire oitf_empty,\n  input  wire amo_wait,\n  input  wire disp_i_valid,\n  output wire disp_i_ready,\n  input  wire disp_i_rs1x0,\n  input  wire disp_i_rs2x0,\n  input  wire disp_i_rs1en,\n  input  wire disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire disp_i_misalgn,\n  input  wire disp_i_buserr,\n  input  wire disp_i_ilegl,\n  output wire disp_o_alu_valid,\n  input  wire disp_o_alu_ready,\n  input  wire disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire disp_o_alu_misalgn,\n  output wire disp_o_alu_buserr,\n  output wire disp_o_alu_ilegl,\n  input  wire oitfrd_match_disprs1,\n  input  wire oitfrd_match_disprs2,\n  input  wire oitfrd_match_disprs3,\n  input  wire oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire disp_oitf_ena,\n  input  wire disp_oitf_ready,\n  output wire disp_oitf_rs1fpu,\n  output wire disp_oitf_rs2fpu,\n  output wire disp_oitf_rs3fpu,\n  output wire disp_oitf_rdfpu,\n  output wire disp_oitf_rs1en,\n  output wire disp_oitf_rs2en,\n  output wire disp_oitf_rs3en,\n  output wire disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 17, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 18, "code": "module e203_exu_longpwbck (\n  input  wire                lsu_wbck_i_valid,\n  output wire                lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire                lsu_wbck_i_err,\n  input  wire                lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire                lsu_cmt_i_ld,\n  input  wire                lsu_cmt_i_st,\n  output wire                longp_wbck_o_valid,\n  input  wire                longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output wire [4:0]          longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire                longp_wbck_o_rdfpu,\n  output wire                longp_excp_o_valid,\n  input  wire                longp_excp_o_ready,\n  output wire                longp_excp_o_insterr,\n  output wire                longp_excp_o_ld,\n  output wire                longp_excp_o_st,\n  output wire                longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire                oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire                oitf_ret_rdwen,\n  input  wire                oitf_ret_rdfpu,\n  output wire                oitf_ret_ena,\n  input  wire                clk,\n  input  wire                rst_n\n  `ifdef E203_HAS_NICE\n  ,\n  input  wire                nice_longp_wbck_i_valid,\n  output wire                nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire                nice_longp_wbck_i_err\n  `endif\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 15, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 14, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 15, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n\n  // Internal logic and submodule instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 18, "code": "module e203_exu_alu_lsuagu (\n  input  wire                     agu_i_valid,\n  output wire                     agu_i_ready,\n  input  wire [E203_XLEN-1:0]     agu_i_rs1,\n  input  wire [E203_XLEN-1:0]     agu_i_rs2,\n  input  wire [E203_XLEN-1:0]     agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                     agu_i_longpipe,\n  input  wire                     flush_req,\n  input  wire                     flush_pulse,\n  output wire                     amo_wait,\n  input  wire                     oitf_empty,\n  output wire                     agu_o_valid,\n  input  wire                     agu_o_ready,\n  output wire [E203_XLEN-1:0]     agu_o_wbck_wdat,\n  output wire                     agu_o_wbck_err,\n  output wire                     agu_o_cmt_misalgn,\n  output wire                     agu_o_cmt_ld,\n  output wire                     agu_o_cmt_stamo,\n  output wire                     agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                     agu_icb_cmd_valid,\n  input  wire                     agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                     agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]     agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0]   agu_icb_cmd_wmask,\n  output wire                     agu_icb_cmd_back2agu,\n  output wire                     agu_icb_cmd_lock,\n  output wire                     agu_icb_cmd_excl,\n  output wire [1:0]               agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                     agu_icb_cmd_usign,\n  input  wire                     agu_icb_rsp_valid,\n  output wire                     agu_icb_rsp_ready,\n  input  wire                     agu_icb_rsp_err,\n  input  wire                     agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]     agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]     agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]     agu_req_alu_op2,\n  output wire                     agu_req_alu_swap,\n  output wire                     agu_req_alu_add,\n  output wire                     agu_req_alu_and,\n  output wire                     agu_req_alu_or,\n  output wire                     agu_req_alu_xor,\n  output wire                     agu_req_alu_max,\n  output wire                     agu_req_alu_min,\n  output wire                     agu_req_alu_maxu,\n  output wire                     agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]     agu_req_alu_res,\n  output wire                     agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]     agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]     agu_sbf_0_r,\n  output wire                     agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]     agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]     agu_sbf_1_r,\n  input  wire                     clk,\n  input  wire                     rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 19, "code": "module e203_exu_alu_lsuagu (\n  input  wire                  agu_i_valid,\n  output wire                  agu_i_ready,\n  input  wire [E203_XLEN-1:0]  agu_i_rs1,\n  input  wire [E203_XLEN-1:0]  agu_i_rs2,\n  input  wire [E203_XLEN-1:0]  agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire                  agu_i_longpipe,\n  input  wire                  flush_req,\n  input  wire                  flush_pulse,\n  output wire                  amo_wait,\n  input  wire                  oitf_empty,\n  output wire                  agu_o_valid,\n  input  wire                  agu_o_ready,\n  output wire [E203_XLEN-1:0]  agu_o_wbck_wdat,\n  output wire                  agu_o_wbck_err,\n  output wire                  agu_o_cmt_misalgn,\n  output wire                  agu_o_cmt_ld,\n  output wire                  agu_o_cmt_stamo,\n  output wire                  agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire                  agu_icb_cmd_valid,\n  input  wire                  agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire                  agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0]  agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire                  agu_icb_cmd_back2agu,\n  output wire                  agu_icb_cmd_lock,\n  output wire                  agu_icb_cmd_excl,\n  output wire [1:0]            agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire                  agu_icb_cmd_usign,\n  input  wire                  agu_icb_rsp_valid,\n  output wire                  agu_icb_rsp_ready,\n  input  wire                  agu_icb_rsp_err,\n  input  wire                  agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0]  agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op1,\n  output wire [E203_XLEN-1:0]  agu_req_alu_op2,\n  output wire                  agu_req_alu_swap,\n  output wire                  agu_req_alu_add,\n  output wire                  agu_req_alu_and,\n  output wire                  agu_req_alu_or,\n  output wire                  agu_req_alu_xor,\n  output wire                  agu_req_alu_max,\n  output wire                  agu_req_alu_min,\n  output wire                  agu_req_alu_maxu,\n  output wire                  agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0]  agu_req_alu_res,\n  output wire                  agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_0_r,\n  output wire                  agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0]  agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0]  agu_sbf_1_r,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 14, "code": "module e203_ifu (\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  input itcm_nohold,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  input ifu_o_ready,\n  input pipe_flush_req,\n  output pipe_flush_ack,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_ready,\n  output ifu2biu_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_rsp_valid,\n  output ifu2biu_icb_rsp_ready,\n  input ifu2biu_icb_rsp_err,\n  input [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input ifu_halt_req,\n  output ifu_halt_ack,\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 17, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack | nonalu_excpirq_flush_req_raw;\n\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign cmt_i_ready = ~flush_need | flush_ack;\n\n  assign cmt_mret_ena = cmt_i_mret & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n                                (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n                                (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n                                (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                                cmt_i_dret ? csr_dpc_r : csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 17, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire [E203_PC_SIZE-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire ext2itcm_icb_cmd_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  input wire ext2dtcm_icb_cmd_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  input wire ppi_icb_cmd_ready,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  input wire clint_icb_cmd_ready,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  input wire plic_icb_cmd_ready,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  input wire fio_icb_cmd_ready,\n  input wire mem_icb_enable,\n  input wire mem_icb_cmd_ready,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n  // Submodule instantiations and connections go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_lsuagu", "codeid": 20, "code": "module e203_exu_alu_lsuagu (\n  input  wire agu_i_valid,\n  output wire agu_i_ready,\n  input  wire [E203_XLEN-1:0] agu_i_rs1,\n  input  wire [E203_XLEN-1:0] agu_i_rs2,\n  input  wire [E203_XLEN-1:0] agu_i_imm,\n  input  wire [E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  wire [E203_ITAG_WIDTH-1:0] agu_i_itag,\n  output wire agu_i_longpipe,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  output wire agu_o_valid,\n  input  wire agu_o_ready,\n  output wire [E203_XLEN-1:0] agu_o_wbck_wdat,\n  output wire agu_o_wbck_err,\n  output wire agu_o_cmt_misalgn,\n  output wire agu_o_cmt_ld,\n  output wire agu_o_cmt_stamo,\n  output wire agu_o_cmt_buserr,\n  output wire [E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_cmd_usign,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire [E203_XLEN-1:0] agu_req_alu_op1,\n  output wire [E203_XLEN-1:0] agu_req_alu_op2,\n  output wire agu_req_alu_swap,\n  output wire agu_req_alu_add,\n  output wire agu_req_alu_and,\n  output wire agu_req_alu_or,\n  output wire agu_req_alu_xor,\n  output wire agu_req_alu_max,\n  output wire agu_req_alu_min,\n  output wire agu_req_alu_maxu,\n  output wire agu_req_alu_minu,\n  input  wire [E203_XLEN-1:0] agu_req_alu_res,\n  output wire agu_sbf_0_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  wire [E203_XLEN-1:0] agu_sbf_0_r,\n  output wire agu_sbf_1_ena,\n  output wire [E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  wire [E203_XLEN-1:0] agu_sbf_1_r,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 15, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_dtcm_ctrl", "codeid": 20, "code": "module e203_dtcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire dtcm_active,\n  input wire lsu2dtcm_icb_cmd_valid,\n  output wire lsu2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] lsu2dtcm_icb_cmd_addr,\n  input wire lsu2dtcm_icb_cmd_read,\n  input wire [31:0] lsu2dtcm_icb_cmd_wdata,\n  input wire [3:0] lsu2dtcm_icb_cmd_wmask,\n  output wire lsu2dtcm_icb_rsp_valid,\n  input wire lsu2dtcm_icb_rsp_ready,\n  output wire lsu2dtcm_icb_rsp_err,\n  output wire [31:0] lsu2dtcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [31:0] ext2dtcm_icb_cmd_wdata,\n  input wire [3:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [31:0] ext2dtcm_icb_rsp_rdata,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire clk_dtcm_ram\n);\n\n  // Internal signals\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire arbt_icb_cmd_read;\n  wire [E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire [31:0] arbt_icb_cmd_wdata;\n  wire [3:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [31:0] arbt_icb_rsp_rdata;\n\n  // Instantiate the bus arbiter\n  sirv_gnrl_icb_arbt #(\n    .ARBT_SCHEME(0),\n    .ALLOW_0CYCL_RSP(0),\n    .FIFO_OUTS_NUM(E203_DTCM_OUTS_NUM),\n    .FIFO_CUT_READY(0),\n    .USR_W(1),\n    .ARBT_NUM(DTCM_ARBT_I_NUM),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .DW(E203_DTCM_DATA_WIDTH),\n    .ARBT_PTR_W(DTCM_ARBT_I_PTR_W)\n  ) u_dtcm_icb_arbt (\n    .o_icb_cmd_valid(arbt_icb_cmd_valid),\n    .o_icb_cmd_ready(arbt_icb_cmd_ready),\n    .o_icb_cmd_read(arbt_icb_cmd_read),\n    .o_icb_cmd_addr(arbt_icb_cmd_addr),\n    .o_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .o_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .o_icb_rsp_valid(arbt_icb_rsp_valid),\n    .o_icb_rsp_ready(arbt_icb_rsp_ready),\n    .o_icb_rsp_err(arbt_icb_rsp_err),\n    .o_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2dtcm_icb_cmd_ready, lsu2dtcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2dtcm_icb_cmd_valid, lsu2dtcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2dtcm_icb_cmd_read, lsu2dtcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2dtcm_icb_cmd_addr, lsu2dtcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2dtcm_icb_cmd_wdata, lsu2dtcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2dtcm_icb_cmd_wmask, lsu2dtcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2dtcm_icb_rsp_valid, lsu2dtcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2dtcm_icb_rsp_ready, lsu2dtcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2dtcm_icb_rsp_err, lsu2dtcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2dtcm_icb_rsp_rdata, lsu2dtcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller\n  sirv_sram_icb_ctrl #(\n    .DW(E203_DTCM_DATA_WIDTH),\n    .AW(E203_DTCM_ADDR_WIDTH),\n    .MW(E203_DTCM_WMSK_WIDTH),\n    .AW_LSB(2),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .sram_ctrl_active(dtcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .i_icb_cmd_valid(arbt_icb_cmd_valid),\n    .i_icb_cmd_ready(arbt_icb_cmd_ready),\n    .i_icb_cmd_read(arbt_icb_cmd_read),\n    .i_icb_cmd_addr(arbt_icb_cmd_addr),\n    .i_icb_cmd_wdata(arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask(arbt_icb_cmd_wmask),\n    .i_icb_rsp_valid(arbt_icb_rsp_valid),\n    .i_icb_rsp_ready(arbt_icb_rsp_ready),\n    .i_icb_rsp_rdata(arbt_icb_rsp_rdata),\n    .ram_cs(dtcm_ram_cs),\n    .ram_we(dtcm_ram_we),\n    .ram_addr(dtcm_ram_addr),\n    .ram_wem(dtcm_ram_wem),\n    .ram_din(dtcm_ram_din),\n    .ram_dout(dtcm_ram_dout),\n    .clk_ram(clk_dtcm_ram),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 18, "code": "module e203_cpu (\n  input wire [E203_PC-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire ppi_region_indic,\n  input wire ppi_icb_enable,\n  input wire ppi_icb_cmd_ready,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire clint_region_indic,\n  input wire clint_icb_enable,\n  input wire clint_icb_cmd_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire plic_region_indic,\n  input wire plic_icb_enable,\n  input wire plic_icb_cmd_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire fio_region_indic,\n  input wire fio_icb_enable,\n  input wire fio_icb_cmd_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  input wire mem_icb_cmd_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire [E203_PC-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n  // Module instantiations and internal logic here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 19, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Handshake logic\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 16, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 17, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 19, "code": "module e203_cpu (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HARD_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire ppi_region_indic,\n  input wire ppi_icb_enable,\n  input wire ppi_icb_cmd_ready,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire clint_region_indic,\n  input wire clint_icb_enable,\n  input wire clint_icb_cmd_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire plic_region_indic,\n  input wire plic_icb_enable,\n  input wire plic_icb_cmd_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire fio_region_indic,\n  input wire fio_icb_enable,\n  input wire fio_icb_cmd_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  input wire mem_icb_cmd_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output wire inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n\n  // Instantiate submodules here\n  // e.g., u_e203_reset_ctrl, u_e203_clk_ctrl, etc.\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 15, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] oitf_entries;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg oitf_full_flag, oitf_empty_flag;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      oitf_full_flag <= 0;\n    end else if (dis_ena && !oitf_full_flag) begin\n      oitf_entries[dis_ptr_reg] <= {disp_i_rdidx, disp_i_pc, disp_i_rdwen, disp_i_rdfpu};\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == E203_OITF_DEPTH-1)\n        oitf_full_flag <= 1;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      oitf_empty_flag <= 1;\n    end else if (ret_ena && !oitf_empty_flag) begin\n      {ret_rdidx, ret_pc, ret_rdwen, ret_rdfpu} <= oitf_entries[ret_ptr_reg];\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == E203_OITF_DEPTH-1)\n        oitf_empty_flag <= 1;\n    end\n  end\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n\n  // Full and empty conditions\n  assign oitf_empty = oitf_empty_flag;\n  assign dis_ready = !oitf_full_flag;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 16, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_OITF_DEPTH-1:0] fifo [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg dis_flag, ret_flag;\n  wire oitf_full;\n\n  // Dispatch logic\n  assign dis_ready = !oitf_full;\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      dis_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      fifo[dis_ptr_reg] <= {disp_i_rdidx, disp_i_pc, disp_i_rdwen, disp_i_rdfpu};\n      dis_ptr_reg <= dis_ptr_reg + 1;\n      if (dis_ptr_reg == E203_OITF_DEPTH-1) dis_flag <= ~dis_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n      ret_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      {ret_rdidx, ret_pc, ret_rdwen, ret_rdfpu} <= fifo[ret_ptr_reg];\n      ret_ptr_reg <= ret_ptr_reg + 1;\n      if (ret_ptr_reg == E203_OITF_DEPTH-1) ret_flag <= ~ret_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+2]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+2]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+2]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == fifo[ret_ptr_reg][E203_RFIDX_WIDTH-1:0]) && fifo[ret_ptr_reg][E203_RFIDX_WIDTH+2]);\n\n  // Full and empty conditions\n  assign oitf_full = (dis_ptr_reg == ret_ptr_reg) && (dis_flag != ret_flag);\n  assign oitf_empty = (dis_ptr_reg == ret_ptr_reg) && (dis_flag == ret_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 18, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu_top", "codeid": 20, "code": "module e203_cpu_top (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk,\n  output core_csr_clk,\n  output core_wfi,\n  output tm_stop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output dbg_irq_r,\n  input ext_irq_a,\n  input sft_irq_a,\n  input tmr_irq_a,\n  input tcm_sd,\n  input tcm_ds,\n  input ext2itcm_icb_cmd_valid,\n  output ext2itcm_icb_cmd_ready,\n  input [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input ext2itcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output ext2itcm_icb_rsp_valid,\n  input ext2itcm_icb_rsp_ready,\n  output ext2itcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input ext2dtcm_icb_cmd_valid,\n  output ext2dtcm_icb_cmd_ready,\n  input [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input ext2dtcm_icb_cmd_read,\n  input [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output ext2dtcm_icb_rsp_valid,\n  input ext2dtcm_icb_rsp_ready,\n  output ext2dtcm_icb_rsp_err,\n  output [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  input ppi_icb_rsp_valid,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input clint_icb_cmd_ready,\n  input clint_icb_rsp_valid,\n  input clint_icb_rsp_err,\n  input [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input plic_icb_cmd_ready,\n  input plic_icb_rsp_valid,\n  input plic_icb_rsp_err,\n  input [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input fio_icb_cmd_ready,\n  input fio_icb_rsp_valid,\n  input fio_icb_rsp_err,\n  input [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input mem_icb_cmd_ready,\n  input mem_icb_rsp_valid,\n  input mem_icb_rsp_err,\n  input [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input clk,\n  input rst_n,\n  input test_mode\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 17, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction forwarding logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  // Instruction tag writeback\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 18, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction handling\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  assign nice_rsp_multicyc_ready = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag_valid = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag = fifo_o_dat;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 18, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] next_pc;\n  \n  // Flush need generation logic\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt != cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation logic\n  assign next_pc = (cmt_i_dret) ? csr_dpc_r :\n                   (cmt_i_mret) ? csr_epc_r :\n                   (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                   (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control logic\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = next_pc;\n\n  // Special signal commit logic\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\n  // Ready signal logic\n  assign cmt_i_ready = ~flush_need | (brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 19, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  , input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n  // Internal logic for decoding instructions\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 15, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_decode", "codeid": 20, "code": "module e203_exu_decode (\n  input  [E203_INSTR_SIZE-1:0] i_instr,\n  input  [E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken,\n  input  i_misalgn,\n  input  i_buserr,\n  input  i_muldiv_b2b,\n  input  dbg_mode,\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [E203_DECINFO_WIDTH-1:0] dec_info,\n  output [E203_XLEN-1:0] dec_imm,\n  output [E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n`ifdef E203_HAS_NICE\n  ,input nice_xs_off,\n  output dec_nice,\n  output nice_cmt_off_ilgl_o\n`endif\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 19, "code": "module e203_exu_longpwbck (\n  input  wire                  lsu_wbck_i_valid,\n  output wire                  lsu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  lsu_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input  wire                  lsu_wbck_i_err,\n  input  wire                  lsu_cmt_i_buserr,\n  input  wire [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input  wire                  lsu_cmt_i_ld,\n  input  wire                  lsu_cmt_i_st,\n  output wire                  longp_wbck_o_valid,\n  input  wire                  longp_wbck_o_ready,\n  output wire [E203_FLEN-1:0]  longp_wbck_o_wdat,\n  output wire [4:0]            longp_wbck_o_flags,\n  output wire [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output wire                  longp_wbck_o_rdfpu,\n  output wire                  longp_excp_o_valid,\n  input  wire                  longp_excp_o_ready,\n  output wire                  longp_excp_o_insterr,\n  output wire                  longp_excp_o_ld,\n  output wire                  longp_excp_o_st,\n  output wire                  longp_excp_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output wire [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input  wire                  oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input  wire [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  wire [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  wire                  oitf_ret_rdwen,\n  input  wire                  oitf_ret_rdfpu,\n  output wire                  oitf_ret_ena,\n  input  wire                  clk,\n  input  wire                  rst_n\n  `ifdef E203_HAS_NICE\n  , input  wire                  nice_longp_wbck_i_valid,\n  output wire                  nice_longp_wbck_i_ready,\n  input  wire [E203_XLEN-1:0]  nice_longp_wbck_i_wdat,\n  input  wire [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input  wire                  nice_longp_wbck_i_err\n  `endif\n);\n\n  // Internal signals and logic here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 12, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu", "codeid": 20, "code": "module e203_exu_alu (\n  input  wire i_valid,\n  output wire i_ready,\n  output wire i_longpipe,\n  output wire nice_csr_valid,\n  input  wire nice_csr_ready,\n  output wire [31:0] nice_csr_addr,\n  output wire nice_csr_wr,\n  output wire [31:0] nice_csr_wdata,\n  input  wire [31:0] nice_csr_rdata,\n  input  wire nice_xs_off,\n  output wire amo_wait,\n  input  wire oitf_empty,\n  input  wire [E203_ITAG_WIDTH-1:0] i_itag,\n  input  wire [E203_XLEN-1:0] i_rs1,\n  input  wire [E203_XLEN-1:0] i_rs2,\n  input  wire [E203_XLEN-1:0] i_imm,\n  input  wire [E203_DECINFO_WIDTH-1:0] i_info,\n  input  wire [E203_PC_SIZE-1:0] i_pc,\n  input  wire [E203_INSTR_SIZE-1:0] i_instr,\n  input  wire i_pc_vld,\n  input  wire [E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  wire i_rdwen,\n  input  wire i_ilegl,\n  input  wire i_buserr,\n  input  wire i_misalgn,\n  input  wire flush_req,\n  input  wire flush_pulse,\n  output wire cmt_o_valid,\n  input  wire cmt_o_ready,\n  output wire cmt_o_pc_vld,\n  output wire [E203_PC_SIZE-1:0] cmt_o_pc,\n  output wire [E203_INSTR_SIZE-1:0] cmt_o_instr,\n  output wire [E203_XLEN-1:0] cmt_o_imm,\n  output wire cmt_o_rv32,\n  output wire cmt_o_bjp,\n  output wire cmt_o_mret,\n  output wire cmt_o_dret,\n  output wire cmt_o_ecall,\n  output wire cmt_o_ebreak,\n  output wire cmt_o_fencei,\n  output wire cmt_o_wfi,\n  output wire cmt_o_ifu_misalgn,\n  output wire cmt_o_ifu_buserr,\n  output wire cmt_o_ifu_ilegl,\n  output wire cmt_o_bjp_prdt,\n  output wire cmt_o_bjp_rslv,\n  output wire cmt_o_misalgn,\n  output wire cmt_o_ld,\n  output wire cmt_o_stamo,\n  output wire cmt_o_buserr,\n  output wire [E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n  output wire wbck_o_valid,\n  input  wire wbck_o_ready,\n  output wire [E203_XLEN-1:0] wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  input  wire mdv_nob2b,\n  output wire csr_ena,\n  output wire csr_wr_en,\n  output wire csr_rd_en,\n  output wire [12-1:0] csr_idx,\n  input  wire nonflush_cmt_ena,\n  input  wire csr_access_ilgl,\n  input  wire [E203_XLEN-1:0] read_csr_dat,\n  output wire [E203_XLEN-1:0] wbck_csr_dat,\n  output wire agu_icb_cmd_valid,\n  input  wire agu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  output wire agu_icb_cmd_read,\n  output wire [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  output wire agu_icb_cmd_lock,\n  output wire agu_icb_cmd_excl,\n  output wire [1:0] agu_icb_cmd_size,\n  output wire agu_icb_cmd_back2agu,\n  output wire agu_icb_cmd_usign,\n  output wire [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  input  wire agu_icb_rsp_valid,\n  output wire agu_icb_rsp_ready,\n  input  wire agu_icb_rsp_err,\n  input  wire agu_icb_rsp_excl_ok,\n  input  wire [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  output wire nice_req_valid,\n  input  wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input  wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_longp_wbck_valid,\n  input  wire nice_longp_wbck_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input  wire i_nice_cmt_off_ilgl,\n  input  wire clk,\n  input  wire rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 16, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  e203_ifu u_e203_ifu (\n    .inspect_pc(inspect_pc),\n    .ifu_active(),\n    .itcm_nohold(),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(),\n    .ifu_o_pc(),\n    .ifu_o_pc_vld(),\n    .ifu_o_misalgn(),\n    .ifu_o_buserr(),\n    .ifu_o_rs1idx(),\n    .ifu_o_rs2idx(),\n    .ifu_o_prdt_taken(),\n    .ifu_o_muldiv_b2b(),\n    .ifu_o_valid(),\n    .ifu_o_ready(),\n    .pipe_flush_req(),\n    .pipe_flush_ack(),\n    .pipe_flush_add_op1(),\n    .pipe_flush_add_op2(),\n    .pipe_flush_pc(),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(),\n    .ifu2biu_icb_cmd_ready(),\n    .ifu2biu_icb_cmd_addr(),\n    .ifu2biu_icb_rsp_valid(),\n    .ifu2biu_icb_rsp_ready(),\n    .ifu2biu_icb_rsp_err(),\n    .ifu2biu_icb_rsp_rdata(),\n    .ifu_halt_req(),\n    .ifu_halt_ack(),\n    .oitf_empty(),\n    .rf2ifu_x1(),\n    .rf2ifu_rs1(),\n    .dec2ifu_rs1en(),\n    .dec2ifu_rden(),\n    .dec2ifu_rdidx(),\n    .dec2ifu_mulhsu(),\n    .dec2ifu_div(),\n    .dec2ifu_rem(),\n    .dec2ifu_divu(),\n    .dec2ifu_remu()\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(),\n    .commit_trap(),\n    .exu_active(),\n    .excp_active(),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(),\n    .wfi_halt_ifu_ack(),\n    .oitf_empty(),\n    .rf2ifu_x1(),\n    .rf2ifu_rs1(),\n    .dec2ifu_rden(),\n    .dec2ifu_rs1en(),\n    .dec2ifu_rdidx(),\n    .dec2ifu_mulhsu(),\n    .dec2ifu_div(),\n    .dec2ifu_rem(),\n    .dec2ifu_divu(),\n    .dec2ifu_remu(),\n    .test_mode(),\n    .clk_aon(),\n    .clk(),\n    .rst_n(),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(),\n    .i_ready(),\n    .i_ir(),\n    .i_pc(),\n    .i_pc_vld(),\n    .i_misalgn(),\n    .i_buserr(),\n    .i_prdt_taken(),\n    .i_muldiv_b2b(),\n    .i_rs1idx(),\n    .i_rs2idx(),\n    .pipe_flush_ack(),\n    .pipe_flush_req(),\n    .pipe_flush_add_op1(),\n    .pipe_flush_add_op2(),\n    .pipe_flush_pc(),\n    .lsu_o_valid(),\n    .lsu_o_ready(),\n    .lsu_o_wbck_wdat(),\n    .lsu_o_wbck_itag(),\n    .lsu_o_wbck_err(),\n    .lsu_o_cmt_ld(),\n    .lsu_o_cmt_st(),\n    .lsu_o_cmt_badaddr(),\n    .lsu_o_cmt_buserr(),\n    .agu_icb_cmd_valid(),\n    .agu_icb_cmd_ready(),\n    .agu_icb_cmd_addr(),\n    .agu_icb_cmd_read(),\n    .agu_icb_cmd_wdata(),\n    .agu_icb_cmd_wmask(),\n    .agu_icb_cmd_lock(),\n    .agu_icb_cmd_excl(),\n    .agu_icb_cmd_size(),\n    .agu_icb_cmd_back2agu(),\n    .agu_icb_cmd_usign(),\n    .agu_icb_cmd_itag(),\n    .agu_icb_rsp_valid(),\n    .agu_icb_rsp_ready(),\n    .agu_icb_rsp_err(),\n    .agu_icb_rsp_excl_ok(),\n    .agu_icb_rsp_rdata(),\n    .nice_csr_valid(),\n    .nice_csr_ready(),\n    .nice_csr_addr(),\n    .nice_csr_wr(),\n    .nice_csr_wdata(),\n    .nice_csr_rdata(),\n    .nice_req_valid(),\n    .nice_req_ready(),\n    .nice_req_inst(),\n    .nice_req_rs1(),\n    .nice_req_rs2(),\n    .nice_rsp_multicyc_valid(),\n    .nice_rsp_multicyc_ready(),\n    .nice_rsp_multicyc_dat(),\n    .nice_rsp_multicyc_err()\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(),\n    .commit_trap(),\n    .excp_active(),\n    .lsu_active(),\n    .lsu_o_valid(),\n    .lsu_o_ready(),\n    .lsu_o_wbck_wdat(),\n    .lsu_o_wbck_itag(),\n    .lsu_o_wbck_err(),\n    .lsu_o_cmt_ld(),\n    .lsu_o_cmt_st(),\n    .lsu_o_cmt_badaddr(),\n    .lsu_o_cmt_buserr(),\n    .agu_icb_cmd_valid(),\n    .agu_icb_cmd_ready(),\n    .agu_icb_cmd_addr(),\n    .agu_icb_cmd_read(),\n    .agu_icb_cmd_wdata(),\n    .agu_icb_cmd_wmask(),\n    .agu_icb_cmd_lock(),\n    .agu_icb_cmd_excl(),\n    .agu_icb_cmd_size(),\n    .agu_icb_cmd_back2agu(),\n    .agu_icb_cmd_usign(),\n    .agu_icb_cmd_itag(),\n    .agu_icb_rsp_valid(),\n    .agu_icb_rsp_ready(),\n    .agu_icb_rsp_err(),\n    .agu_icb_rsp_excl_ok(),\n    .agu_icb_rsp_rdata(),\n    .nice_mem_holdup(),\n    .itcm_region_indic(),\n    .dtcm_region_indic(),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(),\n    .clk(),\n    .rst_n(),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 17, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  output ppi_icb_cmd_valid,\n  input ppi_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .clint_icb_cmd_valid(clint_icb_cmd_valid),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_cmd_addr(clint_icb_cmd_addr),\n    .clint_icb_cmd_read(clint_icb_cmd_read),\n    .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .plic_icb_cmd_valid(plic_icb_cmd_valid),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_cmd_addr(plic_icb_cmd_addr),\n    .plic_icb_cmd_read(plic_icb_cmd_read),\n    .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 19, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE request logic\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_i_valid & nice_req_ready & ~nice_i_xs_off;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n\n  // Long pipeline handling\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Instruction tag writeback\n  assign nice_o_itag_valid = fifo_o_vld & nice_rsp_multicyc_valid;\n  assign nice_o_itag = fifo_o_dat;\n  assign nice_rsp_multicyc_ready = fifo_o_rdy;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instance\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 18, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal logic for dispatching instructions\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 19, "code": "module e203_exu_branchslv (\n  input  wire cmt_i_valid,\n  output wire cmt_i_ready,\n  input  wire cmt_i_rv32,\n  input  wire cmt_i_dret,\n  input  wire cmt_i_mret,\n  input  wire cmt_i_fencei,\n  input  wire cmt_i_bjp,\n  input  wire cmt_i_bjp_prdt,\n  input  wire cmt_i_bjp_rslv,\n  input  wire [E203_PC_SIZE-1:0] cmt_i_pc,\n  input  wire [E203_XLEN-1:0] cmt_i_imm,\n  input  wire [E203_PC_SIZE-1:0] csr_epc_r,\n  input  wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  input  wire nonalu_excpirq_flush_req_raw,\n  input  wire brchmis_flush_ack,\n  output wire brchmis_flush_req,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output wire [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output wire cmt_mret_ena,\n  output wire cmt_dret_ena,\n  output wire cmt_fencei_ena,\n  input  wire clk,\n  input  wire rst_n\n);\n\n  // Internal signals\n  wire flush_need;\n  wire [E203_PC_SIZE-1:0] flush_target;\n\n  // Flush need generation\n  assign flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) |\n                      cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n\n  // Flush target calculation\n  assign flush_target = cmt_i_dret ? csr_dpc_r :\n                        cmt_i_mret ? csr_epc_r :\n                        (cmt_i_bjp & ~cmt_i_bjp_prdt) ? (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                        (cmt_i_pc + (cmt_i_rv32 ? 4 : 2));\n\n  // Pipeline flush control\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n  assign brchmis_flush_pc = flush_target;\n\n  // Ready signal control\n  assign cmt_i_ready = ~flush_need | brchmis_flush_ack | nonalu_excpirq_flush_req_raw;\n\n  // Special signal commit\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_ack;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 17, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1)\n        dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && !oitf_empty) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1)\n        ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\n  // Full and empty conditions\n  assign dis_ready = !(dis_ptr_r == ret_ptr_r && dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r && dis_ptr_flag == ret_ptr_flag);\n\n  // Output assignments\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 18, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_rglr", "codeid": 20, "code": "module e203_exu_alu_rglr (\n  input wire alu_i_valid,\n  output wire alu_i_ready,\n  input wire [E203_XLEN-1:0] alu_i_rs1,\n  input wire [E203_XLEN-1:0] alu_i_rs2,\n  input wire [E203_XLEN-1:0] alu_i_imm,\n  input wire [E203_PC_SIZE-1:0] alu_i_pc,\n  input wire [E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n  output wire alu_o_valid,\n  input wire alu_o_ready,\n  output wire [E203_XLEN-1:0] alu_o_wbck_wdat,\n  output wire alu_o_wbck_err,\n  output wire alu_o_cmt_ecall,\n  output wire alu_o_cmt_ebreak,\n  output wire alu_o_cmt_wfi,\n  output wire alu_req_alu_add,\n  output wire alu_req_alu_sub,\n  output wire alu_req_alu_xor,\n  output wire alu_req_alu_sll,\n  output wire alu_req_alu_srl,\n  output wire alu_req_alu_sra,\n  output wire alu_req_alu_or,\n  output wire alu_req_alu_and,\n  output wire alu_req_alu_slt,\n  output wire alu_req_alu_sltu,\n  output wire alu_req_alu_lui,\n  output wire [E203_XLEN-1:0] alu_req_alu_op1,\n  output wire [E203_XLEN-1:0] alu_req_alu_op2,\n  output wire [E203_XLEN-1:0] alu_req_alu_res,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire op2imm = alu_i_info[E203_DECINFO_ALU_OP2IMM];\n  wire op1pc = alu_i_info[E203_DECINFO_ALU_OP1PC];\n  wire is_nop = alu_i_info[E203_DECINFO_ALU_NOP];\n\n  // Operand selection\n  assign alu_req_alu_op1 = op1pc ? alu_i_pc : alu_i_rs1;\n  assign alu_req_alu_op2 = op2imm ? alu_i_imm : alu_i_rs2;\n\n  // ALU operation requests\n  assign alu_req_alu_add = alu_i_info[E203_DECINFO_ALU_ADD] & ~is_nop;\n  assign alu_req_alu_sub = alu_i_info[E203_DECINFO_ALU_SUB];\n  assign alu_req_alu_xor = alu_i_info[E203_DECINFO_ALU_XOR];\n  assign alu_req_alu_sll = alu_i_info[E203_DECINFO_ALU_SLL];\n  assign alu_req_alu_srl = alu_i_info[E203_DECINFO_ALU_SRL];\n  assign alu_req_alu_sra = alu_i_info[E203_DECINFO_ALU_SRA];\n  assign alu_req_alu_or  = alu_i_info[E203_DECINFO_ALU_OR];\n  assign alu_req_alu_and = alu_i_info[E203_DECINFO_ALU_AND];\n  assign alu_req_alu_slt = alu_i_info[E203_DECINFO_ALU_SLT];\n  assign alu_req_alu_sltu = alu_i_info[E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui = alu_i_info[E203_DECINFO_ALU_LUI];\n\n  // Special instructions\n  assign alu_o_cmt_ecall = alu_i_info[E203_DECINFO_ALU_ECAL];\n  assign alu_o_cmt_ebreak = alu_i_info[E203_DECINFO_ALU_EBRK];\n  assign alu_o_cmt_wfi = alu_i_info[E203_DECINFO_ALU_WFI];\n\n  // Error handling\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\n  // Valid-ready handshake\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_valid = alu_i_valid;\n\n  // Result path\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 18, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat[E203_PC_SIZE-1:0];\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat[E203_ADDR_SIZE-1:0];\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode signals\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug signals\n  assign wr_dcsr_ena = dbg_mode;\n  assign wr_dpc_ena = dbg_mode;\n  assign wr_dscratch_ena = dbg_mode;\n\n  // CSR outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc_r;\n  assign csr_mtvec_r = mtvec;\n\n  // Clock gating and power management\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\n  // Illegal access flag\n  assign csr_access_ilgl = 0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 19, "code": "module e203_exu_csr (\n  input nonflush_cmt_ena, // not used\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [11:0] csr_idx,\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n  output [E203_XLEN-1:0] read_csr_dat,\n  input [E203_XLEN-1:0] wbck_csr_dat,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  input [E203_XLEN-1:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [E203_XLEN-1:0] dscratch_r,\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n  input [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n  input cmt_mret_ena,\n  output [E203_PC_SIZE-1:0] csr_epc_r,\n  output [E203_PC_SIZE-1:0] csr_dpc_r,\n  output [E203_XLEN-1:0] csr_mtvec_r,\n  input clk_aon,\n  input clk,\n  input rst_n\n);\n\n  // Internal registers and wires\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] misa;\n  reg [E203_XLEN-1:0] mvendorid;\n  reg [E203_XLEN-1:0] marchid;\n  reg [E203_XLEN-1:0] mimpid;\n  reg [E203_XLEN-1:0] mhartid;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] mcgstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] dcsr;\n  reg [E203_PC_SIZE-1:0] dpc;\n  reg [E203_XLEN-1:0] dscratch;\n\n  // CSR access logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      misa <= 0;\n      mvendorid <= 536;\n      marchid <= 'hE203;\n      mimpid <= 1;\n      mhartid <= core_mhartid;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      mcgstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      dcsr <= 0;\n      dpc <= 0;\n      dscratch <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          12'h7b0: if (dbg_mode) dcsr <= wbck_csr_dat;\n          12'h7b1: if (dbg_mode) dpc <= wbck_csr_dat;\n          12'h7b2: if (dbg_mode) dscratch <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR read logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hF11: read_csr_dat = mvendorid;\n      12'hF12: read_csr_dat = marchid;\n      12'hF13: read_csr_dat = mimpid;\n      12'hF14: read_csr_dat = mhartid;\n      12'hBFF: read_csr_dat = counterstop;\n      12'h7b0: read_csr_dat = dcsr;\n      12'h7b1: read_csr_dat = dpc;\n      12'h7b2: read_csr_dat = dscratch;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode signals\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt enable signals\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug write enable signals\n  assign wr_dcsr_ena = (csr_idx == 12'h7b0) && csr_wr_en && dbg_mode;\n  assign wr_dpc_ena = (csr_idx == 12'h7b1) && csr_wr_en && dbg_mode;\n  assign wr_dscratch_ena = (csr_idx == 12'h7b2) && csr_wr_en && dbg_mode;\n\n  // CSR illegal access\n  assign csr_access_ilgl = 0;\n\n  // Clock gating and stop signals\n  assign tm_stop = counterstop[0];\n  assign core_cgstop = mcgstop[0];\n  assign tcm_cgstop = mcgstop[1];\n  assign itcm_nohold = itcmnohold[0];\n  assign mdv_nob2b = mdvnob2b[0];\n\n  // CSR read outputs\n  assign csr_epc_r = mepc;\n  assign csr_dpc_r = dpc;\n  assign csr_mtvec_r = mtvec;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 14, "code": "module e203_exu_wbck (\n  input wire alu_wbck_i_valid,\n  output wire alu_wbck_i_ready,\n  input wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input wire longp_wbck_i_valid,\n  output wire longp_wbck_i_ready,\n  input wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input wire [4:0] longp_wbck_i_flags,\n  input wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input wire longp_wbck_i_rdfpu,\n  output wire rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input wire clk,\n  input wire rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 19, "code": "module e203_exu_disp (\n  input  wire        wfi_halt_exu_req,\n  output wire        wfi_halt_exu_ack,\n  input  wire        oitf_empty,\n  input  wire        amo_wait,\n  input  wire        disp_i_valid,\n  output wire        disp_i_ready,\n  input  wire        disp_i_rs1x0,\n  input  wire        disp_i_rs2x0,\n  input  wire        disp_i_rs1en,\n  input  wire        disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0] disp_i_rs1,\n  input  wire [E203_XLEN-1:0] disp_i_rs2,\n  input  wire        disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0] disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire        disp_i_misalgn,\n  input  wire        disp_i_buserr,\n  input  wire        disp_i_ilegl,\n  output wire        disp_o_alu_valid,\n  input  wire        disp_o_alu_ready,\n  input  wire        disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0] disp_o_alu_rs2,\n  output wire        disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0] disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire        disp_o_alu_misalgn,\n  output wire        disp_o_alu_buserr,\n  output wire        disp_o_alu_ilegl,\n  input  wire        oitfrd_match_disprs1,\n  input  wire        oitfrd_match_disprs2,\n  input  wire        oitfrd_match_disprs3,\n  input  wire        oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire        disp_oitf_ena,\n  input  wire        disp_oitf_ready,\n  output wire        disp_oitf_rs1fpu,\n  output wire        disp_oitf_rs2fpu,\n  output wire        disp_oitf_rs3fpu,\n  output wire        disp_oitf_rdfpu,\n  output wire        disp_oitf_rs1en,\n  output wire        disp_oitf_rs2en,\n  output wire        disp_oitf_rs3en,\n  output wire        disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire        clk,\n  input  wire        rst_n\n);\n\n  // Internal signals and logic for dispatching instructions\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 18, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [E203_OITF_DEPTH-1:0];\n  reg [E203_PC_SIZE-1:0] oitf_pc [E203_OITF_DEPTH-1:0];\n  reg oitf_rdwen [E203_OITF_DEPTH-1:0];\n  reg oitf_rdfpu [E203_OITF_DEPTH-1:0];\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r, ret_ptr_r;\n  reg dis_ptr_flag, ret_ptr_flag;\n\n  // Dispatch logic\n  assign dis_ready = (oitf_valid[dis_ptr_r] == 1'b0);\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n    end else if (dis_ena && dis_ready) begin\n      oitf_valid[dis_ptr_r] <= 1'b1;\n      oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n      oitf_pc[dis_ptr_r] <= disp_i_pc;\n      oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n      oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n      dis_ptr_r <= dis_ptr_r + 1;\n      if (dis_ptr_r == E203_OITF_DEPTH-1) dis_ptr_flag <= ~dis_ptr_flag;\n    end\n  end\n\n  // Retirement logic\n  assign ret_rdidx = oitf_rdidx[ret_ptr_r];\n  assign ret_pc = oitf_pc[ret_ptr_r];\n  assign ret_rdwen = oitf_rdwen[ret_ptr_r];\n  assign ret_rdfpu = oitf_rdfpu[ret_ptr_r];\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_r <= 0;\n      ret_ptr_flag <= 0;\n    end else if (ret_ena && oitf_valid[ret_ptr_r]) begin\n      oitf_valid[ret_ptr_r] <= 1'b0;\n      ret_ptr_r <= ret_ptr_r + 1;\n      if (ret_ptr_r == E203_OITF_DEPTH-1) ret_ptr_flag <= ~ret_ptr_flag;\n    end\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_rdidx[ret_ptr_r]) && oitf_rdwen[ret_ptr_r]);\n\n  // Full and empty conditions\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 15, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_o_ready,\n  output wire ifu_o_valid,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire inspect_pc\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n\n  // Module instantiations\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(ir_empty),\n    .ir_rs1en(ir_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_nxt),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  // Additional logic and assignments\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n  assign ifu_halt_ack = halt_ack_r;\n  assign inspect_pc = pc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 19, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 13, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_nice", "codeid": 20, "code": "module e203_exu_nice (\n  input wire nice_i_xs_off,\n  input wire nice_i_valid,\n  output wire nice_i_ready,\n  input wire [E203_XLEN-1:0] nice_i_instr,\n  input wire [E203_XLEN-1:0] nice_i_rs1,\n  input wire [E203_XLEN-1:0] nice_i_rs2,\n  input wire [E203_ITAG_WIDTH-1:0] nice_i_itag,\n  output wire nice_o_longpipe,\n  output wire nice_o_valid,\n  input wire nice_o_ready,\n  output wire nice_o_itag_valid,\n  input wire nice_o_itag_ready,\n  output wire [E203_ITAG_WIDTH-1:0] nice_o_itag,\n  input wire nice_rsp_multicyc_valid,\n  output wire nice_rsp_multicyc_ready,\n  output wire nice_req_valid,\n  input wire nice_req_ready,\n  output wire [E203_XLEN-1:0] nice_req_instr,\n  output wire [E203_XLEN-1:0] nice_req_rs1,\n  output wire [E203_XLEN-1:0] nice_req_rs2,\n  input wire clk,\n  input wire rst_n\n);\n\n  // Internal signals\n  wire fifo_i_vld;\n  wire fifo_i_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_i_dat;\n  wire fifo_o_vld;\n  wire fifo_o_rdy;\n  wire [E203_ITAG_WIDTH-1:0] fifo_o_dat;\n\n  // NICE instruction handling\n  assign nice_i_ready = nice_req_ready | nice_i_xs_off;\n  assign nice_req_valid = nice_i_valid & ~nice_i_xs_off;\n  assign nice_req_instr = nice_i_instr;\n  assign nice_req_rs1 = nice_i_rs1;\n  assign nice_req_rs2 = nice_i_rs2;\n  assign nice_o_longpipe = ~nice_i_xs_off;\n\n  // Multi-cycle operation handling\n  assign fifo_i_vld = nice_req_valid & nice_req_ready;\n  assign fifo_i_dat = nice_i_itag;\n  assign fifo_o_rdy = nice_rsp_multicyc_valid;\n  assign nice_rsp_multicyc_ready = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag_valid = fifo_o_vld & fifo_o_rdy;\n  assign nice_o_itag = fifo_o_dat;\n\n  // Commit interface\n  assign nice_o_valid = nice_req_valid & nice_req_ready;\n\n  // FIFO instantiation\n  sirv_gnrl_fifo #(\n    .CUT_READY(1),\n    .MSKO(0),\n    .DP(4),\n    .DW(E203_ITAG_WIDTH)\n  ) u_sirv_gnrl_fifo (\n    .i_vld(fifo_i_vld),\n    .i_rdy(fifo_i_rdy),\n    .i_dat(fifo_i_dat),\n    .o_vld(fifo_o_vld),\n    .o_rdy(fifo_o_rdy),\n    .o_dat(fifo_o_dat),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 15, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_FLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 19, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_entries;\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_reg, ret_ptr_reg;\n  reg oitf_full, oitf_empty_reg;\n\n  // Dispatch logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_reg <= 0;\n      oitf_entries <= 0;\n    end else if (dis_ena && !oitf_full) begin\n      oitf_entries[dis_ptr_reg] <= {disp_i_rdidx, disp_i_pc, disp_i_rdwen, disp_i_rdfpu};\n      dis_ptr_reg <= dis_ptr_reg + 1;\n    end\n  end\n\n  // Retirement logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      ret_ptr_reg <= 0;\n    end else if (ret_ena && !oitf_empty_reg) begin\n      ret_ptr_reg <= ret_ptr_reg + 1;\n    end\n  end\n\n  // Full and empty conditions\n  always @(*) begin\n    oitf_full = (dis_ptr_reg == ret_ptr_reg) && (oitf_entries[dis_ptr_reg] != 0);\n    oitf_empty_reg = (dis_ptr_reg == ret_ptr_reg) && (oitf_entries[dis_ptr_reg] == 0);\n  end\n\n  // Dependency checking\n  assign oitfrd_match_disprs1 = (disp_i_rs1en && (disp_i_rs1idx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprs2 = (disp_i_rs2en && (disp_i_rs2idx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprs3 = (disp_i_rs3en && (disp_i_rs3idx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n  assign oitfrd_match_disprd = (disp_i_rdwen && (disp_i_rdidx == oitf_entries[dis_ptr_reg][E203_RFIDX_WIDTH-1:0]));\n\n  // Outputs\n  assign dis_ready = !oitf_full;\n  assign dis_ptr = dis_ptr_reg;\n  assign ret_ptr = ret_ptr_reg;\n  assign ret_rdidx = oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH-1:0];\n  assign ret_rdwen = oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH];\n  assign ret_rdfpu = oitf_entries[ret_ptr_reg][E203_RFIDX_WIDTH+1];\n  assign ret_pc = oitf_entries[ret_ptr_reg][E203_PC_SIZE-1:0];\n  assign oitf_empty = oitf_empty_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 14, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 16, "code": "module e203_exu_wbck (\n  input wire alu_wbck_i_valid,\n  output wire alu_wbck_i_ready,\n  input wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input wire longp_wbck_i_valid,\n  output wire longp_wbck_i_ready,\n  input wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input wire [4:0] longp_wbck_i_flags,\n  input wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input wire longp_wbck_i_rdfpu,\n  output wire rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input wire clk,\n  input wire rst_n\n);\n\n  wire wbck_i_valid;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 19, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 15, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for general-purpose register 1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_oitf", "codeid": 20, "code": "module e203_exu_oitf (\n  output dis_ready,\n  input dis_ena,\n  input ret_ena,\n  output [E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [E203_ITAG_WIDTH-1:0] ret_ptr,\n  output [E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [E203_PC_SIZE-1:0] ret_pc,\n  input disp_i_rs1en,\n  input disp_i_rs2en,\n  input disp_i_rs3en,\n  input disp_i_rdwen,\n  input disp_i_rs1fpu,\n  input disp_i_rs2fpu,\n  input disp_i_rs3fpu,\n  input disp_i_rdfpu,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input [E203_PC_SIZE-1:0] disp_i_pc,\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n  output oitf_empty,\n  input clk,\n  input rst_n\n);\n\n  // Internal signals\n  reg [E203_OITF_DEPTH-1:0] oitf_valid;\n  reg [E203_RFIDX_WIDTH-1:0] oitf_rdidx [0:E203_OITF_DEPTH-1];\n  reg [E203_PC_SIZE-1:0] oitf_pc [0:E203_OITF_DEPTH-1];\n  reg oitf_rdwen [0:E203_OITF_DEPTH-1];\n  reg oitf_rdfpu [0:E203_OITF_DEPTH-1];\n\n  reg [E203_ITAG_WIDTH-1:0] dis_ptr_r;\n  reg [E203_ITAG_WIDTH-1:0] ret_ptr_r;\n  reg dis_ptr_flag;\n  reg ret_ptr_flag;\n\n  wire oitf_full = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag != ret_ptr_flag);\n  assign oitf_empty = (dis_ptr_r == ret_ptr_r) && (dis_ptr_flag == ret_ptr_flag);\n\n  assign dis_ready = !oitf_full;\n  assign dis_ptr = dis_ptr_r;\n  assign ret_ptr = ret_ptr_r;\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      dis_ptr_r <= 0;\n      ret_ptr_r <= 0;\n      dis_ptr_flag <= 0;\n      ret_ptr_flag <= 0;\n      oitf_valid <= 0;\n    end else begin\n      if (dis_ena && dis_ready) begin\n        oitf_valid[dis_ptr_r] <= 1'b1;\n        oitf_rdidx[dis_ptr_r] <= disp_i_rdidx;\n        oitf_pc[dis_ptr_r] <= disp_i_pc;\n        oitf_rdwen[dis_ptr_r] <= disp_i_rdwen;\n        oitf_rdfpu[dis_ptr_r] <= disp_i_rdfpu;\n        dis_ptr_r <= dis_ptr_r + 1'b1;\n        if (dis_ptr_r == E203_OITF_DEPTH-1)\n          dis_ptr_flag <= ~dis_ptr_flag;\n      end\n\n      if (ret_ena && !oitf_empty) begin\n        oitf_valid[ret_ptr_r] <= 1'b0;\n        ret_rdidx <= oitf_rdidx[ret_ptr_r];\n        ret_pc <= oitf_pc[ret_ptr_r];\n        ret_rdwen <= oitf_rdwen[ret_ptr_r];\n        ret_rdfpu <= oitf_rdfpu[ret_ptr_r];\n        ret_ptr_r <= ret_ptr_r + 1'b1;\n        if (ret_ptr_r == E203_OITF_DEPTH-1)\n          ret_ptr_flag <= ~ret_ptr_flag;\n      end\n    end\n  end\n\n  // Dependency checking logic\n  assign oitfrd_match_disprs1 = |(oitf_valid & (oitf_rdidx == disp_i_rs1idx) & oitf_rdwen);\n  assign oitfrd_match_disprs2 = |(oitf_valid & (oitf_rdidx == disp_i_rs2idx) & oitf_rdwen);\n  assign oitfrd_match_disprs3 = |(oitf_valid & (oitf_rdidx == disp_i_rs3idx) & oitf_rdwen);\n  assign oitfrd_match_disprd = |(oitf_valid & (oitf_rdidx == disp_i_rdidx) & oitf_rdwen);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 18, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(i_valid),\n    .i_ready(i_ready),\n    .i_ir(i_ir),\n    .i_pc(i_pc),\n    .i_pc_vld(i_pc_vld),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_rs1idx(i_rs1idx),\n    .i_rs2idx(i_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .clint_icb_cmd_valid(clint_icb_cmd_valid),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_cmd_addr(clint_icb_cmd_addr),\n    .clint_icb_cmd_read(clint_icb_cmd_read),\n    .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .plic_icb_cmd_valid(plic_icb_cmd_valid),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_cmd_addr(plic_icb_cmd_addr),\n    .plic_icb_cmd_read(plic_icb_cmd_read),\n    .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 17, "code": "module e203_exu_wbck (\n  input wire alu_wbck_i_valid,\n  output wire alu_wbck_i_ready,\n  input wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input wire longp_wbck_i_valid,\n  output wire longp_wbck_i_ready,\n  input wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input wire [4:0] longp_wbck_i_flags,\n  input wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input wire longp_wbck_i_rdfpu,\n  output wire rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input wire clk,\n  input wire rst_n\n);\n\n  wire wbck_i_valid;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = longp_wbck_i_valid;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_cpu", "codeid": 20, "code": "module e203_cpu (\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire [31:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [31:0] dscratch_r,\n  input wire dbg_mode,\n  input wire dbg_halt_r,\n  input wire dbg_step_r,\n  input wire dbg_ebreakm_r,\n  input wire dbg_stopcycle,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire dbg_irq_a,\n  input wire ext_irq_a,\n  input wire sft_irq_a,\n  input wire tmr_irq_a,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [E203_ITCM_ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  input wire ext2dtcm_icb_cmd_valid,\n  output wire ext2dtcm_icb_cmd_ready,\n  input wire [E203_DTCM_ADDR_WIDTH-1:0] ext2dtcm_icb_cmd_addr,\n  input wire ext2dtcm_icb_cmd_read,\n  input wire [E203_XLEN-1:0] ext2dtcm_icb_cmd_wdata,\n  input wire [E203_XLEN/8-1:0] ext2dtcm_icb_cmd_wmask,\n  output wire ext2dtcm_icb_rsp_valid,\n  input wire ext2dtcm_icb_rsp_ready,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input wire ppi_icb_enable,\n  output wire ppi_icb_cmd_valid,\n  input wire ppi_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  input wire ppi_icb_rsp_valid,\n  output wire ppi_icb_rsp_ready,\n  input wire ppi_icb_rsp_err,\n  input wire ppi_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input wire clint_icb_enable,\n  output wire clint_icb_cmd_valid,\n  input wire clint_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  input wire clint_icb_rsp_valid,\n  output wire clint_icb_rsp_ready,\n  input wire clint_icb_rsp_err,\n  input wire clint_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] clint_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input wire plic_icb_enable,\n  output wire plic_icb_cmd_valid,\n  input wire plic_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  input wire plic_icb_rsp_valid,\n  output wire plic_icb_rsp_ready,\n  input wire plic_icb_rsp_err,\n  input wire plic_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] plic_icb_rsp_rdata,\n  input wire [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input wire fio_icb_enable,\n  output wire fio_icb_cmd_valid,\n  input wire fio_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  input wire fio_icb_rsp_valid,\n  output wire fio_icb_rsp_ready,\n  input wire fio_icb_rsp_err,\n  input wire fio_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] fio_icb_rsp_rdata,\n  input wire mem_icb_enable,\n  output wire mem_icb_cmd_valid,\n  input wire mem_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  input wire mem_icb_rsp_valid,\n  output wire mem_icb_rsp_ready,\n  input wire mem_icb_rsp_err,\n  input wire mem_icb_rsp_excl_ok,\n  input wire [E203_XLEN-1:0] mem_icb_rsp_rdata,\n  input wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire inspect_dbg_irq,\n  output wire inspect_mem_cmd_valid,\n  output wire inspect_mem_cmd_ready,\n  output wire inspect_mem_rsp_valid,\n  output wire inspect_mem_rsp_ready,\n  output wire inspect_core_clk,\n  output wire core_csr_clk,\n  output wire rst_itcm,\n  output wire rst_dtcm,\n  output wire core_wfi,\n  output wire tm_stop,\n  output wire [E203_PC_SIZE-1:0] cmt_dpc,\n  output wire cmt_dpc_ena,\n  output wire [2:0] cmt_dcause,\n  output wire cmt_dcause_ena,\n  output wire dbg_irq_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  output wire [31:0] wr_csr_nxt,\n  output wire ext2itcm_icb_cmd_ready,\n  output wire ext2itcm_icb_rsp_valid,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2itcm_icb_rsp_rdata,\n  output wire ext2dtcm_icb_cmd_ready,\n  output wire ext2dtcm_icb_rsp_valid,\n  output wire ext2dtcm_icb_rsp_err,\n  output wire [E203_XLEN-1:0] ext2dtcm_icb_rsp_rdata,\n  output wire ppi_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output wire ppi_icb_cmd_read,\n  output wire [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  output wire ppi_icb_cmd_lock,\n  output wire ppi_icb_cmd_excl,\n  output wire [1:0] ppi_icb_cmd_size,\n  output wire ppi_icb_rsp_ready,\n  output wire clint_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  output wire clint_icb_cmd_read,\n  output wire [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  output wire clint_icb_cmd_lock,\n  output wire clint_icb_cmd_excl,\n  output wire [1:0] clint_icb_cmd_size,\n  output wire clint_icb_rsp_ready,\n  output wire plic_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  output wire plic_icb_cmd_read,\n  output wire [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  output wire plic_icb_cmd_lock,\n  output wire plic_icb_cmd_excl,\n  output wire [1:0] plic_icb_cmd_size,\n  output wire plic_icb_rsp_ready,\n  output wire fio_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  output wire fio_icb_cmd_read,\n  output wire [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  output wire fio_icb_cmd_lock,\n  output wire fio_icb_cmd_excl,\n  output wire [1:0] fio_icb_cmd_size,\n  output wire fio_icb_rsp_ready,\n  output wire mem_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  output wire mem_icb_cmd_read,\n  output wire [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  output wire [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  output wire mem_icb_cmd_lock,\n  output wire mem_icb_cmd_excl,\n  output wire [1:0] mem_icb_cmd_size,\n  output wire mem_icb_rsp_ready,\n  output wire itcm_ls,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  output wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire clk_itcm_ram,\n  output wire dtcm_ls,\n  output wire dtcm_ram_cs,\n  output wire dtcm_ram_we,\n  output wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  output wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire clk_dtcm_ram\n);\n  // Module instantiations and internal logic here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 16, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  input wire itcm_nohold,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n`ifdef E203_TIMING_BOOST\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n`endif\n`ifdef E203_HAS_ITCM\n  input wire ifu2itcm_holdup,\n  input wire [E203_ADDR_SIZE-1:0] itcm_region_indic,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n`endif\n`ifdef E203_HAS_MEM_ITF\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n`endif\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n// Module implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 12, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n        end\n    endgenerate\n\n    wire rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon  = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 12, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  // State register\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State transition logic\n  always @ (posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= ICB_STATE_IDLE;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  // State transition conditions\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_valid;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_rsp_ready;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu2biu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && ifu_rsp_ready;\n\n  // Next state logic\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (ifu_req_valid ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         state_2nd_exit_ena ? (ifu_req_valid ? ICB_STATE_1ST : ICB_STATE_IDLE) :\n                         icb_state;\n\n  // Output logic\n  assign ifu_req_ready = icb_state == ICB_STATE_IDLE || icb_state == ICB_STATE_2ND;\n  assign ifu_rsp_valid = icb_state == ICB_STATE_1ST || icb_state == ICB_STATE_2ND;\n  assign ifu_rsp_err = ifu2itcm_icb_rsp_err || ifu2biu_icb_rsp_err;\n  assign ifu_rsp_instr = ifu2itcm_icb_rsp_rdata[31:0];\n\n  // ITCM interface\n  assign ifu2itcm_icb_cmd_valid = icb_state == ICB_STATE_1ST;\n  assign ifu2itcm_icb_cmd_addr = ifu_req_pc[ITCM_ADDR_WIDTH-1:0];\n  assign ifu2itcm_icb_rsp_ready = ifu_rsp_ready;\n\n  // System memory interface\n  assign ifu2biu_icb_cmd_valid = icb_state == ICB_STATE_2ND;\n  assign ifu2biu_icb_cmd_addr = ifu_req_pc[ADDR_SIZE-1:0];\n  assign ifu2biu_icb_rsp_ready = ifu_rsp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 13, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon  = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 16, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n  assign x1_r = regfile[1];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 17, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 14, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\nsirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 18, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 18, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file array\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic if needed\n    end else if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 19, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0] read_src1_dat,\n  output [E203_XLEN-1:0] read_src2_dat,\n  input  wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0] wbck_dest_dat,\n  output [E203_XLEN-1:0] x1_r,\n  input  test_mode,\n  input  clk,\n  input  rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = regfile[read_src1_idx];\n  assign read_src2_dat = regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk) begin\n    if (wbck_dest_wen && wbck_dest_idx != 0) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 15, "code": "module e203_itcm_ram (\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [E203_ITCM_RAM_AW-1:0] addr,\n  input [E203_ITCM_RAM_MW-1:0] wem,\n  input [E203_ITCM_RAM_DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 18, "code": "module e203_irq_sync (\n    input wire clk,\n    input wire rst_n,\n    input wire ext_irq_a,\n    input wire sft_irq_a,\n    input wire tmr_irq_a,\n    input wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // External Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Software Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Timer Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Debug Interrupt Synchronizer\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 16, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 19, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign longp_wbck_i_ready = 1'b1;\n  assign alu_wbck_i_ready = ~longp_wbck_i_valid;\n\n  assign wbck_i_valid = longp_wbck_i_valid ? longp_wbck_i_valid : alu_wbck_i_valid;\n  assign wbck_i_wdat = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign rf_wbck_o_ena = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 13, "code": "module e203_ifu_ift2icb (\n  input  wire          itcm_nohold,\n  input  wire          ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire          ifu_req_seq,\n  input  wire          ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire          ifu_rsp_ready,\n  input  wire          clk,\n  input  wire          rst_n,\n  output wire          ifu_req_ready,\n  output wire          ifu_rsp_valid,\n  output wire          ifu_rsp_err,\n  output wire [31:0]   ifu_rsp_instr,\n  output wire          ifu2itcm_icb_cmd_valid,\n  input  wire          ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire          ifu2itcm_icb_rsp_valid,\n  output wire          ifu2itcm_icb_rsp_ready,\n  input  wire          ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire          ifu2biu_icb_cmd_valid,\n  input  wire          ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire          ifu2biu_icb_rsp_valid,\n  output wire          ifu2biu_icb_rsp_ready,\n  input  wire          ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and state machine declarations\n  // ...\n\n  // State machine logic\n  // ...\n\n  // Bypass buffer logic\n  // ...\n\n  // Lane operation logic\n  // ...\n\n  // Request feature registering logic\n  // ...\n\n  // Leftover buffer logic\n  // ...\n\n  // Response generation logic\n  // ...\n\n  // ICB command generation logic\n  // ...\n\n  // Handshake control logic\n  // ...\n\n  // Data alignment logic\n  // ...\n\n  // ICB response merge logic\n  // ...\n\n  // ICB request distribution logic\n  // ...\n\n  // System memory interface logic\n  // ...\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 17, "code": "module e203_itcm_ram #(\n  parameter FORCE_X2ZERO = 0,\n  parameter DP = E203_ITCM_RAM_DP,\n  parameter DW = E203_ITCM_RAM_DW,\n  parameter MW = E203_ITCM_RAM_MW,\n  parameter AW = E203_ITCM_RAM_AW\n)(\n  input sd,\n  input ds,\n  input ls,\n  input cs,\n  input we,\n  input [AW-1:0] addr,\n  input [MW-1:0] wem,\n  input [DW-1:0] din,\n  input rst_n,\n  input clk,\n  output [DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(FORCE_X2ZERO),\n    .DP(DP),\n    .DW(DW),\n    .MW(MW),\n    .AW(AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 18, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 14, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency and wait logic\n  assign jalr_rs1xn_dep = ~oitf_empty | ~ir_empty;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr | ~ir_rs1en;\n  assign bpu_wait = (dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1idx_cam_irrdidx) |\n                    (dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr);\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else if (rs1xn_rdrf_ena)\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 14, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon  = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 19, "code": "module e203_itcm_ram (\n  input wire sd,\n  input wire ds,\n  input wire ls,\n  input wire cs,\n  input wire we,\n  input wire [E203_ITCM_RAM_AW-1:0] addr,\n  input wire [E203_ITCM_RAM_MW-1:0] wem,\n  input wire [E203_ITCM_RAM_DW-1:0] din,\n  input wire rst_n,\n  input wire clk,\n  output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n  ) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 15, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency logic\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr | ~ir_rs1en;\n\n  // Read state machine\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else if (rs1xn_rdrf_ena)\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\n  // Output signals\n  assign bpu_wait = rs1xn_rdrf_r;\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 15, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 14, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n// Internal signals and logic implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 16, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon  = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 17, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire async_rst;\n\n    assign async_rst = ~rst_n;\n\n    always @(posedge clk or posedge async_rst) begin\n        if (async_rst) begin\n            rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n        end else begin\n            rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n        end\n    end\n\n    wire sync_rst = rst_sync[RST_SYNC_LEVEL-1];\n\n    assign rst_core = test_mode ? async_rst : sync_rst;\n    assign rst_itcm = test_mode ? async_rst : sync_rst;\n    assign rst_dtcm = test_mode ? async_rst : sync_rst;\n    assign rst_aon = test_mode ? async_rst : sync_rst;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ram", "codeid": 20, "code": "module e203_itcm_ram (\n    input wire sd,\n    input wire ds,\n    input wire ls,\n    input wire cs,\n    input wire we,\n    input wire [E203_ITCM_RAM_AW-1:0] addr,\n    input wire [E203_ITCM_RAM_MW-1:0] wem,\n    input wire [E203_ITCM_RAM_DW-1:0] din,\n    input wire rst_n,\n    input wire clk,\n    output wire [E203_ITCM_RAM_DW-1:0] dout\n);\n\nsirv_gnrl_ram #(\n    .FORCE_X2ZERO(0),\n    .DP(E203_ITCM_RAM_DP),\n    .DW(E203_ITCM_RAM_DW),\n    .MW(E203_ITCM_RAM_MW),\n    .AW(E203_ITCM_RAM_AW)\n) u_203_itcm_gnrl_ram (\n    .sd(sd),\n    .ds(ds),\n    .ls(ls),\n    .rst_n(rst_n),\n    .clk(clk),\n    .cs(cs),\n    .we(we),\n    .addr(addr),\n    .din(din),\n    .wem(wem),\n    .dout(dout)\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 19, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 15, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin : u_e203_itcm_ram\n      // ITCM RAM module instantiation\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin : u_e203_dtcm_ram\n      // DTCM RAM module instantiation\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 18, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n) begin\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                end else begin\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n                end\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_irq_sync", "codeid": 20, "code": "module e203_irq_sync (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire ext_irq_a,\n    input  wire sft_irq_a,\n    input  wire tmr_irq_a,\n    input  wire dbg_irq_a,\n    output wire ext_irq_r,\n    output wire sft_irq_r,\n    output wire tmr_irq_r,\n    output wire dbg_irq_r\n);\n\n    // Synchronizer for external interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_ext_irq_sync (\n        .din_a(ext_irq_a),\n        .dout(ext_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Synchronizer for software interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_sft_irq_sync (\n        .din_a(sft_irq_a),\n        .dout(sft_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Synchronizer for timer interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_tmr_irq_sync (\n        .din_a(tmr_irq_a),\n        .dout(tmr_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\n    // Synchronizer for debug interrupt\n    sirv_gnrl_sync #(\n        .DP(2),\n        .DW(1)\n    ) u_dbg_irq_sync (\n        .din_a(dbg_irq_a),\n        .dout(dbg_irq_r),\n        .rst_n(rst_n),\n        .clk(clk)\n    );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 18, "code": "module e203_ifu_minidec #(\n    parameter E203_INSTR_SIZE = 32,\n    parameter E203_RFIDX_WIDTH = 5,\n    parameter E203_XLEN = 32\n)(\n    input  [E203_INSTR_SIZE-1:0] instr,\n    output dec_rs1en,\n    output dec_rs2en,\n    output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n    output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n    output dec_mulhsu,\n    output dec_mul,\n    output dec_div,\n    output dec_rem,\n    output dec_divu,\n    output dec_remu,\n    output dec_rv32,\n    output dec_bjp,\n    output dec_jal,\n    output dec_jalr,\n    output dec_bxx,\n    output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n    output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n    // Internal signals\n    wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n    wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n    wire [E203_XLEN-1:0] bjp_imm;\n    wire rs1en, rs2en, mulhsu, mul, div, rem, divu, remu, rv32, bjp, jal, jalr, bxx;\n\n    // Instantiate the internal decoder module\n    e203_exu_decode u_e203_exu_decode (\n        .i_instr(instr),\n        .i_pc(0),\n        .i_prdt_taken(0),\n        .i_muldiv_b2b(0),\n        .i_misalgn(0),\n        .i_buserr(0),\n        .dbg_mode(0),\n        .dec_rs1en(rs1en),\n        .dec_rs2en(rs2en),\n        .dec_rs1idx(rs1idx),\n        .dec_rs2idx(rs2idx),\n        .dec_mulhsu(mulhsu),\n        .dec_mul(mul),\n        .dec_div(div),\n        .dec_rem(rem),\n        .dec_divu(divu),\n        .dec_remu(remu),\n        .dec_rv32(rv32),\n        .dec_bjp(bjp),\n        .dec_jal(jal),\n        .dec_jalr(jalr),\n        .dec_bxx(bxx),\n        .dec_jalr_rs1idx(dec_jalr_rs1idx),\n        .dec_bjp_imm(bjp_imm)\n    );\n\n    // Connect internal signals to output ports\n    assign dec_rs1en = rs1en;\n    assign dec_rs2en = rs2en;\n    assign dec_rs1idx = rs1idx;\n    assign dec_rs2idx = rs2idx;\n    assign dec_mulhsu = mulhsu;\n    assign dec_mul = mul;\n    assign dec_div = div;\n    assign dec_rem = rem;\n    assign dec_divu = divu;\n    assign dec_remu = remu;\n    assign dec_rv32 = rv32;\n    assign dec_bjp = bjp;\n    assign dec_jal = jal;\n    assign dec_jalr = jalr;\n    assign dec_bxx = bxx;\n    assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 16, "code": "module e203_ifu_litebpu (\n  input wire clk,\n  input wire rst_n,\n  input wire [E203_PC_SIZE-1:0] pc,\n  input wire dec_jal,\n  input wire dec_jalr,\n  input wire dec_bxx,\n  input wire [E203_XLEN-1:0] dec_bjp_imm,\n  input wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input wire oitf_empty,\n  input wire ir_empty,\n  input wire ir_rs1en,\n  input wire jalr_rs1idx_cam_irrdidx,\n  input wire dec_i_valid,\n  input wire ir_valid_clr,\n  input wire [E203_XLEN-1:0] rf2bpu_x1,\n  input wire [E203_XLEN-1:0] rf2bpu_rs1,\n  output wire prdt_taken,\n  output wire [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output wire [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output wire bpu_wait,\n  output wire bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  wire rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculations\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency detection\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // Read state management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Trigger module\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Control signals\n  assign bpu_wait = dec_jalr & jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr;\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 19, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = E203_ASYNC_FF_LEVELS\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_excp", "codeid": 20, "code": "module e203_exu_excp (\n  output commit_trap,\n  output core_wfi,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input amo_wait,\n  input alu_excp_i_valid,\n  input alu_excp_i_ld,\n  input alu_excp_i_stamo,\n  input alu_excp_i_misalgn,\n  input alu_excp_i_buserr,\n  input alu_excp_i_ecall,\n  input alu_excp_i_ebreak,\n  input alu_excp_i_wfi,\n  input alu_excp_i_ifu_misalgn,\n  input alu_excp_i_ifu_buserr,\n  input alu_excp_i_ifu_ilegl,\n  input [E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input alu_excp_i_pc_vld,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input longp_excp_i_insterr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input excpirq_flush_ack,\n  output excpirq_flush_req,\n  output nonalu_excpirq_flush_req_raw,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op1,\n  output [E203_PC_SIZE-1:0] excpirq_flush_add_op2,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input cmt_dret_ena,\n  input cmt_ena,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_badaddr_ena,\n  output cmt_epc_ena,\n  output cmt_cause_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output excp_active,\n  input clk,\n  input rst_n\n);\n\n// Module implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_wbck", "codeid": 20, "code": "module e203_exu_wbck (\n  input  wire                 alu_wbck_i_valid,\n  output wire                 alu_wbck_i_ready,\n  input  wire [E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  wire [E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_valid,\n  output wire                 longp_wbck_i_ready,\n  input  wire [E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  wire [4:0]           longp_wbck_i_flags,\n  input  wire [E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  wire                 longp_wbck_i_rdfpu,\n  output wire                 rf_wbck_o_ena,\n  output wire [E203_XLEN-1:0] rf_wbck_o_wdat,\n  output wire [E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n  input  wire                 clk,\n  input  wire                 rst_n\n);\n\n  wire wbck_i_valid;\n  wire wbck_i_ready;\n  wire [E203_XLEN-1:0] wbck_i_wdat;\n  wire [E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign wbck_i_valid = longp_wbck_i_valid | alu_wbck_i_valid;\n  assign wbck_i_ready = rf_wbck_o_ena;\n  assign wbck_i_wdat  = longp_wbck_i_valid ? longp_wbck_i_wdat : alu_wbck_i_wdat;\n  assign wbck_i_rdidx = longp_wbck_i_valid ? longp_wbck_i_rdidx : alu_wbck_i_rdidx;\n  assign wbck_i_rdfpu = longp_wbck_i_valid ? longp_wbck_i_rdfpu : 1'b0;\n\n  assign longp_wbck_i_ready = rf_wbck_o_ena & longp_wbck_i_valid;\n  assign alu_wbck_i_ready   = rf_wbck_o_ena & ~longp_wbck_i_valid;\n\n  assign rf_wbck_o_ena   = wbck_i_valid & ~wbck_i_rdfpu;\n  assign rf_wbck_o_wdat  = wbck_i_wdat;\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 16, "code": "module e203_srams (\n  input  wire        itcm_ram_sd,\n  input  wire        itcm_ram_ds,\n  input  wire        itcm_ram_ls,\n  input  wire        itcm_ram_cs,\n  input  wire        itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire        clk_itcm_ram,\n  input  wire        rst_itcm,\n\n  input  wire        dtcm_ram_sd,\n  input  wire        dtcm_ram_ds,\n  input  wire        dtcm_ram_ls,\n  input  wire        dtcm_ram_cs,\n  input  wire        dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire        clk_dtcm_ram,\n  input  wire        rst_dtcm\n);\n\n  generate\n    if (E203_HAS_ITCM) begin: itcm\n      e203_itcm_ram u_e203_itcm_ram (\n        .sd   (itcm_ram_sd),\n        .ds   (itcm_ram_ds),\n        .ls   (itcm_ram_ls),\n        .cs   (itcm_ram_cs),\n        .we   (itcm_ram_we),\n        .addr (itcm_ram_addr),\n        .wem  (itcm_ram_wem),\n        .din  (itcm_ram_din),\n        .dout (itcm_ram_dout),\n        .clk  (clk_itcm_ram),\n        .rst_n(rst_itcm)\n      );\n    end\n  endgenerate\n\n  generate\n    if (E203_HAS_DTCM) begin: dtcm\n      e203_dtcm_ram u_e203_dtcm_ram (\n        .sd   (dtcm_ram_sd),\n        .ds   (dtcm_ram_ds),\n        .ls   (dtcm_ram_ls),\n        .cs   (dtcm_ram_cs),\n        .we   (dtcm_ram_we),\n        .addr (dtcm_ram_addr),\n        .wem  (dtcm_ram_wem),\n        .din  (dtcm_ram_din),\n        .dout (dtcm_ram_dout),\n        .clk  (clk_dtcm_ram),\n        .rst_n(rst_dtcm)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_regfile", "codeid": 20, "code": "module e203_exu_regfile (\n  input  [E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [E203_XLEN-1:0]        read_src1_dat,\n  output [E203_XLEN-1:0]        read_src2_dat,\n  input                         wbck_dest_wen,\n  input  [E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [E203_XLEN-1:0]        wbck_dest_dat,\n  output [E203_XLEN-1:0]        x1_r,\n  input                         test_mode,\n  input                         clk,\n  input                         rst_n\n);\n\n  // Register file implementation\n  reg [E203_XLEN-1:0] regfile [0:E203_RFREG_NUM-1];\n\n  // Read logic\n  assign read_src1_dat = (read_src1_idx == 0) ? 0 : regfile[read_src1_idx];\n  assign read_src2_dat = (read_src2_idx == 0) ? 0 : regfile[read_src2_idx];\n\n  // Write logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      // Reset logic (if needed)\n    end else if (wbck_dest_wen && (wbck_dest_idx != 0)) begin\n      regfile[wbck_dest_idx] <= wbck_dest_dat;\n    end\n  end\n\n  // Output for register x1\n  assign x1_r = regfile[1];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 15, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and registers\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n  wire icb_sta_is_idle;\n  wire icb_sta_is_1st;\n  wire icb_sta_is_wait2nd;\n  wire icb_sta_is_2nd;\n\n  // State machine implementation\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 2'b00;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  assign icb_sta_is_idle = (icb_state == 2'b00);\n  assign icb_sta_is_1st = (icb_state == 2'b01);\n  assign icb_sta_is_wait2nd = (icb_state == 2'b10);\n  assign icb_sta_is_2nd = (icb_state == 2'b11);\n\n  // State transition logic\n  always @(*) begin\n    case (icb_state)\n      2'b00: begin\n        if (ifu_req_valid) begin\n          icb_state_nxt = 2'b01;\n        end else begin\n          icb_state_nxt = 2'b00;\n        end\n      end\n      2'b01: begin\n        if (ifu_rsp_ready) begin\n          icb_state_nxt = 2'b10;\n        end else begin\n          icb_state_nxt = 2'b01;\n        end\n      end\n      2'b10: begin\n        if (ifu2itcm_icb_cmd_ready) begin\n          icb_state_nxt = 2'b11;\n        end else begin\n          icb_state_nxt = 2'b10;\n        end\n      end\n      2'b11: begin\n        if (ifu_rsp_ready) begin\n          icb_state_nxt = 2'b00;\n        end else begin\n          icb_state_nxt = 2'b11;\n        end\n      end\n      default: icb_state_nxt = 2'b00;\n    endcase\n  end\n\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n\n  // Output logic\n  assign ifu_req_ready = icb_sta_is_idle;\n  assign ifu_rsp_valid = icb_sta_is_2nd;\n  assign ifu_rsp_err = 1'b0; // Placeholder\n  assign ifu_rsp_instr = 32'h0; // Placeholder\n\n  // ITCM interface\n  assign ifu2itcm_icb_cmd_valid = icb_sta_is_1st;\n  assign ifu2itcm_icb_cmd_addr = ifu_req_pc;\n  assign ifu2itcm_icb_rsp_ready = icb_sta_is_2nd;\n\n  // System memory interface\n  assign ifu2biu_icb_cmd_valid = icb_sta_is_1st;\n  assign ifu2biu_icb_cmd_addr = ifu_req_pc;\n  assign ifu2biu_icb_rsp_ready = icb_sta_is_2nd;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 17, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\ngenerate\n  if (E203_HAS_ITCM) begin: u_e203_itcm_ram\n    // ITCM RAM instantiation\n  end\nendgenerate\n\ngenerate\n  if (E203_HAS_DTCM) begin: u_e203_dtcm_ram\n    // DTCM RAM instantiation\n  end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 15, "code": "module e203_lsu(\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  input  wire nice_mem_holdup,\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_reset_ctrl", "codeid": 20, "code": "module e203_reset_ctrl #(\n    parameter MASTER = 1,\n    parameter RST_SYNC_LEVEL = 2\n)(\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    output wire rst_core,\n    output wire rst_itcm,\n    output wire rst_dtcm,\n    output wire rst_aon\n);\n\n    reg [RST_SYNC_LEVEL-1:0] rst_sync;\n    wire rst_sync_n;\n\n    generate\n        if (MASTER) begin\n            always @(posedge clk or negedge rst_n) begin\n                if (!rst_n)\n                    rst_sync <= {RST_SYNC_LEVEL{1'b1}};\n                else\n                    rst_sync <= {rst_sync[RST_SYNC_LEVEL-2:0], 1'b0};\n            end\n            assign rst_sync_n = rst_sync[RST_SYNC_LEVEL-1];\n        end else begin\n            assign rst_sync_n = rst_n;\n        end\n    endgenerate\n\n    assign rst_core = test_mode ? rst_n : rst_sync_n;\n    assign rst_itcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_dtcm = test_mode ? rst_n : rst_sync_n;\n    assign rst_aon = test_mode ? rst_n : rst_sync_n;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 17, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // JAL prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // JALR dependency logic\n  assign jalr_rs1xn_dep = ~oitf_empty & jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // RS1 read state machine\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // RS1 read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  // Prediction PC calculation\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc : \n                           (dec_jalr_rs1idx == 0) ? 0 : \n                           (dec_jalr_rs1idx == 1) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // BPU wait logic\n  assign bpu_wait = (dec_jalr & jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr);\n\n  // State update\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      rs1xn_rdrf_r <= 1'b0;\n    end else if (rs1xn_rdrf_ena) begin\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n    end\n  end\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 13, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 18, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculation\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc : \n                           (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 : \n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency check\n  assign jalr_rs1xn_dep = ~oitf_empty | (ir_rs1en & jalr_rs1idx_cam_irrdidx);\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n\n  // State machine for rs1 read\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & \n                          (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & \n                          (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Register read enable\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  // Wait signal\n  assign bpu_wait = dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & jalr_rs1xn_dep;\n\n  // State update\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 18, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\ngenerate\n  if (E203_HAS_ITCM) begin: itcm_block\n    e203_itcm_ram u_e203_itcm_ram (\n      .sd(itcm_ram_sd),\n      .ds(itcm_ram_ds),\n      .ls(itcm_ram_ls),\n      .cs(itcm_ram_cs),\n      .we(itcm_ram_we),\n      .addr(itcm_ram_addr),\n      .wem(itcm_ram_wem),\n      .din(itcm_ram_din),\n      .dout(itcm_ram_dout),\n      .clk(clk_itcm_ram),\n      .rst_n(rst_itcm)\n    );\n  end\n\n  if (E203_HAS_DTCM) begin: dtcm_block\n    e203_dtcm_ram u_e203_dtcm_ram (\n      .sd(dtcm_ram_sd),\n      .ds(dtcm_ram_ds),\n      .ls(dtcm_ram_ls),\n      .cs(dtcm_ram_cs),\n      .we(dtcm_ram_we),\n      .addr(dtcm_ram_addr),\n      .wem(dtcm_ram_wem),\n      .din(dtcm_ram_din),\n      .dout(dtcm_ram_dout),\n      .clk(clk_dtcm_ram),\n      .rst_n(rst_dtcm)\n    );\n  end\nendgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 19, "code": "module e203_srams (\n  input itcm_ram_sd,\n  input itcm_ram_ds,\n  input itcm_ram_ls,\n  input itcm_ram_cs,\n  input itcm_ram_we,\n  input [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input clk_itcm_ram,\n  input rst_itcm,\n\n  input dtcm_ram_sd,\n  input dtcm_ram_ds,\n  input dtcm_ram_ls,\n  input dtcm_ram_cs,\n  input dtcm_ram_we,\n  input [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input clk_dtcm_ram,\n  input rst_dtcm\n);\n\n  // ITCM RAM instantiation\n  generate\n    if (E203_HAS_ITCM) begin : u_e203_itcm_ram\n      // ITCM RAM logic here\n    end\n  endgenerate\n\n  // DTCM RAM instantiation\n  generate\n    if (E203_HAS_DTCM) begin : u_e203_dtcm_ram\n      // DTCM RAM logic here\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 14, "code": "module e203_itcm_ctrl (\n  input wire clk,\n  input wire rst_n,\n  input wire test_mode,\n  input wire tcm_cgstop,\n  output wire itcm_active,\n  input wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input wire lsu2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input wire ext2itcm_icb_cmd_read,\n  input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 15, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals and module instances go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 19, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n\n  // Operand calculation\n  assign prdt_pc_add_op1 = (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 :\n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 :\n                           (dec_jalr) ? rf2bpu_rs1 : pc;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency and wait logic\n  assign jalr_rs1xn_dep = ~oitf_empty & ~ir_empty & ir_rs1en & ~jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n  assign bpu_wait = dec_jalr & (jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr);\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & (dec_jalr_rs1idx != 1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      rs1xn_rdrf_r <= 1'b0;\n    else if (rs1xn_rdrf_ena)\n      rs1xn_rdrf_r <= rs1xn_rdrf_nxt;\n  end\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 16, "code": "module e203_lsu (\n  input wire commit_mret,\n  input wire commit_trap,\n  input wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input wire agu_icb_cmd_read,\n  input wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input wire agu_icb_cmd_lock,\n  input wire agu_icb_cmd_excl,\n  input wire [1:0] agu_icb_cmd_size,\n  input wire agu_icb_cmd_back2agu,\n  input wire agu_icb_cmd_usign,\n  input wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input wire nice_mem_holdup,\n  input wire [ADDR_SIZE-1:0] itcm_region_indic,\n  input wire [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output wire *_icb_cmd_valid,\n  input wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input wire *_icb_rsp_err,\n  input wire *_icb_rsp_excl_ok,\n  input wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n  // Internal logic for LSU\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 19, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire [E203_RFIDX_WIDTH-1:0] rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] rs2idx;\n  wire mulhsu, mul, div, rem, divu, remu;\n  wire rv32, bjp, jal, jalr, bxx;\n  wire [E203_RFIDX_WIDTH-1:0] jalr_rs1idx;\n  wire [E203_XLEN-1:0] bjp_imm;\n\n  // Instantiate the internal decoder module\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(0),\n    .i_prdt_taken(0),\n    .i_muldiv_b2b(0),\n    .i_misalgn(0),\n    .i_buserr(0),\n    .dbg_mode(0),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(rs1idx),\n    .dec_rs2idx(rs2idx),\n    .dec_mulhsu(mulhsu),\n    .dec_mul(mul),\n    .dec_div(div),\n    .dec_rem(rem),\n    .dec_divu(divu),\n    .dec_remu(remu),\n    .dec_rv32(rv32),\n    .dec_bjp(bjp),\n    .dec_jal(jal),\n    .dec_jalr(jalr),\n    .dec_bxx(bxx),\n    .dec_jalr_rs1idx(jalr_rs1idx),\n    .dec_bjp_imm(bjp_imm)\n  );\n\n  // Connect internal signals to outputs\n  assign dec_rs1idx = rs1idx;\n  assign dec_rs2idx = rs2idx;\n  assign dec_mulhsu = mulhsu;\n  assign dec_mul = mul;\n  assign dec_div = div;\n  assign dec_rem = rem;\n  assign dec_divu = divu;\n  assign dec_remu = remu;\n  assign dec_rv32 = rv32;\n  assign dec_bjp = bjp;\n  assign dec_jal = jal;\n  assign dec_jalr = jalr;\n  assign dec_bxx = bxx;\n  assign dec_jalr_rs1idx = jalr_rs1idx;\n  assign dec_bjp_imm = bjp_imm;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_csr", "codeid": 20, "code": "module e203_exu_csr (\n  input wire nonflush_cmt_ena, // not used\n  input wire csr_ena,\n  input wire csr_wr_en,\n  input wire csr_rd_en,\n  input wire [11:0] csr_idx,\n  output wire csr_access_ilgl,\n  output wire tm_stop,\n  output wire core_cgstop,\n  output wire tcm_cgstop,\n  output wire itcm_nohold,\n  output wire mdv_nob2b,\n  output wire [E203_XLEN-1:0] read_csr_dat,\n  input wire [E203_XLEN-1:0] wbck_csr_dat,\n  input wire [E203_HART_ID_W-1:0] core_mhartid,\n  input wire ext_irq_r,\n  input wire sft_irq_r,\n  input wire tmr_irq_r,\n  output wire status_mie_r,\n  output wire mtie_r,\n  output wire msie_r,\n  output wire meie_r,\n  output wire wr_dcsr_ena,\n  output wire wr_dpc_ena,\n  output wire wr_dscratch_ena,\n  input wire [E203_XLEN-1:0] dcsr_r,\n  input wire [E203_PC_SIZE-1:0] dpc_r,\n  input wire [E203_XLEN-1:0] dscratch_r,\n  output wire u_mode,\n  output wire s_mode,\n  output wire h_mode,\n  output wire m_mode,\n  input wire [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input wire cmt_badaddr_ena,\n  input wire [E203_PC_SIZE-1:0] cmt_epc,\n  input wire cmt_epc_ena,\n  input wire [E203_XLEN-1:0] cmt_cause,\n  input wire cmt_cause_ena,\n  input wire cmt_status_ena,\n  input wire cmt_instret_ena,\n  input wire cmt_mret_ena,\n  output wire [E203_PC_SIZE-1:0] csr_epc_r,\n  output wire [E203_PC_SIZE-1:0] csr_dpc_r,\n  output wire [E203_XLEN-1:0] csr_mtvec_r,\n  input wire clk_aon,\n  input wire clk,\n  input wire rst_n\n  // Optional Interface\n`ifdef E203_HAS_NICE\n  , output wire nice_xs_off\n`endif\n);\n\n  // Internal signals and registers\n  reg [E203_XLEN-1:0] mstatus;\n  reg [E203_XLEN-1:0] mie;\n  reg [E203_XLEN-1:0] mip;\n  reg [E203_XLEN-1:0] mtvec;\n  reg [E203_XLEN-1:0] mscratch;\n  reg [E203_PC_SIZE-1:0] mepc;\n  reg [E203_XLEN-1:0] mcause;\n  reg [E203_ADDR_SIZE-1:0] mbadaddr;\n  reg [E203_XLEN-1:0] mcycle;\n  reg [E203_XLEN-1:0] mcycleh;\n  reg [E203_XLEN-1:0] minstret;\n  reg [E203_XLEN-1:0] minstreth;\n  reg [E203_XLEN-1:0] counterstop;\n  reg [E203_XLEN-1:0] itcmnohold;\n  reg [E203_XLEN-1:0] mdvnob2b;\n  reg [E203_XLEN-1:0] mcgstop;\n\n  // CSR Access Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      mstatus <= 0;\n      mie <= 0;\n      mip <= 0;\n      mtvec <= 0;\n      mscratch <= 0;\n      mepc <= 0;\n      mcause <= 0;\n      mbadaddr <= 0;\n      mcycle <= 0;\n      mcycleh <= 0;\n      minstret <= 0;\n      minstreth <= 0;\n      counterstop <= 0;\n      itcmnohold <= 0;\n      mdvnob2b <= 0;\n      mcgstop <= 0;\n    end else if (csr_ena) begin\n      if (csr_wr_en) begin\n        case (csr_idx)\n          12'h300: mstatus <= wbck_csr_dat;\n          12'h304: mie <= wbck_csr_dat;\n          12'h305: mtvec <= wbck_csr_dat;\n          12'h340: mscratch <= wbck_csr_dat;\n          12'h341: mepc <= wbck_csr_dat;\n          12'h342: mcause <= wbck_csr_dat;\n          12'h343: mbadaddr <= wbck_csr_dat;\n          12'hB00: mcycle <= wbck_csr_dat;\n          12'hB80: mcycleh <= wbck_csr_dat;\n          12'hB02: minstret <= wbck_csr_dat;\n          12'hB82: minstreth <= wbck_csr_dat;\n          12'hBFF: counterstop <= wbck_csr_dat;\n          default: ;\n        endcase\n      end\n    end\n  end\n\n  // CSR Read Logic\n  always @(*) begin\n    case (csr_idx)\n      12'h300: read_csr_dat = mstatus;\n      12'h304: read_csr_dat = mie;\n      12'h305: read_csr_dat = mtvec;\n      12'h340: read_csr_dat = mscratch;\n      12'h341: read_csr_dat = mepc;\n      12'h342: read_csr_dat = mcause;\n      12'h343: read_csr_dat = mbadaddr;\n      12'hB00: read_csr_dat = mcycle;\n      12'hB80: read_csr_dat = mcycleh;\n      12'hB02: read_csr_dat = minstret;\n      12'hB82: read_csr_dat = minstreth;\n      12'hBFF: read_csr_dat = counterstop;\n      default: read_csr_dat = 0;\n    endcase\n  end\n\n  // Mode Signals\n  assign u_mode = 0;\n  assign s_mode = 0;\n  assign h_mode = 0;\n  assign m_mode = 1;\n\n  // Interrupt Enable Status\n  assign status_mie_r = mstatus[3];\n  assign mtie_r = mie[7];\n  assign msie_r = mie[3];\n  assign meie_r = mie[11];\n\n  // Debug Signals\n  assign wr_dcsr_ena = dbg_mode;\n  assign wr_dpc_ena = dbg_mode;\n  assign wr_dscratch_ena = dbg_mode;\n\n  // Optional NICE Interface\n`ifdef E203_HAS_NICE\n  assign nice_xs_off = 0;\n`endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 17, "code": "module e203_lsu (\n    input wire commit_mret,\n    input wire commit_trap,\n    input wire excp_active,\n    output wire lsu_active,\n    output wire lsu_o_valid,\n    input wire lsu_o_ready,\n    output wire [XLEN-1:0] lsu_o_wbck_wdat,\n    output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n    output wire lsu_o_wbck_err,\n    output wire lsu_o_cmt_ld,\n    output wire lsu_o_cmt_st,\n    output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n    output wire lsu_o_cmt_buserr,\n    input wire agu_icb_cmd_valid,\n    output wire agu_icb_cmd_ready,\n    input wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n    input wire agu_icb_cmd_read,\n    input wire [XLEN-1:0] agu_icb_cmd_wdata,\n    input wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n    input wire agu_icb_cmd_lock,\n    input wire agu_icb_cmd_excl,\n    input wire [1:0] agu_icb_cmd_size,\n    input wire agu_icb_cmd_back2agu,\n    input wire agu_icb_cmd_usign,\n    input wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n    output wire agu_icb_rsp_valid,\n    input wire agu_icb_rsp_ready,\n    output wire agu_icb_rsp_err,\n    output wire agu_icb_rsp_excl_ok,\n    output wire [XLEN-1:0] agu_icb_rsp_rdata,\n    input wire nice_mem_holdup,\n    input wire itcm_region_indic,\n    input wire dtcm_region_indic,\n    output wire *_icb_cmd_valid,\n    input wire *_icb_cmd_ready,\n    output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n    output wire *_icb_cmd_read,\n    output wire [XLEN-1:0] *_icb_cmd_wdata,\n    output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n    output wire *_icb_cmd_lock,\n    output wire *_icb_cmd_excl,\n    output wire [1:0] *_icb_cmd_size,\n    input wire *_icb_rsp_valid,\n    output wire *_icb_rsp_ready,\n    input wire *_icb_rsp_err,\n    input wire *_icb_rsp_excl_ok,\n    input wire [XLEN-1:0] *_icb_rsp_rdata\n);\n\n// Internal logic and module instantiation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_minidec", "codeid": 20, "code": "module e203_ifu_minidec #(\n  parameter E203_INSTR_SIZE = 32,\n  parameter E203_RFIDX_WIDTH = 5,\n  parameter E203_XLEN = 32\n)(\n  input  [E203_INSTR_SIZE-1:0] instr,\n  output dec_rs1en,\n  output dec_rs2en,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output dec_mulhsu,\n  output dec_mul,\n  output dec_div,\n  output dec_rem,\n  output dec_divu,\n  output dec_remu,\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [E203_XLEN-1:0] dec_bjp_imm\n);\n\n  // Internal signals\n  wire i_instr;\n  wire i_pc = 0;\n  wire i_prdt_taken = 0;\n  wire i_muldiv_b2b = 0;\n  wire i_misalgn = 0;\n  wire i_buserr = 0;\n  wire dbg_mode = 0;\n\n  // Instantiate the execution unit decoder\n  e203_exu_decode u_e203_exu_decode (\n    .i_instr(instr),\n    .i_pc(i_pc),\n    .i_prdt_taken(i_prdt_taken),\n    .i_muldiv_b2b(i_muldiv_b2b),\n    .i_misalgn(i_misalgn),\n    .i_buserr(i_buserr),\n    .dbg_mode(dbg_mode),\n    .dec_rs1en(dec_rs1en),\n    .dec_rs2en(dec_rs2en),\n    .dec_rs1idx(dec_rs1idx),\n    .dec_rs2idx(dec_rs2idx),\n    .dec_mulhsu(dec_mulhsu),\n    .dec_mul(dec_mul),\n    .dec_div(dec_div),\n    .dec_rem(dec_rem),\n    .dec_divu(dec_divu),\n    .dec_remu(dec_remu),\n    .dec_rv32(dec_rv32),\n    .dec_bjp(dec_bjp),\n    .dec_jal(dec_jal),\n    .dec_jalr(dec_jalr),\n    .dec_bxx(dec_bxx),\n    .dec_jalr_rs1idx(dec_jalr_rs1idx),\n    .dec_bjp_imm(dec_bjp_imm)\n    // Unused signals\n    // .dec_misalgn(),\n    // .dec_buserr(),\n    // .dec_ilegl(),\n    // .dec_rs1x0(),\n    // .dec_rs2x0(),\n    // .dec_rdwen(),\n    // .dec_rdidx(),\n    // .dec_info(),\n    // .dec_imm(),\n    // .dec_pc()\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 16, "code": "module e203_itcm_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire tcm_cgstop,\n    output wire itcm_active,\n    input wire ifu2itcm_icb_cmd_valid,\n    output wire ifu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n    input wire ifu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n    output wire ifu2itcm_icb_rsp_valid,\n    input wire ifu2itcm_icb_rsp_ready,\n    output wire ifu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n    input wire lsu2itcm_icb_cmd_valid,\n    output wire lsu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n    input wire lsu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n    output wire lsu2itcm_icb_rsp_valid,\n    input wire lsu2itcm_icb_rsp_ready,\n    output wire lsu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [RAM_AW-1:0] itcm_ram_addr,\n    output wire [RAM_MW-1:0] itcm_ram_wem,\n    output wire [RAM_DW-1:0] itcm_ram_din,\n    input wire [RAM_DW-1:0] itcm_ram_dout,\n    output wire clk_itcm_ram\n);\n\n// Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_disp", "codeid": 20, "code": "module e203_exu_disp (\n  input  wire                  wfi_halt_exu_req,\n  output wire                  wfi_halt_exu_ack,\n  input  wire                  oitf_empty,\n  input  wire                  amo_wait,\n  input  wire                  disp_i_valid,\n  output wire                  disp_i_ready,\n  input  wire                  disp_i_rs1x0,\n  input  wire                  disp_i_rs2x0,\n  input  wire                  disp_i_rs1en,\n  input  wire                  disp_i_rs2en,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  wire [E203_XLEN-1:0]  disp_i_rs1,\n  input  wire [E203_XLEN-1:0]  disp_i_rs2,\n  input  wire                  disp_i_rdwen,\n  input  wire [E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  wire [E203_DECINFO_WIDTH-1:0] disp_i_info,\n  input  wire [E203_XLEN-1:0]  disp_i_imm,\n  input  wire [E203_PC_SIZE-1:0] disp_i_pc,\n  input  wire                  disp_i_misalgn,\n  input  wire                  disp_i_buserr,\n  input  wire                  disp_i_ilegl,\n  output wire                  disp_o_alu_valid,\n  input  wire                  disp_o_alu_ready,\n  input  wire                  disp_o_alu_longpipe,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs1,\n  output wire [E203_XLEN-1:0]  disp_o_alu_rs2,\n  output wire                  disp_o_alu_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output wire [E203_DECINFO_WIDTH-1:0] disp_o_alu_info,\n  output wire [E203_XLEN-1:0]  disp_o_alu_imm,\n  output wire [E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output wire [E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output wire                  disp_o_alu_misalgn,\n  output wire                  disp_o_alu_buserr,\n  output wire                  disp_o_alu_ilegl,\n  input  wire                  oitfrd_match_disprs1,\n  input  wire                  oitfrd_match_disprs2,\n  input  wire                  oitfrd_match_disprs3,\n  input  wire                  oitfrd_match_disprd,\n  input  wire [E203_ITAG_WIDTH-1:0] disp_oitf_ptr,\n  output wire                  disp_oitf_ena,\n  input  wire                  disp_oitf_ready,\n  output wire                  disp_oitf_rs1fpu,\n  output wire                  disp_oitf_rs2fpu,\n  output wire                  disp_oitf_rs3fpu,\n  output wire                  disp_oitf_rdfpu,\n  output wire                  disp_oitf_rs1en,\n  output wire                  disp_oitf_rs2en,\n  output wire                  disp_oitf_rs3en,\n  output wire                  disp_oitf_rdwen,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output wire [E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx,\n  output wire [E203_PC_SIZE-1:0] disp_oitf_pc,\n  input  wire                  clk,\n  input  wire                  rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 18, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n  output wire *_icb_cmd_valid,\n  input  wire *_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] *_icb_cmd_addr,\n  output wire *_icb_cmd_read,\n  output wire [XLEN-1:0] *_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] *_icb_cmd_wmask,\n  output wire *_icb_cmd_lock,\n  output wire *_icb_cmd_excl,\n  output wire [1:0] *_icb_cmd_size,\n  input  wire *_icb_rsp_valid,\n  output wire *_icb_rsp_ready,\n  input  wire *_icb_rsp_err,\n  input  wire *_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] *_icb_rsp_rdata\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 17, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire [E203_PC_SIZE-1:0] pc_rtvec,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 16, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n\n  // Internal logic and submodule instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_litebpu", "codeid": 20, "code": "module e203_ifu_litebpu #(\n  parameter E203_PC_SIZE = 32,\n  parameter E203_XLEN = 32,\n  parameter E203_RFIDX_WIDTH = 5\n)(\n  input clk,\n  input rst_n,\n  input [E203_PC_SIZE-1:0] pc,\n  input dec_jal,\n  input dec_jalr,\n  input dec_bxx,\n  input [E203_XLEN-1:0] dec_bjp_imm,\n  input [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  input oitf_empty,\n  input ir_empty,\n  input ir_rs1en,\n  input jalr_rs1idx_cam_irrdidx,\n  input dec_i_valid,\n  input ir_valid_clr,\n  input [E203_XLEN-1:0] rf2bpu_x1,\n  input [E203_XLEN-1:0] rf2bpu_rs1,\n  output prdt_taken,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op1,\n  output [E203_PC_SIZE-1:0] prdt_pc_add_op2,\n  output bpu_wait,\n  output bpu2rf_rs1_ena\n);\n\n  // Internal signals\n  wire jalr_rs1xn_dep;\n  wire jalr_rs1xn_dep_ir_clr;\n  wire rs1xn_rdrf_set;\n  wire rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_ena;\n  wire rs1xn_rdrf_nxt;\n  reg rs1xn_rdrf_r;\n\n  // Prediction logic\n  assign prdt_taken = dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[E203_XLEN-1]);\n  assign prdt_pc_add_op1 = (dec_jal | dec_bxx) ? pc : \n                           (dec_jalr & (dec_jalr_rs1idx == 0)) ? 0 : \n                           (dec_jalr & (dec_jalr_rs1idx == 1)) ? rf2bpu_x1 : rf2bpu_rs1;\n  assign prdt_pc_add_op2 = dec_bjp_imm[E203_PC_SIZE-1:0];\n\n  // Dependency logic\n  assign jalr_rs1xn_dep = ~oitf_empty & ir_rs1en & jalr_rs1idx_cam_irrdidx;\n  assign jalr_rs1xn_dep_ir_clr = ir_valid_clr & ~ir_rs1en;\n  assign bpu_wait = dec_jalr & (dec_jalr_rs1idx == 1) & jalr_rs1xn_dep & ~jalr_rs1xn_dep_ir_clr;\n\n  // Register read status management\n  assign rs1xn_rdrf_set = ~rs1xn_rdrf_r & dec_i_valid & dec_jalr & (dec_jalr_rs1idx != 0) & \n                          (dec_jalr_rs1idx != 1) & (~jalr_rs1xn_dep | jalr_rs1xn_dep_ir_clr);\n  assign rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  assign rs1xn_rdrf_ena = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n  assign rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  // Trigger implementation\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflr (\n    .lden(rs1xn_rdrf_ena),\n    .dnxt(rs1xn_rdrf_nxt),\n    .qout(rs1xn_rdrf_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Control signal\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 17, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals and logic for ITCM controller\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 17, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 18, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n// Module implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 18, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 16, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n      icb_state <= ICB_STATE_IDLE;\n    else if (icb_state_ena)\n      icb_state <= icb_state_nxt;\n  end\n\n  // State Transition Conditions\n  wire state_idle_exit_ena = icb_state == ICB_STATE_IDLE && ifu_req_valid;\n  wire state_1st_exit_ena = icb_state == ICB_STATE_1ST && ifu_rsp_ready;\n  wire state_wait2nd_exit_ena = icb_state == ICB_STATE_WAIT2ND && ifu2itcm_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_state == ICB_STATE_2ND && ifu_rsp_ready;\n\n  assign icb_state_ena = state_idle_exit_ena || state_1st_exit_ena || state_wait2nd_exit_ena || state_2nd_exit_ena;\n\n  always @(*) begin\n    case (icb_state)\n      ICB_STATE_IDLE: icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST : ICB_STATE_IDLE;\n      ICB_STATE_1ST: icb_state_nxt = state_1st_exit_ena ? ICB_STATE_WAIT2ND : ICB_STATE_1ST;\n      ICB_STATE_WAIT2ND: icb_state_nxt = state_wait2nd_exit_ena ? ICB_STATE_2ND : ICB_STATE_WAIT2ND;\n      ICB_STATE_2ND: icb_state_nxt = state_2nd_exit_ena ? ICB_STATE_IDLE : ICB_STATE_2ND;\n      default: icb_state_nxt = ICB_STATE_IDLE;\n    endcase\n  end\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data;\n  wire [32:0] ifu_rsp_bypbuf_o_data;\n\n  assign ifu_rsp_bypbuf_i_data = {ifu_rsp_err, ifu_rsp_instr};\n  assign {ifu_rsp_err, ifu_rsp_instr} = ifu_rsp_bypbuf_o_data;\n\n  // ITCM Command Generation\n  assign ifu2itcm_icb_cmd_valid = ifu_req_valid && (icb_state == ICB_STATE_IDLE || icb_state == ICB_STATE_1ST);\n  assign ifu2itcm_icb_cmd_addr = ifu_req_pc;\n\n  // BIU Command Generation\n  assign ifu2biu_icb_cmd_valid = ifu_req_valid && (icb_state == ICB_STATE_IDLE || icb_state == ICB_STATE_1ST);\n  assign ifu2biu_icb_cmd_addr = ifu_req_pc;\n\n  // Response Handling\n  assign ifu_rsp_valid = ifu2itcm_icb_rsp_valid || ifu2biu_icb_rsp_valid;\n  assign ifu_rsp_err = ifu2itcm_icb_rsp_err || ifu2biu_icb_rsp_err;\n\n  // Handshake Control\n  assign ifu_req_ready = ifu2itcm_icb_cmd_ready && ifu2biu_icb_cmd_ready;\n  assign ifu2itcm_icb_rsp_ready = ifu_rsp_ready;\n  assign ifu2biu_icb_rsp_ready = ifu_rsp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 17, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and state machine declarations\n  reg [1:0] icb_state;\n  wire icb_sta_is_idle = (icb_state == 2'b00);\n  wire icb_sta_is_1st = (icb_state == 2'b01);\n  wire icb_sta_is_wait2nd = (icb_state == 2'b10);\n  wire icb_sta_is_2nd = (icb_state == 2'b11);\n\n  // State transition logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 2'b00;\n    end else begin\n      case (icb_state)\n        2'b00: if (ifu_req_valid) icb_state <= 2'b01;\n        2'b01: if (ifu_rsp_ready) icb_state <= 2'b10;\n        2'b10: if (ifu2itcm_icb_cmd_ready) icb_state <= 2'b11;\n        2'b11: if (ifu_rsp_ready) icb_state <= 2'b00;\n      endcase\n    end\n  end\n\n  // Output logic\n  assign ifu_req_ready = (icb_state == 2'b00);\n  assign ifu_rsp_valid = (icb_state == 2'b11);\n  assign ifu_rsp_err = ifu2itcm_icb_rsp_err | ifu2biu_icb_rsp_err;\n  assign ifu_rsp_instr = ifu2itcm_icb_rsp_rdata[31:0];\n\n  // Command and response logic\n  assign ifu2itcm_icb_cmd_valid = (icb_state == 2'b01);\n  assign ifu2itcm_icb_cmd_addr = ifu_req_pc[ITCM_ADDR_WIDTH-1:0];\n  assign ifu2itcm_icb_rsp_ready = (icb_state == 2'b11);\n\n  assign ifu2biu_icb_cmd_valid = (icb_state == 2'b01);\n  assign ifu2biu_icb_cmd_addr = ifu_req_pc[ADDR_SIZE-1:0];\n  assign ifu2biu_icb_rsp_ready = (icb_state == 2'b11);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 18, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // Internal signals and state machine declarations\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n  wire state_idle_exit_ena;\n  wire ifu_req_hsked;\n  wire ifu_icb_cmd_hsked;\n  wire ifu_icb_rsp_hsked;\n  wire i_ifu_rsp_hsked;\n\n  // State machine logic\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n      icb_state <= 2'b00;\n    end else if (icb_state_ena) begin\n      icb_state <= icb_state_nxt;\n    end\n  end\n\n  assign icb_state_ena = state_idle_exit_ena | ifu_icb_rsp_hsked | i_ifu_rsp_hsked;\n  assign state_idle_exit_ena = (icb_state == 2'b00) & ifu_req_hsked;\n\n  // Handshake signals\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_icb_cmd_hsked = ifu2itcm_icb_cmd_valid & ifu2itcm_icb_cmd_ready;\n  assign ifu_icb_rsp_hsked = ifu2itcm_icb_rsp_valid & ifu2itcm_icb_rsp_ready;\n  assign i_ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n\n  // Output logic\n  assign ifu_req_ready = (icb_state == 2'b00) & ifu2itcm_icb_cmd_ready;\n  assign ifu_rsp_valid = i_ifu_rsp_hsked;\n  assign ifu_rsp_err = ifu2itcm_icb_rsp_err;\n  assign ifu_rsp_instr = ifu2itcm_icb_rsp_rdata[31:0];\n\n  // ITCM interface logic\n  assign ifu2itcm_icb_cmd_valid = ifu_req_valid & (icb_state == 2'b00);\n  assign ifu2itcm_icb_cmd_addr = ifu_req_pc;\n  assign ifu2itcm_icb_rsp_ready = ifu_rsp_ready;\n\n  // System memory interface logic\n  assign ifu2biu_icb_cmd_valid = ifu_req_valid & (icb_state == 2'b00);\n  assign ifu2biu_icb_cmd_addr = ifu_req_pc;\n  assign ifu2biu_icb_rsp_ready = ifu_rsp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_srams", "codeid": 20, "code": "module e203_srams (\n  input  wire        itcm_ram_sd,\n  input  wire        itcm_ram_ds,\n  input  wire        itcm_ram_ls,\n  input  wire        itcm_ram_cs,\n  input  wire        itcm_ram_we,\n  input  wire [E203_ITCM_RAM_AW-1:0] itcm_ram_addr,\n  input  wire [E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  wire [E203_ITCM_RAM_DW-1:0] itcm_ram_din,\n  output wire [E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input  wire        clk_itcm_ram,\n  input  wire        rst_itcm,\n\n  input  wire        dtcm_ram_sd,\n  input  wire        dtcm_ram_ds,\n  input  wire        dtcm_ram_ls,\n  input  wire        dtcm_ram_cs,\n  input  wire        dtcm_ram_we,\n  input  wire [E203_DTCM_RAM_AW-1:0] dtcm_ram_addr,\n  input  wire [E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_din,\n  output wire [E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input  wire        clk_dtcm_ram,\n  input  wire        rst_dtcm\n);\n\n  generate\n    if (E203_HAS_ITCM) begin: itcm\n      e203_itcm_ram u_e203_itcm_ram (\n        .sd   (itcm_ram_sd),\n        .ds   (itcm_ram_ds),\n        .ls   (itcm_ram_ls),\n        .cs   (itcm_ram_cs),\n        .we   (itcm_ram_we),\n        .addr (itcm_ram_addr),\n        .wem  (itcm_ram_wem),\n        .din  (itcm_ram_din),\n        .dout (itcm_ram_dout),\n        .clk  (clk_itcm_ram),\n        .rst_n(rst_itcm)\n      );\n    end\n  endgenerate\n\n  generate\n    if (E203_HAS_DTCM) begin: dtcm\n      e203_dtcm_ram u_e203_dtcm_ram (\n        .sd   (dtcm_ram_sd),\n        .ds   (dtcm_ram_ds),\n        .ls   (dtcm_ram_ls),\n        .cs   (dtcm_ram_cs),\n        .we   (dtcm_ram_we),\n        .addr (dtcm_ram_addr),\n        .wem  (dtcm_ram_wem),\n        .din  (dtcm_ram_din),\n        .dout (dtcm_ram_dout),\n        .clk  (clk_dtcm_ram),\n        .rst_n(rst_dtcm)\n      );\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 19, "code": "module e203_ifu_ift2icb (\n  input  wire         itcm_nohold,\n  input  wire         ifu_req_valid,\n  input  wire [PC_SIZE-1:0] ifu_req_pc,\n  input  wire         ifu_req_seq,\n  input  wire         ifu_req_seq_rv32,\n  input  wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input  wire         ifu_rsp_ready,\n  input  wire         clk,\n  input  wire         rst_n,\n  output wire         ifu_req_ready,\n  output wire         ifu_rsp_valid,\n  output wire         ifu_rsp_err,\n  output wire [31:0]  ifu_rsp_instr,\n  output wire         ifu2itcm_icb_cmd_valid,\n  input  wire         ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire         ifu2itcm_icb_rsp_valid,\n  output wire         ifu2itcm_icb_rsp_ready,\n  input  wire         ifu2itcm_icb_rsp_err,\n  input  wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire         ifu2biu_icb_cmd_valid,\n  input  wire         ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input  wire         ifu2biu_icb_rsp_valid,\n  output wire         ifu2biu_icb_rsp_ready,\n  input  wire         ifu2biu_icb_rsp_err,\n  input  wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State machine states\n  localparam ICB_STATE_IDLE    = 2'b00;\n  localparam ICB_STATE_1ST     = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND     = 2'b11;\n\n  reg [1:0] icb_state;\n  reg [1:0] icb_state_nxt;\n  wire icb_state_ena;\n\n  // State transition logic\n  always @(*) begin\n    icb_state_nxt = icb_state;\n    case (icb_state)\n      ICB_STATE_IDLE: begin\n        if (ifu_req_hsked)\n          icb_state_nxt = ICB_STATE_1ST;\n      end\n      ICB_STATE_1ST: begin\n        if (ifu_icb_rsp_hsked)\n          icb_state_nxt = req_need_2uop_r ? ICB_STATE_WAIT2ND : ICB_STATE_IDLE;\n      end\n      ICB_STATE_WAIT2ND: begin\n        if (ifu_icb_cmd_ready)\n          icb_state_nxt = ICB_STATE_2ND;\n      end\n      ICB_STATE_2ND: begin\n        if (i_ifu_rsp_hsked)\n          icb_state_nxt = ifu_req_hsked ? ICB_STATE_1ST : ICB_STATE_IDLE;\n      end\n    endcase\n  end\n\n  assign icb_state_ena = (icb_state != icb_state_nxt);\n\n  // State update\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Handshake signals\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & ifu_rsp_ready;\n\n  // Request ready logic\n  assign ifu_req_ready = ifu_icb_cmd_ready & (icb_state == ICB_STATE_IDLE);\n\n  // Command valid logic\n  assign ifu_icb_cmd_valid = (icb_state == ICB_STATE_IDLE) | (icb_state == ICB_STATE_1ST & req_need_2uop_r);\n\n  // Command address logic\n  assign ifu_icb_cmd_addr = (icb_state == ICB_STATE_1ST) ? ifu_req_pc : ifu_req_last_pc;\n\n  // Response valid logic\n  assign i_ifu_rsp_valid = (icb_state == ICB_STATE_1ST & req_same_cross_holdup_r) | (icb_state == ICB_STATE_2ND);\n\n  // Response error logic\n  assign i_ifu_rsp_err = (icb_state == ICB_STATE_1ST) ? ifu_icb_rsp_err : leftover_err_r;\n\n  // Response instruction logic\n  assign ifu_rsp_instr = (icb_state == ICB_STATE_1ST) ? ifu_icb_rsp_rdata[31:0] : leftover_r;\n\n  // Leftover buffer logic\n  wire leftover_ena = holdup2leftover_ena | uop1st2leftover_ena;\n  wire [15:0] leftover_nxt = (holdup2leftover_ena) ? ifu_icb_rsp_rdata[47:32] : ifu_icb_rsp_rdata[63:48];\n  sirv_gnrl_dfflr #(16) leftover_dfflr (leftover_ena, leftover_nxt, leftover_r, clk, rst_n);\n\n  // Error flag logic\n  wire leftover_err_nxt = (holdup2leftover_ena) ? 1'b0 : ifu_icb_rsp_err;\n  sirv_gnrl_dfflr #(1) leftover_err_dfflr (leftover_ena, leftover_err_nxt, leftover_err_r, clk, rst_n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 18, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 19, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu_ctrl", "codeid": 20, "code": "module e203_lsu_ctrl (\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  output lsu_o_valid,\n  input  lsu_o_ready,\n  output [E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [E203_ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err,\n  output lsu_o_cmt_buserr,\n  output [E203_ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  input  agu_icb_cmd_valid,\n  output agu_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  agu_icb_cmd_read,\n  input  [E203_XLEN-1:0] agu_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  agu_icb_cmd_lock,\n  input  agu_icb_cmd_excl,\n  input  [1:0] agu_icb_cmd_size,\n  input  agu_icb_cmd_back2agu,\n  input  agu_icb_cmd_usign,\n  input  [E203_ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output agu_icb_rsp_valid,\n  input  agu_icb_rsp_ready,\n  output agu_icb_rsp_err,\n  output agu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] agu_icb_rsp_rdata,\n  input  nice_mem_holdup,\n  input  nice_icb_cmd_valid,\n  output nice_icb_cmd_ready,\n  input  [E203_ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  input  nice_icb_cmd_read,\n  input  [E203_XLEN-1:0] nice_icb_cmd_wdata,\n  input  [E203_XLEN/8-1:0] nice_icb_cmd_wmask,\n  output nice_icb_rsp_valid,\n  input  nice_icb_rsp_ready,\n  output nice_icb_rsp_err,\n  output [E203_XLEN-1:0] nice_icb_rsp_rdata,\n  output dcache_icb_cmd_valid,\n  input  dcache_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output dcache_icb_cmd_read,\n  output [E203_XLEN-1:0] dcache_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output dcache_icb_cmd_lock,\n  output dcache_icb_cmd_excl,\n  output [1:0] dcache_icb_cmd_size,\n  input  dcache_icb_rsp_valid,\n  output dcache_icb_rsp_ready,\n  input  dcache_icb_rsp_err,\n  input  dcache_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dcache_icb_rsp_rdata,\n  output dtcm_icb_cmd_valid,\n  input  dtcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] dtcm_icb_cmd_addr,\n  output dtcm_icb_cmd_read,\n  output [E203_XLEN-1:0] dtcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output dtcm_icb_cmd_lock,\n  output dtcm_icb_cmd_excl,\n  output [1:0] dtcm_icb_cmd_size,\n  input  dtcm_icb_rsp_valid,\n  output dtcm_icb_rsp_ready,\n  input  dtcm_icb_rsp_err,\n  input  dtcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] dtcm_icb_rsp_rdata,\n  input  dtcm_region_indic,\n  output itcm_icb_cmd_valid,\n  input  itcm_icb_cmd_ready,\n  output [E203_DTCM_ADDR_WIDTH-1:0] itcm_icb_cmd_addr,\n  output itcm_icb_cmd_read,\n  output [E203_XLEN-1:0] itcm_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output itcm_icb_cmd_lock,\n  output itcm_icb_cmd_excl,\n  output [1:0] itcm_icb_cmd_size,\n  input  itcm_icb_rsp_valid,\n  output itcm_icb_rsp_ready,\n  input  itcm_icb_rsp_err,\n  input  itcm_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] itcm_icb_rsp_rdata,\n  input  itcm_region_indic,\n  output biu_icb_cmd_valid,\n  input  biu_icb_cmd_ready,\n  output [E203_ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output biu_icb_cmd_read,\n  output [E203_XLEN-1:0] biu_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] biu_icb_cmd_wmask,\n  output biu_icb_cmd_lock,\n  output biu_icb_cmd_excl,\n  output [1:0] biu_icb_cmd_size,\n  input  biu_icb_rsp_valid,\n  output biu_icb_rsp_ready,\n  input  biu_icb_rsp_err,\n  input  biu_icb_rsp_excl_ok,\n  input  [E203_XLEN-1:0] biu_icb_rsp_rdata,\n  input  clk,\n  input  rst_n\n);\n  // Module implementation here\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ift2icb", "codeid": 20, "code": "module e203_ifu_ift2icb (\n  input wire itcm_nohold,\n  input wire ifu_req_valid,\n  input wire [PC_SIZE-1:0] ifu_req_pc,\n  input wire ifu_req_seq,\n  input wire ifu_req_seq_rv32,\n  input wire [PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_ready,\n  input wire clk,\n  input wire rst_n,\n  output wire ifu_req_ready,\n  output wire ifu_rsp_valid,\n  output wire ifu_rsp_err,\n  output wire [31:0] ifu_rsp_instr,\n  output wire ifu2itcm_icb_cmd_valid,\n  input wire ifu2itcm_icb_cmd_ready,\n  output wire [ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input wire ifu2itcm_icb_rsp_valid,\n  output wire ifu2itcm_icb_rsp_ready,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  output wire ifu2biu_icb_cmd_valid,\n  input wire ifu2biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input wire ifu2biu_icb_rsp_valid,\n  output wire ifu2biu_icb_rsp_ready,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata\n);\n\n  // State Machine Definition\n  localparam ICB_STATE_IDLE = 2'b00;\n  localparam ICB_STATE_1ST = 2'b01;\n  localparam ICB_STATE_WAIT2ND = 2'b10;\n  localparam ICB_STATE_2ND = 2'b11;\n\n  reg [1:0] icb_state;\n  wire icb_state_ena;\n  wire [1:0] icb_state_nxt;\n\n  // State Transition Logic\n  wire state_idle_exit_ena = icb_sta_is_idle & ifu_req_hsked;\n  wire state_1st_exit_ena = icb_sta_is_1st & (ifu_icb_rsp_hsked | ifu_req_hsked);\n  wire state_wait2nd_exit_ena = icb_sta_is_wait2nd & ifu_icb_cmd_ready;\n  wire state_2nd_exit_ena = icb_sta_is_2nd & i_ifu_rsp_hsked;\n\n  assign icb_state_ena = state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n  assign icb_state_nxt = state_idle_exit_ena ? ICB_STATE_1ST :\n                         state_1st_exit_ena ? (req_need_2uop_r ? (ifu_icb_cmd_ready ? ICB_STATE_2ND : ICB_STATE_WAIT2ND) : ICB_STATE_IDLE) :\n                         state_wait2nd_exit_ena ? ICB_STATE_2ND :\n                         ICB_STATE_IDLE;\n\n  sirv_gnrl_dfflr #(2) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state, clk, rst_n);\n\n  // Bypass Buffer Implementation\n  wire [32:0] ifu_rsp_bypbuf_i_data = {i_ifu_rsp_err, i_ifu_rsp_instr};\n  wire ifu_rsp_err = ifu_rsp_bypbuf_o_data[32];\n  wire [31:0] ifu_rsp_instr = ifu_rsp_bypbuf_o_data[31:0];\n\n  sirv_gnrl_bypbuf #(1, 33) u_e203_ifetch_rsp_bypbuf (\n    .i_vld(i_ifu_rsp_valid),\n    .i_rdy(i_ifu_rsp_ready),\n    .i_dat(ifu_rsp_bypbuf_i_data),\n    .o_vld(ifu_rsp_valid),\n    .o_rdy(ifu_rsp_ready),\n    .o_dat(ifu_rsp_bypbuf_o_data),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Lane Operation Implementation\n  wire ifu_req_lane_cross = (PC_SIZE == 32) ? ifu_req_pc[1] : ifu_req_pc[2:1] == 2'b11;\n  wire ifu_req_lane_begin = (PC_SIZE == 32) ? ~ifu_req_pc[1] : ifu_req_pc[2:1] == 2'b00;\n  wire ifu_req_lane_same = ifu_req_seq & req_lane_cross_r;\n  wire ifu_req_lane_holdup = ifu2itcm_holdup & ~itcm_nohold;\n\n  // Request Feature Registering\n  wire req_same_cross_holdup_r = ifu_req_hsked & req_same_cross_holdup;\n  wire req_need_2uop_r = ifu_req_hsked & (req_same_cross_holdup | req_need_2uop);\n  wire req_need_0uop_r = ifu_req_hsked & req_same_cross_holdup;\n\n  sirv_gnrl_dfflr #(1) req_same_cross_holdup_dfflr (ifu_req_hsked, req_same_cross_holdup, req_same_cross_holdup_r, clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_need_2uop_dfflr (ifu_req_hsked, req_need_2uop, req_need_2uop_r, clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_need_0uop_dfflr (ifu_req_hsked, req_need_0uop, req_need_0uop_r, clk, rst_n);\n\n  // ICB Command Generation Implementation\n  wire ifu_icb_cmd_valid = ifu_req_hsked & ~req_need_0uop_r;\n  wire [ADDR_SIZE-1:0] ifu_icb_cmd_addr = ifu_req_last_pc + (req_need_2uop_r ? 4 : 0);\n\n  assign ifu2itcm_icb_cmd_valid = ifu_icb_cmd_valid & ifu_icb_cmd2itcm;\n  assign ifu2itcm_icb_cmd_addr = ifu_icb_cmd_addr[ITCM_ADDR_WIDTH-1:0];\n  assign ifu2biu_icb_cmd_valid = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  assign ifu2biu_icb_cmd_addr = ifu_icb_cmd_addr;\n\n  // ICB Response Merge Implementation\n  wire ifu_icb_rsp_err = (ifu_icb_cmd2itcm & ifu2itcm_icb_rsp_err) | (ifu_icb_cmd2biu & ifu2biu_icb_rsp_err);\n  wire ifu_icb_rsp_valid = (ifu_icb_cmd2itcm & ifu2itcm_icb_rsp_valid) | (ifu_icb_cmd2biu & ifu2biu_icb_rsp_valid);\n\n  // Handshake Control Implementation\n  assign ifu_req_ready = ifu_icb_cmd_ready & (icb_sta_is_idle | (req_need_0uop_r & ifu_icb_rsp_hsked) | (req_need_2uop_r & ifu_icb_rsp_hsked));\n  assign ifu_icb_rsp_ready = ifu_icb_rsp2leftover ? 1'b1 : i_ifu_rsp_ready;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 19, "code": "module e203_ifu (\n  input wire clk,\n  input wire rst_n,\n  input wire itcm_nohold,\n  input wire ifu_o_ready,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu2itcm_icb_cmd_ready,\n  input wire ifu2itcm_icb_rsp_valid,\n  input wire ifu2itcm_icb_rsp_err,\n  input wire [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input wire ifu2biu_icb_cmd_ready,\n  input wire ifu2biu_icb_rsp_valid,\n  input wire ifu2biu_icb_rsp_err,\n  input wire [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire [E203_PC_SIZE-1:0] inspect_pc,\n  output wire ifu_active,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu2itcm_icb_cmd_valid,\n  output wire [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  output wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2biu_icb_cmd_valid,\n  output wire [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  output wire ifu2biu_icb_rsp_ready,\n  output wire ifu_halt_ack\n);\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_rsp_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 19, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n  input  wire nice_mem_holdup,\n  input  wire itcm_region_indic,\n  input  wire dtcm_region_indic,\n  output wire nice_icb_cmd_valid,\n  input  wire nice_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  output wire nice_icb_cmd_read,\n  output wire [XLEN-1:0] nice_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_cmd_lock,\n  output wire nice_icb_cmd_excl,\n  output wire [1:0] nice_icb_cmd_size,\n  input  wire nice_icb_rsp_valid,\n  output wire nice_icb_rsp_ready,\n  input  wire nice_icb_rsp_err,\n  input  wire nice_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] nice_icb_rsp_rdata,\n  output wire dcache_icb_cmd_valid,\n  input  wire dcache_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output wire dcache_icb_cmd_read,\n  output wire [XLEN-1:0] dcache_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output wire dcache_icb_cmd_lock,\n  output wire dcache_icb_cmd_excl,\n  output wire [1:0] dcache_icb_cmd_size,\n  input  wire dcache_icb_rsp_valid,\n  output wire dcache_icb_rsp_ready,\n  input  wire dcache_icb_rsp_err,\n  input  wire dcache_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] dcache_icb_rsp_rdata,\n  output wire dtcm_icb_cmd_valid,\n  input  wire dtcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dtcm_icb_cmd_addr,\n  output wire dtcm_icb_cmd_read,\n  output wire [XLEN-1:0] dtcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output wire dtcm_icb_cmd_lock,\n  output wire dtcm_icb_cmd_excl,\n  output wire [1:0] dtcm_icb_cmd_size,\n  input  wire dtcm_icb_rsp_valid,\n  output wire dtcm_icb_rsp_ready,\n  input  wire dtcm_icb_rsp_err,\n  input  wire dtcm_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] dtcm_icb_rsp_rdata,\n  output wire itcm_icb_cmd_valid,\n  input  wire itcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] itcm_icb_cmd_addr,\n  output wire itcm_icb_cmd_read,\n  output wire [XLEN-1:0] itcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output wire itcm_icb_cmd_lock,\n  output wire itcm_icb_cmd_excl,\n  output wire [1:0] itcm_icb_cmd_size,\n  input  wire itcm_icb_rsp_valid,\n  output wire itcm_icb_rsp_ready,\n  input  wire itcm_icb_rsp_err,\n  input  wire itcm_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] itcm_icb_rsp_rdata,\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire [XLEN-1:0] biu_icb_rsp_rdata\n);\n\n// Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 19, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .clint_icb_cmd_valid(clint_icb_cmd_valid),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_cmd_addr(clint_icb_cmd_addr),\n    .clint_icb_cmd_read(clint_icb_cmd_read),\n    .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .plic_icb_cmd_valid(plic_icb_cmd_valid),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_cmd_addr(plic_icb_cmd_addr),\n    .plic_icb_cmd_read(plic_icb_cmd_read),\n    .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .mem_icb_cmd_valid(mem_icb_cmd_valid),\n    .mem_icb_cmd_ready(mem_icb_cmd_ready),\n    .mem_icb_cmd_addr(mem_icb_cmd_addr),\n    .mem_icb_cmd_read(mem_icb_cmd_read),\n    .mem_icb_cmd_wdata(mem_icb_cmd_wdata),\n    .mem_icb_cmd_wmask(mem_icb_cmd_wmask),\n    .mem_icb_rsp_valid(mem_icb_rsp_valid),\n    .mem_icb_rsp_ready(mem_icb_rsp_ready),\n    .mem_icb_rsp_err(mem_icb_rsp_err),\n    .mem_icb_rsp_rdata(mem_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 19, "code": "module e203_itcm_ctrl (\n  input  wire clk,\n  input  wire rst_n,\n  input  wire test_mode,\n  input  wire tcm_cgstop,\n  output wire itcm_active,\n  input  wire ifu2itcm_icb_cmd_valid,\n  output wire ifu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input  wire ifu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n  output wire ifu2itcm_icb_rsp_valid,\n  input  wire ifu2itcm_icb_rsp_ready,\n  output wire ifu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input  wire lsu2itcm_icb_cmd_valid,\n  output wire lsu2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n  input  wire lsu2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n  output wire lsu2itcm_icb_rsp_valid,\n  input  wire lsu2itcm_icb_rsp_ready,\n  output wire lsu2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n  input  wire ext2itcm_icb_cmd_valid,\n  output wire ext2itcm_icb_cmd_ready,\n  input  wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n  input  wire ext2itcm_icb_cmd_read,\n  input  wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n  input  wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n  output wire ext2itcm_icb_rsp_valid,\n  input  wire ext2itcm_icb_rsp_ready,\n  output wire ext2itcm_icb_rsp_err,\n  output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n  output wire itcm_ram_cs,\n  output wire itcm_ram_we,\n  output wire [RAM_AW-1:0] itcm_ram_addr,\n  output wire [RAM_MW-1:0] itcm_ram_wem,\n  output wire [RAM_DW-1:0] itcm_ram_din,\n  input  wire [RAM_DW-1:0] itcm_ram_dout,\n  output wire clk_itcm_ram\n);\n\n  // Internal signals\n  wire [ADDR_WIDTH-1:0] arb_cmd_addr;\n  wire [DATA_WIDTH-1:0] arb_cmd_wdata;\n  wire [WMSK_WIDTH-1:0] arb_cmd_wmask;\n  wire arb_cmd_valid, arb_cmd_ready, arb_cmd_read;\n  wire arb_rsp_valid, arb_rsp_ready, arb_rsp_err;\n  wire [DATA_WIDTH-1:0] arb_rsp_rdata;\n\n  // Instantiate the arbitration module\n  sirv_gnrl_icb_arbt #(\n    .AW(ADDR_WIDTH),\n    .DW(DATA_WIDTH),\n    .USR_W(1),\n    .ARBT_SCHEME(0),\n    .FIFO_OUTS_NUM(1),\n    .FIFO_CUT_READY(0),\n    .ARBT_NUM(3),\n    .ALLOW_0CYCL_RSP(1),\n    .ARBT_PTR_W(2)\n  ) u_itcm_icb_arbt (\n    .o_icb_cmd_valid(arb_cmd_valid),\n    .o_icb_cmd_ready(arb_cmd_ready),\n    .o_icb_cmd_read(arb_cmd_read),\n    .o_icb_cmd_addr(arb_cmd_addr),\n    .o_icb_cmd_wdata(arb_cmd_wdata),\n    .o_icb_cmd_wmask(arb_cmd_wmask),\n    .o_icb_rsp_valid(arb_rsp_valid),\n    .o_icb_rsp_ready(arb_rsp_ready),\n    .o_icb_rsp_err(arb_rsp_err),\n    .o_icb_rsp_rdata(arb_rsp_rdata),\n    .i_bus_icb_cmd_ready({ext2itcm_icb_cmd_ready, lsu2itcm_icb_cmd_ready, ifu2itcm_icb_cmd_ready}),\n    .i_bus_icb_cmd_valid({ext2itcm_icb_cmd_valid, lsu2itcm_icb_cmd_valid, ifu2itcm_icb_cmd_valid}),\n    .i_bus_icb_cmd_read({ext2itcm_icb_cmd_read, lsu2itcm_icb_cmd_read, ifu2itcm_icb_cmd_read}),\n    .i_bus_icb_cmd_addr({ext2itcm_icb_cmd_addr, lsu2itcm_icb_cmd_addr, ifu2itcm_icb_cmd_addr}),\n    .i_bus_icb_cmd_wdata({ext2itcm_icb_cmd_wdata, lsu2itcm_icb_cmd_wdata, ifu2itcm_icb_cmd_wdata}),\n    .i_bus_icb_cmd_wmask({ext2itcm_icb_cmd_wmask, lsu2itcm_icb_cmd_wmask, ifu2itcm_icb_cmd_wmask}),\n    .i_bus_icb_rsp_valid({ext2itcm_icb_rsp_valid, lsu2itcm_icb_rsp_valid, ifu2itcm_icb_rsp_valid}),\n    .i_bus_icb_rsp_ready({ext2itcm_icb_rsp_ready, lsu2itcm_icb_rsp_ready, ifu2itcm_icb_rsp_ready}),\n    .i_bus_icb_rsp_err({ext2itcm_icb_rsp_err, lsu2itcm_icb_rsp_err, ifu2itcm_icb_rsp_err}),\n    .i_bus_icb_rsp_rdata({ext2itcm_icb_rsp_rdata, lsu2itcm_icb_rsp_rdata, ifu2itcm_icb_rsp_rdata}),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Instantiate the SRAM controller module\n  sirv_sram_icb_ctrl #(\n    .DW(DATA_WIDTH),\n    .MW(WMSK_WIDTH),\n    .AW(ADDR_WIDTH),\n    .AW_LSB(3),\n    .USR_W(1)\n  ) u_sram_icb_ctrl (\n    .i_icb_cmd_valid(arb_cmd_valid),\n    .i_icb_cmd_ready(arb_cmd_ready),\n    .i_icb_cmd_read(arb_cmd_read),\n    .i_icb_cmd_addr(arb_cmd_addr),\n    .i_icb_cmd_wdata(arb_cmd_wdata),\n    .i_icb_cmd_wmask(arb_cmd_wmask),\n    .i_icb_rsp_valid(arb_rsp_valid),\n    .i_icb_rsp_ready(arb_rsp_ready),\n    .i_icb_rsp_rdata(arb_rsp_rdata),\n    .ram_cs(itcm_ram_cs),\n    .ram_we(itcm_ram_we),\n    .ram_addr(itcm_ram_addr),\n    .ram_wem(itcm_ram_wem),\n    .ram_din(itcm_ram_din),\n    .ram_dout(itcm_ram_dout),\n    .clk_ram(clk_itcm_ram),\n    .sram_ctrl_active(itcm_active),\n    .tcm_cgstop(tcm_cgstop),\n    .test_mode(test_mode),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu", "codeid": 20, "code": "module e203_ifu (\n  input clk,\n  input rst_n,\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  input itcm_nohold,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  output [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output [E203_PC_SIZE-1:0] ifu_o_pc,\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,\n  output ifu_o_buserr,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,\n  output ifu_o_muldiv_b2b,\n  output ifu_o_valid,\n  input ifu_o_ready,\n  input pipe_flush_req,\n  output pipe_flush_ack,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input pipe_flush_pc,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ifu2biu_icb_cmd_ready,\n  output ifu2biu_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_rsp_valid,\n  output ifu2biu_icb_rsp_ready,\n  input ifu2biu_icb_rsp_err,\n  input [E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata,\n  input ifu_halt_req,\n  output ifu_halt_ack,\n  input oitf_empty,\n  input [E203_XLEN-1:0] rf2ifu_x1,\n  input [E203_XLEN-1:0] rf2ifu_rs1,\n  input dec2ifu_rs1en,\n  input dec2ifu_rden,\n  input [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input dec2ifu_mulhsu,\n  input dec2ifu_div,\n  input dec2ifu_rem,\n  input dec2ifu_divu,\n  input dec2ifu_remu\n);\n\n  // Internal signals\n  wire ifu_req_valid;\n  wire [E203_PC_SIZE-1:0] ifu_req_pc;\n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid;\n  wire ifu_rsp_err;\n  wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr;\n\n  // Instantiate e203_ifu_ifetch\n  e203_ifu_ifetch u_e203_ifu_ifetch (\n    .clk(clk),\n    .rst_n(rst_n),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu_halt_req(ifu_halt_req),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .inspect_pc(inspect_pc),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .pipe_flush_ack(pipe_flush_ack),\n    .ifu_halt_ack(ifu_halt_ack),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid)\n  );\n\n  // Instantiate e203_ifu_ift2icb\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .clk(clk),\n    .rst_n(rst_n),\n    .ifu_req_valid(ifu_req_valid),\n    .ifu_req_pc(ifu_req_pc),\n    .ifu_req_seq(ifu_req_seq),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc(ifu_req_last_pc),\n    .ifu_rsp_ready(ifu_o_ready),\n    .itcm_nohold(itcm_nohold),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_req_ready(ifu_req_ready),\n    .ifu_rsp_valid(ifu_rsp_valid),\n    .ifu_rsp_err(ifu_rsp_err),\n    .ifu_rsp_instr(ifu_rsp_instr),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 16, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  // Halt control logic\n  wire halt_ack_r;\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & oitf_empty;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  // Pipeline flush control\n  wire dly_flush_r;\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (clk, rst_n, dly_flush_ena, dly_flush_nxt, dly_flush_r);\n\n  // IR control\n  wire ir_valid_r;\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req) & (~ifu_rsp_err);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n\n  // PC control logic\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  wire [E203_PC_SIZE-1:0] pc_nxt = pc_r + (ifu_req_seq_rv32 ? 4 : 2);\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  // Fetch request generation\n  wire ifu_new_req = (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_err);\n  wire ifu_req_valid_pre = ifu_new_req | pipe_flush_req;\n  wire ifu_req_valid = ifu_req_valid_pre & (~ir_valid_r);\n\n  // Response processing\n  wire ifu_rsp2ir_ready = (pipe_flush_req) ? 1'b1 : (ifu_o_ready & ifu_req_ready);\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Mini-decoder interface\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_rsp_instr;\n\n  // BPU interface\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n\n  // State monitoring\n  wire pc_newpend_r;\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_valid_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (clk, rst_n, pc_newpend_ena, pc_newpend_nxt, pc_newpend_r);\n\n  // Output assignments\n  assign ifu_req_pc = pc_r;\n  assign ifu_req_seq = (~pipe_flush_req) & (~reset_flag_r) & (~ifu_rsp_err);\n  assign ifu_req_seq_rv32 = 1'b1;\n  assign ifu_req_last_pc = pc_r;\n  assign ifu_o_ir = instr;\n  assign ifu_o_pc = pc_r;\n  assign ifu_o_pc_vld = ir_valid_r;\n  assign ifu_o_rs1idx = dec2ifu_rdidx;\n  assign ifu_o_rs2idx = dec2ifu_rdidx;\n  assign ifu_o_prdt_taken = prdt_taken;\n  assign ifu_o_misalgn = 1'b0;\n  assign ifu_o_buserr = ifu_rsp_err;\n  assign ifu_o_muldiv_b2b = 1'b0;\n  assign ifu_o_valid = ir_valid_r;\n  assign ifu_halt_ack = halt_ack_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 17, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_o_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n\n  // Instantiate submodules\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_r),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(~ir_valid_r),\n    .ir_rs1en(minidec_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Handshake logic\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Halt control logic\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Pipeline flush control\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // IR control\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Fetch request generation and control\n  assign ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  assign new_req_condi = (~out_flag_r) | out_flag_clr;\n  assign ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  assign ifu_rsp2ir_ready = (pipe_flush_req_real)? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n  assign out_flag_set = ifu_req_hsked;\n  assign out_flag_clr = ifu_rsp_hsked;\n  assign out_flag_ena = out_flag_set | out_flag_clr;\n  assign out_flag_nxt = out_flag_set | (~out_flag_clr);\n\n  // PC control logic\n  assign pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  assign pc_add_op1 = (pipe_flush_req)? pipe_flush_add_op1 : (bjp_req)? prdt_pc_add_op1 : pc_r;\n  assign pc_add_op2 = (pipe_flush_req)? pipe_flush_add_op2 : (bjp_req)? prdt_pc_add_op2 : pc_incr_ofst;\n  assign pc_incr_ofst = minidec_rv32? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n  assign pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n\n  // State monitoring and control\n  assign pc_newpend_set = pc_ena;\n  assign pc_newpend_clr = ir_pc_vld_set;\n  assign pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  assign pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  assign ifu_rsp_need_replay = 1'b0;\n  assign ifetch_replay_req = 1'b0;\n  assign ir_empty = ~ir_valid_r;\n  assign ir_rs1en = dec2ifu_rs1en;\n  assign ir_rden = dec2ifu_rden;\n  assign ir_rdidx = dec2ifu_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 18, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signals and registers\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  wire ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (clk, rst_n, 1'b0, reset_flag_r);\n\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (clk, rst_n, reset_req_ena, reset_req_nxt, reset_req_r);\n\n  wire ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  wire halt_ack_r;\n  wire halt_ack_set = ifu_halt_req & (~halt_ack_r) & oitf_empty;\n  wire halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  wire halt_ack_ena = halt_ack_set | halt_ack_clr;\n  wire halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (clk, rst_n, halt_ack_ena, halt_ack_nxt, halt_ack_r);\n\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  wire dly_flush_r;\n  wire dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  wire dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  wire dly_flush_ena = dly_flush_set | dly_flush_clr;\n  wire dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (clk, rst_n, dly_flush_ena, dly_flush_nxt, dly_flush_r);\n\n  wire dly_pipe_flush_req = dly_flush_r;\n  wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  wire ir_valid_r;\n  wire ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  wire ir_valid_ena = ir_valid_set | ir_valid_clr;\n  wire ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (clk, rst_n, ir_valid_ena, ir_valid_nxt, ir_valid_r);\n\n  wire ir_pc_vld_r;\n  wire ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  wire ir_pc_vld_clr = ir_valid_clr;\n  wire ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  wire ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n  sirv_gnrl_dfflr #(1) ir_pc_vld_dfflr (clk, rst_n, ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r);\n\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (clk, rst_n, ir_valid_set, ifu_rsp_err, ifu_err_r);\n\n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (clk, rst_n, ir_valid_set, prdt_taken, ifu_prdt_taken_r);\n\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ifu_muldiv_b2b_dfflr (clk, rst_n, ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r);\n\n  wire [15:0] ifu_ir_r_hi;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (clk, rst_n, ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r_hi);\n\n  wire [15:0] ifu_ir_r_lo;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (clk, rst_n, ir_lo_ena, ifu_ir_nxt[15:0], ifu_ir_r_lo);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                       bpu2rf_rs1_ena;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (clk, rst_n, ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r);\n\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                       ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (clk, rst_n, ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r);\n\n  // PC control logic\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n\n  assign pc_add_op1 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op1 :\n                      dly_pipe_flush_req ? pc_r :\n                      `endif\n                      ifetch_replay_req ? pc_r :\n                      bjp_req ? prdt_pc_add_op1 :\n                      ifu_reset_req ? pc_rtvec :\n                      pc_r;\n\n  assign pc_add_op2 = `ifndef E203_TIMING_BOOST\n                      pipe_flush_req ? pipe_flush_add_op2 :\n                      dly_pipe_flush_req ? 0 :\n                      `endif\n                      ifetch_replay_req ? 0 :\n                      bjp_req ? prdt_pc_add_op2 :\n                      ifu_reset_req ? 0 :\n                      pc_incr_ofst;\n\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre = pc_add_op1 + pc_add_op2;\n\n  wire [E203_PC_SIZE-1:0] pc_nxt = `ifndef E203_TIMING_BOOST\n                                   {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                                   `else\n                                   pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n                                   dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n                                   {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n                                   `endif\n\n  wire [E203_PC_SIZE-1:0] pc_r;\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (clk, rst_n, pc_ena, pc_nxt, pc_r);\n\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  wire ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  wire out_flag_set = ifu_req_hsked;\n  wire out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n  wire out_flag_r;\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (clk, rst_n, out_flag_ena, out_flag_nxt, out_flag_r);\n\n  // Mini-decoder interface implementation\n  wire [E203_INSTR_SIZE-1:0] instr = ifu_ir_nxt;\n  wire minidec_rv32;\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n  wire [E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire [E203_XLEN-1:0] minidec_bjp_imm;\n  wire minidec_mul;\n  wire minidec_div;\n  wire minidec_rem;\n  wire minidec_divu;\n  wire minidec_remu;\n\n  // BPU interface and control\n  wire [E203_PC_SIZE-1:0] pc = pc_r;\n  wire dec_jal;\n  wire dec_jalr;\n  wire dec_bxx;\n  wire [E203_XLEN-1:0] dec_bjp_imm;\n  wire [E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx;\n  wire dec_i_valid = ifu_rsp_valid;\n  wire ir_valid_clr;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire [E203_XLEN-1:0] rf2bpu_x1;\n  wire [E203_XLEN-1:0] rf2bpu_rs1;\n\n  // State monitoring and control\n  wire pc_newpend_r;\n  wire pc_newpend_set = pc_ena;\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (clk, rst_n, pc_newpend_ena, pc_newpend_nxt, pc_newpend_r);\n\n  wire ifu_rsp_need_replay = 1'b0;\n  wire ifetch_replay_req = 1'b0;\n\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_lsu", "codeid": 20, "code": "module e203_lsu (\n  input  wire commit_mret,\n  input  wire commit_trap,\n  input  wire excp_active,\n  output wire lsu_active,\n\n  output wire lsu_o_valid,\n  input  wire lsu_o_ready,\n  output wire [XLEN-1:0] lsu_o_wbck_wdat,\n  output wire [ITAG_WIDTH-1:0] lsu_o_wbck_itag,\n  output wire lsu_o_wbck_err,\n  output wire lsu_o_cmt_ld,\n  output wire lsu_o_cmt_st,\n  output wire [ADDR_SIZE-1:0] lsu_o_cmt_badaddr,\n  output wire lsu_o_cmt_buserr,\n\n  input  wire agu_icb_cmd_valid,\n  output wire agu_icb_cmd_ready,\n  input  wire [ADDR_SIZE-1:0] agu_icb_cmd_addr,\n  input  wire agu_icb_cmd_read,\n  input  wire [XLEN-1:0] agu_icb_cmd_wdata,\n  input  wire [XLEN/8-1:0] agu_icb_cmd_wmask,\n  input  wire agu_icb_cmd_lock,\n  input  wire agu_icb_cmd_excl,\n  input  wire [1:0] agu_icb_cmd_size,\n  input  wire agu_icb_cmd_back2agu,\n  input  wire agu_icb_cmd_usign,\n  input  wire [ITAG_WIDTH-1:0] agu_icb_cmd_itag,\n  output wire agu_icb_rsp_valid,\n  input  wire agu_icb_rsp_ready,\n  output wire agu_icb_rsp_err,\n  output wire agu_icb_rsp_excl_ok,\n  output wire [XLEN-1:0] agu_icb_rsp_rdata,\n\n  input  wire nice_mem_holdup,\n  input  wire [ADDR_SIZE-1:0] itcm_region_indic,\n  input  wire [ADDR_SIZE-1:0] dtcm_region_indic,\n\n  output wire nice_icb_cmd_valid,\n  input  wire nice_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] nice_icb_cmd_addr,\n  output wire nice_icb_cmd_read,\n  output wire [XLEN-1:0] nice_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] nice_icb_cmd_wmask,\n  output wire nice_icb_cmd_lock,\n  output wire nice_icb_cmd_excl,\n  output wire [1:0] nice_icb_cmd_size,\n  input  wire nice_icb_rsp_valid,\n  output wire nice_icb_rsp_ready,\n  input  wire nice_icb_rsp_err,\n  input  wire nice_icb_rsp_rdata,\n\n  output wire dcache_icb_cmd_valid,\n  input  wire dcache_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dcache_icb_cmd_addr,\n  output wire dcache_icb_cmd_read,\n  output wire [XLEN-1:0] dcache_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dcache_icb_cmd_wmask,\n  output wire dcache_icb_cmd_lock,\n  output wire dcache_icb_cmd_excl,\n  output wire [1:0] dcache_icb_cmd_size,\n  input  wire dcache_icb_rsp_valid,\n  output wire dcache_icb_rsp_ready,\n  input  wire dcache_icb_rsp_err,\n  input  wire dcache_icb_rsp_excl_ok,\n  input  wire dcache_icb_rsp_rdata,\n\n  output wire dtcm_icb_cmd_valid,\n  input  wire dtcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] dtcm_icb_cmd_addr,\n  output wire dtcm_icb_cmd_read,\n  output wire [XLEN-1:0] dtcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] dtcm_icb_cmd_wmask,\n  output wire dtcm_icb_cmd_lock,\n  output wire dtcm_icb_cmd_excl,\n  output wire [1:0] dtcm_icb_cmd_size,\n  input  wire dtcm_icb_rsp_valid,\n  output wire dtcm_icb_rsp_ready,\n  input  wire dtcm_icb_rsp_err,\n  input  wire dtcm_icb_rsp_excl_ok,\n  input  wire dtcm_icb_rsp_rdata,\n\n  output wire itcm_icb_cmd_valid,\n  input  wire itcm_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] itcm_icb_cmd_addr,\n  output wire itcm_icb_cmd_read,\n  output wire [XLEN-1:0] itcm_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] itcm_icb_cmd_wmask,\n  output wire itcm_icb_cmd_lock,\n  output wire itcm_icb_cmd_excl,\n  output wire [1:0] itcm_icb_cmd_size,\n  input  wire itcm_icb_rsp_valid,\n  output wire itcm_icb_rsp_ready,\n  input  wire itcm_icb_rsp_err,\n  input  wire itcm_icb_rsp_excl_ok,\n  input  wire itcm_icb_rsp_rdata,\n\n  output wire biu_icb_cmd_valid,\n  input  wire biu_icb_cmd_ready,\n  output wire [ADDR_SIZE-1:0] biu_icb_cmd_addr,\n  output wire biu_icb_cmd_read,\n  output wire [XLEN-1:0] biu_icb_cmd_wdata,\n  output wire [XLEN/8-1:0] biu_icb_cmd_wmask,\n  output wire biu_icb_cmd_lock,\n  output wire biu_icb_cmd_excl,\n  output wire [1:0] biu_icb_cmd_size,\n  input  wire biu_icb_rsp_valid,\n  output wire biu_icb_rsp_ready,\n  input  wire biu_icb_rsp_err,\n  input  wire biu_icb_rsp_excl_ok,\n  input  wire biu_icb_rsp_rdata\n);\n\n  // LSU control logic instantiation\n  e203_lsu_ctrl u_e203_lsu_ctrl (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .lsu_ctrl_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .nice_icb_cmd_valid(nice_icb_cmd_valid),\n    .nice_icb_cmd_ready(nice_icb_cmd_ready),\n    .nice_icb_cmd_addr(nice_icb_cmd_addr),\n    .nice_icb_cmd_read(nice_icb_cmd_read),\n    .nice_icb_cmd_wdata(nice_icb_cmd_wdata),\n    .nice_icb_cmd_wmask(nice_icb_cmd_wmask),\n    .nice_icb_cmd_lock(nice_icb_cmd_lock),\n    .nice_icb_cmd_excl(nice_icb_cmd_excl),\n    .nice_icb_cmd_size(nice_icb_cmd_size),\n    .nice_icb_rsp_valid(nice_icb_rsp_valid),\n    .nice_icb_rsp_ready(nice_icb_rsp_ready),\n    .nice_icb_rsp_err(nice_icb_rsp_err),\n    .nice_icb_rsp_rdata(nice_icb_rsp_rdata),\n    .dcache_icb_cmd_valid(dcache_icb_cmd_valid),\n    .dcache_icb_cmd_ready(dcache_icb_cmd_ready),\n    .dcache_icb_cmd_addr(dcache_icb_cmd_addr),\n    .dcache_icb_cmd_read(dcache_icb_cmd_read),\n    .dcache_icb_cmd_wdata(dcache_icb_cmd_wdata),\n    .dcache_icb_cmd_wmask(dcache_icb_cmd_wmask),\n    .dcache_icb_cmd_lock(dcache_icb_cmd_lock),\n    .dcache_icb_cmd_excl(dcache_icb_cmd_excl),\n    .dcache_icb_cmd_size(dcache_icb_cmd_size),\n    .dcache_icb_rsp_valid(dcache_icb_rsp_valid),\n    .dcache_icb_rsp_ready(dcache_icb_rsp_ready),\n    .dcache_icb_rsp_err(dcache_icb_rsp_err),\n    .dcache_icb_rsp_excl_ok(dcache_icb_rsp_excl_ok),\n    .dcache_icb_rsp_rdata(dcache_icb_rsp_rdata),\n    .dtcm_icb_cmd_valid(dtcm_icb_cmd_valid),\n    .dtcm_icb_cmd_ready(dtcm_icb_cmd_ready),\n    .dtcm_icb_cmd_addr(dtcm_icb_cmd_addr),\n    .dtcm_icb_cmd_read(dtcm_icb_cmd_read),\n    .dtcm_icb_cmd_wdata(dtcm_icb_cmd_wdata),\n    .dtcm_icb_cmd_wmask(dtcm_icb_cmd_wmask),\n    .dtcm_icb_cmd_lock(dtcm_icb_cmd_lock),\n    .dtcm_icb_cmd_excl(dtcm_icb_cmd_excl),\n    .dtcm_icb_cmd_size(dtcm_icb_cmd_size),\n    .dtcm_icb_rsp_valid(dtcm_icb_rsp_valid),\n    .dtcm_icb_rsp_ready(dtcm_icb_rsp_ready),\n    .dtcm_icb_rsp_err(dtcm_icb_rsp_err),\n    .dtcm_icb_rsp_excl_ok(dtcm_icb_rsp_excl_ok),\n    .dtcm_icb_rsp_rdata(dtcm_icb_rsp_rdata),\n    .itcm_icb_cmd_valid(itcm_icb_cmd_valid),\n    .itcm_icb_cmd_ready(itcm_icb_cmd_ready),\n    .itcm_icb_cmd_addr(itcm_icb_cmd_addr),\n    .itcm_icb_cmd_read(itcm_icb_cmd_read),\n    .itcm_icb_cmd_wdata(itcm_icb_cmd_wdata),\n    .itcm_icb_cmd_wmask(itcm_icb_cmd_wmask),\n    .itcm_icb_cmd_lock(itcm_icb_cmd_lock),\n    .itcm_icb_cmd_excl(itcm_icb_cmd_excl),\n    .itcm_icb_cmd_size(itcm_icb_cmd_size),\n    .itcm_icb_rsp_valid(itcm_icb_rsp_valid),\n    .itcm_icb_rsp_ready(itcm_icb_rsp_ready),\n    .itcm_icb_rsp_err(itcm_icb_rsp_err),\n    .itcm_icb_rsp_excl_ok(itcm_icb_rsp_excl_ok),\n    .itcm_icb_rsp_rdata(itcm_icb_rsp_rdata),\n    .biu_icb_cmd_valid(biu_icb_cmd_valid),\n    .biu_icb_cmd_ready(biu_icb_cmd_ready),\n    .biu_icb_cmd_addr(biu_icb_cmd_addr),\n    .biu_icb_cmd_read(biu_icb_cmd_read),\n    .biu_icb_cmd_wdata(biu_icb_cmd_wdata),\n    .biu_icb_cmd_wmask(biu_icb_cmd_wmask),\n    .biu_icb_cmd_lock(biu_icb_cmd_lock),\n    .biu_icb_cmd_excl(biu_icb_cmd_excl),\n    .biu_icb_cmd_size(biu_icb_cmd_size),\n    .biu_icb_rsp_valid(biu_icb_rsp_valid),\n    .biu_icb_rsp_ready(biu_icb_rsp_ready),\n    .biu_icb_rsp_err(biu_icb_rsp_err),\n    .biu_icb_rsp_excl_ok(biu_icb_rsp_excl_ok),\n    .biu_icb_rsp_rdata(biu_icb_rsp_rdata)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_longpwbck", "codeid": 20, "code": "module e203_exu_longpwbck (\n  input lsu_wbck_i_valid,\n  output lsu_wbck_i_ready,\n  input [E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] lsu_wbck_i_itag,\n  input lsu_wbck_i_err,\n  input lsu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] lsu_cmt_i_badaddr,\n  input lsu_cmt_i_ld,\n  input lsu_cmt_i_st,\n  output longp_wbck_o_valid,\n  input longp_wbck_o_ready,\n  output [E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [4:0] longp_wbck_o_flags,\n  output [E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  output longp_excp_o_valid,\n  input longp_excp_o_ready,\n  output longp_excp_o_insterr,\n  output longp_excp_o_ld,\n  output longp_excp_o_st,\n  output longp_excp_o_buserr,\n  output [E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [E203_PC_SIZE-1:0] longp_excp_o_pc,\n  input oitf_empty,\n  input [E203_ITAG_WIDTH-1:0] oitf_ret_ptr,\n  input [E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input [E203_PC_SIZE-1:0] oitf_ret_pc,\n  input oitf_ret_rdwen,\n  input oitf_ret_rdfpu,\n  output oitf_ret_ena,\n  input clk,\n  input rst_n\n`ifdef E203_HAS_NICE\n  , input nice_longp_wbck_i_valid,\n  output nice_longp_wbck_i_ready,\n  input [E203_XLEN-1:0] nice_longp_wbck_i_wdat,\n  input [E203_ITAG_WIDTH-1:0] nice_longp_wbck_i_itag,\n  input nice_longp_wbck_i_err\n`endif\n);\n\n// Module implementation\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_itcm_ctrl", "codeid": 20, "code": "module e203_itcm_ctrl (\n    input wire clk,\n    input wire rst_n,\n    input wire test_mode,\n    input wire tcm_cgstop,\n    output wire itcm_active,\n    input wire ifu2itcm_icb_cmd_valid,\n    output wire ifu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n    input wire ifu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask,\n    output wire ifu2itcm_icb_rsp_valid,\n    input wire ifu2itcm_icb_rsp_ready,\n    output wire ifu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n    input wire lsu2itcm_icb_cmd_valid,\n    output wire lsu2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] lsu2itcm_icb_cmd_addr,\n    input wire lsu2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] lsu2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] lsu2itcm_icb_cmd_wmask,\n    output wire lsu2itcm_icb_rsp_valid,\n    input wire lsu2itcm_icb_rsp_ready,\n    output wire lsu2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] lsu2itcm_icb_rsp_rdata,\n    input wire ext2itcm_icb_cmd_valid,\n    output wire ext2itcm_icb_cmd_ready,\n    input wire [ADDR_WIDTH-1:0] ext2itcm_icb_cmd_addr,\n    input wire ext2itcm_icb_cmd_read,\n    input wire [DATA_WIDTH-1:0] ext2itcm_icb_cmd_wdata,\n    input wire [WMSK_WIDTH-1:0] ext2itcm_icb_cmd_wmask,\n    output wire ext2itcm_icb_rsp_valid,\n    input wire ext2itcm_icb_rsp_ready,\n    output wire ext2itcm_icb_rsp_err,\n    output wire [DATA_WIDTH-1:0] ext2itcm_icb_rsp_rdata,\n    output wire itcm_ram_cs,\n    output wire itcm_ram_we,\n    output wire [RAM_AW-1:0] itcm_ram_addr,\n    output wire [RAM_MW-1:0] itcm_ram_wem,\n    output wire [RAM_DW-1:0] itcm_ram_din,\n    input wire [RAM_DW-1:0] itcm_ram_dout,\n    output wire clk_itcm_ram\n);\n\n// Internal signals and module instantiations go here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 19, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  input wire ifu_rsp_valid,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire ifu_rsp_err,\n  input wire pipe_flush_req,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input wire ifu_o_ready,\n  input wire ifu_halt_req,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  output wire ifu_rsp_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  output wire pipe_flush_ack,\n  output wire ifu_halt_ack,\n  output wire [E203_PC_SIZE-1:0] inspect_pc\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire bpu_wait;\n  wire prdt_taken;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op1;\n  wire [E203_PC_SIZE-1:0] prdt_pc_add_op2;\n  wire bpu2rf_rs1_ena;\n  wire ifu_rsp_need_replay;\n  wire ifetch_replay_req;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n  wire [E203_PC_SIZE-1:0] pc_nxt_pre;\n  wire [E203_PC_SIZE-1:0] pc_nxt;\n  wire pc_ena;\n  wire [E203_PC_SIZE-1:0] pc_add_op1;\n  wire [E203_PC_SIZE-1:0] pc_add_op2;\n  wire [2:0] pc_incr_ofst;\n  wire ifu_new_req;\n  wire new_req_condi;\n  wire ifu_req_valid_pre;\n  wire ifu_rsp2ir_ready;\n  wire out_flag_set;\n  wire out_flag_clr;\n  wire out_flag_ena;\n  wire out_flag_nxt;\n  wire pc_newpend_set;\n  wire pc_newpend_clr;\n  wire pc_newpend_ena;\n  wire pc_newpend_nxt;\n\n  // Instantiate submodules\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_r),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(ir_empty),\n    .ir_rs1en(ir_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Reset control logic\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Halt control logic\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Pipeline flush control\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // IR control\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_valid_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Fetch request generation and control\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  assign ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  assign new_req_condi = (~out_flag_r) | out_flag_clr;\n  assign ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  assign ifu_rsp2ir_ready = (pipe_flush_req_real)? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  assign out_flag_set = ifu_req_hsked;\n  assign out_flag_clr = ifu_rsp_hsked;\n  assign out_flag_ena = out_flag_set | out_flag_clr;\n  assign out_flag_nxt = out_flag_set | (~out_flag_clr);\n\n  assign pc_newpend_set = pc_ena;\n  assign pc_newpend_clr = ir_pc_vld_set;\n  assign pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  assign pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n\n  // PC control logic\n  assign pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  assign pc_add_op1 = (pipe_flush_req)? pipe_flush_add_op1 : (ifetch_replay_req)? pc_r : (bjp_req)? prdt_pc_add_op1 : (ifu_reset_req)? pc_rtvec : pc_r;\n  assign pc_add_op2 = (pipe_flush_req)? pipe_flush_add_op2 : (ifetch_replay_req)? 0 : (bjp_req)? prdt_pc_add_op2 : (ifu_reset_req)? 0 : pc_incr_ofst;\n  assign pc_incr_ofst = minidec_rv32? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n  assign pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  assign pc_nxt = {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n\n  // Output assignments\n  assign inspect_pc = pc_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_branchslv", "codeid": 20, "code": "module e203_exu_branchslv (\n  input cmt_i_valid,\n  output cmt_i_ready,\n  input cmt_i_rv32,\n  input cmt_i_dret,\n  input cmt_i_mret,\n  input cmt_i_fencei,\n  input cmt_i_bjp,\n  input cmt_i_bjp_prdt,\n  input cmt_i_bjp_rslv,\n  input [E203_PC_SIZE-1:0] cmt_i_pc,\n  input [E203_XLEN-1:0] cmt_i_imm,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input nonalu_excpirq_flush_req_raw,\n  input brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op1,\n  output [E203_PC_SIZE-1:0] brchmis_flush_add_op2,\n  output [E203_PC_SIZE-1:0] brchmis_flush_pc,\n  output cmt_mret_ena,\n  output cmt_dret_ena,\n  output cmt_fencei_ena,\n  input clk,\n  input rst_n\n);\n\n  wire flush_need = (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) | cmt_i_fencei | cmt_i_mret | cmt_i_dret;\n  wire flush_ack = brchmis_flush_ack & ~nonalu_excpirq_flush_req_raw;\n  assign brchmis_flush_req = flush_need & cmt_i_valid & ~nonalu_excpirq_flush_req_raw;\n\n  assign cmt_i_ready = ~cmt_i_bjp & ~cmt_i_fencei & ~cmt_i_mret & ~cmt_i_dret |\n                       (~nonalu_excpirq_flush_req_raw & ~flush_need) |\n                       (~nonalu_excpirq_flush_req_raw & flush_ack);\n\n  assign cmt_mret_ena = cmt_i_mret & flush_ack;\n  assign cmt_dret_ena = cmt_i_dret & flush_ack;\n  assign cmt_fencei_ena = cmt_i_fencei & flush_ack;\n\n  assign brchmis_flush_add_op1 = cmt_i_pc;\n  assign brchmis_flush_add_op2 = cmt_i_imm[E203_PC_SIZE-1:0];\n\n  generate\n    if (E203_TIMING_BOOST) begin\n      assign brchmis_flush_pc = (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? \n                                (cmt_i_pc + (cmt_i_rv32 ? 4 : 2)) :\n                                (cmt_i_bjp & ~cmt_i_bjp_prdt) ? \n                                (cmt_i_pc + cmt_i_imm[E203_PC_SIZE-1:0]) :\n                                cmt_i_dret ? csr_dpc_r : csr_epc_r;\n    end\n  endgenerate\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_commit", "codeid": 20, "code": "module e203_exu_commit (\n  output commit_mret,\n  output commit_trap,\n  output core_wfi,\n  output nonflush_cmt_ena,\n  output excp_active,\n  input amo_wait,\n  output wfi_halt_ifu_req,\n  output wfi_halt_exu_req,\n  input wfi_halt_ifu_ack,\n  input wfi_halt_exu_ack,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input status_mie_r,\n  input mtie_r,\n  input msie_r,\n  input meie_r,\n  input alu_cmt_i_valid,\n  output alu_cmt_i_ready,\n  input [E203_PC_SIZE-1:0] alu_cmt_i_pc,\n  input [E203_INSTR_SIZE-1:0] alu_cmt_i_instr,\n  input alu_cmt_i_pc_vld,\n  input [E203_XLEN-1:0] alu_cmt_i_imm,\n  input alu_cmt_i_rv32,\n  input alu_cmt_i_bjp,\n  input alu_cmt_i_wfi,\n  input alu_cmt_i_fencei,\n  input alu_cmt_i_mret,\n  input alu_cmt_i_dret,\n  input alu_cmt_i_ecall,\n  input alu_cmt_i_ebreak,\n  input alu_cmt_i_ifu_misalgn,\n  input alu_cmt_i_ifu_buserr,\n  input alu_cmt_i_ifu_ilegl,\n  input alu_cmt_i_bjp_prdt,\n  input alu_cmt_i_bjp_rslv,\n  input alu_cmt_i_misalgn,\n  input alu_cmt_i_ld,\n  input alu_cmt_i_stamo,\n  input alu_cmt_i_buserr,\n  input [E203_ADDR_SIZE-1:0] alu_cmt_i_badaddr,\n  output [E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output cmt_badaddr_ena,\n  output [E203_PC_SIZE-1:0] cmt_epc,\n  output cmt_epc_ena,\n  output [E203_XLEN-1:0] cmt_cause,\n  output cmt_cause_ena,\n  output cmt_instret_ena,\n  output cmt_status_ena,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  output cmt_mret_ena,\n  input [E203_PC_SIZE-1:0] csr_epc_r,\n  input [E203_PC_SIZE-1:0] csr_dpc_r,\n  input [E203_XLEN-1:0] csr_mtvec_r,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input oitf_empty,\n  input u_mode,\n  input s_mode,\n  input h_mode,\n  input m_mode,\n  output longp_excp_i_ready,\n  input longp_excp_i_valid,\n  input longp_excp_i_ld,\n  input longp_excp_i_st,\n  input longp_excp_i_buserr,\n  input [E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input longp_excp_i_insterr,\n  input [E203_PC_SIZE-1:0] longp_excp_i_pc,\n  input pipe_flush_ack,\n  output flush_req,\n  output flush_pulse,\n  output pipe_flush_req,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  output [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  output [E203_PC_SIZE-1:0] pipe_flush_pc,\n  input clk,\n  input rst_n\n);\n\n  // Module implementation here\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_biu", "codeid": 20, "code": "module e203_biu (\n  output biu_active,\n  input clk,\n  input rst_n,\n\n  // LSU ICB Interface\n  input lsu2biu_icb_cmd_valid,\n  output lsu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] lsu2biu_icb_cmd_addr,\n  input lsu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] lsu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] lsu2biu_icb_cmd_wmask,\n  input [1:0] lsu2biu_icb_cmd_burst,\n  input [1:0] lsu2biu_icb_cmd_beat,\n  input lsu2biu_icb_cmd_lock,\n  input lsu2biu_icb_cmd_excl,\n  input [1:0] lsu2biu_icb_cmd_size,\n  output lsu2biu_icb_rsp_valid,\n  input lsu2biu_icb_rsp_ready,\n  output lsu2biu_icb_rsp_err,\n  output lsu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] lsu2biu_icb_rsp_rdata,\n\n  // IFU ICB Interface\n  input ifu2biu_icb_cmd_valid,\n  output ifu2biu_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ifu2biu_icb_cmd_addr,\n  input ifu2biu_icb_cmd_read,\n  input [E203_XLEN-1:0] ifu2biu_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ifu2biu_icb_cmd_wmask,\n  input [1:0] ifu2biu_icb_cmd_burst,\n  input [1:0] ifu2biu_icb_cmd_beat,\n  input ifu2biu_icb_cmd_lock,\n  input ifu2biu_icb_cmd_excl,\n  input [1:0] ifu2biu_icb_cmd_size,\n  output ifu2biu_icb_rsp_valid,\n  input ifu2biu_icb_rsp_ready,\n  output ifu2biu_icb_rsp_err,\n  output ifu2biu_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ifu2biu_icb_rsp_rdata,\n\n  // PPI ICB Interface\n  input [E203_ADDR_SIZE-1:0] ppi_region_indic,\n  input ppi_icb_enable,\n  input ppi_icb_cmd_valid,\n  output ppi_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  input ppi_icb_cmd_read,\n  input [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input [1:0] ppi_icb_cmd_burst,\n  input [1:0] ppi_icb_cmd_beat,\n  input ppi_icb_cmd_lock,\n  input ppi_icb_cmd_excl,\n  input [1:0] ppi_icb_cmd_size,\n  output ppi_icb_rsp_valid,\n  input ppi_icb_rsp_ready,\n  output ppi_icb_rsp_err,\n  output ppi_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] ppi_icb_rsp_rdata,\n\n  // CLINT ICB Interface\n  input [E203_ADDR_SIZE-1:0] clint_region_indic,\n  input clint_icb_enable,\n  input clint_icb_cmd_valid,\n  output clint_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] clint_icb_cmd_addr,\n  input clint_icb_cmd_read,\n  input [E203_XLEN-1:0] clint_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] clint_icb_cmd_wmask,\n  input [1:0] clint_icb_cmd_burst,\n  input [1:0] clint_icb_cmd_beat,\n  input clint_icb_cmd_lock,\n  input clint_icb_cmd_excl,\n  input [1:0] clint_icb_cmd_size,\n  output clint_icb_rsp_valid,\n  input clint_icb_rsp_ready,\n  output clint_icb_rsp_err,\n  output clint_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] clint_icb_rsp_rdata,\n\n  // PLIC ICB Interface\n  input [E203_ADDR_SIZE-1:0] plic_region_indic,\n  input plic_icb_enable,\n  input plic_icb_cmd_valid,\n  output plic_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] plic_icb_cmd_addr,\n  input plic_icb_cmd_read,\n  input [E203_XLEN-1:0] plic_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] plic_icb_cmd_wmask,\n  input [1:0] plic_icb_cmd_burst,\n  input [1:0] plic_icb_cmd_beat,\n  input plic_icb_cmd_lock,\n  input plic_icb_cmd_excl,\n  input [1:0] plic_icb_cmd_size,\n  output plic_icb_rsp_valid,\n  input plic_icb_rsp_ready,\n  output plic_icb_rsp_err,\n  output plic_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] plic_icb_rsp_rdata,\n\n  // FIO ICB Interface\n  input [E203_ADDR_SIZE-1:0] fio_region_indic,\n  input fio_icb_enable,\n  input fio_icb_cmd_valid,\n  output fio_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] fio_icb_cmd_addr,\n  input fio_icb_cmd_read,\n  input [E203_XLEN-1:0] fio_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] fio_icb_cmd_wmask,\n  input [1:0] fio_icb_cmd_burst,\n  input [1:0] fio_icb_cmd_beat,\n  input fio_icb_cmd_lock,\n  input fio_icb_cmd_excl,\n  input [1:0] fio_icb_cmd_size,\n  output fio_icb_rsp_valid,\n  input fio_icb_rsp_ready,\n  output fio_icb_rsp_err,\n  output fio_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] fio_icb_rsp_rdata,\n\n  // MEM ICB Interface\n  input mem_icb_enable,\n  input mem_icb_cmd_valid,\n  output mem_icb_cmd_ready,\n  input [E203_ADDR_SIZE-1:0] mem_icb_cmd_addr,\n  input mem_icb_cmd_read,\n  input [E203_XLEN-1:0] mem_icb_cmd_wdata,\n  input [E203_XLEN/8-1:0] mem_icb_cmd_wmask,\n  input [1:0] mem_icb_cmd_burst,\n  input [1:0] mem_icb_cmd_beat,\n  input mem_icb_cmd_lock,\n  input mem_icb_cmd_excl,\n  input [1:0] mem_icb_cmd_size,\n  output mem_icb_rsp_valid,\n  input mem_icb_rsp_ready,\n  output mem_icb_rsp_err,\n  output mem_icb_rsp_excl_ok,\n  output [E203_XLEN-1:0] mem_icb_rsp_rdata\n);\n\n// Internal signals and logic for arbitration, buffering, and splitting\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_ifu_ifetch", "codeid": 20, "code": "module e203_ifu_ifetch (\n  input wire clk,\n  input wire rst_n,\n  input wire ifu_req_ready,\n  output wire ifu_req_valid,\n  output wire [E203_PC_SIZE-1:0] ifu_req_pc,\n  output wire ifu_req_seq,\n  output wire ifu_req_seq_rv32,\n  output wire [E203_PC_SIZE-1:0] ifu_req_last_pc,\n  input wire ifu_rsp_valid,\n  output wire ifu_rsp_ready,\n  input wire ifu_rsp_err,\n  input wire [E203_INSTR_SIZE-1:0] ifu_rsp_instr,\n  input wire pipe_flush_req,\n  output wire pipe_flush_ack,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op1,\n  input wire [E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  input wire ifu_o_ready,\n  output wire [E203_INSTR_SIZE-1:0] ifu_o_ir,\n  output wire [E203_PC_SIZE-1:0] ifu_o_pc,\n  output wire ifu_o_pc_vld,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output wire [E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output wire ifu_o_prdt_taken,\n  output wire ifu_o_misalgn,\n  output wire ifu_o_buserr,\n  output wire ifu_o_muldiv_b2b,\n  output wire ifu_o_valid,\n  input wire ifu_halt_req,\n  output wire ifu_halt_ack,\n  input wire oitf_empty,\n  input wire [E203_XLEN-1:0] rf2ifu_x1,\n  input wire [E203_XLEN-1:0] rf2ifu_rs1,\n  input wire dec2ifu_rs1en,\n  input wire dec2ifu_rden,\n  input wire [E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input wire dec2ifu_mulhsu,\n  input wire dec2ifu_div,\n  input wire dec2ifu_rem,\n  input wire dec2ifu_divu,\n  input wire dec2ifu_remu\n);\n\n  // Internal signal declarations\n  wire ifu_req_hsked;\n  wire ifu_rsp_hsked;\n  wire ifu_ir_o_hsked;\n  wire pipe_flush_hsked;\n  wire reset_flag_r;\n  wire reset_req_r;\n  wire halt_ack_r;\n  wire dly_flush_r;\n  wire ir_valid_r;\n  wire ir_pc_vld_r;\n  wire ifu_err_r;\n  wire ifu_prdt_taken_r;\n  wire ifu_muldiv_b2b_r;\n  wire [E203_INSTR_SIZE-1:0] ifu_ir_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire [E203_PC_SIZE-1:0] ifu_pc_r;\n  wire [E203_PC_SIZE-1:0] pc_r;\n  wire out_flag_r;\n  wire pc_newpend_r;\n  wire ifu_rsp_need_replay;\n  wire ifetch_replay_req;\n  wire ir_empty;\n  wire ir_rs1en;\n  wire ir_rden;\n  wire [E203_RFIDX_WIDTH-1:0] ir_rdidx;\n\n  // Instantiate submodules\n  e203_ifu_minidec u_e203_ifu_minidec (\n    .instr(ifu_ir_r),\n    .dec_rs1en(minidec_rs1en),\n    .dec_rs2en(minidec_rs2en),\n    .dec_rs1idx(minidec_rs1idx),\n    .dec_rs2idx(minidec_rs2idx),\n    .dec_mulhsu(minidec_mulhsu),\n    .dec_mul(minidec_mul),\n    .dec_div(minidec_div),\n    .dec_rem(minidec_rem),\n    .dec_divu(minidec_divu),\n    .dec_remu(minidec_remu),\n    .dec_rv32(minidec_rv32),\n    .dec_bjp(minidec_bjp),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .dec_bjp_imm(minidec_bjp_imm)\n  );\n\n  e203_ifu_litebpu u_e203_ifu_litebpu (\n    .pc(pc_r),\n    .dec_jal(minidec_jal),\n    .dec_jalr(minidec_jalr),\n    .dec_bxx(minidec_bxx),\n    .dec_bjp_imm(minidec_bjp_imm),\n    .dec_jalr_rs1idx(minidec_jalr_rs1idx),\n    .oitf_empty(oitf_empty),\n    .ir_empty(ir_empty),\n    .ir_rs1en(ir_rs1en),\n    .jalr_rs1idx_cam_irrdidx(jalr_rs1idx_cam_irrdidx),\n    .bpu_wait(bpu_wait),\n    .prdt_taken(prdt_taken),\n    .prdt_pc_add_op1(prdt_pc_add_op1),\n    .prdt_pc_add_op2(prdt_pc_add_op2),\n    .dec_i_valid(ifu_rsp_valid),\n    .bpu2rf_rs1_ena(bpu2rf_rs1_ena),\n    .ir_valid_clr(ir_valid_clr),\n    .rf2bpu_x1(rf2ifu_x1),\n    .rf2bpu_rs1(rf2ifu_rs1),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // DFFRS and DFFLR instantiations\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (\n    .dnxt(1'b0),\n    .qout(reset_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (\n    .lden(reset_req_ena),\n    .dnxt(reset_req_nxt),\n    .qout(reset_req_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (\n    .lden(halt_ack_ena),\n    .dnxt(halt_ack_nxt),\n    .qout(halt_ack_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) dly_flush_dfflr (\n    .lden(dly_flush_ena),\n    .dnxt(dly_flush_nxt),\n    .qout(dly_flush_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (\n    .lden(ir_valid_ena),\n    .dnxt(ir_valid_nxt),\n    .qout(ir_valid_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ir_pc_vld_dfflr (\n    .lden(ir_pc_vld_ena),\n    .dnxt(ir_pc_vld_nxt),\n    .qout(ir_pc_vld_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_err_nxt),\n    .qout(ifu_err_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(prdt_taken),\n    .qout(ifu_prdt_taken_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) ifu_muldiv_b2b_dfflr (\n    .lden(ir_valid_set),\n    .dnxt(ifu_muldiv_b2b_nxt),\n    .qout(ifu_muldiv_b2b_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_hi_ir_dfflr (\n    .lden(ir_hi_ena),\n    .dnxt(ifu_ir_nxt[31:16]),\n    .qout(ifu_ir_r[31:16]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(16) ifu_lo_ir_dfflr (\n    .lden(ir_lo_ena),\n    .dnxt(ifu_ir_nxt[15:0]),\n    .qout(ifu_ir_r[15:0]),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs1idx_dfflr (\n    .lden(ir_rs1idx_ena),\n    .dnxt(ir_rs1idx_nxt),\n    .qout(ir_rs1idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_RFIDX_WIDTH) ir_rs2idx_dfflr (\n    .lden(ir_rs2idx_ena),\n    .dnxt(ir_rs2idx_nxt),\n    .qout(ir_rs2idx_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) ifu_pc_dfflr (\n    .lden(ir_pc_vld_set),\n    .dnxt(ifu_pc_nxt),\n    .qout(ifu_pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(E203_PC_SIZE) pc_dfflr (\n    .lden(pc_ena),\n    .dnxt(pc_nxt),\n    .qout(pc_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (\n    .lden(out_flag_ena),\n    .dnxt(out_flag_nxt),\n    .qout(out_flag_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (\n    .lden(pc_newpend_ena),\n    .dnxt(pc_newpend_nxt),\n    .qout(pc_newpend_r),\n    .clk(clk),\n    .rst_n(rst_n)\n  );\n\n  // Additional logic and assignments\n  assign ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  assign ifu_rsp_hsked = ifu_rsp_valid & ifu_rsp_ready;\n  assign ifu_ir_o_hsked = ifu_o_valid & ifu_o_ready;\n  assign pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  // Reset control logic\n  assign reset_req_set = (~reset_req_r) & reset_flag_r;\n  assign reset_req_clr = reset_req_r & ifu_req_hsked;\n  assign reset_req_ena = reset_req_set | reset_req_clr;\n  assign reset_req_nxt = reset_req_set | (~reset_req_clr);\n  assign ifu_reset_req = reset_req_r;\n\n  // Halt control logic\n  assign halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n  assign halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n  assign halt_ack_ena = halt_ack_set | halt_ack_clr;\n  assign halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n  assign ifu_halt_ack = halt_ack_r;\n\n  // Pipeline flush control\n  assign dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n  assign dly_flush_clr = dly_flush_r & ifu_req_hsked;\n  assign dly_flush_ena = dly_flush_set | dly_flush_clr;\n  assign dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n  assign dly_pipe_flush_req = dly_flush_r;\n  assign pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n  // IR control\n  assign ir_valid_set = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  assign ir_valid_clr = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  assign ir_valid_ena = ir_valid_set | ir_valid_clr;\n  assign ir_valid_nxt = ir_valid_set | (~ir_valid_clr);\n\n  assign ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  assign ir_pc_vld_clr = ir_valid_clr;\n  assign ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  assign ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n\n  assign ifu_err_nxt = ifu_rsp_err;\n  assign ifu_muldiv_b2b_nxt = dec2ifu_mulhsu | dec2ifu_div | dec2ifu_rem | dec2ifu_divu | dec2ifu_remu;\n\n  assign ir_hi_ena = ir_valid_set & minidec_rv32;\n  assign ir_lo_ena = ir_valid_set;\n  assign ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) |\n                         ((~minidec_fpu) & ir_valid_set & minidec_rs1en) |\n                         bpu2rf_rs1_ena;\n  assign ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  assign ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) |\n                         ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  assign ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n\n  // PC control logic\n  assign pc_ena = ifu_req_hsked | pipe_flush_hsked;\n  assign pc_add_op1 = (pipe_flush_req ? pipe_flush_add_op1 :\n                      (dly_pipe_flush_req ? pc_r :\n                      (ifetch_replay_req ? pc_r :\n                      (bjp_req ? prdt_pc_add_op1 :\n                      (ifu_reset_req ? pc_rtvec : pc_r)))));\n  assign pc_add_op2 = (pipe_flush_req ? pipe_flush_add_op2 :\n                      (dly_pipe_flush_req ? 0 :\n                      (ifetch_replay_req ? 0 :\n                      (bjp_req ? prdt_pc_add_op2 :\n                      (ifu_reset_req ? 0 : pc_incr_ofst)))));\n  assign pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n  assign pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  assign pc_nxt = {pc_nxt_pre[E203_PC_SIZE-1:1],1'b0};\n  assign inspect_pc = pc_r;\n\n  // Fetch request generation and control\n  assign ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n  assign new_req_condi = (~out_flag_r) | out_flag_clr;\n  assign ifu_req_valid_pre = ifu_new_req | ifu_reset_req | pipe_flush_req_real | ifetch_replay_req;\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n  assign ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // Outstanding request control\n  assign out_flag_set = ifu_req_hsked;\n  assign out_flag_clr = ifu_rsp_hsked;\n  assign out_flag_ena = out_flag_set | out_flag_clr;\n  assign out_flag_nxt = out_flag_set | (~out_flag_clr);\n\n  // State monitoring and control\n  assign pc_newpend_set = pc_ena;\n  assign pc_newpend_clr = ir_pc_vld_set;\n  assign pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n  assign pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n\n  // Special case handling\n  `ifndef E203_HAS_FPU\n    assign minidec_fpu = 1'b0;\n    assign minidec_fpu_rs1en = 1'b0;\n    assign minidec_fpu_rs2en = 1'b0;\n    assign minidec_fpu_rs3en = 1'b0;\n    assign minidec_fpu_rs1fpu = 1'b0;\n    assign minidec_fpu_rs2fpu = 1'b0;\n    assign minidec_fpu_rs3fpu = 1'b0;\n    assign minidec_fpu_rs1idx = {E203_RFIDX_WIDTH{1'b0}};\n    assign minidec_fpu_rs2idx = {E203_RFIDX_WIDTH{1'b0}};\n  `endif\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_core", "codeid": 20, "code": "module e203_core (\n  output [E203_PC_SIZE-1:0] inspect_pc,\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  input [E203_PC_SIZE-1:0] pc_rtvec,\n  input [E203_HART_ID_W-1:0] core_mhartid,\n  input dbg_irq_r,\n  input [E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input [E203_EVT_NUM-1:0] evt_r,\n  input ext_irq_r,\n  input sft_irq_r,\n  input tmr_irq_r,\n  output wr_dcsr_ena,\n  output wr_dpc_ena,\n  output wr_dscratch_ena,\n  output [31:0] wr_csr_nxt,\n  input [31:0] dcsr_r,\n  input [E203_PC_SIZE-1:0] dpc_r,\n  input [31:0] dscratch_r,\n  output [E203_PC_SIZE-1:0] cmt_dpc,\n  output cmt_dpc_ena,\n  output [2:0] cmt_dcause,\n  output cmt_dcause_ena,\n  input dbg_mode,\n  input dbg_halt_r,\n  input dbg_step_r,\n  input dbg_ebreakm_r,\n  input dbg_stopcycle,\n  input ifu2itcm_icb_cmd_ready,\n  output ifu2itcm_icb_cmd_valid,\n  output [E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr,\n  input ifu2itcm_icb_rsp_valid,\n  output ifu2itcm_icb_rsp_ready,\n  input ifu2itcm_icb_rsp_err,\n  input [E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata,\n  input ppi_icb_cmd_ready,\n  output ppi_icb_cmd_valid,\n  output [E203_ADDR_SIZE-1:0] ppi_icb_cmd_addr,\n  output ppi_icb_cmd_read,\n  output [E203_XLEN-1:0] ppi_icb_cmd_wdata,\n  output [E203_XLEN/8-1:0] ppi_icb_cmd_wmask,\n  input ppi_icb_rsp_valid,\n  output ppi_icb_rsp_ready,\n  input ppi_icb_rsp_err,\n  input [E203_XLEN-1:0] ppi_icb_rsp_rdata\n);\n\n  // Instantiate submodules\n  e203_ifu u_e203_ifu (\n    .clk(clk),\n    .rst_n(rst_n),\n    .inspect_pc(inspect_pc),\n    .ifu_active(ifu_active),\n    .itcm_nohold(itcm_nohold),\n    .pc_rtvec(pc_rtvec),\n    .ifu_o_ir(ifu_o_ir),\n    .ifu_o_pc(ifu_o_pc),\n    .ifu_o_pc_vld(ifu_o_pc_vld),\n    .ifu_o_misalgn(ifu_o_misalgn),\n    .ifu_o_buserr(ifu_o_buserr),\n    .ifu_o_rs1idx(ifu_o_rs1idx),\n    .ifu_o_rs2idx(ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid(ifu_o_valid),\n    .ifu_o_ready(ifu_o_ready),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .ifu2itcm_holdup(ifu2itcm_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr(ifu2itcm_icb_cmd_addr),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err(ifu2itcm_icb_rsp_err),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ifu_halt_req(ifu_halt_req),\n    .ifu_halt_ack(ifu_halt_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu)\n  );\n\n  e203_exu u_e203_exu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .exu_active(exu_active),\n    .excp_active(excp_active),\n    .core_wfi(core_wfi),\n    .tm_stop(tm_stop),\n    .itcm_nohold(itcm_nohold),\n    .core_cgstop(core_cgstop),\n    .tcm_cgstop(tcm_cgstop),\n    .core_mhartid(core_mhartid),\n    .dbg_irq_r(dbg_irq_r),\n    .lcl_irq_r(lcl_irq_r),\n    .evt_r(evt_r),\n    .ext_irq_r(ext_irq_r),\n    .sft_irq_r(sft_irq_r),\n    .tmr_irq_r(tmr_irq_r),\n    .wfi_halt_ifu_req(wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack(wfi_halt_ifu_ack),\n    .oitf_empty(oitf_empty),\n    .rf2ifu_x1(rf2ifu_x1),\n    .rf2ifu_rs1(rf2ifu_rs1),\n    .dec2ifu_rden(dec2ifu_rden),\n    .dec2ifu_rs1en(dec2ifu_rs1en),\n    .dec2ifu_rdidx(dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div(dec2ifu_div),\n    .dec2ifu_rem(dec2ifu_rem),\n    .dec2ifu_divu(dec2ifu_divu),\n    .dec2ifu_remu(dec2ifu_remu),\n    .test_mode(test_mode),\n    .clk_aon(clk_aon),\n    .clk(clk),\n    .rst_n(rst_n),\n    .cmt_dpc(cmt_dpc),\n    .cmt_dpc_ena(cmt_dpc_ena),\n    .cmt_dcause(cmt_dcause),\n    .cmt_dcause_ena(cmt_dcause_ena),\n    .wr_dcsr_ena(wr_dcsr_ena),\n    .wr_dpc_ena(wr_dpc_ena),\n    .wr_dscratch_ena(wr_dscratch_ena),\n    .wr_csr_nxt(wr_csr_nxt),\n    .dcsr_r(dcsr_r),\n    .dpc_r(dpc_r),\n    .dscratch_r(dscratch_r),\n    .dbg_mode(dbg_mode),\n    .dbg_halt_r(dbg_halt_r),\n    .dbg_step_r(dbg_step_r),\n    .dbg_ebreakm_r(dbg_ebreakm_r),\n    .dbg_stopcycle(dbg_stopcycle),\n    .i_valid(ifu_o_valid),\n    .i_ready(ifu_o_ready),\n    .i_ir(ifu_o_ir),\n    .i_pc(ifu_o_pc),\n    .i_pc_vld(ifu_o_pc_vld),\n    .i_misalgn(ifu_o_misalgn),\n    .i_buserr(ifu_o_buserr),\n    .i_prdt_taken(ifu_o_prdt_taken),\n    .i_muldiv_b2b(ifu_o_muldiv_b2b),\n    .i_rs1idx(ifu_o_rs1idx),\n    .i_rs2idx(ifu_o_rs2idx),\n    .pipe_flush_ack(pipe_flush_ack),\n    .pipe_flush_req(pipe_flush_req),\n    .pipe_flush_add_op1(pipe_flush_add_op1),\n    .pipe_flush_add_op2(pipe_flush_add_op2),\n    .pipe_flush_pc(pipe_flush_pc),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_csr_valid(nice_csr_valid),\n    .nice_csr_ready(nice_csr_ready),\n    .nice_csr_addr(nice_csr_addr),\n    .nice_csr_wr(nice_csr_wr),\n    .nice_csr_wdata(nice_csr_wdata),\n    .nice_csr_rdata(nice_csr_rdata),\n    .nice_req_valid(nice_req_valid),\n    .nice_req_ready(nice_req_ready),\n    .nice_req_inst(nice_req_inst),\n    .nice_req_rs1(nice_req_rs1),\n    .nice_req_rs2(nice_req_rs2),\n    .nice_rsp_multicyc_valid(nice_rsp_multicyc_valid),\n    .nice_rsp_multicyc_ready(nice_rsp_multicyc_ready),\n    .nice_rsp_multicyc_dat(nice_rsp_multicyc_dat),\n    .nice_rsp_multicyc_err(nice_rsp_multicyc_err)\n  );\n\n  e203_lsu u_e203_lsu (\n    .commit_mret(commit_mret),\n    .commit_trap(commit_trap),\n    .excp_active(excp_active),\n    .lsu_active(lsu_active),\n    .lsu_o_valid(lsu_o_valid),\n    .lsu_o_ready(lsu_o_ready),\n    .lsu_o_wbck_wdat(lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag(lsu_o_wbck_itag),\n    .lsu_o_wbck_err(lsu_o_wbck_err),\n    .lsu_o_cmt_ld(lsu_o_cmt_ld),\n    .lsu_o_cmt_st(lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr(lsu_o_cmt_badaddr),\n    .lsu_o_cmt_buserr(lsu_o_cmt_buserr),\n    .agu_icb_cmd_valid(agu_icb_cmd_valid),\n    .agu_icb_cmd_ready(agu_icb_cmd_ready),\n    .agu_icb_cmd_addr(agu_icb_cmd_addr),\n    .agu_icb_cmd_read(agu_icb_cmd_read),\n    .agu_icb_cmd_wdata(agu_icb_cmd_wdata),\n    .agu_icb_cmd_wmask(agu_icb_cmd_wmask),\n    .agu_icb_cmd_lock(agu_icb_cmd_lock),\n    .agu_icb_cmd_excl(agu_icb_cmd_excl),\n    .agu_icb_cmd_size(agu_icb_cmd_size),\n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign(agu_icb_cmd_usign),\n    .agu_icb_cmd_itag(agu_icb_cmd_itag),\n    .agu_icb_rsp_valid(agu_icb_rsp_valid),\n    .agu_icb_rsp_ready(agu_icb_rsp_ready),\n    .agu_icb_rsp_err(agu_icb_rsp_err),\n    .agu_icb_rsp_excl_ok(agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata(agu_icb_rsp_rdata),\n    .nice_mem_holdup(nice_mem_holdup),\n    .itcm_region_indic(itcm_region_indic),\n    .dtcm_region_indic(dtcm_region_indic),\n    .lsu2itcm_icb_cmd_valid(lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready(lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr(lsu2itcm_icb_cmd_addr),\n    .lsu2itcm_icb_cmd_read(lsu2itcm_icb_cmd_read),\n    .lsu2itcm_icb_cmd_wdata(lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask(lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock(lsu2itcm_icb_cmd_lock),\n    .lsu2itcm_icb_cmd_excl(lsu2itcm_icb_cmd_excl),\n    .lsu2itcm_icb_cmd_size(lsu2itcm_icb_cmd_size),\n    .lsu2itcm_icb_rsp_valid(lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready(lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err(lsu2itcm_icb_rsp_err),\n    .lsu2itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok),\n    .lsu2itcm_icb_rsp_rdata(lsu2itcm_icb_rsp_rdata),\n    .lsu2dtcm_icb_cmd_valid(lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready(lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr(lsu2dtcm_icb_cmd_addr),\n    .lsu2dtcm_icb_cmd_read(lsu2dtcm_icb_cmd_read),\n    .lsu2dtcm_icb_cmd_wdata(lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask(lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock(lsu2dtcm_icb_cmd_lock),\n    .lsu2dtcm_icb_cmd_excl(lsu2dtcm_icb_cmd_excl),\n    .lsu2dtcm_icb_cmd_size(lsu2dtcm_icb_cmd_size),\n    .lsu2dtcm_icb_rsp_valid(lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready(lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err(lsu2dtcm_icb_rsp_err),\n    .lsu2dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok),\n    .lsu2dtcm_icb_rsp_rdata(lsu2dtcm_icb_rsp_rdata),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata)\n  );\n\n  e203_biu u_e203_biu (\n    .biu_active(biu_active),\n    .clk(clk),\n    .rst_n(rst_n),\n    .lsu2biu_icb_cmd_valid(lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready(lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr(lsu2biu_icb_cmd_addr),\n    .lsu2biu_icb_cmd_read(lsu2biu_icb_cmd_read),\n    .lsu2biu_icb_cmd_wdata(lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask(lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock(lsu2biu_icb_cmd_lock),\n    .lsu2biu_icb_cmd_excl(lsu2biu_icb_cmd_excl),\n    .lsu2biu_icb_cmd_size(lsu2biu_icb_cmd_size),\n    .lsu2biu_icb_rsp_valid(lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready(lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err(lsu2biu_icb_rsp_err),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata(lsu2biu_icb_rsp_rdata),\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr(ifu2biu_icb_cmd_addr),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err(ifu2biu_icb_rsp_err),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    .ppi_icb_cmd_valid(ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready(ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr(ppi_icb_cmd_addr),\n    .ppi_icb_cmd_read(ppi_icb_cmd_read),\n    .ppi_icb_cmd_wdata(ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask(ppi_icb_cmd_wmask),\n    .ppi_icb_rsp_valid(ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready(ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err(ppi_icb_rsp_err),\n    .ppi_icb_rsp_rdata(ppi_icb_rsp_rdata),\n    .ppi_region_indic(ppi_region_indic),\n    .ppi_icb_enable(ppi_icb_enable),\n    .clint_icb_cmd_valid(clint_icb_cmd_valid),\n    .clint_icb_cmd_ready(clint_icb_cmd_ready),\n    .clint_icb_cmd_addr(clint_icb_cmd_addr),\n    .clint_icb_cmd_read(clint_icb_cmd_read),\n    .clint_icb_cmd_wdata(clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask(clint_icb_cmd_wmask),\n    .clint_icb_rsp_valid(clint_icb_rsp_valid),\n    .clint_icb_rsp_ready(clint_icb_rsp_ready),\n    .clint_icb_rsp_err(clint_icb_rsp_err),\n    .clint_icb_rsp_rdata(clint_icb_rsp_rdata),\n    .clint_region_indic(clint_region_indic),\n    .clint_icb_enable(clint_icb_enable),\n    .plic_icb_cmd_valid(plic_icb_cmd_valid),\n    .plic_icb_cmd_ready(plic_icb_cmd_ready),\n    .plic_icb_cmd_addr(plic_icb_cmd_addr),\n    .plic_icb_cmd_read(plic_icb_cmd_read),\n    .plic_icb_cmd_wdata(plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask(plic_icb_cmd_wmask),\n    .plic_icb_rsp_valid(plic_icb_rsp_valid),\n    .plic_icb_rsp_ready(plic_icb_rsp_ready),\n    .plic_icb_rsp_err(plic_icb_rsp_err),\n    .plic_icb_rsp_rdata(plic_icb_rsp_rdata),\n    .plic_region_indic(plic_region_indic),\n    .plic_icb_enable(plic_icb_enable),\n    .mem_icb_cmd_valid(mem_icb_cmd_valid),\n    .mem_icb_cmd_ready(mem_icb_cmd_ready),\n    .mem_icb_cmd_addr(mem_icb_cmd_addr),\n    .mem_icb_cmd_read(mem_icb_cmd_read),\n    .mem_icb_cmd_wdata(mem_icb_cmd_wdata),\n    .mem_icb_cmd_wmask(mem_icb_cmd_wmask),\n    .mem_icb_rsp_valid(mem_icb_rsp_valid),\n    .mem_icb_rsp_ready(mem_icb_rsp_ready),\n    .mem_icb_rsp_err(mem_icb_rsp_err),\n    .mem_icb_rsp_rdata(mem_icb_rsp_rdata),\n    .mem_icb_enable(mem_icb_enable)\n  );\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 19, "code": "module e203_exu_alu_csrctrl (\n  input         csr_i_valid,\n  output        csr_i_ready,\n  input  [31:0] csr_i_rs1,\n  input  [11:0] csr_i_info,\n  input         csr_i_rdwen,\n  output        csr_ena,\n  output        csr_wr_en,\n  output        csr_rd_en,\n  output [11:0] csr_idx,\n  input         csr_access_ilgl,\n  input  [31:0] read_csr_dat,\n  output [31:0] wbck_csr_dat,\n  output        csr_o_valid,\n  input         csr_o_ready,\n  output [31:0] csr_o_wbck_wdat,\n  output        csr_o_wbck_err,\n  input         clk,\n  input         rst_n\n);\n\n  // Internal signals\n  wire csr_op1;\n  wire csr_op2;\n  wire csr_op3;\n\n  // CSR enable logic\n  assign csr_ena = csr_i_valid & csr_o_ready;\n\n  // CSR read enable logic\n  assign csr_rd_en = csr_i_valid & (csr_i_info[0] | csr_i_info[1] | csr_i_info[2]);\n\n  // CSR write enable logic\n  assign csr_wr_en = csr_i_valid & (csr_i_info[0] | (csr_i_info[1] & ~csr_i_info[4]) | (csr_i_info[2] & ~csr_i_info[4]));\n\n  // CSR index logic\n  assign csr_idx = csr_i_info[11:0];\n\n  // CSR write-back data logic\n  assign wbck_csr_dat = (csr_i_info[0]) ? csr_op1 :\n                        (csr_i_info[1]) ? (csr_op1 | read_csr_dat) :\n                        (csr_i_info[2]) ? (csr_op1 & ~read_csr_dat) : 32'b0;\n\n  // CSR output valid logic\n  assign csr_o_valid = csr_i_valid & csr_o_ready;\n\n  // CSR output write-back data logic\n  assign csr_o_wbck_wdat = read_csr_dat;\n\n  // CSR output write-back error logic\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // Operand preparation logic\n  assign csr_op1 = (csr_i_info[3]) ? {27'b0, csr_i_info[10:6]} : csr_i_rs1;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "e203_exu_alu_csrctrl", "codeid": 20, "code": "module e203_exu_alu_csrctrl (\n  input csr_i_valid,\n  output csr_i_ready,\n  input [E203_XLEN-1:0] csr_i_rs1,\n  input [E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input csr_i_rdwen,\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [11:0] csr_idx,\n  input csr_access_ilgl,\n  input [E203_XLEN-1:0] read_csr_dat,\n  output [E203_XLEN-1:0] wbck_csr_dat,\n  output csr_o_valid,\n  input csr_o_ready,\n  output [E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,\n  input clk,\n  input rst_n,\n  input nice_xs_off,\n  output csr_sel_nice,\n  output nice_csr_valid,\n  input nice_csr_ready,\n  output [31:0] nice_csr_addr,\n  output nice_csr_wr,\n  output [31:0] nice_csr_wdata,\n  input [31:0] nice_csr_rdata\n);\n\n  // Control signal preparation logic\n  wire csr_op1_is_imm = csr_i_info[E203_DECINFO_CSR_RS1IMM];\n  wire csr_op1_is_rs1 = ~csr_op1_is_imm;\n  wire [E203_XLEN-1:0] csr_op1 = csr_op1_is_imm ? {27'b0, csr_i_info[E203_DECINFO_CSR_ZIMMM]} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & (\n    (csr_i_info[E203_DECINFO_CSR_CSRRW] & csr_i_rdwen) |\n    csr_i_info[E203_DECINFO_CSR_CSRRS] |\n    csr_i_info[E203_DECINFO_CSR_CSRRC]\n  );\n\n  assign csr_wr_en = csr_i_valid & (\n    csr_i_info[E203_DECINFO_CSR_CSRRW] |\n    (csr_i_info[E203_DECINFO_CSR_CSRRS] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0]) |\n    (csr_i_info[E203_DECINFO_CSR_CSRRC] & ~csr_i_info[E203_DECINFO_CSR_RS1IS0])\n  );\n\n  assign csr_idx = csr_i_info[E203_DECINFO_CSR_CSRIDX];\n\n  assign csr_ena = csr_o_valid & csr_o_ready & ~csr_sel_nice;\n\n  assign wbck_csr_dat = \n    csr_i_info[E203_DECINFO_CSR_CSRRW] ? csr_op1 :\n    csr_i_info[E203_DECINFO_CSR_CSRRS] ? (csr_op1 | read_csr_dat) :\n    csr_i_info[E203_DECINFO_CSR_CSRRC] ? (~csr_op1 & read_csr_dat) :\n    {E203_XLEN{1'b0}};\n\n  assign csr_o_wbck_wdat = read_csr_dat;\n  assign csr_o_wbck_err = csr_access_ilgl;\n\n  // NICE interface logic\n  assign csr_sel_nice = (csr_idx[11:8] == 4'hE) & ~nice_xs_off;\n  assign nice_csr_valid = csr_i_valid & csr_o_ready & csr_sel_nice;\n  assign csr_o_valid = csr_i_valid & (csr_sel_nice ? nice_csr_ready : 1'b1);\n  assign nice_csr_addr = {csr_idx, 20'b0};\n  assign nice_csr_wr = csr_wr_en;\n  assign nice_csr_wdata = wbck_csr_dat;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
