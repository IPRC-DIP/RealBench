{"task": "aes_cipher_top", "codeid": 1, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// S-box module\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n    // S-box implementation\n    always @(*) begin\n        case (a)\n            8'h00: b = 8'h63;\n            8'h01: b = 8'h7c;\n            8'h02: b = 8'h77;\n            8'h03: b = 8'h7b;\n            // ... (rest of S-box values)\n            default: b = 8'h00;\n        endcase\n    end\nendmodule\n\n// Key expansion module\nmodule aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n    // Key expansion implementation\n    always @(*) begin\n        // ... (key expansion logic)\n    end\nendmodule\n\n// SubBytes transformation\nalways @(*) begin\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            aes_sbox sbox(.a(sa[i][j]), .b(sa[i][j]));\n        end\n    end\nend\n\n// ShiftRows transformation\nalways @(*) begin\n    reg [7:0] temp [3:0][3:0];\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            temp[i][j] = sa[i][(j + i) % 4];\n        end\n    end\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            sa[i][j] = temp[i][j];\n        end\n    end\nend\n\n// MixColumns transformation\nalways @(*) begin\n    reg [7:0] temp [3:0];\n    for (int i = 0; i < 4; i++) begin\n        temp[0] = (sa[0][i] << 1) ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n        temp[1] = sa[0][i] ^ (sa[1][i] << 1) ^ (sa[2][i] << 1) ^ sa[3][i];\n        temp[2] = sa[0][i] ^ sa[1][i] ^ (sa[2][i] << 1) ^ (sa[3][i] << 1);\n        temp[3] = (sa[0][i] << 1) ^ sa[1][i] ^ sa[2][i] ^ (sa[3][i] << 1);\n        for (int j = 0; j < 4; j++) begin\n            sa[j][i] = temp[j];\n        end\n    end\nend\n\n// AddRoundKey transformation\nalways @(*) begin\n    reg [7:0] temp [3:0][3:0];\n    aes_key_expand_128 key_expand(.clk(clk), .kld(ld), .key(key), .wo_0(), .wo_1(), .wo_2(), .wo_3());\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            temp[i][j] = sa[i][j] ^ key_expand.wo_0[(i * 8) + j];\n        end\n    end\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            sa[i][j] = temp[i][j];\n        end\n    end\nend\n\n// Control logic\nalways @(posedge clk) begin\n    if (rst) begin\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        ld_r <= 0;\n        text_out_r <= 0;\n    end else if (ld) begin\n        text_in_r <= text_in;\n        sa <= 0;\n        dcnt <= 11;\n        ld_r <= 1;\n    end else if (dcnt > 0) begin\n        // Perform round transformations\n        SubBytes();\n        ShiftRows();\n        MixColumns();\n        AddRoundKey();\n        dcnt <= dcnt - 1;\n    end else if (dcnt == 0) begin\n        // Final round\n        SubBytes();\n        ShiftRows();\n        AddRoundKey();\n        text_out_r <= {sa[0][0], sa[0][1], sa[0][2], sa[0][3], sa[1][0], sa[1][1], sa[1][2], sa[1][3], sa[2][0], sa[2][1], sa[2][2], sa[2][3], sa[3][0], sa[3][1], sa[3][2], sa[3][3]};\n        done <= 1;\n    end\nend\n\n// Output\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 2, "code": "```ilog\nmodule aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Wires\nwire [31:0] wo_0;\nwire [31:0] wo_1;\nwire [31:0] wo_2;\nwire [31:0] wo_3;\n\n// Instantiate aes_key_expand_128 module\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\n// Instantiate aes_sbox module\naes_sbox sbox(\n    .a(sa[0][0]),\n    .b(sa[0][0])\n);\n\n// Combinational logic for SubBytes transformation\nalways @(*) begin\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            sa[i][j] = sbox.b;\n        end\n    end\nend\n\n// Combinational logic for ShiftRows transformation\nalways @(*) begin\n    reg [7:0] temp [3:0][3:0];\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            temp[i][j] = sa[i][j];\n        end\n    end\n    // Row 0: no shift\n    sa[0][0] = temp[0][0];\n    sa[0][1] = temp[0][1];\n    sa[0][2] = temp[0][2];\n    sa[0][3] = temp[0][3];\n    // Row 1: shift 1 byte\n    sa[1][0] = temp[1][1];\n    sa[1][1] = temp[1][2];\n    sa[1][2] = temp[1][3];\n    sa[1][3] = temp[1][0];\n    // Row 2: shift 2 bytes\n    sa[2][0] = temp[2][2];\n    sa[2][1] = temp[2][3];\n    sa[2][2] = temp[2][0];\n    sa[2][3] = temp[2][1];\n    // Row 3: shift 3 bytes\n    sa[3][0] = temp[3][3];\n    sa[3][1] = temp[3][0];\n    sa[3][2] = temp[3][1];\n    sa[3][3] = temp[3][2];\nend\n\n// Combinational logic for MixColumns transformation\nalways @(*) begin\n    reg [7:0] temp [3:0];\n    for (int i = 0; i < 4; i++) begin\n        temp[i] = sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i];\n    end\n    sa[0][0] = temp[0];\n    sa[1][0] = temp[1];\n    sa[2][0] = temp[2];\n    sa[3][0] = temp[3];\nend\n\n// Combinational logic for AddRoundKey transformation\nalways @(*) begin\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            sa[i][j] = sa[i][j] ^ wo_0[(i*8)+:8];\n        end\n    end\nend\n\n// Sequential logic for state transition\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 0;\n        dcnt <= 11;\n        ld_r <= 0;\n        text_out_r <= 0;\n    end else begin\n        if (ld) begin\n            text_in_r <= text_in;\n            dcnt <= 11;\n            ld_r <= 1;\n        end else if (dcnt > 0) begin\n            // Perform round operations\n            dcnt <= dcnt - 1;\n        end else if (dcnt == 0) begin\n            // Final round operations\n            text_out_r <= text_out;\n            done <= 1;\n        end\n    end\nend\n\n// Assign output\nassign text_out = text_out_r;\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 3, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n        done <= 1'd0;\n    end else begin\n        case (dcnt)\n            4'd11: begin // INIT_ROUND\n                if (ld) begin\n                    text_in_r <= text_in;\n                    ld_r <= 1'd1;\n                end\n                dcnt <= 4'd10;\n            end\n            4'd10: begin // ROUND_OP\n                // SubBytes Transformation\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sbox(sa[i][j]);\n                    end\n                end\n\n                // ShiftRows Transformation\n                for (int i = 1; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sa[i][(j + i) % 4];\n                    end\n                end\n\n                // MixColumns Transformation\n                for (int i = 0; i < 4; i++) begin\n                    reg [7:0] temp;\n                    temp <= sa[0][i];\n                    sa[0][i] <= (sa[0][i] << 1) ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n                    sa[1][i] <= sa[0][i] ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n                    sa[2][i] <= sa[0][i] ^ sa[1][i] ^ (sa[2][i] << 1) ^ sa[3][i];\n                    sa[3][i] <= sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ (sa[3][i] << 1);\n                end\n\n                // AddRoundKey Transformation\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i * 8) + j];\n                    end\n                end\n\n                dcnt <= dcnt - 1'd1;\n            end\n            4'd1: begin // FINAL_ROUND\n                // SubBytes Transformation\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sbox(sa[i][j]);\n                    end\n                end\n\n                // ShiftRows Transformation\n                for (int i = 1; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sa[i][(j + i) % 4];\n                    end\n                end\n\n                // AddRoundKey Transformation\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i * 8) + j];\n                    end\n                end\n\n                dcnt <= 4'd0;\n            end\n            4'd0: begin // DONE\n                done <= 1'd1;\n                text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                               sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                               sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                               sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n            end\n        endcase\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 4, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa[0:3][0:3];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd11; // 10 rounds + initial round\n        ld_r <= 1'b0;\n        done <= 1'b0;\n        text_out_r <= 128'd0;\n    end else if (ld) begin\n        // Load input data into text_in_r\n        text_in_r <= text_in;\n        ld_r <= 1'b1;\n    end else if (ld_r) begin\n        // Perform initial round key addition\n        sa[0][0] <= text_in_r[127:120] ^ key[127:120];\n        sa[0][1] <= text_in_r[119:112] ^ key[119:112];\n        sa[0][2] <= text_in_r[111:104] ^ key[111:104];\n        sa[0][3] <= text_in_r[103:96] ^ key[103:96];\n        sa[1][0] <= text_in_r[95:88] ^ key[95:88];\n        sa[1][1] <= text_in_r[87:80] ^ key[87:80];\n        sa[1][2] <= text_in_r[79:72] ^ key[79:72];\n        sa[1][3] <= text_in_r[71:64] ^ key[71:64];\n        sa[2][0] <= text_in_r[63:56] ^ key[63:56];\n        sa[2][1] <= text_in_r[55:48] ^ key[55:48];\n        sa[2][2] <= text_in_r[47:40] ^ key[47:40];\n        sa[2][3] <= text_in_r[39:32] ^ key[39:32];\n        sa[3][0] <= text_in_r[31:24] ^ key[31:24];\n        sa[3][1] <= text_in_r[23:16] ^ key[23:16];\n        sa[3][2] <= text_in_r[15:8] ^ key[15:8];\n        sa[3][3] <= text_in_r[7:0] ^ key[7:0];\n        ld_r <= 1'b0;\n    end else if (dcnt > 4'd0) begin\n        // Perform round transformations\n        // SubBytes\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sbox.sa(sa[i][j]);\n            end\n        end\n        // ShiftRows\n        reg [7:0] temp[0:3][0:3];\n        temp[0][0] <= sa[0][0];\n        temp[0][1] <= sa[0][1];\n        temp[0][2] <= sa[0][2];\n        temp[0][3] <= sa[0][3];\n        temp[1][0] <= sa[1][1];\n        temp[1][1] <= sa[1][2];\n        temp[1][2] <= sa[1][3];\n        temp[1][3] <= sa[1][0];\n        temp[2][0] <= sa[2][2];\n        temp[2][1] <= sa[2][3];\n        temp[2][2] <= sa[2][0];\n        temp[2][3] <= sa[2][1];\n        temp[3][0] <= sa[3][3];\n        temp[3][1] <= sa[3][0];\n        temp[3][2] <= sa[3][1];\n        temp[3][3] <= sa[3][2];\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= temp[i][j];\n            end\n        end\n        // MixColumns\n        if (dcnt > 4'd1) begin\n            reg [7:0] temp2[0:3];\n            temp2[0] <= (sa[0][0] << 1) ^ (sa[1][0] << 1) ^ sa[2][0] ^ sa[3][0];\n            temp2[1] <= sa[0][1] ^ (sa[1][1] << 1) ^ (sa[2][1] << 1) ^ sa[3][1];\n            temp2[2] <= sa[0][2] ^ sa[1][2] ^ (sa[2][2] << 1) ^ (sa[3][2] << 1);\n            temp2[3] <= (sa[0][3] << 1) ^ sa[1][3] ^ sa[2][3] ^ (sa[3][3] << 1);\n            for (int i = 0; i < 4; i++) begin\n                sa[i][0] <= temp2[i];\n            end\n            temp2[0] <= (sa[0][1] << 1) ^ (sa[1][1] << 1) ^ sa[2][1] ^ sa[3][1];\n            temp2[1] <= sa[0][2] ^ (sa[1][2] << 1) ^ (sa[2][2] << 1) ^ sa[3][2];\n            temp2[2] <= sa[0][3] ^ sa[1][3] ^ (sa[2][3] << 1) ^ (sa[3][3] << 1);\n            temp2[3] <= (sa[0][0] << 1) ^ sa[1][0] ^ sa[2][0] ^ (sa[3][0] << 1);\n            for (int i = 0; i < 4; i++) begin\n                sa[i][1] <= temp2[i];\n            end\n            temp2[0] <= (sa[0][2] << 1) ^ (sa[1][2] << 1) ^ sa[2][2] ^ sa[3][2];\n            temp2[1] <= sa[0][3] ^ (sa[1][3] << 1) ^ (sa[2][3] << 1) ^ sa[3][3];\n            temp2[2] <= sa[0][0] ^ sa[1][0] ^ (sa[2][0] << 1) ^ (sa[3][0] << 1);\n            temp2[3] <= (sa[0][1] << 1) ^ sa[1][1] ^ sa[2][1] ^ (sa[3][1] << 1);\n            for (int i = 0; i < 4; i++) begin\n                sa[i][2] <= temp2[i];\n            end\n            temp2[0] <= (sa[0][3] << 1) ^ (sa[1][3] << 1) ^ sa[2][3] ^ sa[3][3];\n            temp2[1] <= sa[0][0] ^ (sa[1][0] << 1) ^ (sa[2][0] << 1) ^ sa[3][0];\n            temp2[2] <= sa[0][1] ^ sa[1][1] ^ (sa[2][1] << 1) ^ (sa[3][1] << 1);\n            temp2[3] <= (sa[0][2] << 1) ^ sa[1][2] ^ sa[2][2] ^ (sa[3][2] << 1);\n            for (int i = 0; i < 4; i++) begin\n                sa[i][3] <= temp2[i];\n            end\n        end\n        // AddRoundKey\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i*4+j)*8+:8];\n            end\n        end\n        dcnt <= dcnt - 1;\n    end else begin\n        // Final round\n        // SubBytes\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sbox.sa(sa[i][j]);\n            end\n        end\n        // ShiftRows\n        reg [7:0] temp[0:3][0:3];\n        temp[0][0] <= sa[0][0];\n        temp[0][1] <= sa[0][1];\n        temp[0][2] <= sa[0][2];\n        temp[0][3] <= sa[0][3];\n        temp[1][0] <= sa[1][1];\n        temp[1][1] <= sa[1][2];\n        temp[1][2] <= sa[1][3];\n        temp[1][3] <= sa[1][0];\n        temp[2][0] <= sa[2][2];\n        temp[2][1] <= sa[2][3];\n        temp[2][2] <= sa[2][0];\n        temp[2][3] <= sa[2][1];\n        temp[3][0] <= sa[3][3];\n        temp[3][1] <= sa[3][0];\n        temp[3][2] <= sa[3][1];\n        temp[3][3] <= sa[3][2];\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= temp[i][j];\n            end\n        end\n        // AddRoundKey\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i*4+j)*8+:8];\n            end\n        end\n        // Output generation\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n        done <= 1'b1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 5, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(sa[0][0]),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else if (ld) begin\n        text_in_r <= text_in;\n        ld_r <= 1'd1;\n    end else if (ld_r) begin\n        // Initial Round Key Addition\n        sa[0][0] <= text_in_r[127:120] ^ key[127:120];\n        sa[0][1] <= text_in_r[119:112] ^ key[119:112];\n        sa[0][2] <= text_in_r[111:104] ^ key[111:104];\n        sa[0][3] <= text_in_r[103:96] ^ key[103:96];\n        sa[1][0] <= text_in_r[95:88] ^ key[95:88];\n        sa[1][1] <= text_in_r[87:80] ^ key[87:80];\n        sa[1][2] <= text_in_r[79:72] ^ key[79:72];\n        sa[1][3] <= text_in_r[71:64] ^ key[71:64];\n        sa[2][0] <= text_in_r[63:56] ^ key[63:56];\n        sa[2][1] <= text_in_r[55:48] ^ key[55:48];\n        sa[2][2] <= text_in_r[47:40] ^ key[47:40];\n        sa[2][3] <= text_in_r[39:32] ^ key[39:32];\n        sa[3][0] <= text_in_r[31:24] ^ key[31:24];\n        sa[3][1] <= text_in_r[23:16] ^ key[23:16];\n        sa[3][2] <= text_in_r[15:8] ^ key[15:8];\n        sa[3][3] <= text_in_r[7:0] ^ key[7:0];\n        dcnt <= 4'd10;\n        ld_r <= 1'd0;\n    end else if (dcnt != 4'd0) begin\n        // Round Transformations\n        // SubBytes\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sbox(sa[i][j]);\n            end\n        end\n        // ShiftRows\n        reg [7:0] temp [3:0][3:0];\n        temp[0][0] <= sa[0][0];\n        temp[0][1] <= sa[0][1];\n        temp[0][2] <= sa[0][2];\n        temp[0][3] <= sa[0][3];\n        temp[1][0] <= sa[1][1];\n        temp[1][1] <= sa[1][2];\n        temp[1][2] <= sa[1][3];\n        temp[1][3] <= sa[1][0];\n        temp[2][0] <= sa[2][2];\n        temp[2][1] <= sa[2][3];\n        temp[2][2] <= sa[2][0];\n        temp[2][3] <= sa[2][1];\n        temp[3][0] <= sa[3][3];\n        temp[3][1] <= sa[3][0];\n        temp[3][2] <= sa[3][1];\n        temp[3][3] <= sa[3][2];\n        sa <= temp;\n        // MixColumns\n        reg [7:0] mix [3:0][3:0];\n        for (int i = 0; i < 4; i++) begin\n            mix[0][i] <= (sa[0][i] << 1) ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n            mix[1][i] <= sa[0][i] ^ (sa[1][i] << 1) ^ (sa[2][i] << 1) ^ sa[3][i];\n            mix[2][i] <= sa[0][i] ^ sa[1][i] ^ (sa[2][i] << 1) ^ (sa[3][i] << 1);\n            mix[3][i] <= (sa[0][i] << 1) ^ sa[1][i] ^ sa[2][i] ^ (sa[3][i] << 1);\n        end\n        sa <= mix;\n        // AddRoundKey\n        sa[0][0] <= sa[0][0] ^ key[127:120];\n        sa[0][1] <= sa[0][1] ^ key[119:112];\n        sa[0][2] <= sa[0][2] ^ key[111:104];\n        sa[0][3] <= sa[0][3] ^ key[103:96];\n        sa[1][0] <= sa[1][0] ^ key[95:88];\n        sa[1][1] <= sa[1][1] ^ key[87:80];\n        sa[1][2] <= sa[1][2] ^ key[79:72];\n        sa[1][3] <= sa[1][3] ^ key[71:64];\n        sa[2][0] <= sa[2][0] ^ key[63:56];\n        sa[2][1] <= sa[2][1] ^ key[55:48];\n        sa[2][2] <= sa[2][2] ^ key[47:40];\n        sa[2][3] <= sa[2][3] ^ key[39:32];\n        sa[3][0] <= sa[3][0] ^ key[31:24];\n        sa[3][1] <= sa[3][1] ^ key[23:16];\n        sa[3][2] <= sa[3][2] ^ key[15:8];\n        sa[3][3] <= sa[3][3] ^ key[7:0];\n        dcnt <= dcnt - 1'd1;\n    end else begin\n        // Final Round\n        // SubBytes\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sbox(sa[i][j]);\n            end\n        end\n        // ShiftRows\n        reg [7:0] temp [3:0][3:0];\n        temp[0][0] <= sa[0][0];\n        temp[0][1] <= sa[0][1];\n        temp[0][2] <= sa[0][2];\n        temp[0][3] <= sa[0][3];\n        temp[1][0] <= sa[1][1];\n        temp[1][1] <= sa[1][2];\n        temp[1][2] <= sa[1][3];\n        temp[1][3] <= sa[1][0];\n        temp[2][0] <= sa[2][2];\n        temp[2][1] <= sa[2][3];\n        temp[2][2] <= sa[2][0];\n        temp[2][3] <= sa[2][1];\n        temp[3][0] <= sa[3][3];\n        temp[3][1] <= sa[3][0];\n        temp[3][2] <= sa[3][1];\n        temp[3][3] <= sa[3][2];\n        sa <= temp;\n        // AddRoundKey\n        sa[0][0] <= sa[0][0] ^ key[127:120];\n        sa[0][1] <= sa[0][1] ^ key[119:112];\n        sa[0][2] <= sa[0][2] ^ key[111:104];\n        sa[0][3] <= sa[0][3] ^ key[103:96];\n        sa[1][0] <= sa[1][0] ^ key[95:88];\n        sa[1][1] <= sa[1][1] ^ key[87:80];\n        sa[1][2] <= sa[1][2] ^ key[79:72];\n        sa[1][3] <= sa[1][3] ^ key[71:64];\n        sa[2][0] <= sa[2][0] ^ key[63:56];\n        sa[2][1] <= sa[2][1] ^ key[55:48];\n        sa[2][2] <= sa[2][2] ^ key[47:40];\n        sa[2][3] <= sa[2][3] ^ key[39:32];\n        sa[3][0] <= sa[3][0] ^ key[31:24];\n        sa[3][1] <= sa[3][1] ^ key[23:16];\n        sa[3][2] <= sa[3][2] ^ key[15:8];\n        sa[3][3] <= sa[3][3] ^ key[7:0];\n        text_out_r <= {sa[0][0], sa[0][1], sa[0][2], sa[0][3],\n                       sa[1][0], sa[1][1], sa[1][2], sa[1][3],\n                       sa[2][0], sa[2][1], sa[2][2], sa[2][3],\n                       sa[3][0], sa[3][1], sa[3][2], sa[3][3]};\n        done <= 1'd1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 6, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Initialize state matrix and round counter\ninitial begin\n    text_in_r = 128'd0;\n    sa = '{default: 8'd0};\n    dcnt = 4'd11;\n    ld_r = 1'd0;\n    text_out_r = 128'd0;\nend\n\n// State transition diagram\nalways @(posedge clk) begin\n    if (rst) begin\n        // Reset state\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else if (ld) begin\n        // Load input data and initial round key\n        text_in_r <= text_in;\n        ld_r <= 1'd1;\n        dcnt <= 4'd11;\n    end else if (ld_r) begin\n        // Perform initial round key addition\n        for (int i = 0; i < 16; i++) begin\n            sa[i / 4][i % 4] <= text_in_r[i * 8 +: 8] ^ key[i * 8 +: 8];\n        end\n        ld_r <= 1'd0;\n    end else if (dcnt > 4'd0) begin\n        // Perform standard round operations\n        for (int i = 0; i < 16; i++) begin\n            // SubBytes transformation\n            sa[i / 4][i % 4] <= aes_sbox(sa[i / 4][i % 4]);\n        end\n        // ShiftRows transformation\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= (j < i) ? sa[i][4 - i + j] : sa[i][j - i];\n            end\n        end\n        // MixColumns transformation\n        for (int i = 0; i < 4; i++) begin\n            reg [7:0] col[4];\n            for (int j = 0; j < 4; j++) begin\n                col[j] = sa[j][i];\n            end\n            sa[0][i] <= (col[0] << 1) ^ (col[1] << 1) ^ col[2] ^ col[3];\n            sa[1][i] <= col[0] ^ (col[1] << 1) ^ (col[2] << 1) ^ col[3];\n            sa[2][i] <= col[0] ^ col[1] ^ (col[2] << 1) ^ (col[3] << 1);\n            sa[3][i] <= (col[0] << 1) ^ col[1] ^ col[2] ^ (col[3] << 1);\n        end\n        // AddRoundKey transformation\n        for (int i = 0; i < 16; i++) begin\n            sa[i / 4][i % 4] <= sa[i / 4][i % 4] ^ key[(dcnt - 1) * 16 + i * 8 +: 8];\n        end\n        dcnt <= dcnt - 1;\n    end else if (dcnt == 4'd0) begin\n        // Perform final round operations\n        for (int i = 0; i < 16; i++) begin\n            // SubBytes transformation\n            sa[i / 4][i % 4] <= aes_sbox(sa[i / 4][i % 4]);\n        end\n        // ShiftRows transformation\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= (j < i) ? sa[i][4 - i + j] : sa[i][j - i];\n            end\n        end\n        // AddRoundKey transformation\n        for (int i = 0; i < 16; i++) begin\n            sa[i / 4][i % 4] <= sa[i / 4][i % 4] ^ key[10 * 16 + i * 8 +: 8];\n        end\n        // Generate output\n        for (int i = 0; i < 16; i++) begin\n            text_out_r[i * 8 +: 8] <= sa[i / 4][i % 4];\n        end\n        done <= 1'd1;\n    end\nend\n\nassign text_out = text_out_r;\n\n// Instantiate S-box module\naes_sbox sbox(\n    .a(sa[0][0]),\n    .b(sa[0][0])\n);\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 7, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa[3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // IDLE state\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        ld_r <= 0;\n        text_out_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'b1011: begin // INIT_ROUND\n                // Load input data into text_in_r\n                text_in_r <= text_in;\n                // Perform initial round key addition\n                sa <= text_in_r ^ key;\n                // Set round counter\n                dcnt <= 4'b1000;\n            end\n            4'b1000: begin // ROUND_OP\n                // Perform SubBytes transformation\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sbox(sa[i][j]);\n                    end\n                end\n                // Perform ShiftRows transformation\n                for (int i = 0; i < 4; i++) begin\n                    sa[i] <= {sa[i][1], sa[i][2], sa[i][3], sa[i][0]};\n                end\n                // Perform MixColumns transformation\n                for (int i = 0; i < 4; i++) begin\n                    sa[i] <= {sa[i][0] ^ sa[i][1] ^ sa[i][2] ^ sa[i][3],\n                              sa[i][1] ^ sa[i][2] ^ sa[i][3] ^ sa[i][0],\n                              sa[i][2] ^ sa[i][3] ^ sa[i][0] ^ sa[i][1],\n                              sa[i][3] ^ sa[i][0] ^ sa[i][1] ^ sa[i][2]};\n                end\n                // Perform AddRoundKey transformation\n                sa <= sa ^ key;\n                // Decrement round counter\n                dcnt <= dcnt - 1;\n            end\n            4'b0000: begin // FINAL_ROUND\n                // Perform SubBytes transformation\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sbox(sa[i][j]);\n                    end\n                end\n                // Perform ShiftRows transformation\n                for (int i = 0; i < 4; i++) begin\n                    sa[i] <= {sa[i][1], sa[i][2], sa[i][3], sa[i][0]};\n                end\n                // Perform AddRoundKey transformation\n                sa <= sa ^ key;\n                // Set done signal\n                done <= 1;\n            end\n            default: begin\n                // Do nothing\n            end\n        endcase\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                   sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                   sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                   sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 8, "code": "module aes_cipher_top(\n    input               clk,\n    input               rst,\n    input               ld,\n    output              done,\n    input      [127:0]  key,\n    input      [127:0]  text_in,\n    output     [127:0]  text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg               ld_r;\nreg [127:0] text_out_r;\n\nwire [31:0] wo_0;\nwire [31:0] wo_1;\nwire [31:0] wo_2;\nwire [31:0] wo_3;\n\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= 4'd0;\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else begin\n        if (ld) begin\n            text_in_r <= text_in;\n            ld_r <= 1'd1;\n        end\n        if (ld_r) begin\n            // Initial round key addition\n            sa[0][0] <= text_in_r[127:120] ^ wo_0[31:24];\n            sa[0][1] <= text_in_r[119:112] ^ wo_0[23:16];\n            sa[0][2] <= text_in_r[111:104] ^ wo_0[15:8];\n            sa[0][3] <= text_in_r[103:96]  ^ wo_0[7:0];\n            sa[1][0] <= text_in_r[95:88]   ^ wo_1[31:24];\n            sa[1][1] <= text_in_r[87:80]   ^ wo_1[23:16];\n            sa[1][2] <= text_in_r[79:72]   ^ wo_1[15:8];\n            sa[1][3] <= text_in_r[71:64]   ^ wo_1[7:0];\n            sa[2][0] <= text_in_r[63:56]   ^ wo_2[31:24];\n            sa[2][1] <= text_in_r[55:48]   ^ wo_2[23:16];\n            sa[2][2] <= text_in_r[47:40]   ^ wo_2[15:8];\n            sa[2][3] <= text_in_r[39:32]   ^ wo_2[7:0];\n            sa[3][0] <= text_in_r[31:24]   ^ wo_3[31:24];\n            sa[3][1] <= text_in_r[23:16]   ^ wo_3[23:16];\n            sa[3][2] <= text_in_r[15:8]    ^ wo_3[15:8];\n            sa[3][3] <= text_in_r[7:0]     ^ wo_3[7:0];\n            dcnt <= 4'd10;\n            ld_r <= 1'd0;\n        end\n        if (dcnt > 4'd0) begin\n            // SubBytes transformation\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= aes_sbox(sa[i][j]);\n                end\n            end\n            // ShiftRows transformation\n            reg [3:0][3:0][7:0] sa_temp;\n            sa_temp[0][0] <= sa[0][0];\n            sa_temp[0][1] <= sa[0][1];\n            sa_temp[0][2] <= sa[0][2];\n            sa_temp[0][3] <= sa[0][3];\n            sa_temp[1][0] <= sa[1][1];\n            sa_temp[1][1] <= sa[1][2];\n            sa_temp[1][2] <= sa[1][3];\n            sa_temp[1][3] <= sa[1][0];\n            sa_temp[2][0] <= sa[2][2];\n            sa_temp[2][1] <= sa[2][3];\n            sa_temp[2][2] <= sa[2][0];\n            sa_temp[2][3] <= sa[2][1];\n            sa_temp[3][0] <= sa[3][3];\n            sa_temp[3][1] <= sa[3][0];\n            sa_temp[3][2] <= sa[3][1];\n            sa_temp[3][3] <= sa[3][2];\n            sa <= sa_temp;\n            // MixColumns transformation\n            if (dcnt > 4'd1) begin\n                reg [3:0][7:0] col0;\n                reg [3:0][7:0] col1;\n                reg [3:0][7:0] col2;\n                reg [3:0][7:0] col3;\n                col0[0] <= sa[0][0];\n                col0[1] <= sa[1][0];\n                col0[2] <= sa[2][0];\n                col0[3] <= sa[3][0];\n                col1[0] <= sa[0][1];\n                col1[1] <= sa[1][1];\n                col1[2] <= sa[2][1];\n                col1[3] <= sa[3][1];\n                col2[0] <= sa[0][2];\n                col2[1] <= sa[1][2];\n                col2[2] <= sa[2][2];\n                col2[3] <= sa[3][2];\n                col3[0] <= sa[0][3];\n                col3[1] <= sa[1][3];\n                col3[2] <= sa[2][3];\n                col3[3] <= sa[3][3];\n                sa[0][0] <= (col0[0] << 1) ^ (col0[1] << 1) ^ col0[2] ^ col0[3];\n                sa[0][1] <= col0[0] ^ (col0[1] << 1) ^ (col0[2] << 1) ^ col0[3];\n                sa[0][2] <= col0[0] ^ col0[1] ^ (col0[2] << 1) ^ (col0[3] << 1);\n                sa[0][3] <= (col0[0] << 1) ^ col0[1] ^ col0[2] ^ (col0[3] << 1);\n                sa[1][0] <= (col1[0] << 1) ^ (col1[1] << 1) ^ col1[2] ^ col1[3];\n                sa[1][1] <= col1[0] ^ (col1[1] << 1) ^ (col1[2] << 1) ^ col1[3];\n                sa[1][2] <= col1[0] ^ col1[1] ^ (col1[2] << 1) ^ (col1[3] << 1);\n                sa[1][3] <= (col1[0] << 1) ^ col1[1] ^ col1[2] ^ (col1[3] << 1);\n                sa[2][0] <= (col2[0] << 1) ^ (col2[1] << 1) ^ col2[2] ^ col2[3];\n                sa[2][1] <= col2[0] ^ (col2[1] << 1) ^ (col2[2] << 1) ^ col2[3];\n                sa[2][2] <= col2[0] ^ col2[1] ^ (col2[2] << 1) ^ (col2[3] << 1);\n                sa[2][3] <= (col2[0] << 1) ^ col2[1] ^ col2[2] ^ (col2[3] << 1);\n                sa[3][0] <= (col3[0] << 1) ^ (col3[1] << 1) ^ col3[2] ^ col3[3];\n                sa[3][1] <= col3[0] ^ (col3[1] << 1) ^ (col3[2] << 1) ^ col3[3];\n                sa[3][2] <= col3[0] ^ col3[1] ^ (col3[2] << 1) ^ (col3[3] << 1);\n                sa[3][3] <= (col3[0] << 1) ^ col3[1] ^ col3[2] ^ (col3[3] << 1);\n            end\n            // AddRoundKey transformation\n            sa[0][0] <= sa[0][0] ^ wo_0[31:24];\n            sa[0][1] <= sa[0][1] ^ wo_0[23:16];\n            sa[0][2] <= sa[0][2] ^ wo_0[15:8];\n            sa[0][3] <= sa[0][3] ^ wo_0[7:0];\n            sa[1][0] <= sa[1][0] ^ wo_1[31:24];\n            sa[1][1] <= sa[1][1] ^ wo_1[23:16];\n            sa[1][2] <= sa[1][2] ^ wo_1[15:8];\n            sa[1][3] <= sa[1][3] ^ wo_1[7:0];\n            sa[2][0] <= sa[2][0] ^ wo_2[31:24];\n            sa[2][1] <= sa[2][1] ^ wo_2[23:16];\n            sa[2][2] <= sa[2][2] ^ wo_2[15:8];\n            sa[2][3] <= sa[2][3] ^ wo_2[7:0];\n            sa[3][0] <= sa[3][0] ^ wo_3[31:24];\n            sa[3][1] <= sa[3][1] ^ wo_3[23:16];\n            sa[3][2] <= sa[3][2] ^ wo_3[15:8];\n            sa[3][3] <= sa[3][3] ^ wo_3[7:0];\n            dcnt <= dcnt - 1'd1;\n        end\n        if (dcnt == 4'd1) begin\n            // Final round operations\n            // ShiftRows transformation\n            reg [3:0][3:0][7:0] sa_temp;\n            sa_temp[0][0] <= sa[0][0];\n            sa_temp[0][1] <= sa[0][1];\n            sa_temp[0][2] <= sa[0][2];\n            sa_temp[0][3] <= sa[0][3];\n            sa_temp[1][0] <= sa[1][1];\n            sa_temp[1][1] <= sa[1][2];\n            sa_temp[1][2] <= sa[1][3];\n            sa_temp[1][3] <= sa[1][0];\n            sa_temp[2][0] <= sa[2][2];\n            sa_temp[2][1] <= sa[2][3];\n            sa_temp[2][2] <= sa[2][0];\n            sa_temp[2][3] <= sa[2][1];\n            sa_temp[3][0] <= sa[3][3];\n            sa_temp[3][1] <= sa[3][0];\n            sa_temp[3][2] <= sa[3][1];\n            sa_temp[3][3] <= sa[3][2];\n            sa <= sa_temp;\n            // AddRoundKey transformation\n            sa[0][0] <= sa[0][0] ^ wo_0[31:24];\n            sa[0][1] <= sa[0][1] ^ wo_0[23:16];\n            sa[0][2] <= sa[0][2] ^ wo_0[15:8];\n            sa[0][3] <= sa[0][3] ^ wo_0[7:0];\n            sa[1][0] <= sa[1][0] ^ wo_1[31:24];\n            sa[1][1] <= sa[1][1] ^ wo_1[23:16];\n            sa[1][2] <= sa[1][2] ^ wo_1[15:8];\n            sa[1][3] <= sa[1][3] ^ wo_1[7:0];\n            sa[2][0] <= sa[2][0] ^ wo_2[31:24];\n            sa[2][1] <= sa[2][1] ^ wo_2[23:16];\n            sa[2][2] <= sa[2][2] ^ wo_2[15:8];\n            sa[2][3] <= sa[2][3] ^ wo_2[7:0];\n            sa[3][0] <= sa[3][0] ^ wo_3[31:24];\n            sa[3][1] <= sa[3][1] ^ wo_3[23:16];\n            sa[3][2] <= sa[3][2] ^ wo_3[15:8];\n            sa[3][3] <= sa[3][3] ^ wo_3[7:0];\n            dcnt <= 4'd0;\n        end\n        if (dcnt == 4'd0) begin\n            // Output generation\n            text_out_r[127:120] <= sa[0][0];\n            text_out_r[119:112] <= sa[0][1];\n            text_out_r[111:104] <= sa[0][2];\n            text_out_r[103:96]  <= sa[0][3];\n            text_out_r[95:88]   <= sa[1][0];\n            text_out_r[87:80]   <= sa[1][1];\n            text_out_r[79:72]   <= sa[1][2];\n            text_out_r[71:64]   <= sa[1][3];\n            text_out_r[63:56]   <= sa[2][0];\n            text_out_r[55:48]   <= sa[2][1];\n            text_out_r[47:40]   <= sa[2][2];\n            text_out_r[39:32]   <= sa[2][3];\n            text_out_r[31:24]   <= sa[3][0];\n            text_out_r[23:16]   <= sa[3][1];\n            text_out_r[15:8]    <= sa[3][2];\n            text_out_r[7:0]     <= sa[3][3];\n            done <= 1'd1;\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 9, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else if (ld) begin\n        text_in_r <= text_in;\n        ld_r <= 1'd1;\n    end else if (ld_r) begin\n        // INIT_ROUND\n        if (dcnt == 4'd11) begin\n            // Initial round key addition\n            sa <= '{default: text_in_r[7:0]};\n            dcnt <= 4'd10;\n        end\n        // ROUND_OP\n        else if (dcnt > 4'd0) begin\n            // SubBytes transformation\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sbox.b;\n                end\n            end\n            // ShiftRows transformation\n            for (int i = 0; i < 4; i++) begin\n                sa[i] <= {sa[i][1], sa[i][2], sa[i][3], sa[i][0]};\n            end\n            // MixColumns transformation\n            for (int i = 0; i < 4; i++) begin\n                sa[i] <= {sa[i][0] ^ sa[i][1], sa[i][1] ^ sa[i][2], sa[i][2] ^ sa[i][3], sa[i][3] ^ sa[i][0]};\n            end\n            // AddRoundKey transformation\n            for (int i = 0; i < 4; i++) begin\n                sa[i] <= sa[i] ^ key_expand.wo_0[31:0];\n            end\n            dcnt <= dcnt - 1'd1;\n        end\n        // FINAL_ROUND\n        else if (dcnt == 4'd0) begin\n            // SubBytes transformation\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sbox.b;\n                end\n            end\n            // ShiftRows transformation\n            for (int i = 0; i < 4; i++) begin\n                sa[i] <= {sa[i][1], sa[i][2], sa[i][3], sa[i][0]};\n            end\n            // AddRoundKey transformation\n            for (int i = 0; i < 4; i++) begin\n                sa[i] <= sa[i] ^ key_expand.wo_0[31:0];\n            end\n            // Output generation\n            text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0], sa[0][1], sa[1][1], sa[2][1], sa[3][1], sa[0][2], sa[1][2], sa[2][2], sa[3][2], sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n            done <= 1'd1;\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 10, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Wires\nwire [31:0] wo_0;\nwire [31:0] wo_1;\nwire [31:0] wo_2;\nwire [31:0] wo_3;\n\n// Instantiate submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n        done <= 1'd0;\n    end else begin\n        case (dcnt)\n            4'd11: begin // IDLE\n                if (ld) begin\n                    text_in_r <= text_in;\n                    ld_r <= 1'd1;\n                    dcnt <= 4'd10;\n                end\n            end\n            4'd10: begin // INIT_ROUND\n                if (ld_r) begin\n                    // Perform initial round key addition\n                    sa[0][0] <= text_in_r[127:120] ^ wo_0[31:24];\n                    sa[0][1] <= text_in_r[119:112] ^ wo_0[23:16];\n                    sa[0][2] <= text_in_r[111:104] ^ wo_0[15:8];\n                    sa[0][3] <= text_in_r[103:96] ^ wo_0[7:0];\n                    sa[1][0] <= text_in_r[95:88] ^ wo_1[31:24];\n                    sa[1][1] <= text_in_r[87:80] ^ wo_1[23:16];\n                    sa[1][2] <= text_in_r[79:72] ^ wo_1[15:8];\n                    sa[1][3] <= text_in_r[71:64] ^ wo_1[7:0];\n                    sa[2][0] <= text_in_r[63:56] ^ wo_2[31:24];\n                    sa[2][1] <= text_in_r[55:48] ^ wo_2[23:16];\n                    sa[2][2] <= text_in_r[47:40] ^ wo_2[15:8];\n                    sa[2][3] <= text_in_r[39:32] ^ wo_2[7:0];\n                    sa[3][0] <= text_in_r[31:24] ^ wo_3[31:24];\n                    sa[3][1] <= text_in_r[23:16] ^ wo_3[23:16];\n                    sa[3][2] <= text_in_r[15:8] ^ wo_3[15:8];\n                    sa[3][3] <= text_in_r[7:0] ^ wo_3[7:0];\n                    dcnt <= 4'd9;\n                end\n            end\n            4'd9: begin // ROUND_OP\n                // Perform round operations (SubBytes, ShiftRows, MixColumns, AddRoundKey)\n                // ...\n                dcnt <= dcnt - 1'd1;\n            end\n            4'd1: begin // FINAL_ROUND\n                // Perform final round operations (SubBytes, ShiftRows, AddRoundKey)\n                // ...\n                dcnt <= 4'd0;\n            end\n            4'd0: begin // DONE\n                done <= 1'd1;\n                text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                               sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                               sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                               sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n            end\n        endcase\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 11, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(sa[0][0]),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Reset state\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        ld_r <= 0;\n        text_out_r <= 0;\n        done <= 0;\n    end else if (ld) begin\n        // Load data\n        text_in_r <= text_in;\n        ld_r <= 1;\n    end else if (ld_r) begin\n        // Initial round\n        sa <= text_in_r;\n        dcnt <= 11;\n        ld_r <= 0;\n    end else if (dcnt > 0) begin\n        // Round operations\n        if (dcnt == 11) begin\n            // Initial round\n            sa <= sa;\n        end else if (dcnt > 1) begin\n            // Standard rounds\n            // SubBytes\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sbox.b;\n                end\n            end\n            // ShiftRows\n            for (int i = 1; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sa[i][(j + i) % 4];\n                end\n            end\n            // MixColumns\n            for (int i = 0; i < 4; i++) begin\n                reg [7:0] temp [3:0];\n                temp[0] <= sa[0][i];\n                temp[1] <= sa[1][i];\n                temp[2] <= sa[2][i];\n                temp[3] <= sa[3][i];\n                sa[0][i] <= temp[0] ^ (temp[1] << 1) ^ (temp[2] << 2) ^ (temp[3] << 3);\n                sa[1][i] <= (temp[0] << 1) ^ temp[1] ^ (temp[2] << 2) ^ (temp[3] << 3);\n                sa[2][i] <= (temp[0] << 2) ^ (temp[1] << 1) ^ temp[2] ^ (temp[3] << 3);\n                sa[3][i] <= (temp[0] << 3) ^ (temp[1] << 2) ^ (temp[2] << 1) ^ temp[3];\n            end\n            // AddRoundKey\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i * 4 + j) * 8 +: 8];\n                end\n            end\n        end else begin\n            // Final round\n            // SubBytes\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sbox.b;\n                end\n            end\n            // ShiftRows\n            for (int i = 1; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sa[i][(j + i) % 4];\n                end\n            end\n            // AddRoundKey\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i * 4 + j) * 8 +: 8];\n                end\n            end\n        end\n        dcnt <= dcnt - 1;\n    end else begin\n        // Done\n        text_out_r <= sa;\n        done <= 1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 12, "code": "module aes_cipher_top(\n    input               clk,\n    input               rst,\n    input               ld,\n    output              done,\n    input      [127:0]  key,\n    input      [127:0]  text_in,\n    output     [127:0]  text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\nwire [31:0] wo_0;\nwire [31:0] wo_1;\nwire [31:0] wo_2;\nwire [31:0] wo_3;\n\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= 4'd0;\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else if (ld) begin\n        text_in_r <= text_in;\n        ld_r <= 1'd1;\n    end else if (ld_r) begin\n        // Initial round key addition\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= text_in_r[i*8 +: 8] ^ {wo_3[i*8 +: 8], wo_2[i*8 +: 8], wo_1[i*8 +: 8], wo_0[i*8 +: 8]};\n        end\n        dcnt <= 4'd10;\n        ld_r <= 1'd0;\n    end else if (dcnt > 4'd0) begin\n        // Round operations\n        for (int i = 0; i < 16; i++) begin\n            // SubBytes\n            reg [7:0] s;\n            aes_sbox sbox(\n                .a(sa[i/4][i%4]),\n                .b(s)\n            );\n            sa[i/4][i%4] <= s;\n        end\n\n        // ShiftRows\n        for (int i = 1; i < 4; i++) begin\n            reg [3:0][7:0] row;\n            for (int j = 0; j < 4; j++) begin\n                row[j] <= sa[i][(j + i) % 4];\n            end\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= row[j];\n            end\n        end\n\n        // MixColumns\n        if (dcnt > 4'd1) begin\n            reg [3:0][7:0] col;\n            for (int i = 0; i < 4; i++) begin\n                col[0] <= (sa[0][i] << 1) ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n                col[1] <= sa[0][i] ^ (sa[1][i] << 1) ^ (sa[2][i] << 1) ^ sa[3][i];\n                col[2] <= sa[0][i] ^ sa[1][i] ^ (sa[2][i] << 1) ^ (sa[3][i] << 1);\n                col[3] <= (sa[0][i] << 1) ^ sa[1][i] ^ sa[2][i] ^ (sa[3][i] << 1);\n                for (int j = 0; j < 4; j++) begin\n                    sa[j][i] <= col[j];\n                end\n            end\n        end\n\n        // AddRoundKey\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= sa[i/4][i%4] ^ {wo_3[i*8 +: 8], wo_2[i*8 +: 8], wo_1[i*8 +: 8], wo_0[i*8 +: 8]};\n        end\n\n        dcnt <= dcnt - 1'd1;\n    end else begin\n        // Final round\n        for (int i = 0; i < 16; i++) begin\n            // SubBytes\n            reg [7:0] s;\n            aes_sbox sbox(\n                .a(sa[i/4][i%4]),\n                .b(s)\n            );\n            sa[i/4][i%4] <= s;\n        end\n\n        // ShiftRows\n        for (int i = 1; i < 4; i++) begin\n            reg [3:0][7:0] row;\n            for (int j = 0; j < 4; j++) begin\n                row[j] <= sa[i][(j + i) % 4];\n            end\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= row[j];\n            end\n        end\n\n        // AddRoundKey\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= sa[i/4][i%4] ^ {wo_3[i*8 +: 8], wo_2[i*8 +: 8], wo_1[i*8 +: 8], wo_0[i*8 +: 8]};\n        end\n\n        // Output\n        for (int i = 0; i < 16; i++) begin\n            text_out_r[i*8 +: 8] <= sa[i/4][i%4];\n        end\n\n        done <= 1'd1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 13, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // IDLE state\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        ld_r <= 0;\n        text_out_r <= 0;\n        done <= 0;\n    end else if (ld) begin\n        // INIT_ROUND state\n        text_in_r <= text_in;\n        sa <= 0;\n        dcnt <= 11;\n        ld_r <= 1;\n    end else if (dcnt > 0) begin\n        // ROUND_OP state\n        // SubBytes transformation\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sbox(sa[i][j]);\n            end\n        end\n        \n        // ShiftRows transformation\n        for (int i = 1; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sa[i][(j + i) % 4];\n            end\n        end\n        \n        // MixColumns transformation\n        if (dcnt > 1) begin\n            for (int i = 0; i < 4; i++) begin\n                reg [7:0] temp;\n                temp <= sa[0][i];\n                sa[0][i] <= sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i];\n                sa[1][i] <= temp;\n                sa[2][i] <= sa[2][i] ^ sa[3][i];\n                sa[3][i] <= sa[3][i] ^ sa[0][i];\n            end\n        end\n        \n        // AddRoundKey transformation\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sa[i][j] ^ key_expand.wo_0[i * 8 + j];\n            end\n        end\n        \n        dcnt <= dcnt - 1;\n    end else begin\n        // FINAL_ROUND state\n        // SubBytes transformation\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sbox(sa[i][j]);\n            end\n        end\n        \n        // ShiftRows transformation\n        for (int i = 1; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sa[i][(j + i) % 4];\n            end\n        end\n        \n        // AddRoundKey transformation\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                sa[i][j] <= sa[i][j] ^ key_expand.wo_0[i * 8 + j];\n            end\n        end\n        \n        // Generate output\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                text_out_r[(i * 4 + j) * 8 +: 8] <= sa[i][j];\n            end\n        end\n        \n        done <= 1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 14, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\nwire [31:0] wo_0;\nwire [31:0] wo_1;\nwire [31:0] wo_2;\nwire [31:0] wo_3;\n\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= 4'd0;\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else begin\n        if (ld) begin\n            text_in_r <= text_in;\n            ld_r <= 1'd1;\n        end\n        if (ld_r) begin\n            // Initial round key addition\n            sa[0][0] <= text_in_r[127:120] ^ wo_0[31:24];\n            sa[0][1] <= text_in_r[119:112] ^ wo_0[23:16];\n            sa[0][2] <= text_in_r[111:104] ^ wo_0[15:8];\n            sa[0][3] <= text_in_r[103:96] ^ wo_0[7:0];\n            sa[1][0] <= text_in_r[95:88] ^ wo_1[31:24];\n            sa[1][1] <= text_in_r[87:80] ^ wo_1[23:16];\n            sa[1][2] <= text_in_r[79:72] ^ wo_1[15:8];\n            sa[1][3] <= text_in_r[71:64] ^ wo_1[7:0];\n            sa[2][0] <= text_in_r[63:56] ^ wo_2[31:24];\n            sa[2][1] <= text_in_r[55:48] ^ wo_2[23:16];\n            sa[2][2] <= text_in_r[47:40] ^ wo_2[15:8];\n            sa[2][3] <= text_in_r[39:32] ^ wo_2[7:0];\n            sa[3][0] <= text_in_r[31:24] ^ wo_3[31:24];\n            sa[3][1] <= text_in_r[23:16] ^ wo_3[23:16];\n            sa[3][2] <= text_in_r[15:8] ^ wo_3[15:8];\n            sa[3][3] <= text_in_r[7:0] ^ wo_3[7:0];\n            dcnt <= 4'd10;\n            ld_r <= 1'd0;\n        end\n        if (dcnt > 4'd0) begin\n            // Round operations\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    // SubBytes\n                    sa[i][j] <= aes_sbox(sa[i][j]);\n                end\n            end\n            // ShiftRows\n            reg [3:0][3:0][7:0] sa_temp;\n            sa_temp[0][0] <= sa[0][0];\n            sa_temp[0][1] <= sa[0][1];\n            sa_temp[0][2] <= sa[0][2];\n            sa_temp[0][3] <= sa[0][3];\n            sa_temp[1][0] <= sa[1][1];\n            sa_temp[1][1] <= sa[1][2];\n            sa_temp[1][2] <= sa[1][3];\n            sa_temp[1][3] <= sa[1][0];\n            sa_temp[2][0] <= sa[2][2];\n            sa_temp[2][1] <= sa[2][3];\n            sa_temp[2][2] <= sa[2][0];\n            sa_temp[2][3] <= sa[2][1];\n            sa_temp[3][0] <= sa[3][3];\n            sa_temp[3][1] <= sa[3][0];\n            sa_temp[3][2] <= sa[3][1];\n            sa_temp[3][3] <= sa[3][2];\n            sa <= sa_temp;\n            // MixColumns\n            if (dcnt > 4'd1) begin\n                reg [3:0][3:0][7:0] sa_mix;\n                for (int i = 0; i < 4; i++) begin\n                    sa_mix[0][i] <= (sa[0][i] << 1) ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n                    sa_mix[1][i] <= sa[0][i] ^ (sa[1][i] << 1) ^ (sa[2][i] << 1) ^ sa[3][i];\n                    sa_mix[2][i] <= sa[0][i] ^ sa[1][i] ^ (sa[2][i] << 1) ^ (sa[3][i] << 1);\n                    sa_mix[3][i] <= (sa[0][i] << 1) ^ sa[1][i] ^ sa[2][i] ^ (sa[3][i] << 1);\n                end\n                sa <= sa_mix;\n            end\n            // AddRoundKey\n            sa[0][0] <= sa[0][0] ^ wo_0[31:24];\n            sa[0][1] <= sa[0][1] ^ wo_0[23:16];\n            sa[0][2] <= sa[0][2] ^ wo_0[15:8];\n            sa[0][3] <= sa[0][3] ^ wo_0[7:0];\n            sa[1][0] <= sa[1][0] ^ wo_1[31:24];\n            sa[1][1] <= sa[1][1] ^ wo_1[23:16];\n            sa[1][2] <= sa[1][2] ^ wo_1[15:8];\n            sa[1][3] <= sa[1][3] ^ wo_1[7:0];\n            sa[2][0] <= sa[2][0] ^ wo_2[31:24];\n            sa[2][1] <= sa[2][1] ^ wo_2[23:16];\n            sa[2][2] <= sa[2][2] ^ wo_2[15:8];\n            sa[2][3] <= sa[2][3] ^ wo_2[7:0];\n            sa[3][0] <= sa[3][0] ^ wo_3[31:24];\n            sa[3][1] <= sa[3][1] ^ wo_3[23:16];\n            sa[3][2] <= sa[3][2] ^ wo_3[15:8];\n            sa[3][3] <= sa[3][3] ^ wo_3[7:0];\n            dcnt <= dcnt - 4'd1;\n        end\n        if (dcnt == 4'd0) begin\n            // Final round operations\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    // SubBytes\n                    sa[i][j] <= aes_sbox(sa[i][j]);\n                end\n            end\n            // ShiftRows\n            reg [3:0][3:0][7:0] sa_temp;\n            sa_temp[0][0] <= sa[0][0];\n            sa_temp[0][1] <= sa[0][1];\n            sa_temp[0][2] <= sa[0][2];\n            sa_temp[0][3] <= sa[0][3];\n            sa_temp[1][0] <= sa[1][1];\n            sa_temp[1][1] <= sa[1][2];\n            sa_temp[1][2] <= sa[1][3];\n            sa_temp[1][3] <= sa[1][0];\n            sa_temp[2][0] <= sa[2][2];\n            sa_temp[2][1] <= sa[2][3];\n            sa_temp[2][2] <= sa[2][0];\n            sa_temp[2][3] <= sa[2][1];\n            sa_temp[3][0] <= sa[3][3];\n            sa_temp[3][1] <= sa[3][0];\n            sa_temp[3][2] <= sa[3][1];\n            sa_temp[3][3] <= sa[3][2];\n            sa <= sa_temp;\n            // AddRoundKey\n            sa[0][0] <= sa[0][0] ^ wo_0[31:24];\n            sa[0][1] <= sa[0][1] ^ wo_0[23:16];\n            sa[0][2] <= sa[0][2] ^ wo_0[15:8];\n            sa[0][3] <= sa[0][3] ^ wo_0[7:0];\n            sa[1][0] <= sa[1][0] ^ wo_1[31:24];\n            sa[1][1] <= sa[1][1] ^ wo_1[23:16];\n            sa[1][2] <= sa[1][2] ^ wo_1[15:8];\n            sa[1][3] <= sa[1][3] ^ wo_1[7:0];\n            sa[2][0] <= sa[2][0] ^ wo_2[31:24];\n            sa[2][1] <= sa[2][1] ^ wo_2[23:16];\n            sa[2][2] <= sa[2][2] ^ wo_2[15:8];\n            sa[2][3] <= sa[2][3] ^ wo_2[7:0];\n            sa[3][0] <= sa[3][0] ^ wo_3[31:24];\n            sa[3][1] <= sa[3][1] ^ wo_3[23:16];\n            sa[3][2] <= sa[3][2] ^ wo_3[15:8];\n            sa[3][3] <= sa[3][3] ^ wo_3[7:0];\n            text_out_r <= {sa[0][0], sa[0][1], sa[0][2], sa[0][3], sa[1][0], sa[1][1], sa[1][2], sa[1][3], sa[2][0], sa[2][1], sa[2][2], sa[2][3], sa[3][0], sa[3][1], sa[3][2], sa[3][3]};\n            done <= 1'd1;\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\nreg [7:0] sbox [256];\n\nalways @(a) begin\n    b <= sbox[a];\nend\n\ninitial begin\n    // Initialize S-box\n    // ...\nend\n\nendmodule\n\nmodule aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w [44];\n\nalways @(posedge clk or posedge kld) begin\n    if (kld) begin\n        // Key expansion\n        w[0] <= key[127:96];\n        w[1] <= key[95:64];\n        w[2] <= key[63:32];\n        w[3] <= key[31:0];\n        for (int i = 4; i < 44; i++) begin\n            if (i % 4 == 0) begin\n                w[i] <= w[i-4] ^ (w[i-1] << 1) ^ (w[i-1] >> 7);\n            end else begin\n                w[i] <= w[i-4] ^ w[i-1];\n            end\n        end\n        wo_0 <= w[0];\n        wo_1 <= w[1];\n        wo_2 <= w[2];\n        wo_3 <= w[3];\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 15, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd0;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else begin\n        case (dcnt)\n            4'd0: begin // IDLE\n                if (ld) begin\n                    text_in_r <= text_in;\n                    sa <= '{default: 8'd0};\n                    dcnt <= 4'd11;\n                    ld_r <= 1'd1;\n                end\n            end\n            4'd11: begin // INIT_ROUND\n                sa <= text_in_r;\n                dcnt <= 4'd10;\n            end\n            4'd10: begin // ROUND_OP\n                // SubBytes\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sbox(sa[i][j]);\n                    end\n                end\n                // ShiftRows\n                sa[1] <= {sa[1][3], sa[1][0], sa[1][1], sa[1][2]};\n                sa[2] <= {sa[2][2], sa[2][3], sa[2][0], sa[2][1]};\n                sa[3] <= {sa[3][1], sa[3][2], sa[3][3], sa[3][0]};\n                // MixColumns\n                for (int i = 0; i < 4; i++) begin\n                    reg [7:0] temp;\n                    temp <= sa[0][i];\n                    sa[0][i] <= (sa[0][i] << 1) ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n                    sa[1][i] <= temp ^ (sa[1][i] << 1) ^ sa[2][i] ^ sa[3][i];\n                    sa[2][i] <= sa[0][i] ^ temp ^ (sa[2][i] << 1) ^ sa[3][i];\n                    sa[3][i] <= sa[0][i] ^ sa[1][i] ^ temp ^ (sa[3][i] << 1);\n                end\n                // AddRoundKey\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i * 8) + j];\n                    end\n                end\n                dcnt <= dcnt - 1'd1;\n            end\n            4'd1: begin // FINAL_ROUND\n                // SubBytes\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sbox(sa[i][j]);\n                    end\n                end\n                // ShiftRows\n                sa[1] <= {sa[1][3], sa[1][0], sa[1][1], sa[1][2]};\n                sa[2] <= {sa[2][2], sa[2][3], sa[2][0], sa[2][1]};\n                sa[3] <= {sa[3][1], sa[3][2], sa[3][3], sa[3][0]};\n                // AddRoundKey\n                for (int i = 0; i < 4; i++) begin\n                    for (int j = 0; j < 4; j++) begin\n                        sa[i][j] <= sa[i][j] ^ key_expand.wo_0[(i * 8) + j];\n                    end\n                end\n                text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0], sa[0][1], sa[1][1], sa[2][1], sa[3][1], sa[0][2], sa[1][2], sa[2][2], sa[3][2], sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n                done <= 1'd1;\n            end\n        endcase\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 16, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n        done <= 1'd0;\n    end else if (ld) begin\n        text_in_r <= text_in;\n        ld_r <= 1'd1;\n    end else if (ld_r) begin\n        // Perform initial round key addition\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= text_in_r[i*8 +: 8] ^ key_expand.wo_0[i*8 +: 8];\n        end\n        dcnt <= 4'd10;\n        ld_r <= 1'd0;\n    end else if (dcnt > 4'd0) begin\n        // Perform round operations\n        for (int i = 0; i < 16; i++) begin\n            // SubBytes\n            sa[i/4][i%4] <= sbox.b;\n            // ShiftRows\n            if (i/4 == 1) begin\n                sa[i/4][i%4] <= sa[i/4][(i+1)%4];\n            end else if (i/4 == 2) begin\n                sa[i/4][i%4] <= sa[i/4][(i+2)%4];\n            end else if (i/4 == 3) begin\n                sa[i/4][i%4] <= sa[i/4][(i+3)%4];\n            end\n            // MixColumns\n            if (dcnt > 4'd1) begin\n                sa[i/4][i%4] <= sa[i/4][i%4] ^ (sa[i/4][i%4] << 1) ^ (sa[i/4][i%4] << 2) ^ (sa[i/4][i%4] << 3);\n            end\n            // AddRoundKey\n            sa[i/4][i%4] <= sa[i/4][i%4] ^ key_expand.wo_0[i*8 +: 8];\n        end\n        dcnt <= dcnt - 4'd1;\n    end else if (dcnt == 4'd0) begin\n        // Perform final round operations\n        for (int i = 0; i < 16; i++) begin\n            // SubBytes\n            sa[i/4][i%4] <= sbox.b;\n            // ShiftRows\n            if (i/4 == 1) begin\n                sa[i/4][i%4] <= sa[i/4][(i+1)%4];\n            end else if (i/4 == 2) begin\n                sa[i/4][i%4] <= sa[i/4][(i+2)%4];\n            end else if (i/4 == 3) begin\n                sa[i/4][i%4] <= sa[i/4][(i+3)%4];\n            end\n            // AddRoundKey\n            sa[i/4][i%4] <= sa[i/4][i%4] ^ key_expand.wo_0[i*8 +: 8];\n        end\n        text_out_r <= {sa[3][0], sa[3][1], sa[3][2], sa[3][3], sa[2][0], sa[2][1], sa[2][2], sa[2][3], sa[1][0], sa[1][1], sa[1][2], sa[1][3], sa[0][0], sa[0][1], sa[0][2], sa[0][3]};\n        done <= 1'd1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 17, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\nwire [31:0] wo_0;\nwire [31:0] wo_1;\nwire [31:0] wo_2;\nwire [31:0] wo_3;\n\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= '{default: 8'd0};\n        dcnt <= 4'd11;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else begin\n        if (ld) begin\n            text_in_r <= text_in;\n            ld_r <= 1'd1;\n        end\n\n        if (ld_r) begin\n            // Initial round key addition\n            sa[0][0] <= text_in_r[127:120] ^ wo_0[31:24];\n            sa[0][1] <= text_in_r[119:112] ^ wo_0[23:16];\n            sa[0][2] <= text_in_r[111:104] ^ wo_0[15:8];\n            sa[0][3] <= text_in_r[103:96] ^ wo_0[7:0];\n            sa[1][0] <= text_in_r[95:88] ^ wo_1[31:24];\n            sa[1][1] <= text_in_r[87:80] ^ wo_1[23:16];\n            sa[1][2] <= text_in_r[79:72] ^ wo_1[15:8];\n            sa[1][3] <= text_in_r[71:64] ^ wo_1[7:0];\n            sa[2][0] <= text_in_r[63:56] ^ wo_2[31:24];\n            sa[2][1] <= text_in_r[55:48] ^ wo_2[23:16];\n            sa[2][2] <= text_in_r[47:40] ^ wo_2[15:8];\n            sa[2][3] <= text_in_r[39:32] ^ wo_2[7:0];\n            sa[3][0] <= text_in_r[31:24] ^ wo_3[31:24];\n            sa[3][1] <= text_in_r[23:16] ^ wo_3[23:16];\n            sa[3][2] <= text_in_r[15:8] ^ wo_3[15:8];\n            sa[3][3] <= text_in_r[7:0] ^ wo_3[7:0];\n            dcnt <= 4'd10;\n            ld_r <= 1'd0;\n        end else if (dcnt > 4'd0) begin\n            // Round operations\n            reg [3:0][3:0][7:0] sa_next;\n            // SubBytes\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    aes_sbox sbox(\n                        .a(sa[i][j]),\n                        .b(sa_next[i][j])\n                    );\n                end\n            end\n            // ShiftRows\n            sa_next[0][0] <= sa[0][0];\n            sa_next[0][1] <= sa[0][1];\n            sa_next[0][2] <= sa[0][2];\n            sa_next[0][3] <= sa[0][3];\n            sa_next[1][0] <= sa[1][1];\n            sa_next[1][1] <= sa[1][2];\n            sa_next[1][2] <= sa[1][3];\n            sa_next[1][3] <= sa[1][0];\n            sa_next[2][0] <= sa[2][2];\n            sa_next[2][1] <= sa[2][3];\n            sa_next[2][2] <= sa[2][0];\n            sa_next[2][3] <= sa[2][1];\n            sa_next[3][0] <= sa[3][3];\n            sa_next[3][1] <= sa[3][0];\n            sa_next[3][2] <= sa[3][1];\n            sa_next[3][3] <= sa[3][2];\n            // MixColumns\n            if (dcnt > 4'd1) begin\n                reg [3:0][7:0] column;\n                for (int i = 0; i < 4; i++) begin\n                    column[0] <= sa_next[0][i];\n                    column[1] <= sa_next[1][i];\n                    column[2] <= sa_next[2][i];\n                    column[3] <= sa_next[3][i];\n                    // Matrix multiplication\n                    sa_next[0][i] <= (column[0] << 1) ^ (column[1] << 1) ^ column[2] ^ column[3];\n                    sa_next[1][i] <= column[0] ^ (column[1] << 1) ^ (column[2] << 1) ^ column[3];\n                    sa_next[2][i] <= column[0] ^ column[1] ^ (column[2] << 1) ^ (column[3] << 1);\n                    sa_next[3][i] <= (column[0] << 1) ^ column[1] ^ column[2] ^ (column[3] << 1);\n                end\n            end\n            // AddRoundKey\n            sa_next[0][0] <= sa_next[0][0] ^ wo_0[31:24];\n            sa_next[0][1] <= sa_next[0][1] ^ wo_0[23:16];\n            sa_next[0][2] <= sa_next[0][2] ^ wo_0[15:8];\n            sa_next[0][3] <= sa_next[0][3] ^ wo_0[7:0];\n            sa_next[1][0] <= sa_next[1][0] ^ wo_1[31:24];\n            sa_next[1][1] <= sa_next[1][1] ^ wo_1[23:16];\n            sa_next[1][2] <= sa_next[1][2] ^ wo_1[15:8];\n            sa_next[1][3] <= sa_next[1][3] ^ wo_1[7:0];\n            sa_next[2][0] <= sa_next[2][0] ^ wo_2[31:24];\n            sa_next[2][1] <= sa_next[2][1] ^ wo_2[23:16];\n            sa_next[2][2] <= sa_next[2][2] ^ wo_2[15:8];\n            sa_next[2][3] <= sa_next[2][3] ^ wo_2[7:0];\n            sa_next[3][0] <= sa_next[3][0] ^ wo_3[31:24];\n            sa_next[3][1] <= sa_next[3][1] ^ wo_3[23:16];\n            sa_next[3][2] <= sa_next[3][2] ^ wo_3[15:8];\n            sa_next[3][3] <= sa_next[3][3] ^ wo_3[7:0];\n            sa <= sa_next;\n            dcnt <= dcnt - 4'd1;\n        end else begin\n            // Final round\n            reg [3:0][3:0][7:0] sa_next;\n            // SubBytes\n            for (int i = 0; i < 4; i++) begin\n                for (int j = 0; j < 4; j++) begin\n                    aes_sbox sbox(\n                        .a(sa[i][j]),\n                        .b(sa_next[i][j])\n                    );\n                end\n            end\n            // ShiftRows\n            sa_next[0][0] <= sa[0][0];\n            sa_next[0][1] <= sa[0][1];\n            sa_next[0][2] <= sa[0][2];\n            sa_next[0][3] <= sa[0][3];\n            sa_next[1][0] <= sa[1][1];\n            sa_next[1][1] <= sa[1][2];\n            sa_next[1][2] <= sa[1][3];\n            sa_next[1][3] <= sa[1][0];\n            sa_next[2][0] <= sa[2][2];\n            sa_next[2][1] <= sa[2][3];\n            sa_next[2][2] <= sa[2][0];\n            sa_next[2][3] <= sa[2][1];\n            sa_next[3][0] <= sa[3][3];\n            sa_next[3][1] <= sa[3][0];\n            sa_next[3][2] <= sa[3][1];\n            sa_next[3][3] <= sa[3][2];\n            // AddRoundKey\n            sa_next[0][0] <= sa_next[0][0] ^ wo_0[31:24];\n            sa_next[0][1] <= sa_next[0][1] ^ wo_0[23:16];\n            sa_next[0][2] <= sa_next[0][2] ^ wo_0[15:8];\n            sa_next[0][3] <= sa_next[0][3] ^ wo_0[7:0];\n            sa_next[1][0] <= sa_next[1][0] ^ wo_1[31:24];\n            sa_next[1][1] <= sa_next[1][1] ^ wo_1[23:16];\n            sa_next[1][2] <= sa_next[1][2] ^ wo_1[15:8];\n            sa_next[1][3] <= sa_next[1][3] ^ wo_1[7:0];\n            sa_next[2][0] <= sa_next[2][0] ^ wo_2[31:24];\n            sa_next[2][1] <= sa_next[2][1] ^ wo_2[23:16];\n            sa_next[2][2] <= sa_next[2][2] ^ wo_2[15:8];\n            sa_next[2][3] <= sa_next[2][3] ^ wo_2[7:0];\n            sa_next[3][0] <= sa_next[3][0] ^ wo_3[31:24];\n            sa_next[3][1] <= sa_next[3][1] ^ wo_3[23:16];\n            sa_next[3][2] <= sa_next[3][2] ^ wo_3[15:8];\n            sa_next[3][3] <= sa_next[3][3] ^ wo_3[7:0];\n            text_out_r <= {sa_next[0][0], sa_next[1][0], sa_next[2][0], sa_next[3][0],\n                            sa_next[0][1], sa_next[1][1], sa_next[2][1], sa_next[3][1],\n                            sa_next[0][2], sa_next[1][2], sa_next[2][2], sa_next[3][2],\n                            sa_next[0][3], sa_next[1][3], sa_next[2][3], sa_next[3][3]};\n            done <= 1'd1;\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 18, "code": "```ilog\nmodule aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Internal signals\nwire [31:0] wo_0, wo_1, wo_2, wo_3;\nwire [7:0] sbox_out [15:0];\n\n// Instantiate submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(wo_0),\n    .wo_1(wo_1),\n    .wo_2(wo_2),\n    .wo_3(wo_3)\n);\n\naes_sbox sbox [15:0] (\n    .a({sa[0][0], sa[1][0], sa[2][0], sa[3][0], sa[0][1], sa[1][1], sa[2][1], sa[3][1], sa[0][2], sa[1][2], sa[2][2], sa[3][2], sa[0][3], sa[1][3], sa[2][3], sa[3][3]}),\n    .b(sbox_out)\n);\n\n// State transition logic\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd11; // Initial round counter value\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else if (ld) begin\n        ld_r <= 1'b1;\n        text_in_r <= text_in;\n        dcnt <= 4'd11;\n        done <= 1'b0;\n    end else if (ld_r && dcnt > 4'd0) begin\n        // Perform round transformations\n        if (dcnt > 4'd1) begin\n            // SubBytes, ShiftRows, MixColumns, AddRoundKey\n            for (int i = 0; i < 16; i++) begin\n                sa[i/4][i%4] <= sbox_out[i];\n            end\n            // Update round counter\n            dcnt <= dcnt - 1'b1;\n        end else begin\n            // Final round: SubBytes, ShiftRows, AddRoundKey\n            for (int i = 0; i < 16; i++) begin\n                sa[i/4][i%4] <= sbox_out[i];\n            end\n            // Update output\n            text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0], sa[0][1], sa[1][1], sa[2][1], sa[3][1], sa[0][2], sa[1][2], sa[2][2], sa[3][2], sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n            done <= 1'b1;\n        end\n    end\nend\n\n// Output logic\nassign text_out = text_out_r;\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 19, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// S-box module\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n    // S-box implementation\n    always @(a) begin\n        case (a)\n            8'h00: b = 8'h63;\n            8'h01: b = 8'h7c;\n            8'h02: b = 8'h77;\n            8'h03: b = 8'h7b;\n            // ... (rest of S-box values)\n            default: b = 8'h00;\n        endcase\n    end\nendmodule\n\n// Key expansion module\nmodule aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n    // Key expansion implementation\n    always @(posedge clk) begin\n        if (kld) begin\n            // Key expansion logic\n            wo_0 <= key[31:0];\n            wo_1 <= key[63:32];\n            wo_2 <= key[95:64];\n            wo_3 <= key[127:96];\n        end\n    end\nendmodule\n\n// State transition logic\nalways @(posedge clk) begin\n    if (rst) begin\n        // Reset state\n        text_in_r <= 128'h0;\n        sa <= '{default: 8'h0};\n        dcnt <= 4'hb;\n        ld_r <= 1'b0;\n        text_out_r <= 128'h0;\n    end else if (ld) begin\n        // Load data\n        text_in_r <= text_in;\n        ld_r <= 1'b1;\n    end else if (ld_r) begin\n        // Initial round key addition\n        sa[0][0] <= text_in_r[7:0] ^ key[7:0];\n        sa[0][1] <= text_in_r[15:8] ^ key[15:8];\n        sa[0][2] <= text_in_r[23:16] ^ key[23:16];\n        sa[0][3] <= text_in_r[31:24] ^ key[31:24];\n        sa[1][0] <= text_in_r[39:32] ^ key[39:32];\n        sa[1][1] <= text_in_r[47:40] ^ key[47:40];\n        sa[1][2] <= text_in_r[55:48] ^ key[55:48];\n        sa[1][3] <= text_in_r[63:56] ^ key[63:56];\n        sa[2][0] <= text_in_r[71:64] ^ key[71:64];\n        sa[2][1] <= text_in_r[79:72] ^ key[79:72];\n        sa[2][2] <= text_in_r[87:80] ^ key[87:80];\n        sa[2][3] <= text_in_r[95:88] ^ key[95:88];\n        sa[3][0] <= text_in_r[103:96] ^ key[103:96];\n        sa[3][1] <= text_in_r[111:104] ^ key[111:104];\n        sa[3][2] <= text_in_r[119:112] ^ key[119:112];\n        sa[3][3] <= text_in_r[127:120] ^ key[127:120];\n        dcnt <= 4'hb;\n        ld_r <= 1'b0;\n    end else if (dcnt > 4'h0) begin\n        // Round operations\n        // SubBytes\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                aes_sbox sbox(.a(sa[i][j]), .b(sa[i][j]));\n            end\n        end\n        // ShiftRows\n        sa[1][0] <= sa[1][1];\n        sa[1][1] <= sa[1][2];\n        sa[1][2] <= sa[1][3];\n        sa[1][3] <= sa[1][0];\n        sa[2][0] <= sa[2][2];\n        sa[2][1] <= sa[2][3];\n        sa[2][2] <= sa[2][0];\n        sa[2][3] <= sa[2][1];\n        sa[3][0] <= sa[3][3];\n        sa[3][1] <= sa[3][0];\n        sa[3][2] <= sa[3][1];\n        sa[3][3] <= sa[3][2];\n        // MixColumns\n        if (dcnt > 4'h1) begin\n            reg [7:0] temp [3:0];\n            temp[0] <= sa[0][0] ^ sa[1][0] ^ sa[2][0] ^ sa[3][0];\n            temp[1] <= sa[0][1] ^ sa[1][1] ^ sa[2][1] ^ sa[3][1];\n            temp[2] <= sa[0][2] ^ sa[1][2] ^ sa[2][2] ^ sa[3][2];\n            temp[3] <= sa[0][3] ^ sa[1][3] ^ sa[2][3] ^ sa[3][3];\n            sa[0][0] <= temp[0];\n            sa[0][1] <= temp[1];\n            sa[0][2] <= temp[2];\n            sa[0][3] <= temp[3];\n            sa[1][0] <= temp[1];\n            sa[1][1] <= temp[2];\n            sa[1][2] <= temp[3];\n            sa[1][3] <= temp[0];\n            sa[2][0] <= temp[2];\n            sa[2][1] <= temp[3];\n            sa[2][2] <= temp[0];\n            sa[2][3] <= temp[1];\n            sa[3][0] <= temp[3];\n            sa[3][1] <= temp[0];\n            sa[3][2] <= temp[1];\n            sa[3][3] <= temp[2];\n        end\n        // AddRoundKey\n        aes_key_expand_128 key_exp(.clk(clk), .kld(1'b1), .key(key), .wo_0(), .wo_1(), .wo_2(), .wo_3());\n        sa[0][0] <= sa[0][0] ^ key_exp.wo_0[7:0];\n        sa[0][1] <= sa[0][1] ^ key_exp.wo_0[15:8];\n        sa[0][2] <= sa[0][2] ^ key_exp.wo_0[23:16];\n        sa[0][3] <= sa[0][3] ^ key_exp.wo_0[31:24];\n        sa[1][0] <= sa[1][0] ^ key_exp.wo_1[7:0];\n        sa[1][1] <= sa[1][1] ^ key_exp.wo_1[15:8];\n        sa[1][2] <= sa[1][2] ^ key_exp.wo_1[23:16];\n        sa[1][3] <= sa[1][3] ^ key_exp.wo_1[31:24];\n        sa[2][0] <= sa[2][0] ^ key_exp.wo_2[7:0];\n        sa[2][1] <= sa[2][1] ^ key_exp.wo_2[15:8];\n        sa[2][2] <= sa[2][2] ^ key_exp.wo_2[23:16];\n        sa[2][3] <= sa[2][3] ^ key_exp.wo_2[31:24];\n        sa[3][0] <= sa[3][0] ^ key_exp.wo_3[7:0];\n        sa[3][1] <= sa[3][1] ^ key_exp.wo_3[15:8];\n        sa[3][2] <= sa[3][2] ^ key_exp.wo_3[23:16];\n        sa[3][3] <= sa[3][3] ^ key_exp.wo_3[31:24];\n        dcnt <= dcnt - 1'b1;\n    end else begin\n        // Final round\n        // SubBytes\n        for (int i = 0; i < 4; i++) begin\n            for (int j = 0; j < 4; j++) begin\n                aes_sbox sbox(.a(sa[i][j]), .b(sa[i][j]));\n            end\n        end\n        // ShiftRows\n        sa[1][0] <= sa[1][1];\n        sa[1][1] <= sa[1][2];\n        sa[1][2] <= sa[1][3];\n        sa[1][3] <= sa[1][0];\n        sa[2][0] <= sa[2][2];\n        sa[2][1] <= sa[2][3];\n        sa[2][2] <= sa[2][0];\n        sa[2][3] <= sa[2][1];\n        sa[3][0] <= sa[3][3];\n        sa[3][1] <= sa[3][0];\n        sa[3][2] <= sa[3][1];\n        sa[3][3] <= sa[3][2];\n        // AddRoundKey\n        aes_key_expand_128 key_exp(.clk(clk), .kld(1'b1), .key(key), .wo_0(), .wo_1(), .wo_2(), .wo_3());\n        sa[0][0] <= sa[0][0] ^ key_exp.wo_0[7:0];\n        sa[0][1] <= sa[0][1] ^ key_exp.wo_0[15:8];\n        sa[0][2] <= sa[0][2] ^ key_exp.wo_0[23:16];\n        sa[0][3] <= sa[0][3] ^ key_exp.wo_0[31:24];\n        sa[1][0] <= sa[1][0] ^ key_exp.wo_1[7:0];\n        sa[1][1] <= sa[1][1] ^ key_exp.wo_1[15:8];\n        sa[1][2] <= sa[1][2] ^ key_exp.wo_1[23:16];\n        sa[1][3] <= sa[1][3] ^ key_exp.wo_1[31:24];\n        sa[2][0] <= sa[2][0] ^ key_exp.wo_2[7:0];\n        sa[2][1] <= sa[2][1] ^ key_exp.wo_2[15:8];\n        sa[2][2] <= sa[2][2] ^ key_exp.wo_2[23:16];\n        sa[2][3] <= sa[2][3] ^ key_exp.wo_2[31:24];\n        sa[3][0] <= sa[3][0] ^ key_exp.wo_3[7:0];\n        sa[3][1] <= sa[3][1] ^ key_exp.wo_3[15:8];\n        sa[3][2] <= sa[3][2] ^ key_exp.wo_3[23:16];\n        sa[3][3] <= sa[3][3] ^ key_exp.wo_3[31:24];\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0], sa[0][1], sa[1][1], sa[2][1], sa[3][1], sa[0][2], sa[1][2], sa[2][2], sa[3][2], sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n        done <= 1'b1;\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 1, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 4'd10;\n                end else if (ld) begin\n                    dcnt <= 4'd1;\n                    ld_r <= 1'b1;\n                end\n            end\n            4'd1: begin\n                if (ld_r) begin\n                    dcnt <= 4'd2;\n                    ld_r <= 1'b0;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd4;\n                end else begin\n                    kcnt <= kcnt - 1'b1;\n                end\n            end\n            4'd4: begin\n                done <= 1'b1;\n                dcnt <= 4'd0;\n            end\n            default: dcnt <= 4'd0;\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    if (dcnt != 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 2, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Reset state\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                // IDLE state\n                if (kld) begin\n                    // KeyLoad state\n                    kcnt <= 10;\n                    dcnt <= 4'd1;\n                end else if (ld) begin\n                    // InitialRound state\n                    ld_r <= 1;\n                    dcnt <= 4'd2;\n                end\n            end\n            4'd1: begin\n                // KeyExpansion state\n                if (kcnt == 0) begin\n                    // KeyStored state\n                    dcnt <= 4'd2;\n                end else begin\n                    kcnt <= kcnt - 1;\n                end\n            end\n            4'd2: begin\n                // InitialRound state\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                // StandardRound state\n                if (dcnt == 4'd10) begin\n                    // FinalRound state\n                    dcnt <= 4'd11;\n                end else begin\n                    dcnt <= dcnt + 1;\n                end\n            end\n            4'd11: begin\n                // Done state\n                done <= 1;\n                dcnt <= 4'd0;\n            end\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows operation\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes operation\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey operation\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns operation\n    if (dcnt != 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 3, "code": "module aes_inv_cipher_top(\n    input               clk,\n    input               rst,\n    input               kld,\n    input               ld,\n    output              done,\n    input      [127:0]  key,\n    input      [127:0]  text_in,\n    output     [127:0]  text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg [10:0][127:0] kb;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Key Expansion Module\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\n// Inverse S-box Modules\naes_inv_sbox us00(.a(sa[0][0]), .b(sa[0][0]));\naes_inv_sbox us01(.a(sa[0][1]), .b(sa[0][1]));\naes_inv_sbox us02(.a(sa[0][2]), .b(sa[0][2]));\naes_inv_sbox us03(.a(sa[0][3]), .b(sa[0][3]));\naes_inv_sbox us10(.a(sa[1][0]), .b(sa[1][0]));\naes_inv_sbox us11(.a(sa[1][1]), .b(sa[1][1]));\naes_inv_sbox us12(.a(sa[1][2]), .b(sa[1][2]));\naes_inv_sbox us13(.a(sa[1][3]), .b(sa[1][3]));\naes_inv_sbox us20(.a(sa[2][0]), .b(sa[2][0]));\naes_inv_sbox us21(.a(sa[2][1]), .b(sa[2][1]));\naes_inv_sbox us22(.a(sa[2][2]), .b(sa[2][2]));\naes_inv_sbox us23(.a(sa[2][3]), .b(sa[2][3]));\naes_inv_sbox us30(.a(sa[3][0]), .b(sa[3][0]));\naes_inv_sbox us31(.a(sa[3][1]), .b(sa[3][1]));\naes_inv_sbox us32(.a(sa[3][2]), .b(sa[3][2]));\naes_inv_sbox us33(.a(sa[3][3]), .b(sa[3][3]));\n\n// State Machine\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 10;\n                end else if (ld) begin\n                    ld_r <= 1;\n                    dcnt <= dcnt + 1;\n                end\n            end\n            4'd1: begin\n                if (ld_r) begin\n                    ld_r <= 0;\n                    dcnt <= dcnt + 1;\n                end\n            end\n            4'd2: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd3: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd4: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd5: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd6: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd7: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd8: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd9: begin\n                dcnt <= dcnt + 1;\n            end\n            4'd10: begin\n                done <= 1;\n                dcnt <= 0;\n            end\n            default: dcnt <= dcnt;\n        endcase\n    end\nend\n\n// InvShiftRows\nalways @(posedge clk) begin\n    if (dcnt == 4'd1) begin\n        sa[1][0] <= sa[1][3];\n        sa[1][1] <= sa[1][0];\n        sa[1][2] <= sa[1][1];\n        sa[1][3] <= sa[1][2];\n        sa[2][0] <= sa[2][2];\n        sa[2][1] <= sa[2][3];\n        sa[2][2] <= sa[2][0];\n        sa[2][3] <= sa[2][1];\n        sa[3][0] <= sa[3][1];\n        sa[3][1] <= sa[3][2];\n        sa[3][2] <= sa[3][3];\n        sa[3][3] <= sa[3][0];\n    end\nend\n\n// InvSubBytes\nalways @(posedge clk) begin\n    if (dcnt == 4'd2) begin\n        sa[0][0] <= us00.b;\n        sa[0][1] <= us01.b;\n        sa[0][2] <= us02.b;\n        sa[0][3] <= us03.b;\n        sa[1][0] <= us10.b;\n        sa[1][1] <= us11.b;\n        sa[1][2] <= us12.b;\n        sa[1][3] <= us13.b;\n        sa[2][0] <= us20.b;\n        sa[2][1] <= us21.b;\n        sa[2][2] <= us22.b;\n        sa[2][3] <= us23.b;\n        sa[3][0] <= us30.b;\n        sa[3][1] <= us31.b;\n        sa[3][2] <= us32.b;\n        sa[3][3] <= us33.b;\n    end\nend\n\n// AddRoundKey\nalways @(posedge clk) begin\n    if (dcnt == 4'd3) begin\n        sa[0][0] <= sa[0][0] ^ kb[kcnt][0];\n        sa[0][1] <= sa[0][1] ^ kb[kcnt][1];\n        sa[0][2] <= sa[0][2] ^ kb[kcnt][2];\n        sa[0][3] <= sa[0][3] ^ kb[kcnt][3];\n        sa[1][0] <= sa[1][0] ^ kb[kcnt][4];\n        sa[1][1] <= sa[1][1] ^ kb[kcnt][5];\n        sa[1][2] <= sa[1][2] ^ kb[kcnt][6];\n        sa[1][3] <= sa[1][3] ^ kb[kcnt][7];\n        sa[2][0] <= sa[2][0] ^ kb[kcnt][8];\n        sa[2][1] <= sa[2][1] ^ kb[kcnt][9];\n        sa[2][2] <= sa[2][2] ^ kb[kcnt][10];\n        sa[2][3] <= sa[2][3] ^ kb[kcnt][11];\n        sa[3][0] <= sa[3][0] ^ kb[kcnt][12];\n        sa[3][1] <= sa[3][1] ^ kb[kcnt][13];\n        sa[3][2] <= sa[3][2] ^ kb[kcnt][14];\n        sa[3][3] <= sa[3][3] ^ kb[kcnt][15];\n    end\nend\n\n// InvMixColumns\nalways @(posedge clk) begin\n    if (dcnt == 4'd4) begin\n        sa[0][0] <= (sa[0][0] * 14) ^ (sa[1][0] * 11) ^ (sa[2][0] * 13) ^ (sa[3][0] * 9);\n        sa[0][1] <= (sa[0][1] * 14) ^ (sa[1][1] * 11) ^ (sa[2][1] * 13) ^ (sa[3][1] * 9);\n        sa[0][2] <= (sa[0][2] * 14) ^ (sa[1][2] * 11) ^ (sa[2][2] * 13) ^ (sa[3][2] * 9);\n        sa[0][3] <= (sa[0][3] * 14) ^ (sa[1][3] * 11) ^ (sa[2][3] * 13) ^ (sa[3][3] * 9);\n        sa[1][0] <= (sa[0][0] * 9) ^ (sa[1][0] * 14) ^ (sa[2][0] * 11) ^ (sa[3][0] * 13);\n        sa[1][1] <= (sa[0][1] * 9) ^ (sa[1][1] * 14) ^ (sa[2][1] * 11) ^ (sa[3][1] * 13);\n        sa[1][2] <= (sa[0][2] * 9) ^ (sa[1][2] * 14) ^ (sa[2][2] * 11) ^ (sa[3][2] * 13);\n        sa[1][3] <= (sa[0][3] * 9) ^ (sa[1][3] * 14) ^ (sa[2][3] * 11) ^ (sa[3][3] * 13);\n        sa[2][0] <= (sa[0][0] * 13) ^ (sa[1][0] * 9) ^ (sa[2][0] * 14) ^ (sa[3][0] * 11);\n        sa[2][1] <= (sa[0][1] * 13) ^ (sa[1][1] * 9) ^ (sa[2][1] * 14) ^ (sa[3][1] * 11);\n        sa[2][2] <= (sa[0][2] * 13) ^ (sa[1][2] * 9) ^ (sa[2][2] * 14) ^ (sa[3][2] * 11);\n        sa[2][3] <= (sa[0][3] * 13) ^ (sa[1][3] * 9) ^ (sa[2][3] * 14) ^ (sa[3][3] * 11);\n        sa[3][0] <= (sa[0][0] * 11) ^ (sa[1][0] * 13) ^ (sa[2][0] * 9) ^ (sa[3][0] * 14);\n        sa[3][1] <= (sa[0][1] * 11) ^ (sa[1][1] * 13) ^ (sa[2][1] * 9) ^ (sa[3][1] * 14);\n        sa[3][2] <= (sa[0][2] * 11) ^ (sa[1][2] * 13) ^ (sa[2][2] * 9) ^ (sa[3][2] * 14);\n        sa[3][3] <= (sa[0][3] * 11) ^ (sa[1][3] * 13) ^ (sa[2][3] * 9) ^ (sa[3][3] * 14);\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (dcnt == 4'd10) begin\n        text_out_r[127:120] <= sa[0][0];\n        text_out_r[119:112] <= sa[1][0];\n        text_out_r[111:104] <= sa[2][0];\n        text_out_r[103:96] <= sa[3][0];\n        text_out_r[95:88] <= sa[0][1];\n        text_out_r[87:80] <= sa[1][1];\n        text_out_r[79:72] <= sa[2][1];\n        text_out_r[71:64] <= sa[3][1];\n        text_out_r[63:56] <= sa[0][2];\n        text_out_r[55:48] <= sa[1][2];\n        text_out_r[47:40] <= sa[2][2];\n        text_out_r[39:32] <= sa[3][2];\n        text_out_r[31:24] <= sa[0][3];\n        text_out_r[23:16] <= sa[1][3];\n        text_out_r[15:8] <= sa[2][3];\n        text_out_r[7:0] <= sa[3][3];\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 4, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 10;\n                end else if (ld) begin\n                    dcnt <= 4'd1;\n                    ld_r <= 1;\n                end\n            end\n            4'd1: begin\n                if (ld_r) begin\n                    dcnt <= 4'd2;\n                    ld_r <= 0;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd4;\n                end else begin\n                    kcnt <= kcnt - 1;\n                end\n            end\n            4'd4: begin\n                done <= 1;\n                dcnt <= 4'd0;\n            end\n            default: dcnt <= dcnt;\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            if (i == 1) begin\n                sa[i][j] <= sa[i][(j + 3) % 4];\n            end else if (i == 2) begin\n                sa[i][j] <= sa[i][(j + 2) % 4];\n            end else if (i == 3) begin\n                sa[i][j] <= sa[i][(j + 1) % 4];\n            end\n        end\n    end\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i / 4][i % 4];\n        sa[i / 4][i % 4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i / 4][i % 4] <= sa[i / 4][i % 4] ^ kb[kcnt][i * 8 +: 8];\n    end\n\n    // InvMixColumns\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            sa[i][j] <= (sa[i][j] * 14) ^ (sa[(i + 1) % 4][j] * 11) ^ (sa[(i + 2) % 4][j] * 13) ^ (sa[(i + 3) % 4][j] * 9);\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= sa[3:0][3:0];\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 5, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expander(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Reset state\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else if (kld) begin\n        // Key loading state\n        kcnt <= kcnt - 1;\n        if (kcnt == 0) begin\n            // Key stored state\n            ld_r <= ld;\n        end\n    end else if (ld) begin\n        // Load state\n        text_in_r <= text_in;\n        dcnt <= 1;\n        ld_r <= 1;\n    end else if (dcnt < 11) begin\n        // Standard round state\n        dcnt <= dcnt + 1;\n        // InvShiftRows\n        sa[0][1:3] <= sa[0][0:2];\n        sa[1][0:2] <= sa[1][1:3];\n        sa[2][2:3] <= sa[2][0:1];\n        sa[3][3:0] <= sa[3][0:3];\n        // InvSubBytes\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= inv_sbox[i].b;\n        end\n        // AddRoundKey\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt-1][i*8 +: 8];\n        end\n        // InvMixColumns\n        if (dcnt < 10) begin\n            for (int i = 0; i < 4; i++) begin\n                sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n            end\n        end\n    end else begin\n        // Final round state\n        done <= 1;\n        text_out_r <= {sa[3][0], sa[2][0], sa[1][0], sa[0][0],\n                       sa[3][1], sa[2][1], sa[1][1], sa[0][1],\n                       sa[3][2], sa[2][2], sa[1][2], sa[0][2],\n                       sa[3][3], sa[2][3], sa[1][3], sa[0][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 6, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 4'd10;\n                end else if (ld) begin\n                    dcnt <= 4'd1;\n                    ld_r <= 1'b1;\n                end\n            end\n            4'd1: begin\n                if (ld_r) begin\n                    dcnt <= 4'd2;\n                    ld_r <= 1'b0;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd4;\n                end else begin\n                    kcnt <= kcnt - 1'b1;\n                end\n            end\n            4'd4: begin\n                done <= 1'b1;\n                dcnt <= 4'd0;\n            end\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[kcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    for (int i = 0; i < 4; i++) begin\n        sa[0][i] <= (sa[0][i] * 14) ^ (sa[1][i] * 11) ^ (sa[2][i] * 13) ^ (sa[3][i] * 9);\n        sa[1][i] <= (sa[0][i] * 9) ^ (sa[1][i] * 14) ^ (sa[2][i] * 11) ^ (sa[3][i] * 13);\n        sa[2][i] <= (sa[0][i] * 13) ^ (sa[1][i] * 9) ^ (sa[2][i] * 14) ^ (sa[3][i] * 11);\n        sa[3][i] <= (sa[0][i] * 11) ^ (sa[1][i] * 13) ^ (sa[2][i] * 9) ^ (sa[3][i] * 14);\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 7, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10]),\n    .wo_1(kb[9]),\n    .wo_2(kb[8]),\n    .wo_3(kb[7])\n);\n\naes_inv_sbox inv_sbox [15:0] (\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Logic\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            0: begin\n                if (kld) begin\n                    kcnt <= 10;\n                end else if (ld) begin\n                    dcnt <= 1;\n                    ld_r <= 1;\n                end\n            end\n            1: begin\n                dcnt <= 2;\n                ld_r <= 0;\n            end\n            2: begin\n                if (dcnt == 10) begin\n                    done <= 1;\n                end else begin\n                    dcnt <= dcnt + 1;\n                end\n            end\n            default: begin\n                dcnt <= dcnt + 1;\n            end\n        endcase\n    end\nend\n\n// Round Transformation Logic\nalways @(posedge clk) begin\n    // InvShiftRows\n    for (int i = 0; i < 4; i++) begin\n        sa[0][i] <= sa[0][i];\n        sa[1][i] <= sa[3][i];\n        sa[2][i] <= sa[2][i];\n        sa[3][i] <= sa[1][i];\n    end\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    for (int i = 0; i < 4; i++) begin\n        sa[0][i] <= (sa[0][i] * 14) ^ (sa[1][i] * 11) ^ (sa[2][i] * 13) ^ (sa[3][i] * 9);\n        sa[1][i] <= (sa[0][i] * 9) ^ (sa[1][i] * 14) ^ (sa[2][i] * 11) ^ (sa[3][i] * 13);\n        sa[2][i] <= (sa[0][i] * 13) ^ (sa[1][i] * 9) ^ (sa[2][i] * 14) ^ (sa[3][i] * 11);\n        sa[3][i] <= (sa[0][i] * 11) ^ (sa[1][i] * 13) ^ (sa[2][i] * 9) ^ (sa[3][i] * 14);\n    end\nend\n\n// Output Logic\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 8, "code": "module aes_inv_cipher_top(\n    input               clk,\n    input               rst,\n    input               kld,\n    input               ld,\n    output              done,\n    input      [127:0]  key,\n    input      [127:0]  text_in,\n    output     [127:0]  text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0] (\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 10;\n                    dcnt <= 4'd1;\n                end else if (ld) begin\n                    ld_r <= 1;\n                    dcnt <= 4'd2;\n                end\n            end\n            4'd1: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd2;\n                end else begin\n                    kcnt <= kcnt - 1;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (dcnt == 4'd10) begin\n                    done <= 1;\n                    dcnt <= 4'd0;\n                end else begin\n                    dcnt <= dcnt + 1;\n                end\n            end\n            default: dcnt <= 4'd0;\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    if (dcnt != 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h0e;\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h0b;\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h0d;\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h09;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 9, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg [10:0][127:0] kb;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox[15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        text_in_r <= 128'd0;\n        sa <= 4'd0;\n        dcnt <= 4'd0;\n        kb <= 11'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'd0;\n        text_out_r <= 128'd0;\n    end else begin\n        // IDLE state\n        if (ld_r == 1'd0 && kld == 1'd0 && ld == 1'd0) begin\n            // Do nothing\n        end\n        // KeyLoad state\n        else if (ld_r == 1'd0 && kld == 1'd1 && ld == 1'd0) begin\n            // Load key\n            kb[10] <= key;\n            kcnt <= 4'd9;\n        end\n        // KeyExpansion state\n        else if (ld_r == 1'd0 && kld == 1'd0 && ld == 1'd0 && kcnt != 4'd0) begin\n            // Expand key\n            kb[kcnt] <= {kb[kcnt+1][31:0], kb[kcnt+1][63:32], kb[kcnt+1][95:64], kb[kcnt+1][127:96]};\n            kcnt <= kcnt - 1'd1;\n        end\n        // KeyStored state\n        else if (ld_r == 1'd0 && kld == 1'd0 && ld == 1'd0 && kcnt == 4'd0) begin\n            // Do nothing\n        end\n        // InitialRound state\n        else if (ld_r == 1'd1 && ld == 1'd1) begin\n            // Load data\n            text_in_r <= text_in;\n            sa[3:0][3:0] <= text_in_r[127:0];\n            dcnt <= 4'd1;\n        end\n        // StandardRound state\n        else if (ld_r == 1'd1 && ld == 1'd0 && dcnt != 4'd11) begin\n            // Perform round transformations\n            // InvShiftRows\n            sa[1][3:0] <= {sa[1][0], sa[1][1], sa[1][2], sa[1][3]};\n            sa[2][3:0] <= {sa[2][2], sa[2][3], sa[2][0], sa[2][1]};\n            sa[3][3:0] <= {sa[3][1], sa[3][2], sa[3][3], sa[3][0]};\n            // InvSubBytes\n            for (int i = 0; i < 16; i++) begin\n                sa[3:0][3:0][i*8 +: 8] <= inv_sbox[i].b;\n            end\n            // AddRoundKey\n            sa[3:0][3:0] <= sa[3:0][3:0] ^ kb[dcnt][127:0];\n            // InvMixColumns\n            for (int i = 0; i < 4; i++) begin\n                sa[3:0][i] <= {sa[3][i] ^ sa[2][i] ^ sa[1][i] ^ sa[0][i],\n                               sa[2][i] ^ sa[3][i] ^ sa[1][i] ^ sa[0][i],\n                               sa[1][i] ^ sa[2][i] ^ sa[3][i] ^ sa[0][i],\n                               sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]};\n            end\n            dcnt <= dcnt + 1'd1;\n        end\n        // FinalRound state\n        else if (ld_r == 1'd1 && ld == 1'd0 && dcnt == 4'd11) begin\n            // Perform final round transformations\n            // InvShiftRows\n            sa[1][3:0] <= {sa[1][0], sa[1][1], sa[1][2], sa[1][3]};\n            sa[2][3:0] <= {sa[2][2], sa[2][3], sa[2][0], sa[2][1]};\n            sa[3][3:0] <= {sa[3][1], sa[3][2], sa[3][3], sa[3][0]};\n            // InvSubBytes\n            for (int i = 0; i < 16; i++) begin\n                sa[3:0][3:0][i*8 +: 8] <= inv_sbox[i].b;\n            end\n            // AddRoundKey\n            sa[3:0][3:0] <= sa[3:0][3:0] ^ kb[dcnt][127:0];\n            text_out_r <= {sa[3][3], sa[2][3], sa[1][3], sa[0][3],\n                           sa[3][2], sa[2][2], sa[1][2], sa[0][2],\n                           sa[3][1], sa[2][1], sa[1][1], sa[0][1],\n                           sa[3][0], sa[2][0], sa[1][0], sa[0][0]};\n            done <= 1'd1;\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 10, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 4'd10;\n                end else if (ld) begin\n                    ld_r <= 1'b1;\n                    dcnt <= 4'd1;\n                end\n            end\n            4'd1: begin\n                if (ld_r) begin\n                    // Initial Round Key Addition\n                    sa[3:0][3:0] <= text_in_r[127:120];\n                    dcnt <= 4'd2;\n                end\n            end\n            4'd2: begin\n                // Standard Round Transformations\n                sa[3:0][3:0] <= inv_sbox[15:0].b;\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                // Final Round Transformations\n                sa[3:0][3:0] <= inv_sbox[15:0].b;\n                dcnt <= 4'd11;\n            end\n            4'd11: begin\n                done <= 1'b1;\n                dcnt <= 4'd0;\n            end\n        endcase\n    end\nend\n\n// Key Expansion Buffer\nalways @(posedge clk) begin\n    if (kld) begin\n        kb[10] <= key;\n        kcnt <= 4'd9;\n    end else if (kcnt > 4'd0) begin\n        kb[kcnt] <= kb[kcnt + 1];\n        kcnt <= kcnt - 1;\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[1][3:0] <= {sa[1][0], sa[1][3:1]};\n    sa[2][3:0] <= {sa[2][2:0], sa[2][3]};\n    sa[3][3:0] <= {sa[3][1:0], sa[3][3:2]};\n    \n    // InvSubBytes\n    inv_sbox[15:0].a <= sa[3:0][3:0];\n    \n    // AddRoundKey\n    sa[3:0][3:0] <= sa[3:0][3:0] ^ kb[dcnt][127:0];\n    \n    // InvMixColumns\n    sa[3:0][3:0] <= {sa[3:0][3:0], sa[3:0][3:0]};\nend\n\n// Final Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= sa[3:0][3:0];\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 11, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 10;\n                end else if (ld) begin\n                    dcnt <= 4'd1;\n                    ld_r <= 1;\n                end\n            end\n            4'd1: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd2;\n                end else begin\n                    kcnt <= kcnt - 1;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (dcnt == 4'd11) begin\n                    done <= 1;\n                end else begin\n                    dcnt <= dcnt + 1;\n                end\n            end\n            default: begin\n                dcnt <= 4'd0;\n            end\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    if (dcnt != 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 12, "code": "```ilog\nmodule aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg [10:0][127:0] kb;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox[15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// Key Expansion Buffer\nalways @(posedge clk) begin\n    if (rst) begin\n        kcnt <= 4'd10;\n    end else if (kld) begin\n        kcnt <= kcnt - 1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        kb <= 0;\n    end else if (kld) begin\n        kb[kcnt] <= {key_expand.wo_3, key_expand.wo_2, key_expand.wo_1, key_expand.wo_0};\n    end\nend\n\n// Round Counter and Control Logic\nalways @(posedge clk) begin\n    if (rst) begin\n        dcnt <= 0;\n    end else if (ld) begin\n        dcnt <= dcnt + 1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        done <= 0;\n    end else if (dcnt == 4'd11) begin\n        done <= 1;\n    end\nend\n\n// Initial Data Loading\nalways @(posedge clk) begin\n    if (rst) begin\n        text_in_r <= 0;\n    end else if (ld) begin\n        text_in_r <= text_in;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        sa <= 0;\n    end else if (ld) begin\n        sa[3:0][3:0] <= text_in_r[127:0];\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    if (rst) begin\n        sa <= 0;\n    end else if (ld) begin\n        // InvShiftRows\n        sa[1][3:0] <= {sa[1][0], sa[1][1], sa[1][2], sa[1][3]};\n        sa[2][3:0] <= {sa[2][2], sa[2][3], sa[2][0], sa[2][1]};\n        sa[3][3:0] <= {sa[3][1], sa[3][2], sa[3][3], sa[3][0]};\n        \n        // InvSubBytes\n        sa[3:0][3:0] <= inv_sbox[15:0].b;\n        \n        // AddRoundKey\n        sa[3:0][3:0] <= sa[3:0][3:0] ^ kb[dcnt][127:0];\n        \n        // InvMixColumns\n        if (dcnt != 4'd10) begin\n            sa[3:0][3:0] <= {pmul_e(sa[3:0][3:0]), pmul_b(sa[3:0][3:0]), pmul_d(sa[3:0][3:0]), pmul_9(sa[3:0][3:0])};\n        end\n    end\nend\n\n// Final Output Generation\nalways @(posedge clk) begin\n    if (rst) begin\n        text_out_r <= 0;\n    end else if (done) begin\n        text_out_r <= sa[3:0][3:0];\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 13, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 10;\n                    dcnt <= 4'd1;\n                end else if (ld) begin\n                    ld_r <= 1;\n                    dcnt <= 4'd1;\n                end\n            end\n            4'd1: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd2;\n                end else begin\n                    kcnt <= kcnt - 1;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (dcnt == 4'd11) begin\n                    done <= 1;\n                    dcnt <= 4'd0;\n                end else begin\n                    dcnt <= dcnt + 1;\n                end\n            end\n            default: dcnt <= 4'd0;\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    if (dcnt != 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'hff;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 14, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg [10:0][127:0] kb;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox[15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Reset state\n        dcnt <= 4'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                // IDLE state\n                if (kld) begin\n                    // KeyLoad state\n                    kcnt <= 4'd10;\n                end else if (ld) begin\n                    // InitialRound state\n                    dcnt <= 4'd1;\n                    ld_r <= 1'b1;\n                end\n            end\n            4'd1: begin\n                // InitialRound state\n                if (ld_r) begin\n                    // StandardRound state\n                    dcnt <= 4'd2;\n                    ld_r <= 1'b0;\n                end\n            end\n            4'd2: begin\n                // StandardRound state\n                if (dcnt < 4'd10) begin\n                    dcnt <= dcnt + 4'd1;\n                end else begin\n                    // FinalRound state\n                    dcnt <= 4'd11;\n                end\n            end\n            4'd11: begin\n                // FinalRound state\n                done <= 1'b1;\n            end\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows operation\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes operation\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey operation\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns operation\n    if (dcnt < 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h0e;\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h0b;\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h0d;\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]) & 8'h09;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[3][0], sa[2][0], sa[1][0], sa[0][0],\n                       sa[3][1], sa[2][1], sa[1][1], sa[0][1],\n                       sa[3][2], sa[2][2], sa[1][2], sa[0][2],\n                       sa[3][3], sa[2][3], sa[1][3], sa[0][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 15, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk) begin\n    if (rst) begin\n        // IDLE state\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        kb <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        text_out_r <= 0;\n    end else if (kld) begin\n        // KeyLoad state\n        kcnt <= 10;\n    end else if (ld) begin\n        // Load state\n        text_in_r <= text_in;\n        ld_r <= 1;\n    end else if (ld_r) begin\n        // InitialRound state\n        dcnt <= 1;\n        ld_r <= 0;\n    end else if (dcnt < 11) begin\n        // StandardRound state\n        dcnt <= dcnt + 1;\n    end else if (dcnt == 11) begin\n        // FinalRound state\n        done <= 1;\n    end else begin\n        // Done state\n        text_out_r <= sa[3:0][3:0];\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    if (dcnt < 11) begin\n        // InvShiftRows\n        sa[1][0] <= sa[1][3];\n        sa[1][1] <= sa[1][0];\n        sa[1][2] <= sa[1][1];\n        sa[1][3] <= sa[1][2];\n        \n        sa[2][0] <= sa[2][2];\n        sa[2][1] <= sa[2][3];\n        sa[2][2] <= sa[2][0];\n        sa[2][3] <= sa[2][1];\n        \n        sa[3][0] <= sa[3][1];\n        sa[3][1] <= sa[3][2];\n        sa[3][2] <= sa[3][3];\n        sa[3][3] <= sa[3][0];\n        \n        // InvSubBytes\n        for (int i = 0; i < 16; i++) begin\n            inv_sbox[i].a <= sa[i/4][i%4];\n            sa[i/4][i%4] <= inv_sbox[i].b;\n        end\n        \n        // AddRoundKey\n        for (int i = 0; i < 16; i++) begin\n            sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n        end\n        \n        // InvMixColumns\n        for (int i = 0; i < 4; i++) begin\n            sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n            sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n            sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n            sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n        end\n    end\nend\n\n// Output Generation\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 16, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Reset state\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        kb <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        text_out_r <= 0;\n    end else begin\n        // IDLE state\n        if (kld) begin\n            // KeyLoad state\n            kb[10] <= key;\n            kcnt <= kcnt - 1;\n        end else if (ld) begin\n            // Load state\n            text_in_r <= text_in;\n            ld_r <= 1;\n        end else if (ld_r) begin\n            // InitialRound state\n            dcnt <= dcnt + 1;\n            ld_r <= 0;\n        end else if (dcnt < 11) begin\n            // StandardRound state\n            dcnt <= dcnt + 1;\n        end else begin\n            // FinalRound state\n            done <= 1;\n            text_out_r <= text_out;\n        end\n    end\nend\n\n// Round Transformation Implementation\nalways @(*) begin\n    // InvShiftRows\n    for (int i = 0; i < 4; i++) begin\n        sa[0][i] <= sa[0][i];\n        sa[1][i] <= sa[1][(i + 3) % 4];\n        sa[2][i] <= sa[2][(i + 2) % 4];\n        sa[3][i] <= sa[3][(i + 1) % 4];\n    end\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i / 4][i % 4];\n        sa[i / 4][i % 4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i / 4][i % 4] <= sa[i / 4][i % 4] ^ kb[dcnt][i * 8 +: 8];\n    end\n\n    // InvMixColumns\n    for (int i = 0; i < 4; i++) begin\n        sa[0][i] <= (sa[0][i] * 14) ^ (sa[1][i] * 11) ^ (sa[2][i] * 13) ^ (sa[3][i] * 9);\n        sa[1][i] <= (sa[0][i] * 9) ^ (sa[1][i] * 14) ^ (sa[2][i] * 11) ^ (sa[3][i] * 13);\n        sa[2][i] <= (sa[0][i] * 13) ^ (sa[1][i] * 9) ^ (sa[2][i] * 14) ^ (sa[3][i] * 11);\n        sa[3][i] <= (sa[0][i] * 11) ^ (sa[1][i] * 13) ^ (sa[2][i] * 9) ^ (sa[3][i] * 14);\n    end\nend\n\n// Output Generation\nassign text_out <= text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 17, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// Combinational Logic\nalways @(*) begin\n    // InvShiftRows\n    reg [7:0] sa_shifted [3:0][3:0];\n    sa_shifted[0][0] = sa[0][0];\n    sa_shifted[0][1] = sa[0][1];\n    sa_shifted[0][2] = sa[0][2];\n    sa_shifted[0][3] = sa[0][3];\n    sa_shifted[1][0] = sa[1][3];\n    sa_shifted[1][1] = sa[1][0];\n    sa_shifted[1][2] = sa[1][1];\n    sa_shifted[1][3] = sa[1][2];\n    sa_shifted[2][0] = sa[2][2];\n    sa_shifted[2][1] = sa[2][3];\n    sa_shifted[2][2] = sa[2][0];\n    sa_shifted[2][3] = sa[2][1];\n    sa_shifted[3][0] = sa[3][1];\n    sa_shifted[3][1] = sa[3][2];\n    sa_shifted[3][2] = sa[3][3];\n    sa_shifted[3][3] = sa[3][0];\n\n    // InvSubBytes\n    reg [7:0] sa_sub [3:0][3:0];\n    for (int i = 0; i < 16; i++) begin\n        sa_sub[i/4][i%4] = inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    reg [7:0] sa_ark [3:0][3:0];\n    for (int i = 0; i < 16; i++) begin\n        sa_ark[i/4][i%4] = sa_sub[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    reg [7:0] sa_mix [3:0][3:0];\n    for (int i = 0; i < 4; i++) begin\n        sa_mix[0][i] = (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]);\n        sa_mix[1][i] = (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]);\n        sa_mix[2][i] = (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]);\n        sa_mix[3][i] = (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]) &\n                        (sa_ark[0][i] ^ sa_ark[1][i] ^ sa_ark[2][i] ^ sa_ark[3][i]);\n    end\nend\n\n// Sequential Logic\nalways @(posedge clk) begin\n    if (rst) begin\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        kb <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        text_out_r <= 0;\n    end else begin\n        // Key schedule loading\n        if (kld) begin\n            kb[10] <= key;\n            kcnt <= kcnt - 1;\n        end\n\n        // Data loading\n        if (ld) begin\n            text_in_r <= text_in;\n            ld_r <= 1;\n        end\n\n        // Round operations\n        if (ld_r) begin\n            // InvShiftRows\n            sa <= sa_shifted;\n\n            // InvSubBytes\n            sa <= sa_sub;\n\n            // AddRoundKey\n            sa <= sa_ark;\n\n            // InvMixColumns\n            if (dcnt < 10) begin\n                sa <= sa_mix;\n            end\n\n            // Round counter\n            dcnt <= dcnt + 1;\n\n            // Final round\n            if (dcnt == 10) begin\n                text_out_r <= sa;\n                done <= 1;\n            end\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 18, "code": "module aes_inv_cipher_top(\n    input               clk,\n    input               rst,\n    input               kld,\n    input               ld,\n    output              done,\n    input      [127:0]  key,\n    input      [127:0]  text_in,\n    output     [127:0]  text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa [3:0][3:0];\nreg [3:0] dcnt;\nreg [127:0] kb [10:0];\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox [15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 4'd10;\n                    dcnt <= 4'd1;\n                end else if (ld) begin\n                    ld_r <= 1'b1;\n                    dcnt <= 4'd2;\n                end\n            end\n            4'd1: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd2;\n                end else begin\n                    kcnt <= kcnt - 1'b1;\n                end\n            end\n            4'd2: begin\n                if (ld_r) begin\n                    ld_r <= 1'b0;\n                    dcnt <= 4'd3;\n                end\n            end\n            4'd3: begin\n                dcnt <= dcnt + 1'b1;\n                if (dcnt == 4'd11) begin\n                    done <= 1'b1;\n                    dcnt <= 4'd0;\n                end\n            end\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    for (int i = 0; i < 4; i++) begin\n        for (int j = 0; j < 4; j++) begin\n            if (i == 1) begin\n                sa[i][j] <= sa[i][j-1];\n            end else if (i == 2) begin\n                sa[i][j] <= sa[i][j-2];\n            end else if (i == 3) begin\n                sa[i][j] <= sa[i][j-3];\n            end\n        end\n    end\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    if (dcnt != 4'd10) begin\n        for (int i = 0; i < 4; i++) begin\n            reg [7:0] col [3:0];\n            for (int j = 0; j < 4; j++) begin\n                col[j] <= sa[j][i];\n            end\n            sa[0][i] <= (col[0] ^ col[1] ^ col[2] ^ col[3]) & 8'd14;\n            sa[1][i] <= (col[0] ^ col[1] ^ col[2] ^ col[3]) & 8'd11;\n            sa[2][i] <= (col[0] ^ col[1] ^ col[2] ^ col[3]) & 8'd13;\n            sa[3][i] <= (col[0] ^ col[1] ^ col[2] ^ col[3]) & 8'd9;\n        end\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        for (int i = 0; i < 16; i++) begin\n            text_out_r[i*8 +: 8] <= sa[i/4][i%4];\n        end\n        text_out <= text_out_r;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 19, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg [10:0][127:0] kb;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expand(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\naes_inv_sbox inv_sbox[15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        dcnt <= 4'd0;\n        kcnt <= 4'd10;\n        ld_r <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case (dcnt)\n            4'd0: begin\n                if (kld) begin\n                    kcnt <= 4'd10;\n                end else if (ld) begin\n                    dcnt <= 4'd1;\n                    ld_r <= 1'b1;\n                end\n            end\n            4'd1: begin\n                if (ld_r) begin\n                    dcnt <= 4'd2;\n                    ld_r <= 1'b0;\n                end\n            end\n            4'd2: begin\n                dcnt <= 4'd3;\n            end\n            4'd3: begin\n                if (kcnt == 4'd0) begin\n                    dcnt <= 4'd11;\n                end else begin\n                    kcnt <= kcnt - 1'b1;\n                    dcnt <= 4'd2;\n                end\n            end\n            4'd11: begin\n                done <= 1'b1;\n                dcnt <= 4'd0;\n            end\n            default: begin\n                dcnt <= dcnt + 1'b1;\n            end\n        endcase\n    end\nend\n\n// Round Transformation Implementation\nalways @(posedge clk) begin\n    // InvShiftRows\n    sa[0][0] <= sa[0][0];\n    sa[0][1] <= sa[0][1];\n    sa[0][2] <= sa[0][2];\n    sa[0][3] <= sa[0][3];\n    sa[1][0] <= sa[1][3];\n    sa[1][1] <= sa[1][0];\n    sa[1][2] <= sa[1][1];\n    sa[1][3] <= sa[1][2];\n    sa[2][0] <= sa[2][2];\n    sa[2][1] <= sa[2][3];\n    sa[2][2] <= sa[2][0];\n    sa[2][3] <= sa[2][1];\n    sa[3][0] <= sa[3][1];\n    sa[3][1] <= sa[3][2];\n    sa[3][2] <= sa[3][3];\n    sa[3][3] <= sa[3][0];\n\n    // InvSubBytes\n    for (int i = 0; i < 16; i++) begin\n        inv_sbox[i].a <= sa[i/4][i%4];\n        sa[i/4][i%4] <= inv_sbox[i].b;\n    end\n\n    // AddRoundKey\n    for (int i = 0; i < 16; i++) begin\n        sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[kcnt][i*8 +: 8];\n    end\n\n    // InvMixColumns\n    for (int i = 0; i < 4; i++) begin\n        sa[0][i] <= (sa[0][i] * 14) ^ (sa[1][i] * 11) ^ (sa[2][i] * 13) ^ (sa[3][i] * 9);\n        sa[1][i] <= (sa[0][i] * 9) ^ (sa[1][i] * 14) ^ (sa[2][i] * 11) ^ (sa[3][i] * 13);\n        sa[2][i] <= (sa[0][i] * 13) ^ (sa[1][i] * 9) ^ (sa[2][i] * 14) ^ (sa[3][i] * 11);\n        sa[3][i] <= (sa[0][i] * 11) ^ (sa[1][i] * 13) ^ (sa[2][i] * 9) ^ (sa[3][i] * 14);\n    end\nend\n\n// Output Generation\nalways @(posedge clk) begin\n    if (done) begin\n        text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                       sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                       sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                       sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 1, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbf;\n    inv_sbox[9]  = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h12;\n    inv_sbox[13] = 8'h49;\n    inv_sbox[14] = 8'h9b;\n    inv_sbox[15] = 8'h24;\n    inv_sbox[16] = 8'h0f;\n    inv_sbox[17] = 8'h62;\n    inv_sbox[18] = 8'h44;\n    inv_sbox[19] = 8'h75;\n    inv_sbox[20] = 8'h31;\n    inv_sbox[21] = 8'h16;\n    inv_sbox[22] = 8'h2f;\n    inv_sbox[23] = 8'h8d;\n    inv_sbox[24] = 8'h98;\n    inv_sbox[25] = 8'had;\n    inv_sbox[26] = 8'h08;\n    inv_sbox[27] = 8'h15;\n    inv_sbox[28] = 8'h3e;\n    inv_sbox[29] = 8'h94;\n    inv_sbox[30] = 8'h9c;\n    inv_sbox[31] = 8'h6f;\n    inv_sbox[32] = 8'h65;\n    inv_sbox[33] = 8'h34;\n    inv_sbox[34] = 8'h60;\n    inv_sbox[35] = 8'h39;\n    inv_sbox[36] = 8'h38;\n    inv_sbox[37] = 8'h5c;\n    inv_sbox[38] = 8'h45;\n    inv_sbox[39] = 8'h96;\n    inv_sbox[40] = 8'h7a;\n    inv_sbox[41] = 8'h4e;\n    inv_sbox[42] = 8'h7d;\n    inv_sbox[43] = 8'h79;\n    inv_sbox[44] = 8'h84;\n    inv_sbox[45] = 8'h9e;\n    inv_sbox[46] = 8'h48;\n    inv_sbox[47] = 8'h13;\n    inv_sbox[48] = 8'h3d;\n    inv_sbox[49] = 8'h6b;\n    inv_sbox[50] = 8'h72;\n    inv_sbox[51] = 8'h6c;\n    inv_sbox[52] = 8'h61;\n    inv_sbox[53] = 8'h59;\n    inv_sbox[54] = 8'h47;\n    inv_sbox[55] = 8'h18;\n    inv_sbox[56] = 8'h9d;\n    inv_sbox[57] = 8'h27;\n    inv_sbox[58] = 8'h22;\n    inv_sbox[59] = 8'hcc;\n    inv_sbox[60] = 8'h5f;\n    inv_sbox[61] = 8'h6a;\n    inv_sbox[62] = 8'h85;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h45;\n    inv_sbox[65] = 8'h5d;\n    inv_sbox[66] = 8'h8c;\n    inv_sbox[67] = 8'h57;\n    inv_sbox[68] = 8'h7c;\n    inv_sbox[69] = 8'h64;\n    inv_sbox[70] = 8'h21;\n    inv_sbox[71] = 8'h0e;\n    inv_sbox[72] = 8'h7f;\n    inv_sbox[73] = 8'h17;\n    inv_sbox[74] = 8'h9a;\n    inv_sbox[75] = 8'h77;\n    inv_sbox[76] = 8'h4f;\n    inv_sbox[77] = 8'h39;\n    inv_sbox[78] = 8'h43;\n    inv_sbox[79] = 8'h50;\n    inv_sbox[80] = 8'h68;\n    inv_sbox[81] = 8'h72;\n    inv_sbox[82] = 8'h9f;\n    inv_sbox[83] = 8'h95;\n    inv_sbox[84] = 8'hbc;\n    inv_sbox[85] = 8'h74;\n    inv_sbox[86] = 8'h34;\n    inv_sbox[87] = 8'h41;\n    inv_sbox[88] = 8'h6d;\n    inv_sbox[89] = 8'h1b;\n    inv_sbox[90] = 8'h20;\n    inv_sbox[91] = 8'h38;\n    inv_sbox[92] = 8'h5a;\n    inv_sbox[93] = 8'h44;\n    inv_sbox[94] = 8'h6e;\n    inv_sbox[95] = 8'h3f;\n    inv_sbox[96] = 8'h21;\n    inv_sbox[97] = 8'h01;\n    inv_sbox[98] = 8'h9e;\n    inv_sbox[99] = 8'h76;\n    inv_sbox[100] = 8'h38;\n    inv_sbox[101] = 8'h73;\n    inv_sbox[102] = 8'h4d;\n    inv_sbox[103] = 8'h46;\n    inv_sbox[104] = 8'h3e;\n    inv_sbox[105] = 8'h2e;\n    inv_sbox[106] = 8'h8b;\n    inv_sbox[107] = 8'h82;\n    inv_sbox[108] = 8'h51;\n    inv_sbox[109] = 8'h8a;\n    inv_sbox[110] = 8'h53;\n    inv_sbox[111] = 8'h94;\n    inv_sbox[112] = 8'h66;\n    inv_sbox[113] = 8'h48;\n    inv_sbox[114] = 8'h33;\n    inv_sbox[115] = 8'h69;\n    inv_sbox[116] = 8'h42;\n    inv_sbox[117] = 8'h31;\n    inv_sbox[118] = 8'h70;\n    inv_sbox[119] = 8'h9d;\n    inv_sbox[120] = 8'h7e;\n    inv_sbox[121] = 8'h5c;\n    inv_sbox[122] = 8'h1f;\n    inv_sbox[123] = 8'h63;\n    inv_sbox[124] = 8'h3b;\n    inv_sbox[125] = 8'h00;\n    inv_sbox[126] = 8'h11;\n    inv_sbox[127] = 8'h26;\n    inv_sbox[128] = 8'h56;\n    inv_sbox[129] = 8'h55;\n    inv_sbox[130] = 8'h97;\n    inv_sbox[131] = 8'h9c;\n    inv_sbox[132] = 8'h7b;\n    inv_sbox[133] = 8'h7a;\n    inv_sbox[134] = 8'h3a;\n    inv_sbox[135] = 8'h80;\n    inv_sbox[136] = 8'h5b;\n    inv_sbox[137] = 8'h59;\n    inv_sbox[138] = 8'h19;\n    inv_sbox[139] = 8'h1c;\n    inv_sbox[140] = 8'h92;\n    inv_sbox[141] = 8'h40;\n    inv_sbox[142] = 8'h6b;\n    inv_sbox[143] = 8'h35;\n    inv_sbox[144] = 8'h39;\n    inv_sbox[145] = 8'h2a;\n    inv_sbox[146] = 8'h16;\n    inv_sbox[147] = 8'h0c;\n    inv_sbox[148] = 8'h54;\n    inv_sbox[149] = 8'h28;\n    inv_sbox[150] = 8'h75;\n    inv_sbox[151] = 8'h13;\n    inv_sbox[152] = 8'h08;\n    inv_sbox[153] = 8'h95;\n    inv_sbox[154] = 8'h67;\n    inv_sbox[155] = 8'h44;\n    inv_sbox[156] = 8'h8e;\n    inv_sbox[157] = 8'h4b;\n    inv_sbox[158] = 8'h62;\n    inv_sbox[159] = 8'h1a;\n    inv_sbox[160] = 8'h4d;\n    inv_sbox[161] = 8'h9a;\n    inv_sbox[162] = 8'h55;\n    inv_sbox[163] = 8'h2c;\n    inv_sbox[164] = 8'h45;\n    inv_sbox[165] = 8'h92;\n    inv_sbox[166] = 8'h6c;\n    inv_sbox[167] = 8'h49;\n    inv_sbox[168] = 8'h20;\n    inv_sbox[169] = 8'h41;\n    inv_sbox[170] = 8'hcb;\n    inv_sbox[171] = 8'h6a;\n    inv_sbox[172] = 8'h59;\n    inv_sbox[173] = 8'h8c;\n    inv_sbox[174] = 8'h43;\n    inv_sbox[175] = 8'h1e;\n    inv_sbox[176] = 8'h5d;\n    inv_sbox[177] = 8'h5a;\n    inv_sbox[178] = 8'h15;\n    inv_sbox[179] = 8'h14;\n    inv_sbox[180] = 8'h6f;\n    inv_sbox[181] = 8'h4a;\n    inv_sbox[182] = 8'h51;\n    inv_sbox[183] = 8'h22;\n    inv_sbox[184] = 8'h6e;\n    inv_sbox[185] = 8'h38;\n    inv_sbox[186] = 8'hbc;\n    inv_sbox[187] = 8'h33;\n    inv_sbox[188] = 8'h60;\n    inv_sbox[189] = 8'h7f;\n    inv_sbox[190] = 8'h71;\n    inv_sbox[191] = 8'h63;\n    inv_sbox[192] = 8'h61;\n    inv_sbox[193] = 8'h3f;\n    inv_sbox[194] = 8'h7d;\n    inv_sbox[195] = 8'h2b;\n    inv_sbox[196] = 8'h27;\n    inv_sbox[197] = 8'h0a;\n    inv_sbox[198] = 8'h37;\n    inv_sbox[199] = 8'h07;\n    inv_sbox[200] = 8'h1d;\n    inv_sbox[201] = 8'h32;\n    inv_sbox[202] = 8'h6d;\n    inv_sbox[203] = 8'h9b;\n    inv_sbox[204] = 8'h3b;\n    inv_sbox[205] = 8'h5f;\n    inv_sbox[206] = 8'h8d;\n    inv_sbox[207] = 8'h47;\n    inv_sbox[208] = 8'h65;\n    inv_sbox[209] = 8'h4c;\n    inv_sbox[210] = 8'h3c;\n    inv_sbox[211] = 8'h11;\n    inv_sbox[212] = 8'h1f;\n    inv_sbox[213] = 8'h4f;\n    inv_sbox[214] = 8'h2e;\n    inv_sbox[215] = 8'h1c;\n    inv_sbox[216] = 8'h5b;\n    inv_sbox[217] = 8'h8f;\n    inv_sbox[218] = 8'h66;\n    inv_sbox[219] = 8'h56;\n    inv_sbox[220] = 8'h9f;\n    inv_sbox[221] = 8'h00;\n    inv_sbox[222] = 8'h9a;\n    inv_sbox[223] = 8'h95;\n    inv_sbox[224] = 8'h3e;\n    inv_sbox[225] = 8'h64;\n    inv_sbox[226] = 8'h17;\n    inv_sbox[227] = 8'h05;\n    inv_sbox[228] = 8'h5e;\n    inv_sbox[229] = 8'h7a;\n    inv_sbox[230] = 8'h28;\n    inv_sbox[231] = 8'h14;\n    inv_sbox[232] = 8'h3d;\n    inv_sbox[233] = 8'h7c;\n    inv_sbox[234] = 8'h8e;\n    inv_sbox[235] = 8'h79;\n    inv_sbox[236] = 8'h2f;\n    inv_sbox[237] = 8'h6b;\n    inv_sbox[238] = 8'h35;\n    inv_sbox[239] = 8'h16;\n    inv_sbox[240] = 8'h4b;\n    inv_sbox[241] = 8'h1a;\n    inv_sbox[242] = 8'h58;\n    inv_sbox[243] = 8'h9e;\n    inv_sbox[244] = 8'h73;\n    inv_sbox[245] = 8'h51;\n    inv_sbox[246] = 8'h26;\n    inv_sbox[247] = 8'h49;\n    inv_sbox[248] = 8'h3f;\n    inv_sbox[249] = 8'h84;\n    inv_sbox[250] = 8'h15;\n    inv_sbox[251] = 8'h96;\n    inv_sbox[252] = 8'h62;\n    inv_sbox[253] = 8'h1d;\n    inv_sbox[254] = 8'h9b;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Output the substituted byte from the lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 2, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbf;\n    inv_sbox[9]  = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h32;\n    inv_sbox[13] = 8'h63;\n    inv_sbox[14] = 8'h7e;\n    inv_sbox[15] = 8'h5a;\n    inv_sbox[16] = 8'h19;\n    inv_sbox[17] = 8'h14;\n    inv_sbox[18] = 8'h2e;\n    inv_sbox[19] = 8'h6a;\n    inv_sbox[20] = 8'h0d;\n    inv_sbox[21] = 8'h5e;\n    inv_sbox[22] = 8'h7f;\n    inv_sbox[23] = 8'h36;\n    inv_sbox[24] = 8'h61;\n    inv_sbox[25] = 8'h3c;\n    inv_sbox[26] = 8'h17;\n    inv_sbox[27] = 8'hae;\n    inv_sbox[28] = 8'h3f;\n    inv_sbox[29] = 8'h49;\n    inv_sbox[30] = 8'h60;\n    inv_sbox[31] = 8'h9c;\n    inv_sbox[32] = 8'h11;\n    inv_sbox[33] = 8'h16;\n    inv_sbox[34] = 8'h6b;\n    inv_sbox[35] = 8'hd0;\n    inv_sbox[36] = 8'h4d;\n    inv_sbox[37] = 8'h5b;\n    inv_sbox[38] = 8'h44;\n    inv_sbox[39] = 8'h64;\n    inv_sbox[40] = 8'h9f;\n    inv_sbox[41] = 8'h39;\n    inv_sbox[42] = 8'h30;\n    inv_sbox[43] = 8'h8a;\n    inv_sbox[44] = 8'hca;\n    inv_sbox[45] = 8'h23;\n    inv_sbox[46] = 8'h3b;\n    inv_sbox[47] = 8'h9a;\n    inv_sbox[48] = 8'hfa;\n    inv_sbox[49] = 8'h85;\n    inv_sbox[50] = 8'h45;\n    inv_sbox[51] = 8'h5d;\n    inv_sbox[52] = 8'h4c;\n    inv_sbox[53] = 8'h6c;\n    inv_sbox[54] = 8'h54;\n    inv_sbox[55] = 8'h4b;\n    inv_sbox[56] = 8'h62;\n    inv_sbox[57] = 8'h92;\n    inv_sbox[58] = 8'h96;\n    inv_sbox[59] = 8'h65;\n    inv_sbox[60] = 8'h07;\n    inv_sbox[61] = 8'h9d;\n    inv_sbox[62] = 8'h8b;\n    inv_sbox[63] = 8'h1f;\n    inv_sbox[64] = 8'h8e;\n    inv_sbox[65] = 8'hc6;\n    inv_sbox[66] = 8'h98;\n    inv_sbox[67] = 8'h55;\n    inv_sbox[68] = 8'h1a;\n    inv_sbox[69] = 8'h05;\n    inv_sbox[70] = 8'h2f;\n    inv_sbox[71] = 8'h3e;\n    inv_sbox[72] = 8'hf1;\n    inv_sbox[73] = 8'h71;\n    inv_sbox[74] = 8'hd2;\n    inv_sbox[75] = 8'h59;\n    inv_sbox[76] = 8'h1b;\n    inv_sbox[77] = 8'h24;\n    inv_sbox[78] = 8'hfc;\n    inv_sbox[79] = 8'h21;\n    inv_sbox[80] = 8'h15;\n    inv_sbox[81] = 8'h8c;\n    inv_sbox[82] = 8'h6f;\n    inv_sbox[83] = 8'h6a;\n    inv_sbox[84] = 8'h00;\n    inv_sbox[85] = 8'h97;\n    inv_sbox[86] = 8'h04;\n    inv_sbox[87] = 8'h78;\n    inv_sbox[88] = 8'h84;\n    inv_sbox[89] = 8'h90;\n    inv_sbox[90] = 8'h40;\n    inv_sbox[91] = 8'h50;\n    inv_sbox[92] = 8'h68;\n    inv_sbox[93] = 8'h12;\n    inv_sbox[94] = 8'h4e;\n    inv_sbox[95] = 8'h7d;\n    inv_sbox[96] = 8'hfa;\n    inv_sbox[97] = 8'h5c;\n    inv_sbox[98] = 8'h20;\n    inv_sbox[99] = 8'h01;\n    inv_sbox[100] = 8'h70;\n    inv_sbox[101] = 8'h9b;\n    inv_sbox[102] = 8'h7c;\n    inv_sbox[103] = 8'h6e;\n    inv_sbox[104] = 8'h95;\n    inv_sbox[105] = 8'h53;\n    inv_sbox[106] = 8'h0a;\n    inv_sbox[107] = 8'h0e;\n    inv_sbox[108] = 8'h08;\n    inv_sbox[109] = 8'h9e;\n    inv_sbox[110] = 8'h82;\n    inv_sbox[111] = 8'h34;\n    inv_sbox[112] = 8'h2a;\n    inv_sbox[113] = 8'h43;\n    inv_sbox[114] = 8'h44;\n    inv_sbox[115] = 8'h21;\n    inv_sbox[116] = 8'h22;\n    inv_sbox[117] = 8'h46;\n    inv_sbox[118] = 8'h1d;\n    inv_sbox[119] = 8'h9c;\n    inv_sbox[120] = 8'h1e;\n    inv_sbox[121] = 8'h8a;\n    inv_sbox[122] = 8'h2b;\n    inv_sbox[123] = 8'h27;\n    inv_sbox[124] = 8'h86;\n    inv_sbox[125] = 8'h4f;\n    inv_sbox[126] = 8'h50;\n    inv_sbox[127] = 8'h94;\n    inv_sbox[128] = 8'h10;\n    inv_sbox[129] = 8'h7e;\n    inv_sbox[130] = 8'h34;\n    inv_sbox[131] = 8'h6b;\n    inv_sbox[132] = 8'h62;\n    inv_sbox[133] = 8'hcc;\n    inv_sbox[134] = 8'h18;\n    inv_sbox[135] = 8'h1f;\n    inv_sbox[136] = 8'h53;\n    inv_sbox[137] = 8'h5e;\n    inv_sbox[138] = 8'h8d;\n    inv_sbox[139] = 8'h3a;\n    inv_sbox[140] = 8'h48;\n    inv_sbox[141] = 8'h7f;\n    inv_sbox[142] = 8'h4a;\n    inv_sbox[143] = 8'h6e;\n    inv_sbox[144] = 8'h08;\n    inv_sbox[145] = 8'h4b;\n    inv_sbox[146] = 8'h7a;\n    inv_sbox[147] = 8'hac;\n    inv_sbox[148] = 8'h54;\n    inv_sbox[149] = 8'h75;\n    inv_sbox[150] = 8'h0b;\n    inv_sbox[151] = 8'h9f;\n    inv_sbox[152] = 8'h1a;\n    inv_sbox[153] = 8'h13;\n    inv_sbox[154] = 8'h1c;\n    inv_sbox[155] = 8'h6c;\n    inv_sbox[156] = 8'h9d;\n    inv_sbox[157] = 8'h45;\n    inv_sbox[158] = 8'h00;\n    inv_sbox[159] = 8'h15;\n    inv_sbox[160] = 8'h8c;\n    inv_sbox[161] = 8'h0d;\n    inv_sbox[162] = 8'h53;\n    inv_sbox[163] = 8'h94;\n    inv_sbox[164] = 8'h66;\n    inv_sbox[165] = 8'h33;\n    inv_sbox[166] = 8'h99;\n    inv_sbox[167] = 8'h0a;\n    inv_sbox[168] = 8'h3f;\n    inv_sbox[169] = 8'h72;\n    inv_sbox[170] = 8'ha9;\n    inv_sbox[171] = 8'h5a;\n    inv_sbox[172] = 8'h30;\n    inv_sbox[173] = 8'h21;\n    inv_sbox[174] = 8'h16;\n    inv_sbox[175] = 8'h2b;\n    inv_sbox[176] = 8'h28;\n    inv_sbox[177] = 8'h3d;\n    inv_sbox[178] = 8'h88;\n    inv_sbox[179] = 8'h46;\n    inv_sbox[180] = 8'h4f;\n    inv_sbox[181] = 8'h31;\n    inv_sbox[182] = 8'haf;\n    inv_sbox[183] = 8'h65;\n    inv_sbox[184] = 8'h7e;\n    inv_sbox[185] = 8'h5b;\n    inv_sbox[186] = 8'h9a;\n    inv_sbox[187] = 8'h76;\n    inv_sbox[188] = 8'h73;\n    inv_sbox[189] = 8'h9e;\n    inv_sbox[190] = 8'h70;\n    inv_sbox[191] = 8'h3c;\n    inv_sbox[192] = 8'h67;\n    inv_sbox[193] = 8'h2a;\n    inv_sbox[194] = 8'h19;\n    inv_sbox[195] = 8'h10;\n    inv_sbox[196] = 8'h3e;\n    inv_sbox[197] = 8'h32;\n    inv_sbox[198] = 8'h8f;\n    inv_sbox[199] = 8'h9d;\n    inv_sbox[200] = 8'h47;\n    inv_sbox[201] = 8'h38;\n    inv_sbox[202] = 8'h4c;\n    inv_sbox[203] = 8'h69;\n    inv_sbox[204] = 8'h37;\n    inv_sbox[205] = 8'h4d;\n    inv_sbox[206] = 8'h6f;\n    inv_sbox[207] = 8'h8b;\n    inv_sbox[208] = 8'h22;\n    inv_sbox[209] = 8'h6d;\n    inv_sbox[210] = 8'h90;\n    inv_sbox[211] = 8'h29;\n    inv_sbox[212] = 8'h80;\n    inv_sbox[213] = 8'h01;\n    inv_sbox[214] = 8'h5d;\n    inv_sbox[215] = 8'h97;\n    inv_sbox[216] = 8'h29;\n    inv_sbox[217] = 8'h7b;\n    inv_sbox[218] = 8'h63;\n    inv_sbox[219] = 8'h3b;\n    inv_sbox[220] = 8'h70;\n    inv_sbox[221] = 8'h05;\n    inv_sbox[222] = 8'h14;\n    inv_sbox[223] = 8'h2c;\n    inv_sbox[224] = 8'h26;\n    inv_sbox[225] = 8'h4a;\n    inv_sbox[226] = 8'h6a;\n    inv_sbox[227] = 8'h2e;\n    inv_sbox[228] = 8'h08;\n    inv_sbox[229] = 8'h95;\n    inv_sbox[230] = 8'h55;\n    inv_sbox[231] = 8'h7f;\n    inv_sbox[232] = 8'h58;\n    inv_sbox[233] = 8'h3a;\n    inv_sbox[234] = 8'hfd;\n    inv_sbox[235] = 8'h04;\n    inv_sbox[236] = 8'h20;\n    inv_sbox[237] = 8'h6b;\n    inv_sbox[238] = 8'h44;\n    inv_sbox[239] = 8'h9f;\n    inv_sbox[240] = 8'h0a;\n    inv_sbox[241] = 8'h23;\n    inv_sbox[242] = 8'h39;\n    inv_sbox[243] = 8'h09;\n    inv_sbox[244] = 8'h09;\n    inv_sbox[245] = 8'h13;\n    inv_sbox[246] = 8'h35;\n    inv_sbox[247] = 8'h66;\n    inv_sbox[248] = 8'h91;\n    inv_sbox[249] = 8'h74;\n    inv_sbox[250] = 8'h40;\n    inv_sbox[251] = 8'h15;\n    inv_sbox[252] = 8'h49;\n    inv_sbox[253] = 8'h4e;\n    inv_sbox[254] = 8'h39;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Perform inverse S-box substitution\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 3, "code": "```ilog\nmodule aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h96;\n    inv_sbox[7]  = 8'h36;\n    inv_sbox[8]  = 8'h8c;\n    inv_sbox[9]  = 8'hbd;\n    inv_sbox[10] = 8'h79;\n    inv_sbox[11] = 8'h3a;\n    inv_sbox[12] = 8'h4c;\n    inv_sbox[13] = 8'h65;\n    inv_sbox[14] = 8'h2e;\n    inv_sbox[15] = 8'h8f;\n    inv_sbox[16] = 8'h7c;\n    inv_sbox[17] = 8'h82;\n    inv_sbox[18] = 8'h3d;\n    inv_sbox[19] = 8'h1b;\n    inv_sbox[20] = 8'h28;\n    inv_sbox[21] = 8'h7f;\n    inv_sbox[22] = 8'h67;\n    inv_sbox[23] = 8'h15;\n    inv_sbox[24] = 8'h4b;\n    inv_sbox[25] = 8'hd2;\n    inv_sbox[26] = 8'h12;\n    inv_sbox[27] = 8'h95;\n    inv_sbox[28] = 8'h9b;\n    inv_sbox[29] = 8'h4f;\n    inv_sbox[30] = 8'h6a;\n    inv_sbox[31] = 8'h91;\n    inv_sbox[32] = 8'hce;\n    inv_sbox[33] = 8'h3b;\n    inv_sbox[34] = 8'h08;\n    inv_sbox[35] = 8'h13;\n    inv_sbox[36] = 8'h5c;\n    inv_sbox[37] = 8'hdf;\n    inv_sbox[38] = 8'h50;\n    inv_sbox[39] = 8'h6b;\n    inv_sbox[40] = 8'h07;\n    inv_sbox[41] = 8'h1a;\n    inv_sbox[42] = 8'h85;\n    inv_sbox[43] = 8'hde;\n    inv_sbox[44] = 8'h97;\n    inv_sbox[45] = 8'h44;\n    inv_sbox[46] = 8'h58;\n    inv_sbox[47] = 8'hff;\n    inv_sbox[48] = 8'h19;\n    inv_sbox[49] = 8'h1c;\n    inv_sbox[50] = 8'h5e;\n    inv_sbox[51] = 8'h94;\n    inv_sbox[52] = 8'h47;\n    inv_sbox[53] = 8'h6d;\n    inv_sbox[54] = 8'hdc;\n    inv_sbox[55] = 8'h07;\n    inv_sbox[56] = 8'h31;\n    inv_sbox[57] = 8'h8d;\n    inv_sbox[58] = 8'h48;\n    inv_sbox[59] = 8'h5a;\n    inv_sbox[60] = 8'h2f;\n    inv_sbox[61] = 8'h98;\n    inv_sbox[62] = 8'he4;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h71;\n    inv_sbox[65] = 8'h8b;\n    inv_sbox[66] = 8'hc2;\n    inv_sbox[67] = 8'h6f;\n    inv_sbox[68] = 8'h84;\n    inv_sbox[69] = 8'h00;\n    inv_sbox[70] = 8'h8e;\n    inv_sbox[71] = 8'h21;\n    inv_sbox[72] = 8'hbc;\n    inv_sbox[73] = 8'h66;\n    inv_sbox[74] = 8'h9a;\n    inv_sbox[75] = 8'h62;\n    inv_sbox[76] = 8'h27;\n    inv_sbox[77] = 8'hac;\n    inv_sbox[78] = 8'h9d;\n    inv_sbox[79] = 8'h9f;\n    inv_sbox[80] = 8'h4e;\n    inv_sbox[81] = 8'h56;\n    inv_sbox[82] = 8'h6c;\n    inv_sbox[83] = 8'h61;\n    inv_sbox[84] = 8'hef;\n    inv_sbox[85] = 8'h9c;\n    inv_sbox[86] = 8'h81;\n    inv_sbox[87] = 8'h74;\n    inv_sbox[88] = 8'h69;\n    inv_sbox[89] = 8'h0e;\n    inv_sbox[90] = 8'h94;\n    inv_sbox[91] = 8'h8a;\n    inv_sbox[92] = 8'h59;\n    inv_sbox[93] = 8'hcd;\n    inv_sbox[94] = 8'h72;\n    inv_sbox[95] = 8'h19;\n    inv_sbox[96] = 8'h2a;\n    inv_sbox[97] = 8'h4d;\n    inv_sbox[98] = 8'h6e;\n    inv_sbox[99] = 8'h16;\n    inv_sbox[100] = 8'hff;\n    inv_sbox[101] = 8'h86;\n    inv_sbox[102] = 8'hab;\n    inv_sbox[103] = 8'hfc;\n    inv_sbox[104] = 8'h14;\n    inv_sbox[105] = 8'hac;\n    inv_sbox[106] = 8'h41;\n    inv_sbox[107] = 8'h2b;\n    inv_sbox[108] = 8'h6b;\n    inv_sbox[109] = 8'hca;\n    inv_sbox[110] = 8'h5f;\n    inv_sbox[111] = 8'h60;\n    inv_sbox[112] = 8'h48;\n    inv_sbox[113] = 8'h08;\n    inv_sbox[114] = 8'h9e;\n    inv_sbox[115] = 8'h9b;\n    inv_sbox[116] = 8'h57;\n    inv_sbox[117] = 8'haf;\n    inv_sbox[118] = 8'h35;\n    inv_sbox[119] = 8'h45;\n    inv_sbox[120] = 8'h7a;\n    inv_sbox[121] = 8'h36;\n    inv_sbox[122] = 8'h98;\n    inv_sbox[123] = 8'h1d;\n    inv_sbox[124] = 8'h54;\n    inv_sbox[125] = 8'h92;\n    inv_sbox[126] = 8'h13;\n    inv_sbox[127] = 8'h62;\n    inv_sbox[128] = 8'hcc;\n    inv_sbox[129] = 8'h6d;\n    inv_sbox[130] = 8'h6a;\n    inv_sbox[131] = 8'h96;\n    inv_sbox[132] = 8'h59;\n    inv_sbox[133] = 8'h9c;\n    inv_sbox[134] = 8'h9f;\n    inv_sbox[135] = 8'h17;\n    inv_sbox[136] = 8'h8e;\n    inv_sbox[137] = 8'h43;\n    inv_sbox[138] = 8'h78;\n    inv_sbox[139] = 8'h7e;\n    inv_sbox[140] = 8'h6e;\n    inv_sbox[141] = 8'h16;\n    inv_sbox[142] = 8'h75;\n    inv_sbox[143] = 8'h59;\n    inv_sbox[144] = 8'h55;\n    inv_sbox[145] = 8'h0a;\n    inv_sbox[146] = 8'h7b;\n    inv_sbox[147] = 8'h63;\n    inv_sbox[148] = 8'h01;\n    inv_sbox[149] = 8'h76;\n    inv_sbox[150] = 8'h9a;\n    inv_sbox[151] = 8'h66;\n    inv_sbox[152] = 8'h5d;\n    inv_sbox[153] = 8'h46;\n    inv_sbox[154] = 8'h64;\n    inv_sbox[155] = 8'h8b;\n    inv_sbox[156] = 8'h92;\n    inv_sbox[157] = 8'h5c;\n    inv_sbox[158] = 8'h1f;\n    inv_sbox[159] = 8'h80;\n    inv_sbox[160] = 8'h3d;\n    inv_sbox[161] = 8'h73;\n    inv_sbox[162] = 8'h99;\n    inv_sbox[163] = 8'h61;\n    inv_sbox[164] = 8'h32;\n    inv_sbox[165] = 8'h2f;\n    inv_sbox[166] = 8'h56;\n    inv_sbox[167] = 8'h24;\n    inv_sbox[168] = 8'h5b;\n    inv_sbox[169] = 8'h0b;\n    inv_sbox[170] = 8'h15;\n    inv_sbox[171] = 8'h21;\n    inv_sbox[172] = 8'h9d;\n    inv_sbox[173] = 8'h27;\n    inv_sbox[174] = 8'hfa;\n    inv_sbox[175] = 8'h85;\n    inv_sbox[176] = 8'h9e;\n    inv_sbox[177] = 8'h8d;\n    inv_sbox[178] = 8'h84;\n    inv_sbox[179] = 8'h83;\n    inv_sbox[180] = 8'h3c;\n    inv_sbox[181] = 8'h41;\n    inv_sbox[182] = 8'hba;\n    inv_sbox[183] = 8'h77;\n    inv_sbox[184] = 8'h26;\n    inv_sbox[185] = 8'h6c;\n    inv_sbox[186] = 8'h7a;\n    inv_sbox[187] = 8'h5a;\n    inv_sbox[188] = 8'h60;\n    inv_sbox[189] = 8'h6f;\n    inv_sbox[190] = 8'h86;\n    inv_sbox[191] = 8'h81;\n    inv_sbox[192] = 8'h5e;\n    inv_sbox[193] = 8'h57;\n    inv_sbox[194] = 8'h7d;\n    inv_sbox[195] = 8'h69;\n    inv_sbox[196] = 8'h9b;\n    inv_sbox[197] = 8'h97;\n    inv_sbox[198] = 8'h05;\n    inv_sbox[199] = 8'hbc;\n    inv_sbox[200] = 8'hdb;\n    inv_sbox[201] = 8'h7f;\n    inv_sbox[202] = 8'h72;\n    inv_sbox[203] = 8'had;\n    inv_sbox[204] = 8'h30;\n    inv_sbox[205] = 8'h7c;\n    inv_sbox[206] = 8'h2c;\n    inv_sbox[207] = 8'hde;\n    inv_sbox[208] = 8'h41;\n    inv_sbox[209] = 8'hed;\n    inv_sbox[210] = 8'h95;\n    inv_sbox[211] = 8'h29;\n    inv_sbox[212] = 8'h4a;\n    inv_sbox[213] = 8'h8c;\n    inv_sbox[214] = 8'h11;\n    inv_sbox[215] = 8'h5f;\n    inv_sbox[216] = 8'h32;\n    inv_sbox[217] = 8'h3e;\n    inv_sbox[218] = 8'h2e;\n    inv_sbox[219] = 8'hfc;\n    inv_sbox[220] = 8'h8f;\n    inv_sbox[221] = 8'hbe;\n    inv_sbox[222] = 8'h4f;\n    inv_sbox[223] = 8'haa;\n    inv_sbox[224] = 8'hfd;\n    inv_sbox[225] = 8'h3a;\n    inv_sbox[226] = 8'hda;\n    inv_sbox[227] = 8'h20;\n    inv_sbox[228] = 8'h68;\n    inv_sbox[229] = 8'h54;\n    inv_sbox[230] = 8'h9f;\n    inv_sbox[231] = 8'h2d;\n    inv_sbox[232] = 8'h02;\n    inv_sbox[233] = 8'h8a;\n    inv_sbox[234] = 8'h3f;\n    inv_sbox[235] = 8'h6b;\n    inv_sbox[236] = 8'h44;\n    inv_sbox[237] = 8'h63;\n    inv_sbox[238] = 8'h75;\n    inv_sbox[239] = 8'hba;\n    inv_sbox[240] = 8'h18;\n    inv_sbox[241] = 8'hbc;\n    inv_sbox[242] = 8'h9d;\n    inv_sbox[243] = 8'h77;\n    inv_sbox[244] = 8'h7e;\n    inv_sbox[245] = 8'h39;\n    inv_sbox[246] = 8'h9a;\n    inv_sbox[247] = 8'h47;\n    inv_sbox[248] = 8'h0f;\n    inv_sbox[249] = 8'h17;\n    inv_sbox[250] = 8'h28;\n    inv_sbox[251] = 8'h70;\n    inv_sbox[252] = 8'h54;\n    inv_sbox[253] = 8'h71;\n    inv_sbox[254] = 8'h7d;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Use the lookup table to perform the inverse S-box transformation\nassign b = inv_sbox[a];\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 4, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the inverse S-box lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h39;\n    inv_sbox[7]  = 8'h33;\n    inv_sbox[8]  = 8'h72;\n    inv_sbox[9]  = 8'hac;\n    inv_sbox[10] = 8'h5c;\n    inv_sbox[11] = 8'h62;\n    inv_sbox[12] = 8'h95;\n    inv_sbox[13] = 8'h15;\n    inv_sbox[14] = 8'h94;\n    inv_sbox[15] = 8'h65;\n    inv_sbox[16] = 8'h7b;\n    inv_sbox[17] = 8'h74;\n    inv_sbox[18] = 8'h4c;\n    inv_sbox[19] = 8'h84;\n    inv_sbox[20] = 8'h90;\n    inv_sbox[21] = 8'h23;\n    inv_sbox[22] = 8'h3d;\n    inv_sbox[23] = 8'h6c;\n    inv_sbox[24] = 8'h96;\n    inv_sbox[25] = 8'h7a;\n    inv_sbox[26] = 8'h07;\n    inv_sbox[27] = 8'h05;\n    inv_sbox[28] = 8'h60;\n    inv_sbox[29] = 8'h6e;\n    inv_sbox[30] = 8'h24;\n    inv_sbox[31] = 8'h0b;\n    inv_sbox[32] = 8'h81;\n    inv_sbox[33] = 8'h7f;\n    inv_sbox[34] = 8'h86;\n    inv_sbox[35] = 8'h01;\n    inv_sbox[36] = 8'h8d;\n    inv_sbox[37] = 8'h8c;\n    inv_sbox[38] = 8'h64;\n    inv_sbox[39] = 8'h8b;\n    inv_sbox[40] = 8'h59;\n    inv_sbox[41] = 8'h8a;\n    inv_sbox[42] = 8'h7c;\n    inv_sbox[43] = 8'h55;\n    inv_sbox[44] = 8'h66;\n    inv_sbox[45] = 8'h2b;\n    inv_sbox[46] = 8'h54;\n    inv_sbox[47] = 8'h92;\n    inv_sbox[48] = 8'h68;\n    inv_sbox[49] = 8'h78;\n    inv_sbox[50] = 8'hcd;\n    inv_sbox[51] = 8'h0a;\n    inv_sbox[52] = 8'h14;\n    inv_sbox[53] = 8'h97;\n    inv_sbox[54] = 8'h5d;\n    inv_sbox[55] = 8'h4e;\n    inv_sbox[56] = 8'h88;\n    inv_sbox[57] = 8'h5a;\n    inv_sbox[58] = 8'h89;\n    inv_sbox[59] = 8'h4f;\n    inv_sbox[60] = 8'h3c;\n    inv_sbox[61] = 8'h9a;\n    inv_sbox[62] = 8'h06;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h63;\n    inv_sbox[65] = 8'h25;\n    inv_sbox[66] = 8'h19;\n    inv_sbox[67] = 8'h3a;\n    inv_sbox[68] = 8'h82;\n    inv_sbox[69] = 8'haf;\n    inv_sbox[70] = 8'h48;\n    inv_sbox[71] = 8'h51;\n    inv_sbox[72] = 8'h8e;\n    inv_sbox[73] = 8'h98;\n    inv_sbox[74] = 8'h57;\n    inv_sbox[75] = 8'h7d;\n    inv_sbox[76] = 8'h69;\n    inv_sbox[77] = 8'h6f;\n    inv_sbox[78] = 8'h72;\n    inv_sbox[79] = 8'h9b;\n    inv_sbox[80] = 8'h9e;\n    inv_sbox[81] = 8'h20;\n    inv_sbox[82] = 8'h01;\n    inv_sbox[83] = 8'h9f;\n    inv_sbox[84] = 8'hec;\n    inv_sbox[85] = 8'h17;\n    inv_sbox[86] = 8'h6a;\n    inv_sbox[87] = 8'h58;\n    inv_sbox[88] = 8'h7e;\n    inv_sbox[89] = 8'h29;\n    inv_sbox[90] = 8'h12;\n    inv_sbox[91] = 8'h6d;\n    inv_sbox[92] = 8'h83;\n    inv_sbox[93] = 8'h21;\n    inv_sbox[94] = 8'h3b;\n    inv_sbox[95] = 8'h9d;\n    inv_sbox[96] = 8'h16;\n    inv_sbox[97] = 8'h41;\n    inv_sbox[98] = 8'h4d;\n    inv_sbox[99] = 8'hac;\n    inv_sbox[100] = 8'h9c;\n    inv_sbox[101] = 8'h93;\n    inv_sbox[102] = 8'h8f;\n    inv_sbox[103] = 8'h46;\n    inv_sbox[104] = 8'h26;\n    inv_sbox[105] = 8'h36;\n    inv_sbox[106] = 8'h3f;\n    inv_sbox[107] = 8'hfa;\n    inv_sbox[108] = 8'h0f;\n    inv_sbox[109] = 8'h91;\n    inv_sbox[110] = 8'hef;\n    inv_sbox[111] = 8'hbc;\n    inv_sbox[112] = 8'h71;\n    inv_sbox[113] = 8'h99;\n    inv_sbox[114] = 8'h6b;\n    inv_sbox[115] = 8'h0c;\n    inv_sbox[116] = 8'h61;\n    inv_sbox[117] = 8'h9a;\n    inv_sbox[118] = 8'h6e;\n    inv_sbox[119] = 8'h47;\n    inv_sbox[120] = 8'h59;\n    inv_sbox[121] = 8'h8d;\n    inv_sbox[122] = 8'h65;\n    inv_sbox[123] = 8'h9e;\n    inv_sbox[124] = 8'h7f;\n    inv_sbox[125] = 8'h5e;\n    inv_sbox[126] = 8'h7c;\n    inv_sbox[127] = 8'h75;\n    inv_sbox[128] = 8'h45;\n    inv_sbox[129] = 8'h7a;\n    inv_sbox[130] = 8'h4f;\n    inv_sbox[131] = 8'h58;\n    inv_sbox[132] = 8'h28;\n    inv_sbox[133] = 8'hff;\n    inv_sbox[134] = 8'h9d;\n    inv_sbox[135] = 8'h76;\n    inv_sbox[136] = 8'h00;\n    inv_sbox[137] = 8'h6a;\n    inv_sbox[138] = 8'h97;\n    inv_sbox[139] = 8'h65;\n    inv_sbox[140] = 8'h7e;\n    inv_sbox[141] = 8'h5c;\n    inv_sbox[142] = 8'h02;\n    inv_sbox[143] = 8'h18;\n    inv_sbox[144] = 8'hbc;\n    inv_sbox[145] = 8'h3b;\n    inv_sbox[146] = 8'h1a;\n    inv_sbox[147] = 8'h4e;\n    inv_sbox[148] = 8'h8f;\n    inv_sbox[149] = 8'h3a;\n    inv_sbox[150] = 8'h0a;\n    inv_sbox[151] = 8'h15;\n    inv_sbox[152] = 8'hc3;\n    inv_sbox[153] = 8'h8c;\n    inv_sbox[154] = 8'h2d;\n    inv_sbox[155] = 8'h26;\n    inv_sbox[156] = 8'h93;\n    inv_sbox[157] = 8'h89;\n    inv_sbox[158] = 8'h96;\n    inv_sbox[159] = 8'h41;\n    inv_sbox[160] = 8'h1c;\n    inv_sbox[161] = 8'h66;\n    inv_sbox[162] = 8'h90;\n    inv_sbox[163] = 8'h05;\n    inv_sbox[164] = 8'hce;\n    inv_sbox[165] = 8'h32;\n    inv_sbox[166] = 8'h60;\n    inv_sbox[167] = 8'heb;\n    inv_sbox[168] = 8'h7d;\n    inv_sbox[169] = 8'h0f;\n    inv_sbox[170] = 8'h14;\n    inv_sbox[171] = 8'haf;\n    inv_sbox[172] = 8'h49;\n    inv_sbox[173] = 8'h3e;\n    inv_sbox[174] = 8'h94;\n    inv_sbox[175] = 8'h87;\n    inv_sbox[176] = 8'h3d;\n    inv_sbox[177] = 8'h13;\n    inv_sbox[178] = 8'h4a;\n    inv_sbox[179] = 8'h50;\n    inv_sbox[180] = 8'h04;\n    inv_sbox[181] = 8'h17;\n    inv_sbox[182] = 8'h58;\n    inv_sbox[183] = 8'h9f;\n    inv_sbox[184] = 8'h27;\n    inv_sbox[185] = 8'h69;\n    inv_sbox[186] = 8'h19;\n    inv_sbox[187] = 8'h85;\n    inv_sbox[188] = 8'h75;\n    inv_sbox[189] = 8'h57;\n    inv_sbox[190] = 8'h2f;\n    inv_sbox[191] = 8'h07;\n    inv_sbox[192] = 8'h9a;\n    inv_sbox[193] = 8'hec;\n    inv_sbox[194] = 8'h56;\n    inv_sbox[195] = 8'h42;\n    inv_sbox[196] = 8'h6c;\n    inv_sbox[197] = 8'h7b;\n    inv_sbox[198] = 8'h14;\n    inv_sbox[199] = 8'h64;\n    inv_sbox[200] = 8'h5a;\n    inv_sbox[201] = 8'h4b;\n    inv_sbox[202] = 8'h0e;\n    inv_sbox[203] = 8'h43;\n    inv_sbox[204] = 8'h49;\n    inv_sbox[205] = 8'h44;\n    inv_sbox[206] = 8'hda;\n    inv_sbox[207] = 8'h46;\n    inv_sbox[208] = 8'h6b;\n    inv_sbox[209] = 8'h17;\n    inv_sbox[210] = 8'h9c;\n    inv_sbox[211] = 8'h55;\n    inv_sbox[212] = 8'h29;\n    inv_sbox[213] = 8'h7a;\n    inv_sbox[214] = 8'h88;\n    inv_sbox[215] = 8'h3f;\n    inv_sbox[216] = 8'h87;\n    inv_sbox[217] = 8'hd6;\n    inv_sbox[218] = 8'h11;\n    inv_sbox[219] = 8'h98;\n    inv_sbox[220] = 8'h4d;\n    inv_sbox[221] = 8'h8a;\n    inv_sbox[222] = 8'h6d;\n    inv_sbox[223] = 8'h16;\n    inv_sbox[224] = 8'h61;\n    inv_sbox[225] = 8'h8b;\n    inv_sbox[226] = 8'h0c;\n    inv_sbox[227] = 8'hfc;\n    inv_sbox[228] = 8'h15;\n    inv_sbox[229] = 8'hbe;\n    inv_sbox[230] = 8'h3a;\n    inv_sbox[231] = 8'h85;\n    inv_sbox[232] = 8'h4c;\n    inv_sbox[233] = 8'hfa;\n    inv_sbox[234] = 8'h4b;\n    inv_sbox[235] = 8'h22;\n    inv_sbox[236] = 8'h54;\n    inv_sbox[237] = 8'h13;\n    inv_sbox[238] = 8'h0b;\n    inv_sbox[239] = 8'h8d;\n    inv_sbox[240] = 8'h33;\n    inv_sbox[241] = 8'h96;\n    inv_sbox[242] = 8'h69;\n    inv_sbox[243] = 8'h37;\n    inv_sbox[244] = 8'h6f;\n    inv_sbox[245] = 8'h34;\n    inv_sbox[246] = 8'h83;\n    inv_sbox[247] = 8'hfe;\n    inv_sbox[248] = 8'hfc;\n    inv_sbox[249] = 8'hdf;\n    inv_sbox[250] = 8'h97;\n    inv_sbox[251] = 8'h92;\n    inv_sbox[252] = 8'h72;\n    inv_sbox[253] = 8'h3d;\n    inv_sbox[254] = 8'h66;\n    inv_sbox[255] = 8'h10;\nend\n\n// Assign output b using the inverse S-box lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 5, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the inverse S-box lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h96;\n    inv_sbox[7]  = 8'h36;\n    inv_sbox[8]  = 8'h8c;\n    inv_sbox[9]  = 8'h8f;\n    inv_sbox[10] = 8'h70;\n    inv_sbox[11] = 8'hb2;\n    inv_sbox[12] = 8'h66;\n    inv_sbox[13] = 8'h48;\n    inv_sbox[14] = 8'h3a;\n    inv_sbox[15] = 8'h5f;\n    inv_sbox[16] = 8'h4c;\n    inv_sbox[17] = 8'h61;\n    inv_sbox[18] = 8'h32;\n    inv_sbox[19] = 8'hc6;\n    inv_sbox[20] = 8'h7f;\n    inv_sbox[21] = 8'h16;\n    inv_sbox[22] = 8'h8b;\n    inv_sbox[23] = 8'h4d;\n    inv_sbox[24] = 8'hcc;\n    inv_sbox[25] = 8'h8d;\n    inv_sbox[26] = 8'h67;\n    inv_sbox[27] = 8'h62;\n    inv_sbox[28] = 8'h34;\n    inv_sbox[29] = 8'h10;\n    inv_sbox[30] = 8'h75;\n    inv_sbox[31] = 8'h57;\n    inv_sbox[32] = 8'haf;\n    inv_sbox[33] = 8'h08;\n    inv_sbox[34] = 8'h65;\n    inv_sbox[35] = 8'h5d;\n    inv_sbox[36] = 8'h20;\n    inv_sbox[37] = 8'h6a;\n    inv_sbox[38] = 8'h84;\n    inv_sbox[39] = 8'h44;\n    inv_sbox[40] = 8'h55;\n    inv_sbox[41] = 8'h26;\n    inv_sbox[42] = 8'h7a;\n    inv_sbox[43] = 8'h98;\n    inv_sbox[44] = 8'h7d;\n    inv_sbox[45] = 8'h30;\n    inv_sbox[46] = 8'had;\n    inv_sbox[47] = 8'h03;\n    inv_sbox[48] = 8'h81;\n    inv_sbox[49] = 8'hbd;\n    inv_sbox[50] = 8'h76;\n    inv_sbox[51] = 8'h5b;\n    inv_sbox[52] = 8'h6c;\n    inv_sbox[53] = 8'h6b;\n    inv_sbox[54] = 8'h59;\n    inv_sbox[55] = 8'h21;\n    inv_sbox[56] = 8'hab;\n    inv_sbox[57] = 8'h5e;\n    inv_sbox[58] = 8'h9f;\n    inv_sbox[59] = 8'h53;\n    inv_sbox[60] = 8'h6f;\n    inv_sbox[61] = 8'h95;\n    inv_sbox[62] = 8'h40;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h85;\n    inv_sbox[65] = 8'h22;\n    inv_sbox[66] = 8'h9a;\n    inv_sbox[67] = 8'h8e;\n    inv_sbox[68] = 8'h2b;\n    inv_sbox[69] = 8'h7c;\n    inv_sbox[70] = 8'h1d;\n    inv_sbox[71] = 8'h28;\n    inv_sbox[72] = 8'h54;\n    inv_sbox[73] = 8'h17;\n    inv_sbox[74] = 8'h62;\n    inv_sbox[75] = 8'h7e;\n    inv_sbox[76] = 8'h1c;\n    inv_sbox[77] = 8'h80;\n    inv_sbox[78] = 8'h19;\n    inv_sbox[79] = 8'h7b;\n    inv_sbox[80] = 8'h9d;\n    inv_sbox[81] = 8'hbc;\n    inv_sbox[82] = 8'h1f;\n    inv_sbox[83] = 8'h9e;\n    inv_sbox[84] = 8'h64;\n    inv_sbox[85] = 8'h9b;\n    inv_sbox[86] = 8'h3e;\n    inv_sbox[87] = 8'h2e;\n    inv_sbox[88] = 8'hcc;\n    inv_sbox[89] = 8'h82;\n    inv_sbox[90] = 8'h71;\n    inv_sbox[91] = 8'h2c;\n    inv_sbox[92] = 8'h51;\n    inv_sbox[93] = 8'h6d;\n    inv_sbox[94] = 8'h1b;\n    inv_sbox[95] = 8'h18;\n    inv_sbox[96] = 8'hbe;\n    inv_sbox[97] = 8'h9c;\n    inv_sbox[98] = 8'h6e;\n    inv_sbox[99] = 8'h11;\n    inv_sbox[100] = 8'h4f;\n    inv_sbox[101] = 8'h6f;\n    inv_sbox[102] = 8'h31;\n    inv_sbox[103] = 8'h4b;\n    inv_sbox[104] = 8'hac;\n    inv_sbox[105] = 8'h74;\n    inv_sbox[106] = 8'h4e;\n    inv_sbox[107] = 8'h3d;\n    inv_sbox[108] = 8'h01;\n    inv_sbox[109] = 8'h77;\n    inv_sbox[110] = 8'h79;\n    inv_sbox[111] = 8'h0a;\n    inv_sbox[112] = 8'h65;\n    inv_sbox[113] = 8'h2a;\n    inv_sbox[114] = 8'h49;\n    inv_sbox[115] = 8'h3f;\n    inv_sbox[116] = 8'h8a;\n    inv_sbox[117] = 8'h8d;\n    inv_sbox[118] = 8'h08;\n    inv_sbox[119] = 8'h05;\n    inv_sbox[120] = 8'h5a;\n    inv_sbox[121] = 8'h58;\n    inv_sbox[122] = 8'h5c;\n    inv_sbox[123] = 8'h68;\n    inv_sbox[124] = 8'h72;\n    inv_sbox[125] = 8'h63;\n    inv_sbox[126] = 8'h6a;\n    inv_sbox[127] = 8'h9f;\n    inv_sbox[128] = 8'h95;\n    inv_sbox[129] = 8'h4d;\n    inv_sbox[130] = 8'h97;\n    inv_sbox[131] = 8'h1c;\n    inv_sbox[132] = 8'h3b;\n    inv_sbox[133] = 8'h5d;\n    inv_sbox[134] = 8'h7a;\n    inv_sbox[135] = 8'h1a;\n    inv_sbox[136] = 8'h15;\n    inv_sbox[137] = 8'h4c;\n    inv_sbox[138] = 8'h16;\n    inv_sbox[139] = 8'h28;\n    inv_sbox[140] = 8'h0e;\n    inv_sbox[141] = 8'hd2;\n    inv_sbox[142] = 8'h4a;\n    inv_sbox[143] = 8'h60;\n    inv_sbox[144] = 8'h0b;\n    inv_sbox[145] = 8'h52;\n    inv_sbox[146] = 8'h9e;\n    inv_sbox[147] = 8'hcc;\n    inv_sbox[148] = 8'h8f;\n    inv_sbox[149] = 8'h7d;\n    inv_sbox[150] = 8'had;\n    inv_sbox[151] = 8'h7c;\n    inv_sbox[152] = 8'h5b;\n    inv_sbox[153] = 8'hae;\n    inv_sbox[154] = 8'h8e;\n    inv_sbox[155] = 8'h34;\n    inv_sbox[156] = 8'h6b;\n    inv_sbox[157] = 8'h4b;\n    inv_sbox[158] = 8'h3e;\n    inv_sbox[159] = 8'h45;\n    inv_sbox[160] = 8'h7f;\n    inv_sbox[161] = 8'h15;\n    inv_sbox[162] = 8'h23;\n    inv_sbox[163] = 8'h1a;\n    inv_sbox[164] = 8'h4e;\n    inv_sbox[165] = 8'h24;\n    inv_sbox[166] = 8'h2c;\n    inv_sbox[167] = 8'h8d;\n    inv_sbox[168] = 8'h8b;\n    inv_sbox[169] = 8'h3a;\n    inv_sbox[170] = 8'h1d;\n    inv_sbox[171] = 8'h7e;\n    inv_sbox[172] = 8'h6e;\n    inv_sbox[173] = 8'h56;\n    inv_sbox[174] = 8'h19;\n    inv_sbox[175] = 8'h1e;\n    inv_sbox[176] = 8'h98;\n    inv_sbox[177] = 8'h39;\n    inv_sbox[178] = 8'h49;\n    inv_sbox[179] = 8'h7b;\n    inv_sbox[180] = 8'h0f;\n    inv_sbox[181] = 8'h0c;\n    inv_sbox[182] = 8'h68;\n    inv_sbox[183] = 8'h44;\n    inv_sbox[184] = 8'h6f;\n    inv_sbox[185] = 8'h7d;\n    inv_sbox[186] = 8'h9c;\n    inv_sbox[187] = 8'h31;\n    inv_sbox[188] = 8'h88;\n    inv_sbox[189] = 8'h1f;\n    inv_sbox[190] = 8'h41;\n    inv_sbox[191] = 8'h58;\n    inv_sbox[192] = 8'h14;\n    inv_sbox[193] = 8'h6d;\n    inv_sbox[194] = 8'h2a;\n    inv_sbox[195] = 8'h5e;\n    inv_sbox[196] = 8'h29;\n    inv_sbox[197] = 8'h80;\n    inv_sbox[198] = 8'h72;\n    inv_sbox[199] = 8'h09;\n    inv_sbox[200] = 8'h13;\n    inv_sbox[201] = 8'h66;\n    inv_sbox[202] = 8'h4a;\n    inv_sbox[203] = 8'h5a;\n    inv_sbox[204] = 8'h51;\n    inv_sbox[205] = 8'h1b;\n    inv_sbox[206] = 8'h18;\n    inv_sbox[207] = 8'h19;\n    inv_sbox[208] = 8'h9d;\n    inv_sbox[209] = 8'h5c;\n    inv_sbox[210] = 8'h84;\n    inv_sbox[211] = 8'h50;\n    inv_sbox[212] = 8'h9a;\n    inv_sbox[213] = 8'h27;\n    inv_sbox[214] = 8'h6b;\n    inv_sbox[215] = 8'hbc;\n    inv_sbox[216] = 8'h77;\n    inv_sbox[217] = 8'h16;\n    inv_sbox[218] = 8'h43;\n    inv_sbox[219] = 8'h9f;\n    inv_sbox[220] = 8'h2b;\n    inv_sbox[221] = 8'h6a;\n    inv_sbox[222] = 8'h3b;\n    inv_sbox[223] = 8'h63;\n    inv_sbox[224] = 8'h5f;\n    inv_sbox[225] = 8'h12;\n    inv_sbox[226] = 8'h03;\n    inv_sbox[227] = 8'h59;\n    inv_sbox[228] = 8'h46;\n    inv_sbox[229] = 8'h81;\n    inv_sbox[230] = 8'h7a;\n    inv_sbox[231] = 8'heb;\n    inv_sbox[232] = 8'h8b;\n    inv_sbox[233] = 8'h55;\n    inv_sbox[234] = 8'h21;\n    inv_sbox[235] = 8'h1d;\n    inv_sbox[236] = 8'h4c;\n    inv_sbox[237] = 8'h64;\n    inv_sbox[238] = 8'h7c;\n    inv_sbox[239] = 8'h1a;\n    inv_sbox[240] = 8'h54;\n    inv_sbox[241] = 8'h47;\n    inv_sbox[242] = 8'ha1;\n    inv_sbox[243] = 8'h17;\n    inv_sbox[244] = 8'h08;\n    inv_sbox[245] = 8'h5d;\n    inv_sbox[246] = 8'h61;\n    inv_sbox[247] = 8'hdc;\n    inv_sbox[248] = 8'h35;\n    inv_sbox[249] = 8'h8a;\n    inv_sbox[250] = 8'h57;\n    inv_sbox[251] = 8'hb3;\n    inv_sbox[252] = 8'h5b;\n    inv_sbox[253] = 8'h6c;\n    inv_sbox[254] = 8'h9b;\n    inv_sbox[255] = 8'h75;\nend\n\n// Assign output from inverse S-box lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 6, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h80;\n    inv_sbox[5] = 8'h93;\n    inv_sbox[6] = 8'h40;\n    inv_sbox[7] = 8'h66;\n    inv_sbox[8] = 8'hbf;\n    inv_sbox[9] = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h12;\n    inv_sbox[13] = 8'h8b;\n    inv_sbox[14] = 8'h23;\n    inv_sbox[15] = 8'h3d;\n    inv_sbox[16] = 8'h18;\n    inv_sbox[17] = 8'h96;\n    inv_sbox[18] = 8'h07;\n    inv_sbox[19] = 8'h9b;\n    inv_sbox[20] = 8'h9e;\n    inv_sbox[21] = 8'h9f;\n    inv_sbox[22] = 8'h53;\n    inv_sbox[23] = 8'h92;\n    inv_sbox[24] = 8'h69;\n    inv_sbox[25] = 8'h3c;\n    inv_sbox[26] = 8'h9c;\n    inv_sbox[27] = 8'h8f;\n    inv_sbox[28] = 8'h43;\n    inv_sbox[29] = 8'h45;\n    inv_sbox[30] = 8'h21;\n    inv_sbox[31] = 8'h7c;\n    inv_sbox[32] = 8'h70;\n    inv_sbox[33] = 8'h44;\n    inv_sbox[34] = 8'h6a;\n    inv_sbox[35] = 8'h7f;\n    inv_sbox[36] = 8'h78;\n    inv_sbox[37] = 8'h4d;\n    inv_sbox[38] = 8'h7b;\n    inv_sbox[39] = 8'h95;\n    inv_sbox[40] = 8'h67;\n    inv_sbox[41] = 8'h60;\n    inv_sbox[42] = 8'h3e;\n    inv_sbox[43] = 8'h8d;\n    inv_sbox[44] = 8'h5d;\n    inv_sbox[45] = 8'h49;\n    inv_sbox[46] = 8'h6c;\n    inv_sbox[47] = 8'h61;\n    inv_sbox[48] = 8'h62;\n    inv_sbox[49] = 8'h91;\n    inv_sbox[50] = 8'h4e;\n    inv_sbox[51] = 8'h6e;\n    inv_sbox[52] = 8'h8a;\n    inv_sbox[53] = 8'h08;\n    inv_sbox[54] = 8'h85;\n    inv_sbox[55] = 8'h94;\n    inv_sbox[56] = 8'h5b;\n    inv_sbox[57] = 8'h79;\n    inv_sbox[58] = 8'h1a;\n    inv_sbox[59] = 8'h1b;\n    inv_sbox[60] = 8'h54;\n    inv_sbox[61] = 8'h00;\n    inv_sbox[62] = 8'h15;\n    inv_sbox[63] = 8'h34;\n    inv_sbox[64] = 8'h6d;\n    inv_sbox[65] = 8'h6f;\n    inv_sbox[66] = 8'h37;\n    inv_sbox[67] = 8'h59;\n    inv_sbox[68] = 8'h98;\n    inv_sbox[69] = 8'h3a;\n    inv_sbox[70] = 8'h0e;\n    inv_sbox[71] = 8'h17;\n    inv_sbox[72] = 8'h55;\n    inv_sbox[73] = 8'h1f;\n    inv_sbox[74] = 8'h5a;\n    inv_sbox[75] = 8'h72;\n    inv_sbox[76] = 8'h5e;\n    inv_sbox[77] = 8'h4f;\n    inv_sbox[78] = 8'h73;\n    inv_sbox[79] = 8'h97;\n    inv_sbox[80] = 8'h82;\n    inv_sbox[81] = 8'h19;\n    inv_sbox[82] = 8'h7a;\n    inv_sbox[83] = 8'h2f;\n    inv_sbox[84] = 8'h86;\n    inv_sbox[85] = 8'h42;\n    inv_sbox[86] = 8'h5c;\n    inv_sbox[87] = 8'h51;\n    inv_sbox[88] = 8'h46;\n    inv_sbox[89] = 8'h2b;\n    inv_sbox[90] = 8'h3f;\n    inv_sbox[91] = 8'h94;\n    inv_sbox[92] = 8'h11;\n    inv_sbox[93] = 8'h1d;\n    inv_sbox[94] = 8'h8c;\n    inv_sbox[95] = 8'h16;\n    inv_sbox[96] = 8'h84;\n    inv_sbox[97] = 8'h56;\n    inv_sbox[98] = 8'h0f;\n    inv_sbox[99] = 8'h22;\n    inv_sbox[100] = 8'h36;\n    inv_sbox[101] = 8'h9d;\n    inv_sbox[102] = 8'h9a;\n    inv_sbox[103] = 8'h74;\n    inv_sbox[104] = 8'h2e;\n    inv_sbox[105] = 8'h87;\n    inv_sbox[106] = 8'h35;\n    inv_sbox[107] = 8'h6b;\n    inv_sbox[108] = 8'h47;\n    inv_sbox[109] = 8'h1c;\n    inv_sbox[110] = 8'h48;\n    inv_sbox[111] = 8'h63;\n    inv_sbox[112] = 8'h00;\n    inv_sbox[113] = 8'h5f;\n    inv_sbox[114] = 8'h24;\n    inv_sbox[115] = 8'h7e;\n    inv_sbox[116] = 8'h57;\n    inv_sbox[117] = 8'h75;\n    inv_sbox[118] = 8'h77;\n    inv_sbox[119] = 8'h7d;\n    inv_sbox[120] = 8'h4b;\n    inv_sbox[121] = 8'had;\n    inv_sbox[122] = 8'h3b;\n    inv_sbox[123] = 8'h58;\n    inv_sbox[124] = 8'h26;\n    inv_sbox[125] = 8'h89;\n    inv_sbox[126] = 8'h71;\n    inv_sbox[127] = 8'h9f;\n    inv_sbox[128] = 8'h1e;\n    inv_sbox[129] = 8'h02;\n    inv_sbox[130] = 8'h8e;\n    inv_sbox[131] = 8'h27;\n    inv_sbox[132] = 8'hb4;\n    inv_sbox[133] = 8'h0c;\n    inv_sbox[134] = 8'h3a;\n    inv_sbox[135] = 8'h50;\n    inv_sbox[136] = 8'h04;\n    inv_sbox[137] = 8'h33;\n    inv_sbox[138] = 8'h68;\n    inv_sbox[139] = 8'h99;\n    inv_sbox[140] = 8'h31;\n    inv_sbox[141] = 8'h88;\n    inv_sbox[142] = 8'h83;\n    inv_sbox[143] = 8'h65;\n    inv_sbox[144] = 8'h13;\n    inv_sbox[145] = 8'h67;\n    inv_sbox[146] = 8'h03;\n    inv_sbox[147] = 8'h2a;\n    inv_sbox[148] = 8'h64;\n    inv_sbox[149] = 8'h20;\n    inv_sbox[150] = 8'haf;\n    inv_sbox[151] = 8'h6d;\n    inv_sbox[152] = 8'h6f;\n    inv_sbox[153] = 8'h0a;\n    inv_sbox[154] = 8'h81;\n    inv_sbox[155] = 8'h5d;\n    inv_sbox[156] = 8'h32;\n    inv_sbox[157] = 8'hcd;\n    inv_sbox[158] = 8'hbc;\n    inv_sbox[159] = 8'h8b;\n    inv_sbox[160] = 8'hf5;\n    inv_sbox[161] = 8'h60;\n    inv_sbox[162] = 8'hb9;\n    inv_sbox[163] = 8'h7c;\n    inv_sbox[164] = 8'h62;\n    inv_sbox[165] = 8'h4c;\n    inv_sbox[166] = 8'h4a;\n    inv_sbox[167] = 8'h79;\n    inv_sbox[168] = 8'h77;\n    inv_sbox[169] = 8'h51;\n    inv_sbox[170] = 8'h38;\n    inv_sbox[171] = 8'h3f;\n    inv_sbox[172] = 8'h9e;\n    inv_sbox[173] = 8'h9b;\n    inv_sbox[174] = 8'h8d;\n    inv_sbox[175] = 8'h7a;\n    inv_sbox[176] = 8'h6e;\n    inv_sbox[177] = 8'h6a;\n    inv_sbox[178] = 8'h56;\n    inv_sbox[179] = 8'h37;\n    inv_sbox[180] = 8'h47;\n    inv_sbox[181] = 8'h59;\n    inv_sbox[182] = 8'h8f;\n    inv_sbox[183] = 8'h53;\n    inv_sbox[184] = 8'h9a;\n    inv_sbox[185] = 8'h2f;\n    inv_sbox[186] = 8'h9d;\n    inv_sbox[187] = 8'h9c;\n    inv_sbox[188] = 8'h85;\n    inv_sbox[189] = 8'h49;\n    inv_sbox[190] = 8'h6c;\n    inv_sbox[191] = 8'h6b;\n    inv_sbox[192] = 8'h5f;\n    inv_sbox[193] = 8'h72;\n    inv_sbox[194] = 8'h4f;\n    inv_sbox[195] = 8'h70;\n    inv_sbox[196] = 8'h7e;\n    inv_sbox[197] = 8'h7d;\n    inv_sbox[198] = 8'h75;\n    inv_sbox[199] = 8'h7b;\n    inv_sbox[200] = 8'h5e;\n    inv_sbox[201] = 8'h78;\n    inv_sbox[202] = 8'h3e;\n    inv_sbox[203] = 8'h1a;\n    inv_sbox[204] = 8'h1b;\n    inv_sbox[205] = 8'h55;\n    inv_sbox[206] = 8'h5a;\n    inv_sbox[207] = 8'h54;\n    inv_sbox[208] = 8'h0e;\n    inv_sbox[209] = 8'h17;\n    inv_sbox[210] = 8'h7f;\n    inv_sbox[211] = 8'h5d;\n    inv_sbox[212] = 8'h82;\n    inv_sbox[213] = 8'h3c;\n    inv_sbox[214] = 8'h9f;\n    inv_sbox[215] = 8'h97;\n    inv_sbox[216] = 8'h11;\n    inv_sbox[217] = 8'h1d;\n    inv_sbox[218] = 8'h1f;\n    inv_sbox[219] = 8'h8a;\n    inv_sbox[220] = 8'h08;\n    inv_sbox[221] = 8'h8c;\n    inv_sbox[222] = 8'h16;\n    inv_sbox[223] = 8'h84;\n    inv_sbox[224] = 8'h56;\n    inv_sbox[225] = 8'h0f;\n    inv_sbox[226] = 8'h22;\n    inv_sbox[227] = 8'h36;\n    inv_sbox[228] = 8'h9d;\n    inv_sbox[229] = 8'h9a;\n    inv_sbox[230] = 8'h74;\n    inv_sbox[231] = 8'h2e;\n    inv_sbox[232] = 8'h87;\n    inv_sbox[233] = 8'h35;\n    inv_sbox[234] = 8'h6b;\n    inv_sbox[235] = 8'h47;\n    inv_sbox[236] = 8'h1c;\n    inv_sbox[237] = 8'h48;\n    inv_sbox[238] = 8'h63;\n    inv_sbox[239] = 8'h00;\n    inv_sbox[240] = 8'h5f;\n    inv_sbox[241] = 8'h24;\n    inv_sbox[242] = 8'h7e;\n    inv_sbox[243] = 8'h57;\n    inv_sbox[244] = 8'h75;\n    inv_sbox[245] = 8'h77;\n    inv_sbox[246] = 8'h7d;\n    inv_sbox[247] = 8'h4b;\n    inv_sbox[248] = 8'had;\n    inv_sbox[249] = 8'h3b;\n    inv_sbox[250] = 8'h58;\n    inv_sbox[251] = 8'h26;\n    inv_sbox[252] = 8'h89;\n    inv_sbox[253] = 8'h71;\n    inv_sbox[254] = 8'h9f;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Assign output from lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 7, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the inverse S-box lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbc;\n    inv_sbox[9]  = 8'h72;\n    inv_sbox[10] = 8'hc0;\n    inv_sbox[11] = 8'h7d;\n    inv_sbox[12] = 8'hfb;\n    inv_sbox[13] = 8'hf7;\n    inv_sbox[14] = 8'h89;\n    inv_sbox[15] = 8'h16;\n    inv_sbox[16] = 8'h18;\n    inv_sbox[17] = 8'h98;\n    inv_sbox[18] = 8'h05;\n    inv_sbox[19] = 8'h2a;\n    inv_sbox[20] = 8'h33;\n    inv_sbox[21] = 8'h0e;\n    inv_sbox[22] = 8'h9d;\n    inv_sbox[23] = 8'h24;\n    inv_sbox[24] = 8'hfb;\n    inv_sbox[25] = 8'h9e;\n    inv_sbox[26] = 8'h8e;\n    inv_sbox[27] = 8'hb9;\n    inv_sbox[28] = 8'h28;\n    inv_sbox[29] = 8'h14;\n    inv_sbox[30] = 8'h3e;\n    inv_sbox[31] = 8'h0b;\n    inv_sbox[32] = 8'h9c;\n    inv_sbox[33] = 8'h87;\n    inv_sbox[34] = 8'hba;\n    inv_sbox[35] = 8'h7c;\n    inv_sbox[36] = 8'hdf;\n    inv_sbox[37] = 8'h15;\n    inv_sbox[38] = 8'h4c;\n    inv_sbox[39] = 8'h49;\n    inv_sbox[40] = 8'h02;\n    inv_sbox[41] = 8'h46;\n    inv_sbox[42] = 8'h4b;\n    inv_sbox[43] = 8'h50;\n    inv_sbox[44] = 8'h54;\n    inv_sbox[45] = 8'h9f;\n    inv_sbox[46] = 8'h2e;\n    inv_sbox[47] = 8'h8c;\n    inv_sbox[48] = 8'h35;\n    inv_sbox[49] = 8'h4d;\n    inv_sbox[50] = 8'h44;\n    inv_sbox[51] = 8'h48;\n    inv_sbox[52] = 8'hd3;\n    inv_sbox[53] = 8'h69;\n    inv_sbox[54] = 8'h8b;\n    inv_sbox[55] = 8'h6a;\n    inv_sbox[56] = 8'h14;\n    inv_sbox[57] = 8'h61;\n    inv_sbox[58] = 8'h70;\n    inv_sbox[59] = 8'h15;\n    inv_sbox[60] = 8'h5d;\n    inv_sbox[61] = 8'h2f;\n    inv_sbox[62] = 8'h03;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h9b;\n    inv_sbox[65] = 8'h77;\n    inv_sbox[66] = 8'h50;\n    inv_sbox[67] = 8'h9a;\n    inv_sbox[68] = 8'h9e;\n    inv_sbox[69] = 8'h43;\n    inv_sbox[70] = 8'h8f;\n    inv_sbox[71] = 8'h35;\n    inv_sbox[72] = 8'h7a;\n    inv_sbox[73] = 8'h89;\n    inv_sbox[74] = 8'h1c;\n    inv_sbox[75] = 8'h23;\n    inv_sbox[76] = 8'hbe;\n    inv_sbox[77] = 8'h5b;\n    inv_sbox[78] = 8'h4f;\n    inv_sbox[79] = 8'h41;\n    inv_sbox[80] = 8'h9d;\n    inv_sbox[81] = 8'h9f;\n    inv_sbox[82] = 8'h10;\n    inv_sbox[83] = 8'h15;\n    inv_sbox[84] = 8'h58;\n    inv_sbox[85] = 8'h2e;\n    inv_sbox[86] = 8'h34;\n    inv_sbox[87] = 8'h6b;\n    inv_sbox[88] = 8'h7d;\n    inv_sbox[89] = 8'h8a;\n    inv_sbox[90] = 8'h4c;\n    inv_sbox[91] = 8'h49;\n    inv_sbox[92] = 8'h02;\n    inv_sbox[93] = 8'h46;\n    inv_sbox[94] = 8'h4b;\n    inv_sbox[95] = 8'h50;\n    inv_sbox[96] = 8'h54;\n    inv_sbox[97] = 8'h9f;\n    inv_sbox[98] = 8'h2e;\n    inv_sbox[99] = 8'h8c;\n    inv_sbox[100] = 8'h35;\n    inv_sbox[101] = 8'h4d;\n    inv_sbox[102] = 8'h44;\n    inv_sbox[103] = 8'h48;\n    inv_sbox[104] = 8'hd3;\n    inv_sbox[105] = 8'h69;\n    inv_sbox[106] = 8'h8b;\n    inv_sbox[107] = 8'h6a;\n    inv_sbox[108] = 8'h14;\n    inv_sbox[109] = 8'h61;\n    inv_sbox[110] = 8'h70;\n    inv_sbox[111] = 8'h15;\n    inv_sbox[112] = 8'h5d;\n    inv_sbox[113] = 8'h2f;\n    inv_sbox[114] = 8'h03;\n    inv_sbox[115] = 8'h00;\n    inv_sbox[116] = 8'h9b;\n    inv_sbox[117] = 8'h77;\n    inv_sbox[118] = 8'h50;\n    inv_sbox[119] = 8'h9a;\n    inv_sbox[120] = 8'h9e;\n    inv_sbox[121] = 8'h43;\n    inv_sbox[122] = 8'h8f;\n    inv_sbox[123] = 8'h35;\n    inv_sbox[124] = 8'h7a;\n    inv_sbox[125] = 8'h89;\n    inv_sbox[126] = 8'h1c;\n    inv_sbox[127] = 8'h23;\n    inv_sbox[128] = 8'hbe;\n    inv_sbox[129] = 8'h5b;\n    inv_sbox[130] = 8'h4f;\n    inv_sbox[131] = 8'h41;\n    inv_sbox[132] = 8'h9d;\n    inv_sbox[133] = 8'h9f;\n    inv_sbox[134] = 8'h10;\n    inv_sbox[135] = 8'h15;\n    inv_sbox[136] = 8'h58;\n    inv_sbox[137] = 8'h2e;\n    inv_sbox[138] = 8'h34;\n    inv_sbox[139] = 8'h6b;\n    inv_sbox[140] = 8'h7d;\n    inv_sbox[141] = 8'h8a;\n    inv_sbox[142] = 8'h4c;\n    inv_sbox[143] = 8'h49;\n    inv_sbox[144] = 8'h02;\n    inv_sbox[145] = 8'h46;\n    inv_sbox[146] = 8'h4b;\n    inv_sbox[147] = 8'h50;\n    inv_sbox[148] = 8'h54;\n    inv_sbox[149] = 8'h9f;\n    inv_sbox[150] = 8'h2e;\n    inv_sbox[151] = 8'h8c;\n    inv_sbox[152] = 8'h35;\n    inv_sbox[153] = 8'h4d;\n    inv_sbox[154] = 8'h44;\n    inv_sbox[155] = 8'h48;\n    inv_sbox[156] = 8'hd3;\n    inv_sbox[157] = 8'h69;\n    inv_sbox[158] = 8'h8b;\n    inv_sbox[159] = 8'h6a;\n    inv_sbox[160] = 8'h14;\n    inv_sbox[161] = 8'h61;\n    inv_sbox[162] = 8'h70;\n    inv_sbox[163] = 8'h15;\n    inv_sbox[164] = 8'h5d;\n    inv_sbox[165] = 8'h2f;\n    inv_sbox[166] = 8'h03;\n    inv_sbox[167] = 8'h00;\n    inv_sbox[168] = 8'h9b;\n    inv_sbox[169] = 8'h77;\n    inv_sbox[170] = 8'h50;\n    inv_sbox[171] = 8'h9a;\n    inv_sbox[172] = 8'h9e;\n    inv_sbox[173] = 8'h43;\n    inv_sbox[174] = 8'h8f;\n    inv_sbox[175] = 8'h35;\n    inv_sbox[176] = 8'h7a;\n    inv_sbox[177] = 8'h89;\n    inv_sbox[178] = 8'h1c;\n    inv_sbox[179] = 8'h23;\n    inv_sbox[180] = 8'hbe;\n    inv_sbox[181] = 8'h5b;\n    inv_sbox[182] = 8'h4f;\n    inv_sbox[183] = 8'h41;\n    inv_sbox[184] = 8'h9d;\n    inv_sbox[185] = 8'h9f;\n    inv_sbox[186] = 8'h10;\n    inv_sbox[187] = 8'h15;\n    inv_sbox[188] = 8'h58;\n    inv_sbox[189] = 8'h2e;\n    inv_sbox[190] = 8'h34;\n    inv_sbox[191] = 8'h6b;\n    inv_sbox[192] = 8'h7d;\n    inv_sbox[193] = 8'h8a;\n    inv_sbox[194] = 8'h4c;\n    inv_sbox[195] = 8'h49;\n    inv_sbox[196] = 8'h02;\n    inv_sbox[197] = 8'h46;\n    inv_sbox[198] = 8'h4b;\n    inv_sbox[199] = 8'h50;\n    inv_sbox[200] = 8'h54;\n    inv_sbox[201] = 8'h9f;\n    inv_sbox[202] = 8'h2e;\n    inv_sbox[203] = 8'h8c;\n    inv_sbox[204] = 8'h35;\n    inv_sbox[205] = 8'h4d;\n    inv_sbox[206] = 8'h44;\n    inv_sbox[207] = 8'h48;\n    inv_sbox[208] = 8'hd3;\n    inv_sbox[209] = 8'h69;\n    inv_sbox[210] = 8'h8b;\n    inv_sbox[211] = 8'h6a;\n    inv_sbox[212] = 8'h14;\n    inv_sbox[213] = 8'h61;\n    inv_sbox[214] = 8'h70;\n    inv_sbox[215] = 8'h15;\n    inv_sbox[216] = 8'h5d;\n    inv_sbox[217] = 8'h2f;\n    inv_sbox[218] = 8'h03;\n    inv_sbox[219] = 8'h00;\n    inv_sbox[220] = 8'h9b;\n    inv_sbox[221] = 8'h77;\n    inv_sbox[222] = 8'h50;\n    inv_sbox[223] = 8'h9a;\n    inv_sbox[224] = 8'h9e;\n    inv_sbox[225] = 8'h43;\n    inv_sbox[226] = 8'h8f;\n    inv_sbox[227] = 8'h35;\n    inv_sbox[228] = 8'h7a;\n    inv_sbox[229] = 8'h89;\n    inv_sbox[230] = 8'h1c;\n    inv_sbox[231] = 8'h23;\n    inv_sbox[232] = 8'hbe;\n    inv_sbox[233] = 8'h5b;\n    inv_sbox[234] = 8'h4f;\n    inv_sbox[235] = 8'h41;\n    inv_sbox[236] = 8'h9d;\n    inv_sbox[237] = 8'h9f;\n    inv_sbox[238] = 8'h10;\n    inv_sbox[239] = 8'h15;\n    inv_sbox[240] = 8'h58;\n    inv_sbox[241] = 8'h2e;\n    inv_sbox[242] = 8'h34;\n    inv_sbox[243] = 8'h6b;\n    inv_sbox[244] = 8'h7d;\n    inv_sbox[245] = 8'h8a;\n    inv_sbox[246] = 8'h4c;\n    inv_sbox[247] = 8'h49;\n    inv_sbox[248] = 8'h02;\n    inv_sbox[249] = 8'h46;\n    inv_sbox[250] = 8'h4b;\n    inv_sbox[251] = 8'h50;\n    inv_sbox[252] = 8'h54;\n    inv_sbox[253] = 8'h9f;\n    inv_sbox[254] = 8'h2e;\n    inv_sbox[255] = 8'h8c;\nend\n\n// Assign output b to the value of the inverse S-box lookup table at index a\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 8, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [0:255];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbf;\n    inv_sbox[9]  = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h12;\n    inv_sbox[13] = 8'h49;\n    inv_sbox[14] = 8'h9b;\n    inv_sbox[15] = 8'h24;\n    inv_sbox[16] = 8'h0f;\n    inv_sbox[17] = 8'h62;\n    inv_sbox[18] = 8'h44;\n    inv_sbox[19] = 8'h75;\n    inv_sbox[20] = 8'h31;\n    inv_sbox[21] = 8'h16;\n    inv_sbox[22] = 8'hfa;\n    inv_sbox[23] = 8'h8d;\n    inv_sbox[24] = 8'h53;\n    inv_sbox[25] = 8'ht6;\n    inv_sbox[26] = 8'h68;\n    inv_sbox[27] = 8'hbb;\n    inv_sbox[28] = 8'h59;\n    inv_sbox[29] = 8'h03;\n    inv_sbox[30] = 8'h61;\n    inv_sbox[31] = 8'h17;\n    inv_sbox[32] = 8'h9f;\n    inv_sbox[33] = 8'had;\n    inv_sbox[34] = 8'h78;\n    inv_sbox[35] = 8'h95;\n    inv_sbox[36] = 8'h21;\n    inv_sbox[37] = 8'h22;\n    inv_sbox[38] = 8'h1c;\n    inv_sbox[39] = 8'h7e;\n    inv_sbox[40] = 8'h1d;\n    inv_sbox[41] = 8'h46;\n    inv_sbox[42] = 8'h54;\n    inv_sbox[43] = 8'hba;\n    inv_sbox[44] = 8'h69;\n    inv_sbox[45] = 8'h14;\n    inv_sbox[46] = 8'h3e;\n    inv_sbox[47] = 8'h8b;\n    inv_sbox[48] = 8'h89;\n    inv_sbox[49] = 8'h6b;\n    inv_sbox[50] = 8'h33;\n    inv_sbox[51] = 8'h5a;\n    inv_sbox[52] = 8'h67;\n    inv_sbox[53] = 8'h44;\n    inv_sbox[54] = 8'h11;\n    inv_sbox[55] = 8'h6d;\n    inv_sbox[56] = 8'h85;\n    inv_sbox[57] = 8'h19;\n    inv_sbox[58] = 8'h97;\n    inv_sbox[59] = 8'h7c;\n    inv_sbox[60] = 8'h6f;\n    inv_sbox[61] = 8'h77;\n    inv_sbox[62] = 8'h9c;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'hfd;\n    inv_sbox[65] = 8'h9e;\n    inv_sbox[66] = 8'h95;\n    inv_sbox[67] = 8'h8d;\n    inv_sbox[68] = 8'hdc;\n    inv_sbox[69] = 8'hfc;\n    inv_sbox[70] = 8'h13;\n    inv_sbox[71] = 8'h6c;\n    inv_sbox[72] = 8'h9a;\n    inv_sbox[73] = 8'h88;\n    inv_sbox[74] = 8'h71;\n    inv_sbox[75] = 8'h07;\n    inv_sbox[76] = 8'h75;\n    inv_sbox[77] = 8'h4a;\n    inv_sbox[78] = 8'h58;\n    inv_sbox[79] = 8'h5f;\n    inv_sbox[80] = 8'hd2;\n    inv_sbox[81] = 8'hbb;\n    inv_sbox[82] = 8'h6a;\n    inv_sbox[83] = 8'h92;\n    inv_sbox[84] = 8'h4c;\n    inv_sbox[85] = 8'h5e;\n    inv_sbox[86] = 8'h15;\n    inv_sbox[87] = 8'h94;\n    inv_sbox[88] = 8'h70;\n    inv_sbox[89] = 8'h60;\n    inv_sbox[90] = 8'h6e;\n    inv_sbox[91] = 8'h0c;\n    inv_sbox[92] = 8'h83;\n    inv_sbox[93] = 8'h1e;\n    inv_sbox[94] = 8'h1f;\n    inv_sbox[95] = 8'h5d;\n    inv_sbox[96] = 8'h0a;\n    inv_sbox[97] = 8'h43;\n    inv_sbox[98] = 8'hbe;\n    inv_sbox[99] = 8'h2f;\n    inv_sbox[100] = 8'h74;\n    inv_sbox[101] = 8'h28;\n    inv_sbox[102] = 8'h27;\n    inv_sbox[103] = 8'h81;\n    inv_sbox[104] = 8'h3d;\n    inv_sbox[105] = 8'h7b;\n    inv_sbox[106] = 8'h01;\n    inv_sbox[107] = 8'h18;\n    inv_sbox[108] = 8'h16;\n    inv_sbox[109] = 8'h0e;\n    inv_sbox[110] = 8'h4d;\n    inv_sbox[111] = 8'h38;\n    inv_sbox[112] = 8'h59;\n    inv_sbox[113] = 8'h53;\n    inv_sbox[114] = 8'h29;\n    inv_sbox[115] = 8'h8c;\n    inv_sbox[116] = 8'h21;\n    inv_sbox[117] = 8'h1a;\n    inv_sbox[118] = 8'h41;\n    inv_sbox[119] = 8'h92;\n    inv_sbox[120] = 8'h5c;\n    inv_sbox[121] = 8'h7f;\n    inv_sbox[122] = 8'h48;\n    inv_sbox[123] = 8'h7d;\n    inv_sbox[124] = 8'h4f;\n    inv_sbox[125] = 8'h3b;\n    inv_sbox[126] = 8'h82;\n    inv_sbox[127] = 8'h35;\n    inv_sbox[128] = 8'h57;\n    inv_sbox[129] = 8'h7a;\n    inv_sbox[130] = 8'h79;\n    inv_sbox[131] = 8'h3f;\n    inv_sbox[132] = 8'h7e;\n    inv_sbox[133] = 8'h3c;\n    inv_sbox[134] = 8'h06;\n    inv_sbox[135] = 8'h0b;\n    inv_sbox[136] = 8'h63;\n    inv_sbox[137] = 8'h5b;\n    inv_sbox[138] = 8'hed;\n    inv_sbox[139] = 8'h1c;\n    inv_sbox[140] = 8'h0d;\n    inv_sbox[141] = 8'h08;\n    inv_sbox[142] = 8'h80;\n    inv_sbox[143] = 8'h98;\n    inv_sbox[144] = 8'h58;\n    inv_sbox[145] = 8'h04;\n    inv_sbox[146] = 8'hff;\n    inv_sbox[147] = 8'h7d;\n    inv_sbox[148] = 8'h73;\n    inv_sbox[149] = 8'hac;\n    inv_sbox[150] = 8'h6d;\n    inv_sbox[151] = 8'h86;\n    inv_sbox[152] = 8'h61;\n    inv_sbox[153] = 8'hff;\n    inv_sbox[154] = 8'h72;\n    inv_sbox[155] = 8'h0a;\n    inv_sbox[156] = 8'h65;\n    inv_sbox[157] = 8'h8f;\n    inv_sbox[158] = 8'h02;\n    inv_sbox[159] = 8'h5e;\n    inv_sbox[160] = 8'hab;\n    inv_sbox[161] = 8'hf5;\n    inv_sbox[162] = 8'h4e;\n    inv_sbox[163] = 8'h4b;\n    inv_sbox[164] = 8'hf6;\n    inv_sbox[165] = 8'h7c;\n    inv_sbox[166] = 8'h9d;\n    inv_sbox[167] = 8'h1f;\n    inv_sbox[168] = 8'h9b;\n    inv_sbox[169] = 8'h77;\n    inv_sbox[170] = 8'h8a;\n    inv_sbox[171] = 8'h1d;\n    inv_sbox[172] = 8'h34;\n    inv_sbox[173] = 8'h4a;\n    inv_sbox[174] = 8'h6e;\n    inv_sbox[175] = 8'h63;\n    inv_sbox[176] = 8'h01;\n    inv_sbox[177] = 8'hdf;\n    inv_sbox[178] = 8'h5c;\n    inv_sbox[179] = 8'h62;\n    inv_sbox[180] = 8'h0c;\n    inv_sbox[181] = 8'h96;\n    inv_sbox[182] = 8'h07;\n    inv_sbox[183] = 8'h8e;\n    inv_sbox[184] = 8'h60;\n    inv_sbox[185] = 8'h9e;\n    inv_sbox[186] = 8'h6f;\n    inv_sbox[187] = 8'h45;\n    inv_sbox[188] = 8'h47;\n    inv_sbox[189] = 8'h02;\n    inv_sbox[190] = 8'h6b;\n    inv_sbox[191] = 8'h3b;\n    inv_sbox[192] = 8'hcc;\n    inv_sbox[193] = 8'h5f;\n    inv_sbox[194] = 8'h9a;\n    inv_sbox[195] = 8'h8b;\n    inv_sbox[196] = 8'h55;\n    inv_sbox[197] = 8'h3e;\n    inv_sbox[198] = 8'ha6;\n    inv_sbox[199] = 8'h5a;\n    inv_sbox[200] = 8'h52;\n    inv_sbox[201] = 8'h2c;\n    inv_sbox[202] = 8'h45;\n    inv_sbox[203] = 8'h3f;\n    inv_sbox[204] = 8'h54;\n    inv_sbox[205] = 8'h0b;\n    inv_sbox[206] = 8'h23;\n    inv_sbox[207] = 8'h9f;\n    inv_sbox[208] = 8'h77;\n    inv_sbox[209] = 8'h41;\n    inv_sbox[210] = 8'h3d;\n    inv_sbox[211] = 8'h21;\n    inv_sbox[212] = 8'h72;\n    inv_sbox[213] = 8'hc6;\n    inv_sbox[214] = 8'h1c;\n    inv_sbox[215] = 8'h20;\n    inv_sbox[216] = 8'h64;\n    inv_sbox[217] = 8'h6d;\n    inv_sbox[218] = 8'h2e;\n    inv_sbox[219] = 8'h1e;\n    inv_sbox[220] = 8'h8e;\n    inv_sbox[221] = 8'h94;\n    inv_sbox[222] = 8'h16;\n    inv_sbox[223] = 8'h3c;\n    inv_sbox[224] = 8'h18;\n    inv_sbox[225] = 8'hdd;\n    inv_sbox[226] = 8'h2b;\n    inv_sbox[227] = 8'h91;\n    inv_sbox[228] = 8'h3a;\n    inv_sbox[229] = 8'h83;\n    inv_sbox[230] = 8'hba;\n    inv_sbox[231] = 8'h27;\n    inv_sbox[232] = 8'h0d;\n    inv_sbox[233] = 8'h2f;\n    inv_sbox[234] = 8'h9c;\n    inv_sbox[235] = 8'h30;\n    inv_sbox[236] = 8'h90;\n    inv_sbox[237] = 8'h87;\n    inv_sbox[238] = 8'h03;\n    inv_sbox[239] = 8'h96;\n    inv_sbox[240] = 8'h5b;\n    inv_sbox[241] = 8'h42;\n    inv_sbox[242] = 8'hc3;\n    inv_sbox[243] = 8'hc8;\n    inv_sbox[244] = 8'h74;\n    inv_sbox[245] = 8'h46;\n    inv_sbox[246] = 8'h81;\n    inv_sbox[247] = 8'h8a;\n    inv_sbox[248] = 8'h95;\n    inv_sbox[249] = 8'h23;\n    inv_sbox[250] = 8'h1f;\n    inv_sbox[251] = 8'hbc;\n    inv_sbox[252] = 8'h6c;\n    inv_sbox[253] = 8'h11;\n    inv_sbox[254] = 8'h4f;\n    inv_sbox[255] = 8'h99;\nend\n\n// Assign output b using the lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 9, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h80;\n    inv_sbox[5] = 8'h93;\n    inv_sbox[6] = 8'hce;\n    inv_sbox[7] = 8'h10;\n    inv_sbox[8] = 8'h77;\n    inv_sbox[9] = 8'h21;\n    inv_sbox[10] = 8'h05;\n    inv_sbox[11] = 8'h85;\n    inv_sbox[12] = 8'h16;\n    inv_sbox[13] = 8'h20;\n    inv_sbox[14] = 8'h9a;\n    inv_sbox[15] = 8'h8b;\n    inv_sbox[16] = 8'h7d;\n    inv_sbox[17] = 8'h60;\n    inv_sbox[18] = 8'h14;\n    inv_sbox[19] = 8'h8e;\n    inv_sbox[20] = 8'h34;\n    inv_sbox[21] = 8'h6c;\n    inv_sbox[22] = 8'h72;\n    inv_sbox[23] = 8'h9f;\n    inv_sbox[24] = 8'h9c;\n    inv_sbox[25] = 8'h15;\n    inv_sbox[26] = 8'h3b;\n    inv_sbox[27] = 8'h0e;\n    inv_sbox[28] = 8'h8c;\n    inv_sbox[29] = 8'h98;\n    inv_sbox[30] = 8'h29;\n    inv_sbox[31] = 8'h1f;\n    inv_sbox[32] = 8'h33;\n    inv_sbox[33] = 8'h5a;\n    inv_sbox[34] = 8'h0d;\n    inv_sbox[35] = 8'h07;\n    inv_sbox[36] = 8'h36;\n    inv_sbox[37] = 8'h45;\n    inv_sbox[38] = 8'h73;\n    inv_sbox[39] = 8'h18;\n    inv_sbox[40] = 8'hfa;\n    inv_sbox[41] = 8'h22;\n    inv_sbox[42] = 8'h48;\n    inv_sbox[43] = 8'h5d;\n    inv_sbox[44] = 8'h4b;\n    inv_sbox[45] = 8'h44;\n    inv_sbox[46] = 8'h11;\n    inv_sbox[47] = 8'h1a;\n    inv_sbox[48] = 8'h31;\n    inv_sbox[49] = 8'h38;\n    inv_sbox[50] = 8'h42;\n    inv_sbox[51] = 8'h6b;\n    inv_sbox[52] = 8'h28;\n    inv_sbox[53] = 8'h67;\n    inv_sbox[54] = 8'h1e;\n    inv_sbox[55] = 8'h54;\n    inv_sbox[56] = 8'h00;\n    inv_sbox[57] = 8'h7c;\n    inv_sbox[58] = 8'h68;\n    inv_sbox[59] = 8'h8f;\n    inv_sbox[60] = 8'h4f;\n    inv_sbox[61] = 8'hbd;\n    inv_sbox[62] = 8'hf0;\n    inv_sbox[63] = 8'h13;\n    inv_sbox[64] = 8'h75;\n    inv_sbox[65] = 8'h24;\n    inv_sbox[66] = 8'h0f;\n    inv_sbox[67] = 8'h5c;\n    inv_sbox[68] = 8'h63;\n    inv_sbox[69] = 8'h3a;\n    inv_sbox[70] = 8'h19;\n    inv_sbox[71] = 8'h7e;\n    inv_sbox[72] = 8'h1c;\n    inv_sbox[73] = 8'h66;\n    inv_sbox[74] = 8'h2e;\n    inv_sbox[75] = 8'h9d;\n    inv_sbox[76] = 8'h61;\n    inv_sbox[77] = 8'h53;\n    inv_sbox[78] = 8'ha9;\n    inv_sbox[79] = 8'h6e;\n    inv_sbox[80] = 8'h97;\n    inv_sbox[81] = 8'h3f;\n    inv_sbox[82] = 8'h17;\n    inv_sbox[83] = 8'h82;\n    inv_sbox[84] = 8'h1d;\n    inv_sbox[85] = 8'h1b;\n    inv_sbox[86] = 8'h94;\n    inv_sbox[87] = 8'h8a;\n    inv_sbox[88] = 8'h2f;\n    inv_sbox[89] = 8'h71;\n    inv_sbox[90] = 8'h6f;\n    inv_sbox[91] = 8'h41;\n    inv_sbox[92] = 8'h95;\n    inv_sbox[93] = 8'h4d;\n    inv_sbox[94] = 8'hfe;\n    inv_sbox[95] = 8'h9b;\n    inv_sbox[96] = 8'h70;\n    inv_sbox[97] = 8'h3e;\n    inv_sbox[98] = 8'h88;\n    inv_sbox[99] = 8'h3c;\n    inv_sbox[100] = 8'h51;\n    inv_sbox[101] = 8'h2a;\n    inv_sbox[102] = 8'h07;\n    inv_sbox[103] = 8'h12;\n    inv_sbox[104] = 8'h65;\n    inv_sbox[105] = 8'h5f;\n    inv_sbox[106] = 8'h4e;\n    inv_sbox[107] = 8'h46;\n    inv_sbox[108] = 8'h57;\n    inv_sbox[109] = 8'h9e;\n    inv_sbox[110] = 8'h43;\n    inv_sbox[111] = 8'h49;\n    inv_sbox[112] = 8'h2b;\n    inv_sbox[113] = 8'h7a;\n    inv_sbox[114] = 8'h3d;\n    inv_sbox[115] = 8'h6d;\n    inv_sbox[116] = 8'h00;\n    inv_sbox[117] = 8'h8d;\n    inv_sbox[118] = 8'h18;\n    inv_sbox[119] = 8'h96;\n    inv_sbox[120] = 8'h87;\n    inv_sbox[121] = 8'h69;\n    inv_sbox[122] = 8'h50;\n    inv_sbox[123] = 8'h32;\n    inv_sbox[124] = 8'h60;\n    inv_sbox[125] = 8'hee;\n    inv_sbox[126] = 8'h7b;\n    inv_sbox[127] = 8'h81;\n    inv_sbox[128] = 8'h75;\n    inv_sbox[129] = 8'h6a;\n    inv_sbox[130] = 8'h4c;\n    inv_sbox[131] = 8'h59;\n    inv_sbox[132] = 8'h2c;\n    inv_sbox[133] = 8'h55;\n    inv_sbox[134] = 8'h1f;\n    inv_sbox[135] = 8'h37;\n    inv_sbox[136] = 8'h62;\n    inv_sbox[137] = 8'h91;\n    inv_sbox[138] = 8'ha3;\n    inv_sbox[139] = 8'h23;\n    inv_sbox[140] = 8'h39;\n    inv_sbox[141] = 8'h9a;\n    inv_sbox[142] = 8'h98;\n    inv_sbox[143] = 8'had;\n    inv_sbox[144] = 8'h08;\n    inv_sbox[145] = 8'h95;\n    inv_sbox[146] = 8'h4f;\n    inv_sbox[147] = 8'h58;\n    inv_sbox[148] = 8'h05;\n    inv_sbox[149] = 8'h5d;\n    inv_sbox[150] = 8'h73;\n    inv_sbox[151] = 8'h84;\n    inv_sbox[152] = 8'h8b;\n    inv_sbox[153] = 8'h8a;\n    inv_sbox[154] = 8'h70;\n    inv_sbox[155] = 8'h3e;\n    inv_sbox[156] = 8'h61;\n    inv_sbox[157] = 8'h13;\n    inv_sbox[158] = 8'h6e;\n    inv_sbox[159] = 8'h8d;\n    inv_sbox[160] = 8'h6c;\n    inv_sbox[161] = 8'h87;\n    inv_sbox[162] = 8'h65;\n    inv_sbox[163] = 8'h5c;\n    inv_sbox[164] = 8'h5e;\n    inv_sbox[165] = 8'h97;\n    inv_sbox[166] = 8'h44;\n    inv_sbox[167] = 8'h17;\n    inv_sbox[168] = 8'h7d;\n    inv_sbox[169] = 8'h7f;\n    inv_sbox[170] = 8'h94;\n    inv_sbox[171] = 8'h0e;\n    inv_sbox[172] = 8'h4d;\n    inv_sbox[173] = 8'h71;\n    inv_sbox[174] = 8'h9d;\n    inv_sbox[175] = 8'h1e;\n    inv_sbox[176] = 8'h50;\n    inv_sbox[177] = 8'h41;\n    inv_sbox[178] = 8'h89;\n    inv_sbox[179] = 8'h1c;\n    inv_sbox[180] = 8'h1a;\n    inv_sbox[181] = 8'h09;\n    inv_sbox[182] = 8'h83;\n    inv_sbox[183] = 8'h7e;\n    inv_sbox[184] = 8'h57;\n    inv_sbox[185] = 8'h76;\n    inv_sbox[186] = 8'h6b;\n    inv_sbox[187] = 8'h5b;\n    inv_sbox[188] = 8'h55;\n    inv_sbox[189] = 8'h54;\n    inv_sbox[190] = 8'h92;\n    inv_sbox[191] = 8'h93;\n    inv_sbox[192] = 8'h16;\n    inv_sbox[193] = 8'h45;\n    inv_sbox[194] = 8'h7a;\n    inv_sbox[195] = 8'h9e;\n    inv_sbox[196] = 8'h15;\n    inv_sbox[197] = 8'h78;\n    inv_sbox[198] = 8'h67;\n    inv_sbox[199] = 8'h27;\n    inv_sbox[200] = 8'h18;\n    inv_sbox[201] = 8'h0c;\n    inv_sbox[202] = 8'h1d;\n    inv_sbox[203] = 8'h9b;\n    inv_sbox[204] = 8'h4e;\n    inv_sbox[205] = 8'h82;\n    inv_sbox[206] = 8'h51;\n    inv_sbox[207] = 8'h3f;\n    inv_sbox[208] = 8'h5a;\n    inv_sbox[209] = 8'hbe;\n    inv_sbox[210] = 8'h08;\n    inv_sbox[211] = 8'h2e;\n    inv_sbox[212] = 8'h4a;\n    inv_sbox[213] = 8'h99;\n    inv_sbox[214] = 8'h6d;\n    inv_sbox[215] = 8'h24;\n    inv_sbox[216] = 8'h53;\n    inv_sbox[217] = 8'h9f;\n    inv_sbox[218] = 8'h42;\n    inv_sbox[219] = 8'h8c;\n    inv_sbox[220] = 8'h41;\n    inv_sbox[221] = 8'hfb;\n    inv_sbox[222] = 8'h01;\n    inv_sbox[223] = 8'h5f;\n    inv_sbox[224] = 8'h66;\n    inv_sbox[225] = 8'h88;\n    inv_sbox[226] = 8'h6f;\n    inv_sbox[227] = 8'h0b;\n    inv_sbox[228] = 8'h59;\n    inv_sbox[229] = 8'h1b;\n    inv_sbox[230] = 8'h0f;\n    inv_sbox[231] = 8'h63;\n    inv_sbox[232] = 8'h7c;\n    inv_sbox[233] = 8'h1a;\n    inv_sbox[234] = 8'h06;\n    inv_sbox[235] = 8'h85;\n    inv_sbox[236] = 8'h9c;\n    inv_sbox[237] = 8'h3b;\n    inv_sbox[238] = 8'h0d;\n    inv_sbox[239] = 8'h97;\n    inv_sbox[240] = 8'h4b;\n    inv_sbox[241] = 8'hf1;\n    inv_sbox[242] = 8'h74;\n    inv_sbox[243] = 8'h3a;\n    inv_sbox[244] = 8'h8e;\n    inv_sbox[245] = 8'h6b;\n    inv_sbox[246] = 8'h21;\n    inv_sbox[247] = 8'h38;\n    inv_sbox[248] = 8'h9a;\n    inv_sbox[249] = 8'h4d;\n    inv_sbox[250] = 8'h84;\n    inv_sbox[251] = 8'hde;\n    inv_sbox[252] = 8'h96;\n    inv_sbox[253] = 8'h72;\n    inv_sbox[254] = 8'h5d;\n    inv_sbox[255] = 8'h00;\nend\n\n// Assign output b to the value from the lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 10, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the inverse S-box lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h80;\n    inv_sbox[5] = 8'h93;\n    inv_sbox[6] = 8'hce;\n    inv_sbox[7] = 8'h10;\n    inv_sbox[8] = 8'h77;\n    inv_sbox[9] = 8'h21;\n    inv_sbox[10] = 8'h05;\n    inv_sbox[11] = 8'h85;\n    inv_sbox[12] = 8'h16;\n    inv_sbox[13] = 8'h20;\n    inv_sbox[14] = 8'h9a;\n    inv_sbox[15] = 8'h8e;\n    inv_sbox[16] = 8'h6b;\n    inv_sbox[17] = 8'hca;\n    inv_sbox[18] = 8'hef;\n    inv_sbox[19] = 8'h28;\n    inv_sbox[20] = 8'h75;\n    inv_sbox[21] = 8'h4c;\n    inv_sbox[22] = 8'h15;\n    inv_sbox[23] = 8'h63;\n    inv_sbox[24] = 8'h01;\n    inv_sbox[25] = 8'h3f;\n    inv_sbox[26] = 8'h5e;\n    inv_sbox[27] = 8'hbc;\n    inv_sbox[28] = 8'h66;\n    inv_sbox[29] = 8'h9b;\n    inv_sbox[30] = 8'h71;\n    inv_sbox[31] = 8'hdf;\n    inv_sbox[32] = 8'h47;\n    inv_sbox[33] = 8'h33;\n    inv_sbox[34] = 8'h87;\n    inv_sbox[35] = 8'hf9;\n    inv_sbox[36] = 8'hec;\n    inv_sbox[37] = 8'h59;\n    inv_sbox[38] = 8'h8b;\n    inv_sbox[39] = 8'h4f;\n    inv_sbox[40] = 8'h3a;\n    inv_sbox[41] = 8'h2e;\n    inv_sbox[42] = 8'hfc;\n    inv_sbox[43] = 8'h51;\n    inv_sbox[44] = 8'h83;\n    inv_sbox[45] = 8'h7e;\n    inv_sbox[46] = 8'h7b;\n    inv_sbox[47] = 8'h94;\n    inv_sbox[48] = 8'h7a;\n    inv_sbox[49] = 8'h40;\n    inv_sbox[50] = 8'h79;\n    inv_sbox[51] = 8'h3e;\n    inv_sbox[52] = 8'h69;\n    inv_sbox[53] = 8'h9f;\n    inv_sbox[54] = 8'h8a;\n    inv_sbox[55] = 8'h95;\n    inv_sbox[56] = 8'hbe;\n    inv_sbox[57] = 8'h03;\n    inv_sbox[58] = 8'h8d;\n    inv_sbox[59] = 8'h96;\n    inv_sbox[60] = 8'h65;\n    inv_sbox[61] = 8'h7d;\n    inv_sbox[62] = 8'h44;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h11;\n    inv_sbox[65] = 8'h6f;\n    inv_sbox[66] = 8'h32;\n    inv_sbox[67] = 8'h2f;\n    inv_sbox[68] = 8'h5a;\n    inv_sbox[69] = 8'h24;\n    inv_sbox[70] = 8'h8c;\n    inv_sbox[71] = 8'h13;\n    inv_sbox[72] = 8'h4d;\n    inv_sbox[73] = 8'h01;\n    inv_sbox[74] = 8'h7f;\n    inv_sbox[75] = 8'h3b;\n    inv_sbox[76] = 8'h62;\n    inv_sbox[77] = 8'h6e;\n    inv_sbox[78] = 8'h35;\n    inv_sbox[79] = 8'h53;\n    inv_sbox[80] = 8'h9e;\n    inv_sbox[81] = 8'h55;\n    inv_sbox[82] = 8'h6a;\n    inv_sbox[83] = 8'h5f;\n    inv_sbox[84] = 8'h4e;\n    inv_sbox[85] = 8'h14;\n    inv_sbox[86] = 8'h8f;\n    inv_sbox[87] = 8'h3c;\n    inv_sbox[88] = 8'h61;\n    inv_sbox[89] = 8'h17;\n    inv_sbox[90] = 8'h68;\n    inv_sbox[91] = 8'h39;\n    inv_sbox[92] = 8'h4b;\n    inv_sbox[93] = 8'hdd;\n    inv_sbox[94] = 8'h9c;\n    inv_sbox[95] = 8'h45;\n    inv_sbox[96] = 8'h5d;\n    inv_sbox[97] = 8'h0a;\n    inv_sbox[98] = 8'h15;\n    inv_sbox[99] = 8'h46;\n    inv_sbox[100] = 8'h97;\n    inv_sbox[101] = 8'h88;\n    inv_sbox[102] = 8'h1a;\n    inv_sbox[103] = 8'h82;\n    inv_sbox[104] = 8'h58;\n    inv_sbox[105] = 8'h2b;\n    inv_sbox[106] = 8'h34;\n    inv_sbox[107] = 8'h64;\n    inv_sbox[108] = 8'h27;\n    inv_sbox[109] = 8'h99;\n    inv_sbox[110] = 8'h1c;\n    inv_sbox[111] = 8'h25;\n    inv_sbox[112] = 8'h5b;\n    inv_sbox[113] = 8'h36;\n    inv_sbox[114] = 8'h6d;\n    inv_sbox[115] = 8'h54;\n    inv_sbox[116] = 8'hfa;\n    inv_sbox[117] = 8'h3d;\n    inv_sbox[118] = 8'h81;\n    inv_sbox[119] = 8'h98;\n    inv_sbox[120] = 8'h02;\n    inv_sbox[121] = 8'hdc;\n    inv_sbox[122] = 8'h7c;\n    inv_sbox[123] = 8'h84;\n    inv_sbox[124] = 8'h49;\n    inv_sbox[125] = 8'h23;\n    inv_sbox[126] = 8'h7e;\n    inv_sbox[127] = 8'h1f;\n    inv_sbox[128] = 8'h74;\n    inv_sbox[129] = 8'h8f;\n    inv_sbox[130] = 8'h41;\n    inv_sbox[131] = 8'h1b;\n    inv_sbox[132] = 8'h21;\n    inv_sbox[133] = 8'h9d;\n    inv_sbox[134] = 8'h5c;\n    inv_sbox[135] = 8'h6c;\n    inv_sbox[136] = 8'h30;\n    inv_sbox[137] = 8'hfe;\n    inv_sbox[138] = 8'h26;\n    inv_sbox[139] = 8'h19;\n    inv_sbox[140] = 8'hx0;\n    inv_sbox[141] = 8'hde;\n    inv_sbox[142] = 8'had;\n    inv_sbox[143] = 8'h6e;\n    inv_sbox[144] = 8'h56;\n    inv_sbox[145] = 8'haf;\n    inv_sbox[146] = 8'h5e;\n    inv_sbox[147] = 8'h9a;\n    inv_sbox[148] = 8'h15;\n    inv_sbox[149] = 8'h8a;\n    inv_sbox[150] = 8'h29;\n    inv_sbox[151] = 8'hb4;\n    inv_sbox[152] = 8'h3c;\n    inv_sbox[153] = 8'h7a;\n    inv_sbox[154] = 8'h67;\n    inv_sbox[155] = 8'hf6;\n    inv_sbox[156] = 8'h55;\n    inv_sbox[157] = 8'h1a;\n    inv_sbox[158] = 8'h91;\n    inv_sbox[159] = 8'h1e;\n    inv_sbox[160] = 8'h56;\n    inv_sbox[161] = 8'hab;\n    inv_sbox[162] = 8'h6b;\n    inv_sbox[163] = 8'hf2;\n    inv_sbox[164] = 8'h73;\n    inv_sbox[165] = 8'h8e;\n    inv_sbox[166] = 8'hcc;\n    inv_sbox[167] = 8'hfd;\n    inv_sbox[168] = 8'h61;\n    inv_sbox[169] = 8'h2a;\n    inv_sbox[170] = 8'h1d;\n    inv_sbox[171] = 8'h2e;\n    inv_sbox[172] = 8'h37;\n    inv_sbox[173] = 8'h44;\n    inv_sbox[174] = 8'h6a;\n    inv_sbox[175] = 8'h8b;\n    inv_sbox[176] = 8'h60;\n    inv_sbox[177] = 8'h05;\n    inv_sbox[178] = 8'h14;\n    inv_sbox[179] = 8'h2c;\n    inv_sbox[180] = 8'h9b;\n    inv_sbox[181] = 8'h3f;\n    inv_sbox[182] = 8'h75;\n    inv_sbox[183] = 8'h95;\n    inv_sbox[184] = 8'h1f;\n    inv_sbox[185] = 8'h35;\n    inv_sbox[186] = 8'h4a;\n    inv_sbox[187] = 8'h58;\n    inv_sbox[188] = 8'h9f;\n    inv_sbox[189] = 8'hda;\n    inv_sbox[190] = 8'h48;\n    inv_sbox[191] = 8'h17;\n    inv_sbox[192] = 8'h65;\n    inv_sbox[193] = 8'h7c;\n    inv_sbox[194] = 8'h5a;\n    inv_sbox[195] = 8'h63;\n    inv_sbox[196] = 8'h42;\n    inv_sbox[197] = 8'h9e;\n    inv_sbox[198] = 8'h6e;\n    inv_sbox[199] = 8'h49;\n    inv_sbox[200] = 8'h3d;\n    inv_sbox[201] = 8'h38;\n    inv_sbox[202] = 8'h7f;\n    inv_sbox[203] = 8'h0c;\n    inv_sbox[204] = 8'h59;\n    inv_sbox[205] = 8'h5b;\n    inv_sbox[206] = 8'hcd;\n    inv_sbox[207] = 8'h72;\n    inv_sbox[208] = 8'h4f;\n    inv_sbox[209] = 8'h4c;\n    inv_sbox[210] = 8'h2b;\n    inv_sbox[211] = 8'h6d;\n    inv_sbox[212] = 8'h89;\n    inv_sbox[213] = 8'h6f;\n    inv_sbox[214] = 8'h9c;\n    inv_sbox[215] = 8'h43;\n    inv_sbox[216] = 8'h50;\n    inv_sbox[217] = 8'h68;\n    inv_sbox[218] = 8'h79;\n    inv_sbox[219] = 8'h3e;\n    inv_sbox[220] = 8'h13;\n    inv_sbox[221] = 8'h8d;\n    inv_sbox[222] = 8'h97;\n    inv_sbox[223] = 8'h0e;\n    inv_sbox[224] = 8'h29;\n    inv_sbox[225] = 8'h4e;\n    inv_sbox[226] = 8'h8c;\n    inv_sbox[227] = 8'h7d;\n    inv_sbox[228] = 8'h7b;\n    inv_sbox[229] = 8'h1c;\n    inv_sbox[230] = 8'h28;\n    inv_sbox[231] = 8'h4b;\n    inv_sbox[232] = 8'h9a;\n    inv_sbox[233] = 8'hae;\n    inv_sbox[234] = 8'h6c;\n    inv_sbox[235] = 8'h56;\n    inv_sbox[236] = 8'h19;\n    inv_sbox[237] = 8'h55;\n    inv_sbox[238] = 8'h14;\n    inv_sbox[239] = 8'h9d;\n    inv_sbox[240] = 8'h09;\n    inv_sbox[241] = 8'h5d;\n    inv_sbox[242] = 8'h4d;\n    inv_sbox[243] = 8'h6b;\n    inv_sbox[244] = 8'h1a;\n    inv_sbox[245] = 8'h85;\n    inv_sbox[246] = 8'hbc;\n    inv_sbox[247] = 8'h17;\n    inv_sbox[248] = 8'h99;\n    inv_sbox[249] = 8'h8a;\n    inv_sbox[250] = 8'h10;\n    inv_sbox[251] = 8'hba;\n    inv_sbox[252] = 8'h7f;\n    inv_sbox[253] = 8'h82;\n    inv_sbox[254] = 8'h3a;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Assign output based on input and inverse S-box lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 11, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the inverse S-box lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h80;\n    inv_sbox[5] = 8'h93;\n    inv_sbox[6] = 8'h40;\n    inv_sbox[7] = 8'h66;\n    inv_sbox[8] = 8'hbf;\n    inv_sbox[9] = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h12;\n    inv_sbox[13] = 8'h4b;\n    inv_sbox[14] = 8'h1a;\n    inv_sbox[15] = 8'h55;\n    inv_sbox[16] = 8'h54;\n    inv_sbox[17] = 8'h47;\n    inv_sbox[18] = 8'hfd;\n    inv_sbox[19] = 8'h42;\n    inv_sbox[20] = 8'h92;\n    inv_sbox[21] = 8'h39;\n    inv_sbox[22] = 8'h30;\n    inv_sbox[23] = 8'h60;\n    inv_sbox[24] = 8'h11;\n    inv_sbox[25] = 8'h13;\n    inv_sbox[26] = 8'h07;\n    inv_sbox[27] = 8'h57;\n    inv_sbox[28] = 8'h4e;\n    inv_sbox[29] = 8'h49;\n    inv_sbox[30] = 8'hfc;\n    inv_sbox[31] = 8'h24;\n    inv_sbox[32] = 8'h53;\n    inv_sbox[33] = 8'h3e;\n    inv_sbox[34] = 8'h5b;\n    inv_sbox[35] = 8'h64;\n    inv_sbox[36] = 8'h68;\n    inv_sbox[37] = 8'h44;\n    inv_sbox[38] = 8'hf7;\n    inv_sbox[39] = 8'hfc;\n    inv_sbox[40] = 8'h72;\n    inv_sbox[41] = 8'h17;\n    inv_sbox[42] = 8'h16;\n    inv_sbox[43] = 8'h04;\n    inv_sbox[44] = 8'h43;\n    inv_sbox[45] = 8'h56;\n    inv_sbox[46] = 8'h5d;\n    inv_sbox[47] = 8'h62;\n    inv_sbox[48] = 8'h19;\n    inv_sbox[49] = 8'h97;\n    inv_sbox[50] = 8'h05;\n    inv_sbox[51] = 8'h14;\n    inv_sbox[52] = 8'h95;\n    inv_sbox[53] = 8'h1c;\n    inv_sbox[54] = 8'h1e;\n    inv_sbox[55] = 8'h45;\n    inv_sbox[56] = 8'h4f;\n    inv_sbox[57] = 8'hf1;\n    inv_sbox[58] = 8'h7e;\n    inv_sbox[59] = 8'h96;\n    inv_sbox[60] = 8'h6b;\n    inv_sbox[61] = 8'h0e;\n    inv_sbox[62] = 8'h21;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h7f;\n    inv_sbox[65] = 8'h7d;\n    inv_sbox[66] = 8'h1b;\n    inv_sbox[67] = 8'h29;\n    inv_sbox[68] = 8'hc5;\n    inv_sbox[69] = 8'h59;\n    inv_sbox[70] = 8'h5a;\n    inv_sbox[71] = 8'h48;\n    inv_sbox[72] = 8'h08;\n    inv_sbox[73] = 8'h85;\n    inv_sbox[74] = 8'h94;\n    inv_sbox[75] = 8'h3b;\n    inv_sbox[76] = 8'h3d;\n    inv_sbox[77] = 8'hbe;\n    inv_sbox[78] = 8'h3f;\n    inv_sbox[79] = 8'hfa;\n    inv_sbox[80] = 8'h01;\n    inv_sbox[81] = 8'h31;\n    inv_sbox[82] = 8'h74;\n    inv_sbox[83] = 8'h16;\n    inv_sbox[84] = 8'h98;\n    inv_sbox[85] = 8'h88;\n    inv_sbox[86] = 8'h0d;\n    inv_sbox[87] = 8'hba;\n    inv_sbox[88] = 8'h77;\n    inv_sbox[89] = 8'h18;\n    inv_sbox[90] = 8'h69;\n    inv_sbox[91] = 8'h09;\n    inv_sbox[92] = 8'h5e;\n    inv_sbox[93] = 8'h6f;\n    inv_sbox[94] = 8'h8c;\n    inv_sbox[95] = 8'h1f;\n    inv_sbox[96] = 8'h25;\n    inv_sbox[97] = 8'h9d;\n    inv_sbox[98] = 8'h83;\n    inv_sbox[99] = 8'h2e;\n    inv_sbox[100] = 8'h51;\n    inv_sbox[101] = 8'h22;\n    inv_sbox[102] = 8'h28;\n    inv_sbox[103] = 8'h67;\n    inv_sbox[104] = 8'h10;\n    inv_sbox[105] = 8'h3c;\n    inv_sbox[106] = 8'h72;\n    inv_sbox[107] = 8'hc0;\n    inv_sbox[108] = 8'h81;\n    inv_sbox[109] = 8'hf6;\n    inv_sbox[110] = 8'h98;\n    inv_sbox[111] = 8'h1d;\n    inv_sbox[112] = 8'hfc;\n    inv_sbox[113] = 8'h7a;\n    inv_sbox[114] = 8'h89;\n    inv_sbox[115] = 8'h03;\n    inv_sbox[116] = 8'h2f;\n    inv_sbox[117] = 8'h5c;\n    inv_sbox[118] = 8'h0f;\n    inv_sbox[119] = 8'h61;\n    inv_sbox[120] = 8'h35;\n    inv_sbox[121] = 8'h57;\n    inv_sbox[122] = 8'hb5;\n    inv_sbox[123] = 8'h5f;\n    inv_sbox[124] = 8'hbc;\n    inv_sbox[125] = 8'h95;\n    inv_sbox[126] = 8'h4c;\n    inv_sbox[127] = 8'h08;\n    inv_sbox[128] = 8'h6c;\n    inv_sbox[129] = 8'hf8;\n    inv_sbox[130] = 8'h65;\n    inv_sbox[131] = 8'h9a;\n    inv_sbox[132] = 8'h42;\n    inv_sbox[133] = 8'h6e;\n    inv_sbox[134] = 8'h0b;\n    inv_sbox[135] = 8'h8a;\n    inv_sbox[136] = 8'h2b;\n    inv_sbox[137] = 8'h15;\n    inv_sbox[138] = 8'h96;\n    inv_sbox[139] = 8'h4a;\n    inv_sbox[140] = 8'h5d;\n    inv_sbox[141] = 8'h9f;\n    inv_sbox[142] = 8'h07;\n    inv_sbox[143] = 8'h34;\n    inv_sbox[144] = 8'h1a;\n    inv_sbox[145] = 8'h6d;\n    inv_sbox[146] = 8'h8b;\n    inv_sbox[147] = 8'h33;\n    inv_sbox[148] = 8'hfd;\n    inv_sbox[149] = 8'h63;\n    inv_sbox[150] = 8'h9e;\n    inv_sbox[151] = 8'h9b;\n    inv_sbox[152] = 8'h55;\n    inv_sbox[153] = 8'h2c;\n    inv_sbox[154] = 8'h9c;\n    inv_sbox[155] = 8'h75;\n    inv_sbox[156] = 8'h59;\n    inv_sbox[157] = 8'h87;\n    inv_sbox[158] = 8'h1f;\n    inv_sbox[159] = 8'h8f;\n    inv_sbox[160] = 8'h70;\n    inv_sbox[161] = 8'h3a;\n    inv_sbox[162] = 8'h3e;\n    inv_sbox[163] = 8'h19;\n    inv_sbox[164] = 8'h7c;\n    inv_sbox[165] = 8'h1e;\n    inv_sbox[166] = 8'h32;\n    inv_sbox[167] = 8'h6a;\n    inv_sbox[168] = 8'h27;\n    inv_sbox[169] = 8'h5b;\n    inv_sbox[170] = 8'h6f;\n    inv_sbox[171] = 8'h0a;\n    inv_sbox[172] = 8'h68;\n    inv_sbox[173] = 8'h8e;\n    inv_sbox[174] = 8'h4d;\n    inv_sbox[175] = 8'h93;\n    inv_sbox[176] = 8'h01;\n    inv_sbox[177] = 8'h0e;\n    inv_sbox[178] = 8'h8d;\n    inv_sbox[179] = 8'h73;\n    inv_sbox[180] = 8'h05;\n    inv_sbox[181] = 8'h6b;\n    inv_sbox[182] = 8'h9d;\n    inv_sbox[183] = 8'h45;\n    inv_sbox[184] = 8'h00;\n    inv_sbox[185] = 8'h9f;\n    inv_sbox[186] = 8'h7e;\n    inv_sbox[187] = 8'h4b;\n    inv_sbox[188] = 8'hf4;\n    inv_sbox[189] = 8'h43;\n    inv_sbox[190] = 8'h78;\n    inv_sbox[191] = 8'h21;\n    inv_sbox[192] = 8'h50;\n    inv_sbox[193] = 8'h54;\n    inv_sbox[194] = 8'h17;\n    inv_sbox[195] = 8'h08;\n    inv_sbox[196] = 8'h07;\n    inv_sbox[197] = 8'h11;\n    inv_sbox[198] = 8'h0f;\n    inv_sbox[199] = 8'h4f;\n    inv_sbox[200] = 8'hdc;\n    inv_sbox[201] = 8'h22;\n    inv_sbox[202] = 8'h61;\n    inv_sbox[203] = 8'h5a;\n    inv_sbox[204] = 8'h31;\n    inv_sbox[205] = 8'h60;\n    inv_sbox[206] = 8'h12;\n    inv_sbox[207] = 8'h6d;\n    inv_sbox[208] = 8'h02;\n    inv_sbox[209] = 8'h6c;\n    inv_sbox[210] = 8'h2b;\n    inv_sbox[211] = 8'h65;\n    inv_sbox[212] = 8'h8f;\n    inv_sbox[213] = 8'h1c;\n    inv_sbox[214] = 8'h3f;\n    inv_sbox[215] = 8'h7d;\n    inv_sbox[216] = 8'h3a;\n    inv_sbox[217] = 8'h80;\n    inv_sbox[218] = 8'h7f;\n    inv_sbox[219] = 8'h87;\n    inv_sbox[220] = 8'hfc;\n    inv_sbox[221] = 8'h41;\n    inv_sbox[222] = 8'h1a;\n    inv_sbox[223] = 8'h1d;\n    inv_sbox[224] = 8'h9a;\n    inv_sbox[225] = 8'h09;\n    inv_sbox[226] = 8'h62;\n    inv_sbox[227] = 8'h20;\n    inv_sbox[228] = 8'h71;\n    inv_sbox[229] = 8'h5f;\n    inv_sbox[230] = 8'h6e;\n    inv_sbox[231] = 8'h3e;\n    inv_sbox[232] = 8'h28;\n    inv_sbox[233] = 8'h5e;\n    inv_sbox[234] = 8'h15;\n    inv_sbox[235] = 8'h46;\n    inv_sbox[236] = 8'h94;\n    inv_sbox[237] = 8'h4e;\n    inv_sbox[238] = 8'h49;\n    inv_sbox[239] = 8'hf7;\n    inv_sbox[240] = 8'h24;\n    inv_sbox[241] = 8'h3c;\n    inv_sbox[242] = 8'h18;\n    inv_sbox[243] = 8'h8b;\n    inv_sbox[244] = 8'h38;\n    inv_sbox[245] = 8'h45;\n    inv_sbox[246] = 8'h36;\n    inv_sbox[247] = 8'h51;\n    inv_sbox[248] = 8'h2a;\n    inv_sbox[249] = 8'h1e;\n    inv_sbox[250] = 8'h7a;\n    inv_sbox[251] = 8'h69;\n    inv_sbox[252] = 8'h13;\n    inv_sbox[253] = 8'hf2;\n    inv_sbox[254] = 8'h97;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Use the lookup table to get the inverse S-box output\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 12, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h96;\n    inv_sbox[7]  = 8'h36;\n    inv_sbox[8]  = 8'h8c;\n    inv_sbox[9]  = 8'h8f;\n    inv_sbox[10] = 8'h70;\n    inv_sbox[11] = 8'hb2;\n    inv_sbox[12] = 8'h66;\n    inv_sbox[13] = 8'h48;\n    inv_sbox[14] = 8'h03;\n    inv_sbox[15] = 8'h60;\n    inv_sbox[16] = 8'h6e;\n    inv_sbox[17] = 8'h14;\n    inv_sbox[18] = 8'h3c;\n    inv_sbox[19] = 8'h5e;\n    inv_sbox[20] = 8'h0e;\n    inv_sbox[21] = 8'h84;\n    inv_sbox[22] = 8'h08;\n    inv_sbox[23] = 8'h6a;\n    inv_sbox[24] = 8'h9a;\n    inv_sbox[25] = 8'h27;\n    inv_sbox[26] = 8'h3b;\n    inv_sbox[27] = 8'h5b;\n    inv_sbox[28] = 8'h75;\n    inv_sbox[29] = 8'h18;\n    inv_sbox[30] = 8'h62;\n    inv_sbox[31] = 8'h29;\n    inv_sbox[32] = 8'h51;\n    inv_sbox[33] = 8'h9d;\n    inv_sbox[34] = 8'h65;\n    inv_sbox[35] = 8'h1a;\n    inv_sbox[36] = 8'h1c;\n    inv_sbox[37] = 8'hf9;\n    inv_sbox[38] = 8'h56;\n    inv_sbox[39] = 8'h47;\n    inv_sbox[40] = 8'hc3;\n    inv_sbox[41] = 8'h7a;\n    inv_sbox[42] = 8'h85;\n    inv_sbox[43] = 8'h98;\n    inv_sbox[44] = 8'h6f;\n    inv_sbox[45] = 8'h25;\n    inv_sbox[46] = 8'h2c;\n    inv_sbox[47] = 8'h5d;\n    inv_sbox[48] = 8'h59;\n    inv_sbox[49] = 8'hf2;\n    inv_sbox[50] = 8'h7c;\n    inv_sbox[51] = 8'h45;\n    inv_sbox[52] = 8'h7f;\n    inv_sbox[53] = 8'h4f;\n    inv_sbox[54] = 8'h41;\n    inv_sbox[55] = 8'h68;\n    inv_sbox[56] = 8'h5a;\n    inv_sbox[57] = 8'h2b;\n    inv_sbox[58] = 8'hf0;\n    inv_sbox[59] = 8'h12;\n    inv_sbox[60] = 8'h5f;\n    inv_sbox[61] = 8'h22;\n    inv_sbox[62] = 8'h15;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h7d;\n    inv_sbox[65] = 8'h7b;\n    inv_sbox[66] = 8'h1f;\n    inv_sbox[67] = 8'hbc;\n    inv_sbox[68] = 8'h4e;\n    inv_sbox[69] = 8'h19;\n    inv_sbox[70] = 8'hbb;\n    inv_sbox[71] = 8'h34;\n    inv_sbox[72] = 8'h7e;\n    inv_sbox[73] = 8'h2a;\n    inv_sbox[74] = 8'h6b;\n    inv_sbox[75] = 8'h40;\n    inv_sbox[76] = 8'h44;\n    inv_sbox[77] = 8'hac;\n    inv_sbox[78] = 8'h9f;\n    inv_sbox[79] = 8'hfa;\n    inv_sbox[80] = 8'hbe;\n    inv_sbox[81] = 8'h4b;\n    inv_sbox[82] = 8'hfb;\n    inv_sbox[83] = 8'h1d;\n    inv_sbox[84] = 8'h21;\n    inv_sbox[85] = 8'h58;\n    inv_sbox[86] = 8'h6d;\n    inv_sbox[87] = 8'h01;\n    inv_sbox[88] = 8'haf;\n    inv_sbox[89] = 8'hbd;\n    inv_sbox[90] = 8'h17;\n    inv_sbox[91] = 8'h99;\n    inv_sbox[92] = 8'h24;\n    inv_sbox[93] = 8'h3f;\n    inv_sbox[94] = 8'h79;\n    inv_sbox[95] = 8'h49;\n    inv_sbox[96] = 8'h4c;\n    inv_sbox[97] = 8'h02;\n    inv_sbox[98] = 8'h8a;\n    inv_sbox[99] = 8'h8b;\n    inv_sbox[100] = 8'h8e;\n    inv_sbox[101] = 8'h28;\n    inv_sbox[102] = 8'h54;\n    inv_sbox[103] = 8'hdf;\n    inv_sbox[104] = 8'h9b;\n    inv_sbox[105] = 8'h9c;\n    inv_sbox[106] = 8'hdc;\n    inv_sbox[107] = 8'h13;\n    inv_sbox[108] = 8'h30;\n    inv_sbox[109] = 8'h39;\n    inv_sbox[110] = 8'h33;\n    inv_sbox[111] = 8'h10;\n    inv_sbox[112] = 8'h8d;\n    inv_sbox[113] = 8'h73;\n    inv_sbox[114] = 8'hab;\n    inv_sbox[115] = 8'h23;\n    inv_sbox[116] = 8'h55;\n    inv_sbox[117] = 8'hf1;\n    inv_sbox[118] = 8'h35;\n    inv_sbox[119] = 8'h76;\n    inv_sbox[120] = 8'h9e;\n    inv_sbox[121] = 8'h9a;\n    inv_sbox[122] = 8'hf8;\n    inv_sbox[123] = 8'hbc;\n    inv_sbox[124] = 8'h11;\n    inv_sbox[125] = 8'h4d;\n    inv_sbox[126] = 8'h20;\n    inv_sbox[127] = 8'h71;\n    inv_sbox[128] = 8'h64;\n    inv_sbox[129] = 8'h3a;\n    inv_sbox[130] = 8'h6c;\n    inv_sbox[131] = 8'h5c;\n    inv_sbox[132] = 8'hce;\n    inv_sbox[133] = 8'h07;\n    inv_sbox[134] = 8'h81;\n    inv_sbox[135] = 8'hf5;\n    inv_sbox[136] = 8'h1b;\n    inv_sbox[137] = 8'h59;\n    inv_sbox[138] = 8'h63;\n    inv_sbox[139] = 8'hb9;\n    inv_sbox[140] = 8'h7a;\n    inv_sbox[141] = 8'h77;\n    inv_sbox[142] = 8'h26;\n    inv_sbox[143] = 8'h53;\n    inv_sbox[144] = 8'hf7;\n    inv_sbox[145] = 8'hed;\n    inv_sbox[146] = 8'hcc;\n    inv_sbox[147] = 8'h69;\n    inv_sbox[148] = 8'h61;\n    inv_sbox[149] = 8'h31;\n    inv_sbox[150] = 8'hee;\n    inv_sbox[151] = 8'h4a;\n    inv_sbox[152] = 8'h88;\n    inv_sbox[153] = 8'hd9;\n    inv_sbox[154] = 8'h67;\n    inv_sbox[155] = 8'hde;\n    inv_sbox[156] = 8'h91;\n    inv_sbox[157] = 8'h0c;\n    inv_sbox[158] = 8'h97;\n    inv_sbox[159] = 8'h72;\n    inv_sbox[160] = 8'h16;\n    inv_sbox[161] = 8'h6b;\n    inv_sbox[162] = 8'hcf;\n    inv_sbox[163] = 8'h9d;\n    inv_sbox[164] = 8'had;\n    inv_sbox[165] = 8'h74;\n    inv_sbox[166] = 8'h2f;\n    inv_sbox[167] = 8'h82;\n    inv_sbox[168] = 8'h42;\n    inv_sbox[169] = 8'h32;\n    inv_sbox[170] = 8'h3d;\n    inv_sbox[171] = 8'h87;\n    inv_sbox[172] = 8'hfe;\n    inv_sbox[173] = 8'h95;\n    inv_sbox[174] = 8'h21;\n    inv_sbox[175] = 8'hcd;\n    inv_sbox[176] = 8'h0a;\n    inv_sbox[177] = 8'h90;\n    inv_sbox[178] = 8'h05;\n    inv_sbox[179] = 8'h2e;\n    inv_sbox[180] = 8'h94;\n    inv_sbox[181] = 8'h40;\n    inv_sbox[182] = 8'h6a;\n    inv_sbox[183] = 8'h79;\n    inv_sbox[184] = 8'h92;\n    inv_sbox[185] = 8'h0d;\n    inv_sbox[186] = 8'h38;\n    inv_sbox[187] = 8'hbc;\n    inv_sbox[188] = 8'h46;\n    inv_sbox[189] = 8'h1e;\n    inv_sbox[190] = 8'h89;\n    inv_sbox[191] = 8'hc5;\n    inv_sbox[192] = 8'h4f;\n    inv_sbox[193] = 8'h29;\n    inv_sbox[194] = 8'h93;\n    inv_sbox[195] = 8'h62;\n    inv_sbox[196] = 8'h35;\n    inv_sbox[197] = 8'h8f;\n    inv_sbox[198] = 8'h49;\n    inv_sbox[199] = 8'h0b;\n    inv_sbox[200] = 8'h67;\n    inv_sbox[201] = 8'h9f;\n    inv_sbox[202] = 8'h10;\n    inv_sbox[203] = 8'h75;\n    inv_sbox[204] = 8'hf3;\n    inv_sbox[205] = 8'h43;\n    inv_sbox[206] = 8'h3e;\n    inv_sbox[207] = 8'hae;\n    inv_sbox[208] = 8'h68;\n    inv_sbox[209] = 8'h9b;\n    inv_sbox[210] = 8'h48;\n    inv_sbox[211] = 8'h26;\n    inv_sbox[212] = 8'h53;\n    inv_sbox[213] = 8'h8c;\n    inv_sbox[214] = 8'hdb;\n    inv_sbox[215] = 8'h8b;\n    inv_sbox[216] = 8'h7f;\n    inv_sbox[217] = 8'h84;\n    inv_sbox[218] = 8'h8d;\n    inv_sbox[219] = 8'h6e;\n    inv_sbox[220] = 8'h3c;\n    inv_sbox[221] = 8'h61;\n    inv_sbox[222] = 8'h17;\n    inv_sbox[223] = 8'h42;\n    inv_sbox[224] = 8'h20;\n    inv_sbox[225] = 8'h24;\n    inv_sbox[226] = 8'h12;\n    inv_sbox[227] = 8'h4d;\n    inv_sbox[228] = 8'hfa;\n    inv_sbox[229] = 8'h34;\n    inv_sbox[230] = 8'h21;\n    inv_sbox[231] = 8'h11;\n    inv_sbox[232] = 8'h02;\n    inv_sbox[233] = 8'h4b;\n    inv_sbox[234] = 8'h80;\n    inv_sbox[235] = 8'h7c;\n    inv_sbox[236] = 8'h95;\n    inv_sbox[237] = 8'h5d;\n    inv_sbox[238] = 8'h70;\n    inv_sbox[239] = 8'h6f;\n    inv_sbox[240] = 8'h66;\n    inv_sbox[241] = 8'h7e;\n    inv_sbox[242] = 8'h8e;\n    inv_sbox[243] = 8'h0e;\n    inv_sbox[244] = 8'h65;\n    inv_sbox[245] = 8'h9e;\n    inv_sbox[246] = 8'h9c;\n    inv_sbox[247] = 8'h15;\n    inv_sbox[248] = 8'h78;\n    inv_sbox[249] = 8'h2b;\n    inv_sbox[250] = 8'h4e;\n    inv_sbox[251] = 8'hce;\n    inv_sbox[252] = 8'h5a;\n    inv_sbox[253] = 8'h14;\n    inv_sbox[254] = 8'h5e;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Assign output from lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 13, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hcb;\n    inv_sbox[9]  = 8'h20;\n    inv_sbox[10] = 8'h43;\n    inv_sbox[11] = 8'h3d;\n    inv_sbox[12] = 8'h8f;\n    inv_sbox[13] = 8'h8e;\n    inv_sbox[14] = 8'h95;\n    inv_sbox[15] = 8'h87;\n    inv_sbox[16] = 8'h79;\n    inv_sbox[17] = 8'h6e;\n    inv_sbox[18] = 8'h63;\n    inv_sbox[19] = 8'h21;\n    inv_sbox[20] = 8'h68;\n    inv_sbox[21] = 8'h3e;\n    inv_sbox[22] = 8'h2f;\n    inv_sbox[23] = 8'h74;\n    inv_sbox[24] = 8'h19;\n    inv_sbox[25] = 8'h7d;\n    inv_sbox[26] = 8'h8a;\n    inv_sbox[27] = 8'h84;\n    inv_sbox[28] = 8'h50;\n    inv_sbox[29] = 8'h47;\n    inv_sbox[30] = 8'h28;\n    inv_sbox[31] = 8'h4c;\n    inv_sbox[32] = 8'h07;\n    inv_sbox[33] = 8'h44;\n    inv_sbox[34] = 8'h6d;\n    inv_sbox[35] = 8'h8b;\n    inv_sbox[36] = 8'haf;\n    inv_sbox[37] = 8'h70;\n    inv_sbox[38] = 8'h3f;\n    inv_sbox[39] = 8'h02;\n    inv_sbox[40] = 8'h5e;\n    inv_sbox[41] = 8'h48;\n    inv_sbox[42] = 8'h65;\n    inv_sbox[43] = 8'h8d;\n    inv_sbox[44] = 8'h4e;\n    inv_sbox[45] = 8'h6a;\n    inv_sbox[46] = 8'h61;\n    inv_sbox[47] = 8'h59;\n    inv_sbox[48] = 8'h4f;\n    inv_sbox[49] = 8'h78;\n    inv_sbox[50] = 8'h71;\n    inv_sbox[51] = 8'h6f;\n    inv_sbox[52] = 8'h0d;\n    inv_sbox[53] = 8'h97;\n    inv_sbox[54] = 8'h29;\n    inv_sbox[55] = 8'h10;\n    inv_sbox[56] = 8'h83;\n    inv_sbox[57] = 8'h1d;\n    inv_sbox[58] = 8'h3c;\n    inv_sbox[59] = 8'h5b;\n    inv_sbox[60] = 8'h17;\n    inv_sbox[61] = 8'h2e;\n    inv_sbox[62] = 8'h1f;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h15;\n    inv_sbox[65] = 8'h4b;\n    inv_sbox[66] = 8'h5a;\n    inv_sbox[67] = 8'h30;\n    inv_sbox[68] = 8'h6b;\n    inv_sbox[69] = 8'h5f;\n    inv_sbox[70] = 8'h0c;\n    inv_sbox[71] = 8'h91;\n    inv_sbox[72] = 8'h85;\n    inv_sbox[73] = 8'h49;\n    inv_sbox[74] = 8'h8c;\n    inv_sbox[75] = 8'h2a;\n    inv_sbox[76] = 8'h1e;\n    inv_sbox[77] = 8'h3a;\n    inv_sbox[78] = 8'h4d;\n    inv_sbox[79] = 8'h9a;\n    inv_sbox[80] = 8'h6c;\n    inv_sbox[81] = 8'h14;\n    inv_sbox[82] = 8'h08;\n    inv_sbox[83] = 8'h9f;\n    inv_sbox[84] = 8'h5d;\n    inv_sbox[85] = 8'h2c;\n    inv_sbox[86] = 8'h7f;\n    inv_sbox[87] = 8'h0a;\n    inv_sbox[88] = 8'h81;\n    inv_sbox[89] = 8'h12;\n    inv_sbox[90] = 8'h60;\n    inv_sbox[91] = 8'h86;\n    inv_sbox[92] = 8'h7b;\n    inv_sbox[93] = 8'h1a;\n    inv_sbox[94] = 8'h17;\n    inv_sbox[95] = 8'h98;\n    inv_sbox[96] = 8'hfd;\n    inv_sbox[97] = 8'h24;\n    inv_sbox[98] = 8'h3b;\n    inv_sbox[99] = 8'h62;\n    inv_sbox[100] = 8'h72;\n    inv_sbox[101] = 8'h8f;\n    inv_sbox[102] = 8'h6e;\n    inv_sbox[103] = 8'h1c;\n    inv_sbox[104] = 8'h92;\n    inv_sbox[105] = 8'h41;\n    inv_sbox[106] = 8'h9d;\n    inv_sbox[107] = 8'h5c;\n    inv_sbox[108] = 8'h45;\n    inv_sbox[109] = 8'h00;\n    inv_sbox[110] = 8'h15;\n    inv_sbox[111] = 8'h4b;\n    inv_sbox[112] = 8'h5a;\n    inv_sbox[113] = 8'h30;\n    inv_sbox[114] = 8'h6b;\n    inv_sbox[115] = 8'h5f;\n    inv_sbox[116] = 8'h0c;\n    inv_sbox[117] = 8'h91;\n    inv_sbox[118] = 8'h85;\n    inv_sbox[119] = 8'h49;\n    inv_sbox[120] = 8'h8c;\n    inv_sbox[121] = 8'h2a;\n    inv_sbox[122] = 8'h1e;\n    inv_sbox[123] = 8'h3a;\n    inv_sbox[124] = 8'h4d;\n    inv_sbox[125] = 8'h9a;\n    inv_sbox[126] = 8'h6c;\n    inv_sbox[127] = 8'h14;\n    inv_sbox[128] = 8'h08;\n    inv_sbox[129] = 8'h9f;\n    inv_sbox[130] = 8'h5d;\n    inv_sbox[131] = 8'h2c;\n    inv_sbox[132] = 8'h7f;\n    inv_sbox[133] = 8'h0a;\n    inv_sbox[134] = 8'h81;\n    inv_sbox[135] = 8'h12;\n    inv_sbox[136] = 8'h60;\n    inv_sbox[137] = 8'h86;\n    inv_sbox[138] = 8'h7b;\n    inv_sbox[139] = 8'h1a;\n    inv_sbox[140] = 8'h17;\n    inv_sbox[141] = 8'h98;\n    inv_sbox[142] = 8'hfd;\n    inv_sbox[143] = 8'h24;\n    inv_sbox[144] = 8'h3b;\n    inv_sbox[145] = 8'h62;\n    inv_sbox[146] = 8'h72;\n    inv_sbox[147] = 8'h8f;\n    inv_sbox[148] = 8'h6e;\n    inv_sbox[149] = 8'h1c;\n    inv_sbox[150] = 8'h92;\n    inv_sbox[151] = 8'h41;\n    inv_sbox[152] = 8'h9d;\n    inv_sbox[153] = 8'h5c;\n    inv_sbox[154] = 8'h45;\n    inv_sbox[155] = 8'h00;\n    inv_sbox[156] = 8'h15;\n    inv_sbox[157] = 8'h4b;\n    inv_sbox[158] = 8'h5a;\n    inv_sbox[159] = 8'h30;\n    inv_sbox[160] = 8'h6b;\n    inv_sbox[161] = 8'h5f;\n    inv_sbox[162] = 8'h0c;\n    inv_sbox[163] = 8'h91;\n    inv_sbox[164] = 8'h85;\n    inv_sbox[165] = 8'h49;\n    inv_sbox[166] = 8'h8c;\n    inv_sbox[167] = 8'h2a;\n    inv_sbox[168] = 8'h1e;\n    inv_sbox[169] = 8'h3a;\n    inv_sbox[170] = 8'h4d;\n    inv_sbox[171] = 8'h9a;\n    inv_sbox[172] = 8'h6c;\n    inv_sbox[173] = 8'h14;\n    inv_sbox[174] = 8'h08;\n    inv_sbox[175] = 8'h9f;\n    inv_sbox[176] = 8'h5d;\n    inv_sbox[177] = 8'h2c;\n    inv_sbox[178] = 8'h7f;\n    inv_sbox[179] = 8'h0a;\n    inv_sbox[180] = 8'h81;\n    inv_sbox[181] = 8'h12;\n    inv_sbox[182] = 8'h60;\n    inv_sbox[183] = 8'h86;\n    inv_sbox[184] = 8'h7b;\n    inv_sbox[185] = 8'h1a;\n    inv_sbox[186] = 8'h17;\n    inv_sbox[187] = 8'h98;\n    inv_sbox[188] = 8'hfd;\n    inv_sbox[189] = 8'h24;\n    inv_sbox[190] = 8'h3b;\n    inv_sbox[191] = 8'h62;\n    inv_sbox[192] = 8'h72;\n    inv_sbox[193] = 8'h8f;\n    inv_sbox[194] = 8'h6e;\n    inv_sbox[195] = 8'h1c;\n    inv_sbox[196] = 8'h92;\n    inv_sbox[197] = 8'h41;\n    inv_sbox[198] = 8'h9d;\n    inv_sbox[199] = 8'h5c;\n    inv_sbox[200] = 8'h45;\n    inv_sbox[201] = 8'h00;\n    inv_sbox[202] = 8'h15;\n    inv_sbox[203] = 8'h4b;\n    inv_sbox[204] = 8'h5a;\n    inv_sbox[205] = 8'h30;\n    inv_sbox[206] = 8'h6b;\n    inv_sbox[207] = 8'h5f;\n    inv_sbox[208] = 8'h0c;\n    inv_sbox[209] = 8'h91;\n    inv_sbox[210] = 8'h85;\n    inv_sbox[211] = 8'h49;\n    inv_sbox[212] = 8'h8c;\n    inv_sbox[213] = 8'h2a;\n    inv_sbox[214] = 8'h1e;\n    inv_sbox[215] = 8'h3a;\n    inv_sbox[216] = 8'h4d;\n    inv_sbox[217] = 8'h9a;\n    inv_sbox[218] = 8'h6c;\n    inv_sbox[219] = 8'h14;\n    inv_sbox[220] = 8'h08;\n    inv_sbox[221] = 8'h9f;\n    inv_sbox[222] = 8'h5d;\n    inv_sbox[223] = 8'h2c;\n    inv_sbox[224] = 8'h7f;\n    inv_sbox[225] = 8'h0a;\n    inv_sbox[226] = 8'h81;\n    inv_sbox[227] = 8'h12;\n    inv_sbox[228] = 8'h60;\n    inv_sbox[229] = 8'h86;\n    inv_sbox[230] = 8'h7b;\n    inv_sbox[231] = 8'h1a;\n    inv_sbox[232] = 8'h17;\n    inv_sbox[233] = 8'h98;\n    inv_sbox[234] = 8'hfd;\n    inv_sbox[235] = 8'h24;\n    inv_sbox[236] = 8'h3b;\n    inv_sbox[237] = 8'h62;\n    inv_sbox[238] = 8'h72;\n    inv_sbox[239] = 8'h8f;\n    inv_sbox[240] = 8'h6e;\n    inv_sbox[241] = 8'h1c;\n    inv_sbox[242] = 8'h92;\n    inv_sbox[243] = 8'h41;\n    inv_sbox[244] = 8'h9d;\n    inv_sbox[245] = 8'h5c;\n    inv_sbox[246] = 8'h45;\n    inv_sbox[247] = 8'h00;\n    inv_sbox[248] = 8'h15;\n    inv_sbox[249] = 8'h4b;\n    inv_sbox[250] = 8'h5a;\n    inv_sbox[251] = 8'h30;\n    inv_sbox[252] = 8'h6b;\n    inv_sbox[253] = 8'h5f;\n    inv_sbox[254] = 8'h0c;\n    inv_sbox[255] = 8'h91;\nend\n\n// Output the inverse S-box value\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 14, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbc;\n    inv_sbox[9]  = 8'h72;\n    inv_sbox[10] = 8'hc0;\n    inv_sbox[11] = 8'h7d;\n    inv_sbox[12] = 8'hfb;\n    inv_sbox[13] = 8'hf7;\n    inv_sbox[14] = 8'h89;\n    inv_sbox[15] = 8'h16;\n    inv_sbox[16] = 8'h18;\n    inv_sbox[17] = 8'h98;\n    inv_sbox[18] = 8'h05;\n    inv_sbox[19] = 8'h2f;\n    inv_sbox[20] = 8'h3c;\n    inv_sbox[21] = 8'h22;\n    inv_sbox[22] = 8'h51;\n    inv_sbox[23] = 8'h45;\n    inv_sbox[24] = 8'h5e;\n    inv_sbox[25] = 8'h6c;\n    inv_sbox[26] = 8'h54;\n    inv_sbox[27] = 8'h4c;\n    inv_sbox[28] = 8'h3f;\n    inv_sbox[29] = 8'h74;\n    inv_sbox[30] = 8'h33;\n    inv_sbox[31] = 8'h53;\n    inv_sbox[32] = 8'h8d;\n    inv_sbox[33] = 8'h95;\n    inv_sbox[34] = 8'h56;\n    inv_sbox[35] = 8'hac;\n    inv_sbox[36] = 8'h4b;\n    inv_sbox[37] = 8'h82;\n    inv_sbox[38] = 8'h7c;\n    inv_sbox[39] = 8'h1a;\n    inv_sbox[40] = 8'h6a;\n    inv_sbox[41] = 8'h41;\n    inv_sbox[42] = 8'hfd;\n    inv_sbox[43] = 8'h01;\n    inv_sbox[44] = 8'h10;\n    inv_sbox[45] = 8'h13;\n    inv_sbox[46] = 8'h9c;\n    inv_sbox[47] = 8'h28;\n    inv_sbox[48] = 8'h4e;\n    inv_sbox[49] = 8'h3e;\n    inv_sbox[50] = 8'h08;\n    inv_sbox[51] = 8'h5a;\n    inv_sbox[52] = 8'h06;\n    inv_sbox[53] = 8'h78;\n    inv_sbox[54] = 8'h85;\n    inv_sbox[55] = 8'h9a;\n    inv_sbox[56] = 8'h08;\n    inv_sbox[57] = 8'h23;\n    inv_sbox[58] = 8'h55;\n    inv_sbox[59] = 8'h97;\n    inv_sbox[60] = 8'h17;\n    inv_sbox[61] = 8'h62;\n    inv_sbox[62] = 8'h04;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h7f;\n    inv_sbox[65] = 8'h19;\n    inv_sbox[66] = 8'h65;\n    inv_sbox[67] = 8'h9e;\n    inv_sbox[68] = 8'h5d;\n    inv_sbox[69] = 8'h24;\n    inv_sbox[70] = 8'h3b;\n    inv_sbox[71] = 8'h06;\n    inv_sbox[72] = 8'h7b;\n    inv_sbox[73] = 8'h0a;\n    inv_sbox[74] = 8'h81;\n    inv_sbox[75] = 8'h5f;\n    inv_sbox[76] = 8'h5c;\n    inv_sbox[77] = 8'h48;\n    inv_sbox[78] = 8'hcc;\n    inv_sbox[79] = 8'hcd;\n    inv_sbox[80] = 8'h0b;\n    inv_sbox[81] = 8'h76;\n    inv_sbox[82] = 8'h3a;\n    inv_sbox[83] = 8'h6e;\n    inv_sbox[84] = 8'h57;\n    inv_sbox[85] = 8'h63;\n    inv_sbox[86] = 8'h8e;\n    inv_sbox[87] = 8'h6b;\n    inv_sbox[88] = 8'h21;\n    inv_sbox[89] = 8'h44;\n    inv_sbox[90] = 8'h75;\n    inv_sbox[91] = 8'h4a;\n    inv_sbox[92] = 8'h94;\n    inv_sbox[93] = 8'h8f;\n    inv_sbox[94] = 8'h8b;\n    inv_sbox[95] = 8'h1d;\n    inv_sbox[96] = 8'h7e;\n    inv_sbox[97] = 8'h4f;\n    inv_sbox[98] = 8'h68;\n    inv_sbox[99] = 8'h39;\n    inv_sbox[100] = 8'h09;\n    inv_sbox[101] = 8'h99;\n    inv_sbox[102] = 8'h14;\n    inv_sbox[103] = 8'h7a;\n    inv_sbox[104] = 8'h9f;\n    inv_sbox[105] = 8'h9b;\n    inv_sbox[106] = 8'h77;\n    inv_sbox[107] = 8'h1b;\n    inv_sbox[108] = 8'h9d;\n    inv_sbox[109] = 8'hfc;\n    inv_sbox[110] = 8'h67;\n    inv_sbox[111] = 8'h30;\n    inv_sbox[112] = 8'h0f;\n    inv_sbox[113] = 8'h06;\n    inv_sbox[114] = 8'h96;\n    inv_sbox[115] = 8'h34;\n    inv_sbox[116] = 8'h0e;\n    inv_sbox[117] = 8'h79;\n    inv_sbox[118] = 8'h1c;\n    inv_sbox[119] = 8'h1e;\n    inv_sbox[120] = 8'h7d;\n    inv_sbox[121] = 8'h7c;\n    inv_sbox[122] = 8'h69;\n    inv_sbox[123] = 8'h8a;\n    inv_sbox[124] = 8'h02;\n    inv_sbox[125] = 8'haf;\n    inv_sbox[126] = 8'h8c;\n    inv_sbox[127] = 8'hd3;\n    inv_sbox[128] = 8'h6f;\n    inv_sbox[129] = 8'hfe;\n    inv_sbox[130] = 8'h2b;\n    inv_sbox[131] = 8'h59;\n    inv_sbox[132] = 8'h8d;\n    inv_sbox[133] = 8'h26;\n    inv_sbox[134] = 8'h6d;\n    inv_sbox[135] = 8'h64;\n    inv_sbox[136] = 8'h2a;\n    inv_sbox[137] = 8'h93;\n    inv_sbox[138] = 8'h05;\n    inv_sbox[139] = 8'h3e;\n    inv_sbox[140] = 8'h69;\n    inv_sbox[141] = 8'h66;\n    inv_sbox[142] = 8'h9a;\n    inv_sbox[143] = 8'h62;\n    inv_sbox[144] = 8'h61;\n    inv_sbox[145] = 8'h84;\n    inv_sbox[146] = 8'hf0;\n    inv_sbox[147] = 8'h46;\n    inv_sbox[148] = 8'h56;\n    inv_sbox[149] = 8'h47;\n    inv_sbox[150] = 8'h6e;\n    inv_sbox[151] = 8'h5b;\n    inv_sbox[152] = 8'h9e;\n    inv_sbox[153] = 8'h9c;\n    inv_sbox[154] = 8'h48;\n    inv_sbox[155] = 8'h4f;\n    inv_sbox[156] = 8'h52;\n    inv_sbox[157] = 8'h16;\n    inv_sbox[158] = 8'h2e;\n    inv_sbox[159] = 8'h5c;\n    inv_sbox[160] = 8'h14;\n    inv_sbox[161] = 8'h09;\n    inv_sbox[162] = 8'h40;\n    inv_sbox[163] = 8'haf;\n    inv_sbox[164] = 8'h92;\n    inv_sbox[165] = 8'h9d;\n    inv_sbox[166] = 8'h38;\n    inv_sbox[167] = 8'hf5;\n    inv_sbox[168] = 8'hbc;\n    inv_sbox[169] = 8'h0a;\n    inv_sbox[170] = 8'h08;\n    inv_sbox[171] = 8'h85;\n    inv_sbox[172] = 8'h45;\n    inv_sbox[173] = 8'h59;\n    inv_sbox[174] = 8'hfd;\n    inv_sbox[175] = 8'h53;\n    inv_sbox[176] = 8'h29;\n    inv_sbox[177] = 8'h2f;\n    inv_sbox[178] = 8'h8f;\n    inv_sbox[179] = 8'h55;\n    inv_sbox[180] = 8'h66;\n    inv_sbox[181] = 8'h31;\n    inv_sbox[182] = 8'h13;\n    inv_sbox[183] = 8'h7d;\n    inv_sbox[184] = 8'h2c;\n    inv_sbox[185] = 8'h18;\n    inv_sbox[186] = 8'h9b;\n    inv_sbox[187] = 8'h71;\n    inv_sbox[188] = 8'h11;\n    inv_sbox[189] = 8'h49;\n    inv_sbox[190] = 8'h1a;\n    inv_sbox[191] = 8'h41;\n    inv_sbox[192] = 8'h65;\n    inv_sbox[193] = 8'h94;\n    inv_sbox[194] = 8'h33;\n    inv_sbox[195] = 8'h10;\n    inv_sbox[196] = 8'h73;\n    inv_sbox[197] = 8'h51;\n    inv_sbox[198] = 8'h25;\n    inv_sbox[199] = 8'h79;\n    inv_sbox[200] = 8'h3f;\n    inv_sbox[201] = 8'h8e;\n    inv_sbox[202] = 8'h5a;\n    inv_sbox[203] = 8'hba;\n    inv_sbox[204] = 8'h16;\n    inv_sbox[205] = 8'h0c;\n    inv_sbox[206] = 8'h21;\n    inv_sbox[207] = 8'h79;\n    inv_sbox[208] = 8'h77;\n    inv_sbox[209] = 8'h9f;\n    inv_sbox[210] = 8'h54;\n    inv_sbox[211] = 8'h24;\n    inv_sbox[212] = 8'h8b;\n    inv_sbox[213] = 8'h65;\n    inv_sbox[214] = 8'h09;\n    inv_sbox[215] = 8'h5e;\n    inv_sbox[216] = 8'h1d;\n    inv_sbox[217] = 8'h63;\n    inv_sbox[218] = 8'h7c;\n    inv_sbox[219] = 8'h74;\n    inv_sbox[220] = 8'h1f;\n    inv_sbox[221] = 8'h46;\n    inv_sbox[222] = 8'h76;\n    inv_sbox[223] = 8'h7b;\n    inv_sbox[224] = 8'h9e;\n    inv_sbox[225] = 8'h0d;\n    inv_sbox[226] = 8'h4b;\n    inv_sbox[227] = 8'h15;\n    inv_sbox[228] = 8'h55;\n    inv_sbox[229] = 8'h89;\n    inv_sbox[230] = 8'h6a;\n    inv_sbox[231] = 8'h6d;\n    inv_sbox[232] = 8'h52;\n    inv_sbox[233] = 8'h60;\n    inv_sbox[234] = 8'hf4;\n    inv_sbox[235] = 8'hae;\n    inv_sbox[236] = 8'h7a;\n    inv_sbox[237] = 8'h1e;\n    inv_sbox[238] = 8'h58;\n    inv_sbox[239] = 8'h9b;\n    inv_sbox[240] = 8'h0f;\n    inv_sbox[241] = 8'h47;\n    inv_sbox[242] = 8'h68;\n    inv_sbox[243] = 8'h35;\n    inv_sbox[244] = 8'h4d;\n    inv_sbox[245] = 8'h4a;\n    inv_sbox[246] = 8'heb;\n    inv_sbox[247] = 8'hcf;\n    inv_sbox[248] = 8'h6c;\n    inv_sbox[249] = 8'h56;\n    inv_sbox[250] = 8'h97;\n    inv_sbox[251] = 8'h17;\n    inv_sbox[252] = 8'h44;\n    inv_sbox[253] = 8'h6f;\n    inv_sbox[254] = 8'h37;\n    inv_sbox[255] = 8'h3d;\nend\n\n// Assign output from lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 15, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h80;\n    inv_sbox[5] = 8'h93;\n    inv_sbox[6] = 8'h40;\n    inv_sbox[7] = 8'h66;\n    inv_sbox[8] = 8'h8b;\n    inv_sbox[9] = 8'h41;\n    inv_sbox[10] = 8'hc2;\n    inv_sbox[11] = 8'hae;\n    inv_sbox[12] = 8'h2a;\n    inv_sbox[13] = 8'h6f;\n    inv_sbox[14] = 8'h74;\n    inv_sbox[15] = 8'h28;\n    inv_sbox[16] = 8'h31;\n    inv_sbox[17] = 8'h11;\n    inv_sbox[18] = 8'h88;\n    inv_sbox[19] = 8'h59;\n    inv_sbox[20] = 8'h7c;\n    inv_sbox[21] = 8'h68;\n    inv_sbox[22] = 8'h07;\n    inv_sbox[23] = 8'hbb;\n    inv_sbox[24] = 8'h6a;\n    inv_sbox[25] = 8'h0d;\n    inv_sbox[26] = 8'h98;\n    inv_sbox[27] = 8'h81;\n    inv_sbox[28] = 8'h7d;\n    inv_sbox[29] = 8'h25;\n    inv_sbox[30] = 8'h50;\n    inv_sbox[31] = 8'h72;\n    inv_sbox[32] = 8'hf2;\n    inv_sbox[33] = 8'h3b;\n    inv_sbox[34] = 8'h39;\n    inv_sbox[35] = 8'h33;\n    inv_sbox[36] = 8'h4f;\n    inv_sbox[37] = 8'hde;\n    inv_sbox[38] = 8'h3e;\n    inv_sbox[39] = 8'h71;\n    inv_sbox[40] = 8'h2c;\n    inv_sbox[41] = 8'h9b;\n    inv_sbox[42] = 8'h9f;\n    inv_sbox[43] = 8'h95;\n    inv_sbox[44] = 8'h8c;\n    inv_sbox[45] = 8'h58;\n    inv_sbox[46] = 8'h05;\n    inv_sbox[47] = 8'hb9;\n    inv_sbox[48] = 8'h5a;\n    inv_sbox[49] = 8'h92;\n    inv_sbox[50] = 8'hc6;\n    inv_sbox[51] = 8'h36;\n    inv_sbox[52] = 8'h10;\n    inv_sbox[53] = 8'h17;\n    inv_sbox[54] = 8'h69;\n    inv_sbox[55] = 8'h83;\n    inv_sbox[56] = 8'h45;\n    inv_sbox[57] = 8'h97;\n    inv_sbox[58] = 8'h4d;\n    inv_sbox[59] = 8'hac;\n    inv_sbox[60] = 8'h5c;\n    inv_sbox[61] = 8'h7f;\n    inv_sbox[62] = 8'h48;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h3a;\n    inv_sbox[65] = 8'h6e;\n    inv_sbox[66] = 8'h5f;\n    inv_sbox[67] = 8'h91;\n    inv_sbox[68] = 8'h85;\n    inv_sbox[69] = 8'h49;\n    inv_sbox[70] = 8'h23;\n    inv_sbox[71] = 8'h1c;\n    inv_sbox[72] = 8'h1a;\n    inv_sbox[73] = 8'hdf;\n    inv_sbox[74] = 8'h43;\n    inv_sbox[75] = 8'h9d;\n    inv_sbox[76] = 8'h38;\n    inv_sbox[77] = 8'h3f;\n    inv_sbox[78] = 8'h5d;\n    inv_sbox[79] = 8'hfc;\n    inv_sbox[80] = 8'hfe;\n    inv_sbox[81] = 8'h8a;\n    inv_sbox[82] = 8'h89;\n    inv_sbox[83] = 8'h47;\n    inv_sbox[84] = 8'h62;\n    inv_sbox[85] = 8'hca;\n    inv_sbox[86] = 8'h54;\n    inv_sbox[87] = 8'hba;\n    inv_sbox[88] = 8'h69;\n    inv_sbox[89] = 8'h16;\n    inv_sbox[90] = 8'h3d;\n    inv_sbox[91] = 8'h2e;\n    inv_sbox[92] = 8'h87;\n    inv_sbox[93] = 8'h92;\n    inv_sbox[94] = 8'had;\n    inv_sbox[95] = 8'h57;\n    inv_sbox[96] = 8'hcb;\n    inv_sbox[97] = 8'h76;\n    inv_sbox[98] = 8'h65;\n    inv_sbox[99] = 8'h6c;\n    inv_sbox[100] = 8'h5b;\n    inv_sbox[101] = 8'h05;\n    inv_sbox[102] = 8'h59;\n    inv_sbox[103] = 8'h19;\n    inv_sbox[104] = 8'h1f;\n    inv_sbox[105] = 8'h15;\n    inv_sbox[106] = 8'h17;\n    inv_sbox[107] = 8'h4b;\n    inv_sbox[108] = 8'h6d;\n    inv_sbox[109] = 8'h7a;\n    inv_sbox[110] = 8'h27;\n    inv_sbox[111] = 8'h18;\n    inv_sbox[112] = 8'h0f;\n    inv_sbox[113] = 8'h79;\n    inv_sbox[114] = 8'h1a;\n    inv_sbox[115] = 8'h1d;\n    inv_sbox[116] = 8'h00;\n    inv_sbox[117] = 8'h50;\n    inv_sbox[118] = 8'h65;\n    inv_sbox[119] = 8'h7d;\n    inv_sbox[120] = 8'h5a;\n    inv_sbox[121] = 8'h14;\n    inv_sbox[122] = 8'h9e;\n    inv_sbox[123] = 8'h24;\n    inv_sbox[124] = 8'h55;\n    inv_sbox[125] = 8'h7b;\n    inv_sbox[126] = 8'h8c;\n    inv_sbox[127] = 8'h61;\n    inv_sbox[128] = 8'h70;\n    inv_sbox[129] = 8'h3e;\n    inv_sbox[130] = 8'h2a;\n    inv_sbox[131] = 8'h5d;\n    inv_sbox[132] = 8'h2f;\n    inv_sbox[133] = 8'h02;\n    inv_sbox[134] = 8'h9c;\n    inv_sbox[135] = 8'h4e;\n    inv_sbox[136] = 8'h48;\n    inv_sbox[137] = 8'h63;\n    inv_sbox[138] = 8'h4a;\n    inv_sbox[139] = 8'h22;\n    inv_sbox[140] = 8'h9f;\n    inv_sbox[141] = 8'h77;\n    inv_sbox[142] = 8'h51;\n    inv_sbox[143] = 8'h6b;\n    inv_sbox[144] = 8'h44;\n    inv_sbox[145] = 8'h8b;\n    inv_sbox[146] = 8'h4d;\n    inv_sbox[147] = 8'h99;\n    inv_sbox[148] = 8'h3a;\n    inv_sbox[149] = 8'h01;\n    inv_sbox[150] = 8'h2c;\n    inv_sbox[151] = 8'h0e;\n    inv_sbox[152] = 8'h12;\n    inv_sbox[153] = 8'h1c;\n    inv_sbox[154] = 8'h1e;\n    inv_sbox[155] = 8'h7f;\n    inv_sbox[156] = 8'h1b;\n    inv_sbox[157] = 8'h21;\n    inv_sbox[158] = 8'h9d;\n    inv_sbox[159] = 8'h20;\n    inv_sbox[160] = 8'h6e;\n    inv_sbox[161] = 8'h71;\n    inv_sbox[162] = 8'h54;\n    inv_sbox[163] = 8'hfa;\n    inv_sbox[164] = 8'h5c;\n    inv_sbox[165] = 8'h84;\n    inv_sbox[166] = 8'h93;\n    inv_sbox[167] = 8'h3b;\n    inv_sbox[168] = 8'h7e;\n    inv_sbox[169] = 8'h89;\n    inv_sbox[170] = 8'h6a;\n    inv_sbox[171] = 8'h56;\n    inv_sbox[172] = 8'h46;\n    inv_sbox[173] = 8'h99;\n    inv_sbox[174] = 8'h47;\n    inv_sbox[175] = 8'h95;\n    inv_sbox[176] = 8'h3c;\n    inv_sbox[177] = 8'h9e;\n    inv_sbox[178] = 8'h8d;\n    inv_sbox[179] = 8'h67;\n    inv_sbox[180] = 8'h44;\n    inv_sbox[181] = 8'h7c;\n    inv_sbox[182] = 8'h40;\n    inv_sbox[183] = 8'hfe;\n    inv_sbox[184] = 8'h34;\n    inv_sbox[185] = 8'h4f;\n    inv_sbox[186] = 8'h53;\n    inv_sbox[187] = 8'h8e;\n    inv_sbox[188] = 8'h48;\n    inv_sbox[189] = 8'h5e;\n    inv_sbox[190] = 8'h63;\n    inv_sbox[191] = 8'h58;\n    inv_sbox[192] = 8'h19;\n    inv_sbox[193] = 8'h8d;\n    inv_sbox[194] = 8'h2e;\n    inv_sbox[195] = 8'h01;\n    inv_sbox[196] = 8'hf7;\n    inv_sbox[197] = 8'h5a;\n    inv_sbox[198] = 8'h90;\n    inv_sbox[199] = 8'h45;\n    inv_sbox[200] = 8'h9a;\n    inv_sbox[201] = 8'h37;\n    inv_sbox[202] = 8'h4b;\n    inv_sbox[203] = 8'h3d;\n    inv_sbox[204] = 8'h53;\n    inv_sbox[205] = 8'h5f;\n    inv_sbox[206] = 8'h43;\n    inv_sbox[207] = 8'h5b;\n    inv_sbox[208] = 8'h97;\n    inv_sbox[209] = 8'h17;\n    inv_sbox[210] = 8'h85;\n    inv_sbox[211] = 8'h15;\n    inv_sbox[212] = 8'h6d;\n    inv_sbox[213] = 8'h7a;\n    inv_sbox[214] = 8'h31;\n    inv_sbox[215] = 8'h71;\n    inv_sbox[216] = 8'h2b;\n    inv_sbox[217] = 8'h41;\n    inv_sbox[218] = 8'h11;\n    inv_sbox[219] = 8'h9f;\n    inv_sbox[220] = 8'h4e;\n    inv_sbox[221] = 8'h1e;\n    inv_sbox[222] = 8'h1a;\n    inv_sbox[223] = 8'h08;\n    inv_sbox[224] = 8'h13;\n    inv_sbox[225] = 8'h9c;\n    inv_sbox[226] = 8'h9b;\n    inv_sbox[227] = 8'h55;\n    inv_sbox[228] = 8'h2f;\n    inv_sbox[229] = 8'h6c;\n    inv_sbox[230] = 8'h72;\n    inv_sbox[231] = 8'h75;\n    inv_sbox[232] = 8'h3f;\n    inv_sbox[233] = 8'h6f;\n    inv_sbox[234] = 8'h36;\n    inv_sbox[235] = 8'h5e;\n    inv_sbox[236] = 8'h65;\n    inv_sbox[237] = 8'h25;\n    inv_sbox[238] = 8'h68;\n    inv_sbox[239] = 8'h4a;\n    inv_sbox[240] = 8'h94;\n    inv_sbox[241] = 8'h33;\n    inv_sbox[242] = 8'h8b;\n    inv_sbox[243] = 8'h0b;\n    inv_sbox[244] = 8'h61;\n    inv_sbox[245] = 8'h18;\n    inv_sbox[246] = 8'h1d;\n    inv_sbox[247] = 8'h7e;\n    inv_sbox[248] = 8'h6e;\n    inv_sbox[249] = 8'h38;\n    inv_sbox[250] = 8'h45;\n    inv_sbox[251] = 8'h98;\n    inv_sbox[252] = 8'h5d;\n    inv_sbox[253] = 8'h29;\n    inv_sbox[254] = 8'h7b;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Perform the inverse S-box substitution\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 16, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbf;\n    inv_sbox[9]  = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h32;\n    inv_sbox[13] = 8'h63;\n    inv_sbox[14] = 8'h7e;\n    inv_sbox[15] = 8'h5a;\n    inv_sbox[16] = 8'h19;\n    inv_sbox[17] = 8'h24;\n    inv_sbox[18] = 8'h7f;\n    inv_sbox[19] = 8'h64;\n    inv_sbox[20] = 8'h72;\n    inv_sbox[21] = 8'h9a;\n    inv_sbox[22] = 8'hde;\n    inv_sbox[23] = 8'h79;\n    inv_sbox[24] = 8'h1f;\n    inv_sbox[25] = 8'h8d;\n    inv_sbox[26] = 8'h94;\n    inv_sbox[27] = 8'h0b;\n    inv_sbox[28] = 8'h3e;\n    inv_sbox[29] = 8'h2b;\n    inv_sbox[30] = 8'h35;\n    inv_sbox[31] = 8'h77;\n    inv_sbox[32] = 8'h82;\n    inv_sbox[33] = 8'h18;\n    inv_sbox[34] = 8'h87;\n    inv_sbox[35] = 8'h3b;\n    inv_sbox[36] = 8'h9c;\n    inv_sbox[37] = 8'h8f;\n    inv_sbox[38] = 8'h2e;\n    inv_sbox[39] = 8'h3d;\n    inv_sbox[40] = 8'h8b;\n    inv_sbox[41] = 8'h1c;\n    inv_sbox[42] = 8'h28;\n    inv_sbox[43] = 8'h4d;\n    inv_sbox[44] = 8'h99;\n    inv_sbox[45] = 8'h6e;\n    inv_sbox[46] = 8'h27;\n    inv_sbox[47] = 8'hb4;\n    inv_sbox[48] = 8'h88;\n    inv_sbox[49] = 8'h38;\n    inv_sbox[50] = 8'h5e;\n    inv_sbox[51] = 8'h5b;\n    inv_sbox[52] = 8'h92;\n    inv_sbox[53] = 8'he1;\n    inv_sbox[54] = 8'h73;\n    inv_sbox[55] = 8'h48;\n    inv_sbox[56] = 8'h5d;\n    inv_sbox[57] = 8'h53;\n    inv_sbox[58] = 8'h6a;\n    inv_sbox[59] = 8'h84;\n    inv_sbox[60] = 8'h50;\n    inv_sbox[61] = 8'h47;\n    inv_sbox[62] = 8'h54;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h7c;\n    inv_sbox[65] = 8'h62;\n    inv_sbox[66] = 8'h16;\n    inv_sbox[67] = 8'h6f;\n    inv_sbox[68] = 8'h86;\n    inv_sbox[69] = 8'h97;\n    inv_sbox[70] = 8'h4c;\n    inv_sbox[71] = 8'h61;\n    inv_sbox[72] = 8'h70;\n    inv_sbox[73] = 8'h3f;\n    inv_sbox[74] = 8'h96;\n    inv_sbox[75] = 8'h6b;\n    inv_sbox[76] = 8'h9d;\n    inv_sbox[77] = 8'h8c;\n    inv_sbox[78] = 8'h4b;\n    inv_sbox[79] = 8'hcc;\n    inv_sbox[80] = 8'h65;\n    inv_sbox[81] = 8'h6d;\n    inv_sbox[82] = 8'h4e;\n    inv_sbox[83] = 8'hee;\n    inv_sbox[84] = 8'hbc;\n    inv_sbox[85] = 8'h4f;\n    inv_sbox[86] = 8'h10;\n    inv_sbox[87] = 8'h43;\n    inv_sbox[88] = 8'h75;\n    inv_sbox[89] = 8'h39;\n    inv_sbox[90] = 8'h3c;\n    inv_sbox[91] = 8'h21;\n    inv_sbox[92] = 8'h02;\n    inv_sbox[93] = 8'h98;\n    inv_sbox[94] = 8'h6c;\n    inv_sbox[95] = 8'h60;\n    inv_sbox[96] = 8'h8a;\n    inv_sbox[97] = 8'h2c;\n    inv_sbox[98] = 8'h95;\n    inv_sbox[99] = 8'h59;\n    inv_sbox[100] = 8'hf1;\n    inv_sbox[101] = 8'h7d;\n    inv_sbox[102] = 8'h68;\n    inv_sbox[103] = 8'hcd;\n    inv_sbox[104] = 8'h71;\n    inv_sbox[105] = 8'h4a;\n    inv_sbox[106] = 8'h9f;\n    inv_sbox[107] = 8'h02;\n    inv_sbox[108] = 8'h67;\n    inv_sbox[109] = 8'h15;\n    inv_sbox[110] = 8'h8e;\n    inv_sbox[111] = 8'h2f;\n    inv_sbox[112] = 8'h1d;\n    inv_sbox[113] = 8'h0c;\n    inv_sbox[114] = 8'h8d;\n    inv_sbox[115] = 8'h13;\n    inv_sbox[116] = 8'h7a;\n    inv_sbox[117] = 8'h6e;\n    inv_sbox[118] = 8'h56;\n    inv_sbox[119] = 8'h2b;\n    inv_sbox[120] = 8'h55;\n    inv_sbox[121] = 8'haa;\n    inv_sbox[122] = 8'h44;\n    inv_sbox[123] = 8'h92;\n    inv_sbox[124] = 8'hd3;\n    inv_sbox[125] = 8'h6c;\n    inv_sbox[126] = 8'h11;\n    inv_sbox[127] = 8'h1f;\n    inv_sbox[128] = 8'had;\n    inv_sbox[129] = 8'h08;\n    inv_sbox[130] = 8'h5f;\n    inv_sbox[131] = 8'h4d;\n    inv_sbox[132] = 8'h2c;\n    inv_sbox[133] = 8'h9d;\n    inv_sbox[134] = 8'h7e;\n    inv_sbox[135] = 8'h4e;\n    inv_sbox[136] = 8'h6a;\n    inv_sbox[137] = 8'hf3;\n    inv_sbox[138] = 8'h5d;\n    inv_sbox[139] = 8'h6f;\n    inv_sbox[140] = 8'h8f;\n    inv_sbox[141] = 8'h67;\n    inv_sbox[142] = 8'hcc;\n    inv_sbox[143] = 8'hfb;\n    inv_sbox[144] = 8'hed;\n    inv_sbox[145] = 8'h71;\n    inv_sbox[146] = 8'h33;\n    inv_sbox[147] = 8'h0e;\n    inv_sbox[148] = 8'h9c;\n    inv_sbox[149] = 8'h7d;\n    inv_sbox[150] = 8'h3e;\n    inv_sbox[151] = 8'h62;\n    inv_sbox[152] = 8'h28;\n    inv_sbox[153] = 8'h9a;\n    inv_sbox[154] = 8'h41;\n    inv_sbox[155] = 8'h45;\n    inv_sbox[156] = 8'h23;\n    inv_sbox[157] = 8'hbd;\n    inv_sbox[158] = 8'h37;\n    inv_sbox[159] = 8'h39;\n    inv_sbox[160] = 8'hf2;\n    inv_sbox[161] = 8'hb6;\n    inv_sbox[162] = 8'h6c;\n    inv_sbox[163] = 8'h9e;\n    inv_sbox[164] = 8'h9b;\n    inv_sbox[165] = 8'h4c;\n    inv_sbox[166] = 8'h2e;\n    inv_sbox[167] = 8'h8d;\n    inv_sbox[168] = 8'h27;\n    inv_sbox[169] = 8'h5a;\n    inv_sbox[170] = 8'h00;\n    inv_sbox[171] = 8'h3d;\n    inv_sbox[172] = 8'h6e;\n    inv_sbox[173] = 8'h7f;\n    inv_sbox[174] = 8'h19;\n    inv_sbox[175] = 8'h74;\n    inv_sbox[176] = 8'h61;\n    inv_sbox[177] = 8'h77;\n    inv_sbox[178] = 8'h3b;\n    inv_sbox[179] = 8'h5b;\n    inv_sbox[180] = 8'h95;\n    inv_sbox[181] = 8'h17;\n    inv_sbox[182] = 8'h0f;\n    inv_sbox[183] = 8'h04;\n    inv_sbox[184] = 8'h58;\n    inv_sbox[185] = 8'h62;\n    inv_sbox[186] = 8'h2d;\n    inv_sbox[187] = 8'h35;\n    inv_sbox[188] = 8'hcd;\n    inv_sbox[189] = 8'h9a;\n    inv_sbox[190] = 8'h31;\n    inv_sbox[191] = 8'h53;\n    inv_sbox[192] = 8'h7a;\n    inv_sbox[193] = 8'h3c;\n    inv_sbox[194] = 8'h8b;\n    inv_sbox[195] = 8'h1d;\n    inv_sbox[196] = 8'h0a;\n    inv_sbox[197] = 8'h17;\n    inv_sbox[198] = 8'h54;\n    inv_sbox[199] = 8'h5d;\n    inv_sbox[200] = 8'h9b;\n    inv_sbox[201] = 8'h39;\n    inv_sbox[202] = 8'h07;\n    inv_sbox[203] = 8'h7b;\n    inv_sbox[204] = 8'h76;\n    inv_sbox[205] = 8'h6a;\n    inv_sbox[206] = 8'h4f;\n    inv_sbox[207] = 8'h63;\n    inv_sbox[208] = 8'h55;\n    inv_sbox[209] = 8'h2f;\n    inv_sbox[210] = 8'hde;\n    inv_sbox[211] = 8'h0f;\n    inv_sbox[212] = 8'h0c;\n    inv_sbox[213] = 8'hbf;\n    inv_sbox[214] = 8'he4;\n    inv_sbox[215] = 8'h16;\n    inv_sbox[216] = 8'h7c;\n    inv_sbox[217] = 8'h8d;\n    inv_sbox[218] = 8'h9d;\n    inv_sbox[219] = 8'h3d;\n    inv_sbox[220] = 8'h25;\n    inv_sbox[221] = 8'h0d;\n    inv_sbox[222] = 8'h4e;\n    inv_sbox[223] = 8'h4b;\n    inv_sbox[224] = 8'h53;\n    inv_sbox[225] = 8'h6e;\n    inv_sbox[226] = 8'h90;\n    inv_sbox[227] = 8'h9e;\n    inv_sbox[228] = 8'h32;\n    inv_sbox[229] = 8'h95;\n    inv_sbox[230] = 8'ha4;\n    inv_sbox[231] = 8'h60;\n    inv_sbox[232] = 8'h7f;\n    inv_sbox[233] = 8'h49;\n    inv_sbox[234] = 8'h3f;\n    inv_sbox[235] = 8'h30;\n    inv_sbox[236] = 8'hfa;\n    inv_sbox[237] = 8'h24;\n    inv_sbox[238] = 8'h27;\n    inv_sbox[239] = 8'h5c;\n    inv_sbox[240] = 8'h5e;\n    inv_sbox[241] = 8'h91;\n    inv_sbox[242] = 8'hef;\n    inv_sbox[243] = 8'h6b;\n    inv_sbox[244] = 8'h85;\n    inv_sbox[245] = 8'h4a;\n    inv_sbox[246] = 8'h2a;\n    inv_sbox[247] = 8'hed;\n    inv_sbox[248] = 8'h06;\n    inv_sbox[249] = 8'hab;\n    inv_sbox[250] = 8'h93;\n    inv_sbox[251] = 8'h9f;\n    inv_sbox[252] = 8'h65;\n    inv_sbox[253] = 8'hdf;\n    inv_sbox[254] = 8'h8c;\n    inv_sbox[255] = 8'h11;\nend\n\n// Assign output from the lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 17, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the inverse S-box lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'hbf;\n    inv_sbox[9]  = 8'h41;\n    inv_sbox[10] = 8'h76;\n    inv_sbox[11] = 8'h65;\n    inv_sbox[12] = 8'h12;\n    inv_sbox[13] = 8'h03;\n    inv_sbox[14] = 8'h59;\n    inv_sbox[15] = 8'h71;\n    inv_sbox[16] = 8'h3e;\n    inv_sbox[17] = 8'h6d;\n    inv_sbox[18] = 8'h7f;\n    inv_sbox[19] = 8'h2c;\n    inv_sbox[20] = 8'h67;\n    inv_sbox[21] = 8'h4d;\n    inv_sbox[22] = 8'h22;\n    inv_sbox[23] = 8'h16;\n    inv_sbox[24] = 8'h8c;\n    inv_sbox[25] = 8'h3a;\n    inv_sbox[26] = 8'h98;\n    inv_sbox[27] = 8'h19;\n    inv_sbox[28] = 8'h08;\n    inv_sbox[29] = 8'h7a;\n    inv_sbox[30] = 8'h62;\n    inv_sbox[31] = 8'had;\n    inv_sbox[32] = 8'h30;\n    inv_sbox[33] = 8'h6f;\n    inv_sbox[34] = 8'h5a;\n    inv_sbox[35] = 8'h5e;\n    inv_sbox[36] = 8'h63;\n    inv_sbox[37] = 8'h00;\n    inv_sbox[38] = 8'h4c;\n    inv_sbox[39] = 8'h5d;\n    inv_sbox[40] = 8'h77;\n    inv_sbox[41] = 8'h7b;\n    inv_sbox[42] = 8'h9e;\n    inv_sbox[43] = 8'h9f;\n    inv_sbox[44] = 8'h15;\n    inv_sbox[45] = 8'h3d;\n    inv_sbox[46] = 8'h8b;\n    inv_sbox[47] = 8'h91;\n    inv_sbox[48] = 8'h39;\n    inv_sbox[49] = 8'h61;\n    inv_sbox[50] = 8'h92;\n    inv_sbox[51] = 8'ha3;\n    inv_sbox[52] = 8'h83;\n    inv_sbox[53] = 8'h7d;\n    inv_sbox[54] = 8'h95;\n    inv_sbox[55] = 8'h68;\n    inv_sbox[56] = 8'h88;\n    inv_sbox[57] = 8'h1c;\n    inv_sbox[58] = 8'h5b;\n    inv_sbox[59] = 8'h9a;\n    inv_sbox[60] = 8'h85;\n    inv_sbox[61] = 8'h96;\n    inv_sbox[62] = 8'h4e;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h6b;\n    inv_sbox[65] = 8'h51;\n    inv_sbox[66] = 8'h8a;\n    inv_sbox[67] = 8'h1e;\n    inv_sbox[68] = 8'h55;\n    inv_sbox[69] = 8'h28;\n    inv_sbox[70] = 8'h54;\n    inv_sbox[71] = 8'h1a;\n    inv_sbox[72] = 8'h1f;\n    inv_sbox[73] = 8'had;\n    inv_sbox[74] = 8'h74;\n    inv_sbox[75] = 8'h5f;\n    inv_sbox[76] = 8'h4b;\n    inv_sbox[77] = 8'h44;\n    inv_sbox[78] = 8'h11;\n    inv_sbox[79] = 8'h49;\n    inv_sbox[80] = 8'h3f;\n    inv_sbox[81] = 8'h33;\n    inv_sbox[82] = 8'h78;\n    inv_sbox[83] = 8'h9d;\n    inv_sbox[84] = 8'h5c;\n    inv_sbox[85] = 8'h7c;\n    inv_sbox[86] = 8'h45;\n    inv_sbox[87] = 8'h06;\n    inv_sbox[88] = 8'h32;\n    inv_sbox[89] = 8'h60;\n    inv_sbox[90] = 8'h21;\n    inv_sbox[91] = 8'h70;\n    inv_sbox[92] = 8'h81;\n    inv_sbox[93] = 8'h3c;\n    inv_sbox[94] = 8'h0e;\n    inv_sbox[95] = 8'h0b;\n    inv_sbox[96] = 8'h97;\n    inv_sbox[97] = 8'h85;\n    inv_sbox[98] = 8'h9c;\n    inv_sbox[99] = 8'h24;\n    inv_sbox[100] = 8'h0f;\n    inv_sbox[101] = 8'h8f;\n    inv_sbox[102] = 8'h7e;\n    inv_sbox[103] = 8'hf2;\n    inv_sbox[104] = 8'h2e;\n    inv_sbox[105] = 8'h8d;\n    inv_sbox[106] = 8'h82;\n    inv_sbox[107] = 8'h72;\n    inv_sbox[108] = 8'h67;\n    inv_sbox[109] = 8'h18;\n    inv_sbox[110] = 8'h83;\n    inv_sbox[111] = 8'h6e;\n    inv_sbox[112] = 8'h9b;\n    inv_sbox[113] = 8'h47;\n    inv_sbox[114] = 8'h1d;\n    inv_sbox[115] = 8'h42;\n    inv_sbox[116] = 8'h6a;\n    inv_sbox[117] = 8'h53;\n    inv_sbox[118] = 8'h34;\n    inv_sbox[119] = 8'h69;\n    inv_sbox[120] = 8'h48;\n    inv_sbox[121] = 8'h17;\n    inv_sbox[122] = 8'h65;\n    inv_sbox[123] = 8'h9e;\n    inv_sbox[124] = 8'h8e;\n    inv_sbox[125] = 8'h4f;\n    inv_sbox[126] = 8'hcb;\n    inv_sbox[127] = 8'h3b;\n    inv_sbox[128] = 8'h2f;\n    inv_sbox[129] = 8'h7a;\n    inv_sbox[130] = 8'h44;\n    inv_sbox[131] = 8'h6d;\n    inv_sbox[132] = 8'h5b;\n    inv_sbox[133] = 8'h45;\n    inv_sbox[134] = 8'h4a;\n    inv_sbox[135] = 8'h9f;\n    inv_sbox[136] = 8'h8a;\n    inv_sbox[137] = 8'h5e;\n    inv_sbox[138] = 8'h5f;\n    inv_sbox[139] = 8'h9a;\n    inv_sbox[140] = 8'h58;\n    inv_sbox[141] = 8'h2c;\n    inv_sbox[142] = 8'h05;\n    inv_sbox[143] = 8'h49;\n    inv_sbox[144] = 8'h46;\n    inv_sbox[145] = 8'h31;\n    inv_sbox[146] = 8'h56;\n    inv_sbox[147] = 8'he3;\n    inv_sbox[148] = 8'h3e;\n    inv_sbox[149] = 8'h69;\n    inv_sbox[150] = 8'h9d;\n    inv_sbox[151] = 8'h8f;\n    inv_sbox[152] = 8'h43;\n    inv_sbox[153] = 8'h75;\n    inv_sbox[154] = 8'h37;\n    inv_sbox[155] = 8'h3d;\n    inv_sbox[156] = 8'h64;\n    inv_sbox[157] = 8'h3a;\n    inv_sbox[158] = 8'h6c;\n    inv_sbox[159] = 8'h1b;\n    inv_sbox[160] = 8'h73;\n    inv_sbox[161] = 8'h10;\n    inv_sbox[162] = 8'h7f;\n    inv_sbox[163] = 8'h7d;\n    inv_sbox[164] = 8'h52;\n    inv_sbox[165] = 8'h29;\n    inv_sbox[166] = 8'h9c;\n    inv_sbox[167] = 8'h13;\n    inv_sbox[168] = 8'h79;\n    inv_sbox[169] = 8'h6f;\n    inv_sbox[170] = 8'h8b;\n    inv_sbox[171] = 8'h91;\n    inv_sbox[172] = 8'ha5;\n    inv_sbox[173] = 8'h25;\n    inv_sbox[174] = 8'h8d;\n    inv_sbox[175] = 8'h36;\n    inv_sbox[176] = 8'h51;\n    inv_sbox[177] = 8'hce;\n    inv_sbox[178] = 8'h68;\n    inv_sbox[179] = 8'h4e;\n    inv_sbox[180] = 8'h14;\n    inv_sbox[181] = 8'h7c;\n    inv_sbox[182] = 8'h1d;\n    inv_sbox[183] = 8'h9a;\n    inv_sbox[184] = 8'h5a;\n    inv_sbox[185] = 8'h6e;\n    inv_sbox[186] = 8'h85;\n    inv_sbox[187] = 8'h98;\n    inv_sbox[188] = 8'h78;\n    inv_sbox[189] = 8'h33;\n    inv_sbox[190] = 8'hac;\n    inv_sbox[191] = 8'h62;\n    inv_sbox[192] = 8'h9b;\n    inv_sbox[193] = 8'h7e;\n    inv_sbox[194] = 8'h55;\n    inv_sbox[195] = 8'h1f;\n    inv_sbox[196] = 8'h4c;\n    inv_sbox[197] = 8'h5d;\n    inv_sbox[198] = 8'h70;\n    inv_sbox[199] = 8'h97;\n    inv_sbox[200] = 8'h8c;\n    inv_sbox[201] = 8'h19;\n    inv_sbox[202] = 8'h01;\n    inv_sbox[203] = 8'h6a;\n    inv_sbox[204] = 8'h5b;\n    inv_sbox[205] = 8'h4d;\n    inv_sbox[206] = 8'h7b;\n    inv_sbox[207] = 8'h7f;\n    inv_sbox[208] = 8'h0a;\n    inv_sbox[209] = 8'h15;\n    inv_sbox[210] = 8'h4f;\n    inv_sbox[211] = 8'h5c;\n    inv_sbox[212] = 8'h32;\n    inv_sbox[213] = 8'h18;\n    inv_sbox[214] = 8'h21;\n    inv_sbox[215] = 8'h02;\n    inv_sbox[216] = 8'h8e;\n    inv_sbox[217] = 8'h27;\n    inv_sbox[218] = 8'h0d;\n    inv_sbox[219] = 8'h88;\n    inv_sbox[220] = 8'h4b;\n    inv_sbox[221] = 8'h6c;\n    inv_sbox[222] = 8'h9e;\n    inv_sbox[223] = 8'h3f;\n    inv_sbox[224] = 8'h89;\n    inv_sbox[225] = 8'h43;\n    inv_sbox[226] = 8'h99;\n    inv_sbox[227] = 8'h8f;\n    inv_sbox[228] = 8'h65;\n    inv_sbox[229] = 8'h7a;\n    inv_sbox[230] = 8'h2a;\n    inv_sbox[231] = 8'h5e;\n    inv_sbox[232] = 8'h45;\n    inv_sbox[233] = 8'h3c;\n    inv_sbox[234] = 8'h54;\n    inv_sbox[235] = 8'h28;\n    inv_sbox[236] = 8'h0f;\n    inv_sbox[237] = 8'h62;\n    inv_sbox[238] = 8'h05;\n    inv_sbox[239] = 8'h95;\n    inv_sbox[240] = 8'h40;\n    inv_sbox[241] = 8'h0b;\n    inv_sbox[242] = 8'h1e;\n    inv_sbox[243] = 8'h9d;\n    inv_sbox[244] = 8'h73;\n    inv_sbox[245] = 8'h97;\n    inv_sbox[246] = 8'h19;\n    inv_sbox[247] = 8'h13;\n    inv_sbox[248] = 8'h3e;\n    inv_sbox[249] = 8'h8d;\n    inv_sbox[250] = 8'h7c;\n    inv_sbox[251] = 8'h51;\n    inv_sbox[252] = 8'h37;\n    inv_sbox[253] = 8'h6d;\n    inv_sbox[254] = 8'h64;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Use the lookup table to perform the inverse S-box substitution\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 18, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h80;\n    inv_sbox[5] = 8'h93;\n    inv_sbox[6] = 8'hce;\n    inv_sbox[7] = 8'h10;\n    inv_sbox[8] = 8'h77;\n    inv_sbox[9] = 8'h21;\n    inv_sbox[10] = 8'h05;\n    inv_sbox[11] = 8'h85;\n    inv_sbox[12] = 8'h16;\n    inv_sbox[13] = 8'h20;\n    inv_sbox[14] = 8'h9a;\n    inv_sbox[15] = 8'h8d;\n    inv_sbox[16] = 8'h27;\n    inv_sbox[17] = 8'h98;\n    inv_sbox[18] = 8'h15;\n    inv_sbox[19] = 8'h4b;\n    inv_sbox[20] = 8'h8a;\n    inv_sbox[21] = 8'h6c;\n    inv_sbox[22] = 8'hca;\n    inv_sbox[23] = 8'h2f;\n    inv_sbox[24] = 8'h01;\n    inv_sbox[25] = 8'h12;\n    inv_sbox[26] = 8'h03;\n    inv_sbox[27] = 8'h7c;\n    inv_sbox[28] = 8'h29;\n    inv_sbox[29] = 8'h7f;\n    inv_sbox[30] = 8'h82;\n    inv_sbox[31] = 8'hff;\n    inv_sbox[32] = 8'h2c;\n    inv_sbox[33] = 8'h1d;\n    inv_sbox[34] = 8'h8b;\n    inv_sbox[35] = 8'h8f;\n    inv_sbox[36] = 8'h91;\n    inv_sbox[37] = 8'h89;\n    inv_sbox[38] = 8'h0d;\n    inv_sbox[39] = 8'h11;\n    inv_sbox[40] = 8'h41;\n    inv_sbox[41] = 8'h09;\n    inv_sbox[42] = 8'h1f;\n    inv_sbox[43] = 8'h01;\n    inv_sbox[44] = 8'haf;\n    inv_sbox[45] = 8'h9e;\n    inv_sbox[46] = 8'h16;\n    inv_sbox[47] = 8'h78;\n    inv_sbox[48] = 8'h25;\n    inv_sbox[49] = 8'h43;\n    inv_sbox[50] = 8'h44;\n    inv_sbox[51] = 8'h5c;\n    inv_sbox[52] = 8'h1e;\n    inv_sbox[53] = 8'h54;\n    inv_sbox[54] = 8'h7b;\n    inv_sbox[55] = 8'h74;\n    inv_sbox[56] = 8'hfc;\n    inv_sbox[57] = 8'h39;\n    inv_sbox[58] = 8'h4d;\n    inv_sbox[59] = 8'h83;\n    inv_sbox[60] = 8'h9b;\n    inv_sbox[61] = 8'h94;\n    inv_sbox[62] = 8'h13;\n    inv_sbox[63] = 8'h48;\n    inv_sbox[64] = 8'h7d;\n    inv_sbox[65] = 8'h06;\n    inv_sbox[66] = 8'h24;\n    inv_sbox[67] = 8'h5a;\n    inv_sbox[68] = 8'h35;\n    inv_sbox[69] = 8'h42;\n    inv_sbox[70] = 8'h6b;\n    inv_sbox[71] = 8'h28;\n    inv_sbox[72] = 8'h14;\n    inv_sbox[73] = 8'h3e;\n    inv_sbox[74] = 8'h0a;\n    inv_sbox[75] = 8'h15;\n    inv_sbox[76] = 8'h64;\n    inv_sbox[77] = 8'hf2;\n    inv_sbox[78] = 8'h59;\n    inv_sbox[79] = 8'hf1;\n    inv_sbox[80] = 8'h7e;\n    inv_sbox[81] = 8'h4e;\n    inv_sbox[82] = 8'h46;\n    inv_sbox[83] = 8'h69;\n    inv_sbox[84] = 8'h9a;\n    inv_sbox[85] = 8'h79;\n    inv_sbox[86] = 8'h19;\n    inv_sbox[87] = 8'h2b;\n    inv_sbox[88] = 8'h34;\n    inv_sbox[89] = 8'h4c;\n    inv_sbox[90] = 8'h05;\n    inv_sbox[91] = 8'hdb;\n    inv_sbox[92] = 8'hf3;\n    inv_sbox[93] = 8'h72;\n    inv_sbox[94] = 8'h63;\n    inv_sbox[95] = 8'h6d;\n    inv_sbox[96] = 8'hf5;\n    inv_sbox[97] = 8'h73;\n    inv_sbox[98] = 8'h5e;\n    inv_sbox[99] = 8'h95;\n    inv_sbox[100] = 8'h94;\n    inv_sbox[101] = 8'h51;\n    inv_sbox[102] = 8'hde;\n    inv_sbox[103] = 8'h4f;\n    inv_sbox[104] = 8'h91;\n    inv_sbox[105] = 8'h49;\n    inv_sbox[106] = 8'h2d;\n    inv_sbox[107] = 8'h11;\n    inv_sbox[108] = 8'h89;\n    inv_sbox[109] = 8'h6f;\n    inv_sbox[110] = 8'h32;\n    inv_sbox[111] = 8'h60;\n    inv_sbox[112] = 8'hee;\n    inv_sbox[113] = 8'h7c;\n    inv_sbox[114] = 8'h68;\n    inv_sbox[115] = 8'h44;\n    inv_sbox[116] = 8'hea;\n    inv_sbox[117] = 8'h5d;\n    inv_sbox[118] = 8'h84;\n    inv_sbox[119] = 8'h90;\n    inv_sbox[120] = 8'h48;\n    inv_sbox[121] = 8'h21;\n    inv_sbox[122] = 8'h00;\n    inv_sbox[123] = 8'hde;\n    inv_sbox[124] = 8'h2f;\n    inv_sbox[125] = 8'h02;\n    inv_sbox[126] = 8'h53;\n    inv_sbox[127] = 8'h61;\n    inv_sbox[128] = 8'h96;\n    inv_sbox[129] = 8'h17;\n    inv_sbox[130] = 8'h08;\n    inv_sbox[131] = 8'haa;\n    inv_sbox[132] = 8'h62;\n    inv_sbox[133] = 8'h6c;\n    inv_sbox[134] = 8'h9e;\n    inv_sbox[135] = 8'h19;\n    inv_sbox[136] = 8'h07;\n    inv_sbox[137] = 8'h9a;\n    inv_sbox[138] = 8'h6e;\n    inv_sbox[139] = 8'h47;\n    inv_sbox[140] = 8'h04;\n    inv_sbox[141] = 8'h2e;\n    inv_sbox[142] = 8'h6a;\n    inv_sbox[143] = 8'h4d;\n    inv_sbox[144] = 8'h5a;\n    inv_sbox[145] = 8'h75;\n    inv_sbox[146] = 8'h8a;\n    inv_sbox[147] = 8'h87;\n    inv_sbox[148] = 8'h34;\n    inv_sbox[149] = 8'h3a;\n    inv_sbox[150] = 8'h46;\n    inv_sbox[151] = 8'h55;\n    inv_sbox[152] = 8'had;\n    inv_sbox[153] = 8'hfc;\n    inv_sbox[154] = 8'h9c;\n    inv_sbox[155] = 8'h8f;\n    inv_sbox[156] = 8'h66;\n    inv_sbox[157] = 8'hcc;\n    inv_sbox[158] = 8'h65;\n    inv_sbox[159] = 8'h6b;\n    inv_sbox[160] = 8'h92;\n    inv_sbox[161] = 8'h6f;\n    inv_sbox[162] = 8'h0c;\n    inv_sbox[163] = 8'h30;\n    inv_sbox[164] = 8'h1d;\n    inv_sbox[165] = 8'h67;\n    inv_sbox[166] = 8'h2a;\n    inv_sbox[167] = 8'h71;\n    inv_sbox[168] = 8'h59;\n    inv_sbox[169] = 8'h0e;\n    inv_sbox[170] = 8'h09;\n    inv_sbox[171] = 8'h1f;\n    inv_sbox[172] = 8'h63;\n    inv_sbox[173] = 8'h27;\n    inv_sbox[174] = 8'h3f;\n    inv_sbox[175] = 8'h3e;\n    inv_sbox[176] = 8'h3c;\n    inv_sbox[177] = 8'h96;\n    inv_sbox[178] = 8'h0b;\n    inv_sbox[179] = 8'h74;\n    inv_sbox[180] = 8'h9f;\n    inv_sbox[181] = 8'h2e;\n    inv_sbox[182] = 8'h86;\n    inv_sbox[183] = 8'h11;\n    inv_sbox[184] = 8'h65;\n    inv_sbox[185] = 8'h1a;\n    inv_sbox[186] = 8'h1e;\n    inv_sbox[187] = 8'hba;\n    inv_sbox[188] = 8'h06;\n    inv_sbox[189] = 8'hbe;\n    inv_sbox[190] = 8'h59;\n    inv_sbox[191] = 8'h7f;\n    inv_sbox[192] = 8'h1b;\n    inv_sbox[193] = 8'h18;\n    inv_sbox[194] = 8'h03;\n    inv_sbox[195] = 8'h1c;\n    inv_sbox[196] = 8'h5e;\n    inv_sbox[197] = 8'h8e;\n    inv_sbox[198] = 8'h1a;\n    inv_sbox[199] = 8'h76;\n    inv_sbox[200] = 8'h57;\n    inv_sbox[201] = 8'h3b;\n    inv_sbox[202] = 8'h89;\n    inv_sbox[203] = 8'hcb;\n    inv_sbox[204] = 8'h9d;\n    inv_sbox[205] = 8'h97;\n    inv_sbox[206] = 8'h93;\n    inv_sbox[207] = 8'h4a;\n    inv_sbox[208] = 8'h79;\n    inv_sbox[209] = 8'h9e;\n    inv_sbox[210] = 8'h23;\n    inv_sbox[211] = 8'h5c;\n    inv_sbox[212] = 8'h01;\n    inv_sbox[213] = 8'h43;\n    inv_sbox[214] = 8'h49;\n    inv_sbox[215] = 8'h44;\n    inv_sbox[216] = 8'h9b;\n    inv_sbox[217] = 8'h18;\n    inv_sbox[218] = 8'h56;\n    inv_sbox[219] = 8'h59;\n    inv_sbox[220] = 8'hf4;\n    inv_sbox[221] = 8'h65;\n    inv_sbox[222] = 8'h61;\n    inv_sbox[223] = 8'h35;\n    inv_sbox[224] = 8'hce;\n    inv_sbox[225] = 8'h45;\n    inv_sbox[226] = 8'h00;\n    inv_sbox[227] = 8'h4c;\n    inv_sbox[228] = 8'h2c;\n    inv_sbox[229] = 8'h11;\n    inv_sbox[230] = 8'hcc;\n    inv_sbox[231] = 8'h4e;\n    inv_sbox[232] = 8'h02;\n    inv_sbox[233] = 8'h40;\n    inv_sbox[234] = 8'h50;\n    inv_sbox[235] = 8'h54;\n    inv_sbox[236] = 8'h62;\n    inv_sbox[237] = 8'h09;\n    inv_sbox[238] = 8'h14;\n    inv_sbox[239] = 8'h3f;\n    inv_sbox[240] = 8'h25;\n    inv_sbox[241] = 8'h39;\n    inv_sbox[242] = 8'h4a;\n    inv_sbox[243] = 8'h4b;\n    inv_sbox[244] = 8'h33;\n    inv_sbox[245] = 8'h10;\n    inv_sbox[246] = 8'h84;\n    inv_sbox[247] = 8'h05;\n    inv_sbox[248] = 8'h47;\n    inv_sbox[249] = 8'h64;\n    inv_sbox[250] = 8'h6e;\n    inv_sbox[251] = 8'h6a;\n    inv_sbox[252] = 8'h61;\n    inv_sbox[253] = 8'h99;\n    inv_sbox[254] = 8'h32;\n    inv_sbox[255] = 8'h2f;\nend\n\n// Assign output\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 19, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [255:0];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0]  = 8'h52;\n    inv_sbox[1]  = 8'h09;\n    inv_sbox[2]  = 8'h4a;\n    inv_sbox[3]  = 8'h2d;\n    inv_sbox[4]  = 8'h80;\n    inv_sbox[5]  = 8'h93;\n    inv_sbox[6]  = 8'h40;\n    inv_sbox[7]  = 8'h66;\n    inv_sbox[8]  = 8'h43;\n    inv_sbox[9]  = 8'h21;\n    inv_sbox[10] = 8'hf4;\n    inv_sbox[11] = 8'h55;\n    inv_sbox[12] = 8'h52;\n    inv_sbox[13] = 8'h1e;\n    inv_sbox[14] = 8'h96;\n    inv_sbox[15] = 8'h07;\n    inv_sbox[16] = 8'h67;\n    inv_sbox[17] = 8'h14;\n    inv_sbox[18] = 8'h41;\n    inv_sbox[19] = 8'h79;\n    inv_sbox[20] = 8'h74;\n    inv_sbox[21] = 8'h68;\n    inv_sbox[22] = 8'h3d;\n    inv_sbox[23] = 8'h2c;\n    inv_sbox[24] = 8'h54;\n    inv_sbox[25] = 8'hfa;\n    inv_sbox[26] = 8'h78;\n    inv_sbox[27] = 8'h5a;\n    inv_sbox[28] = 8'h61;\n    inv_sbox[29] = 8'h65;\n    inv_sbox[30] = 8'h23;\n    inv_sbox[31] = 8'h64;\n    inv_sbox[32] = 8'h5d;\n    inv_sbox[33] = 8'h6a;\n    inv_sbox[34] = 8'h8f;\n    inv_sbox[35] = 8'h6f;\n    inv_sbox[36] = 8'h31;\n    inv_sbox[37] = 8'h70;\n    inv_sbox[38] = 8'h05;\n    inv_sbox[39] = 8'h85;\n    inv_sbox[40] = 8'h4f;\n    inv_sbox[41] = 8'h8a;\n    inv_sbox[42] = 8'h51;\n    inv_sbox[43] = 8'hce;\n    inv_sbox[44] = 8'h5b;\n    inv_sbox[45] = 8'h63;\n    inv_sbox[46] = 8'h98;\n    inv_sbox[47] = 8'h44;\n    inv_sbox[48] = 8'h7a;\n    inv_sbox[49] = 8'h18;\n    inv_sbox[50] = 8'h11;\n    inv_sbox[51] = 8'h5e;\n    inv_sbox[52] = 8'h49;\n    inv_sbox[53] = 8'h28;\n    inv_sbox[54] = 8'h4b;\n    inv_sbox[55] = 8'h24;\n    inv_sbox[56] = 8'h8b;\n    inv_sbox[57] = 8'h56;\n    inv_sbox[58] = 8'h16;\n    inv_sbox[59] = 8'h86;\n    inv_sbox[60] = 8'h4e;\n    inv_sbox[61] = 8'h3b;\n    inv_sbox[62] = 8'h9d;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h20;\n    inv_sbox[65] = 8'h9b;\n    inv_sbox[66] = 8'h81;\n    inv_sbox[67] = 8'h75;\n    inv_sbox[68] = 8'h59;\n    inv_sbox[69] = 8'h01;\n    inv_sbox[70] = 8'h8d;\n    inv_sbox[71] = 8'hff;\n    inv_sbox[72] = 8'h48;\n    inv_sbox[73] = 8'h8e;\n    inv_sbox[74] = 8'h2a;\n    inv_sbox[75] = 8'h6d;\n    inv_sbox[76] = 8'h53;\n    inv_sbox[77] = 8'h7f;\n    inv_sbox[78] = 8'h97;\n    inv_sbox[79] = 8'h17;\n    inv_sbox[80] = 8'h6e;\n    inv_sbox[81] = 8'h67;\n    inv_sbox[82] = 8'h7b;\n    inv_sbox[83] = 8'h8c;\n    inv_sbox[84] = 8'h1d;\n    inv_sbox[85] = 8'h0a;\n    inv_sbox[86] = 8'h84;\n    inv_sbox[87] = 8'h88;\n    inv_sbox[88] = 8'h6b;\n    inv_sbox[89] = 8'h58;\n    inv_sbox[90] = 8'h26;\n    inv_sbox[91] = 8'h32;\n    inv_sbox[92] = 8'h60;\n    inv_sbox[93] = 8'hca;\n    inv_sbox[94] = 8'h7d;\n    inv_sbox[95] = 8'h19;\n    inv_sbox[96] = 8'h95;\n    inv_sbox[97] = 8'h87;\n    inv_sbox[98] = 8'h69;\n    inv_sbox[99] = 8'h4c;\n    inv_sbox[100] = 8'h73;\n    inv_sbox[101] = 8'h91;\n    inv_sbox[102] = 8'h6c;\n    inv_sbox[103] = 8'hd6;\n    inv_sbox[104] = 8'h9a;\n    inv_sbox[105] = 8'h62;\n    inv_sbox[106] = 8'h35;\n    inv_sbox[107] = 8'h94;\n    inv_sbox[108] = 8'h8f;\n    inv_sbox[109] = 8'hda;\n    inv_sbox[110] = 8'h9c;\n    inv_sbox[111] = 8'h13;\n    inv_sbox[112] = 8'h7c;\n    inv_sbox[113] = 8'h5c;\n    inv_sbox[114] = 8'h72;\n    inv_sbox[115] = 8'h3a;\n    inv_sbox[116] = 8'h82;\n    inv_sbox[117] = 8'h54;\n    inv_sbox[118] = 8'h99;\n    inv_sbox[119] = 8'h65;\n    inv_sbox[120] = 8'h7e;\n    inv_sbox[121] = 8'h3f;\n    inv_sbox[122] = 8'h2e;\n    inv_sbox[123] = 8'hfc;\n    inv_sbox[124] = 8'h89;\n    inv_sbox[125] = 8'h5f;\n    inv_sbox[126] = 8'h3e;\n    inv_sbox[127] = 8'h42;\n    inv_sbox[128] = 8'h7a;\n    inv_sbox[129] = 8'h6f;\n    inv_sbox[130] = 8'h40;\n    inv_sbox[131] = 8'h68;\n    inv_sbox[132] = 8'h9d;\n    inv_sbox[133] = 8'h4b;\n    inv_sbox[134] = 8'h44;\n    inv_sbox[135] = 8'hf7;\n    inv_sbox[136] = 8'h93;\n    inv_sbox[137] = 8'h85;\n    inv_sbox[138] = 8'hbb;\n    inv_sbox[139] = 8'h02;\n    inv_sbox[140] = 8'h79;\n    inv_sbox[141] = 8'h5a;\n    inv_sbox[142] = 8'h9a;\n    inv_sbox[143] = 8'h15;\n    inv_sbox[144] = 8'h49;\n    inv_sbox[145] = 8'h53;\n    inv_sbox[146] = 8'h71;\n    inv_sbox[147] = 8'h9e;\n    inv_sbox[148] = 8'h5b;\n    inv_sbox[149] = 8'h17;\n    inv_sbox[150] = 8'h2b;\n    inv_sbox[151] = 8'h96;\n    inv_sbox[152] = 8'h0a;\n    inv_sbox[153] = 8'h9f;\n    inv_sbox[154] = 8'h1d;\n    inv_sbox[155] = 8'h8f;\n    inv_sbox[156] = 8'h50;\n    inv_sbox[157] = 8'h4a;\n    inv_sbox[158] = 8'h43;\n    inv_sbox[159] = 8'h21;\n    inv_sbox[160] = 8'h1e;\n    inv_sbox[161] = 8'h08;\n    inv_sbox[162] = 8'h0f;\n    inv_sbox[163] = 8'h9b;\n    inv_sbox[164] = 8'h7f;\n    inv_sbox[165] = 8'h0d;\n    inv_sbox[166] = 8'h77;\n    inv_sbox[167] = 8'h18;\n    inv_sbox[168] = 8'h67;\n    inv_sbox[169] = 8'h6c;\n    inv_sbox[170] = 8'h66;\n    inv_sbox[171] = 8'h59;\n    inv_sbox[172] = 8'h10;\n    inv_sbox[173] = 8'h19;\n    inv_sbox[174] = 8'h7d;\n    inv_sbox[175] = 8'h82;\n    inv_sbox[176] = 8'h3e;\n    inv_sbox[177] = 8'h7b;\n    inv_sbox[178] = 8'h1b;\n    inv_sbox[179] = 8'h41;\n    inv_sbox[180] = 8'h4f;\n    inv_sbox[181] = 8'h13;\n    inv_sbox[182] = 8'h39;\n    inv_sbox[183] = 8'h5c;\n    inv_sbox[184] = 8'h45;\n    inv_sbox[185] = 8'h23;\n    inv_sbox[186] = 8'h6e;\n    inv_sbox[187] = 8'h8a;\n    inv_sbox[188] = 8'h2f;\n    inv_sbox[189] = 8'h51;\n    inv_sbox[190] = 8'h12;\n    inv_sbox[191] = 8'h75;\n    inv_sbox[192] = 8'h80;\n    inv_sbox[193] = 8'h7c;\n    inv_sbox[194] = 8'h5d;\n    inv_sbox[195] = 8'h46;\n    inv_sbox[196] = 8'h98;\n    inv_sbox[197] = 8'h3a;\n    inv_sbox[198] = 8'h16;\n    inv_sbox[199] = 8'h25;\n    inv_sbox[200] = 8'h4e;\n    inv_sbox[201] = 8'h22;\n    inv_sbox[202] = 8'h38;\n    inv_sbox[203] = 8'h3f;\n    inv_sbox[204] = 8'h5e;\n    inv_sbox[205] = 8'h47;\n    inv_sbox[206] = 8'h9c;\n    inv_sbox[207] = 8'h8d;\n    inv_sbox[208] = 8'h7e;\n    inv_sbox[209] = 8'h4d;\n    inv_sbox[210] = 8'h24;\n    inv_sbox[211] = 8'h55;\n    inv_sbox[212] = 8'h90;\n    inv_sbox[213] = 8'h3b;\n    inv_sbox[214] = 8'h11;\n    inv_sbox[215] = 8'h26;\n    inv_sbox[216] = 8'h81;\n    inv_sbox[217] = 8'h6a;\n    inv_sbox[218] = 8'h60;\n    inv_sbox[219] = 8'h27;\n    inv_sbox[220] = 8'h88;\n    inv_sbox[221] = 8'h2c;\n    inv_sbox[222] = 8'h6d;\n    inv_sbox[223] = 8'h61;\n    inv_sbox[224] = 8'h54;\n    inv_sbox[225] = 8'h91;\n    inv_sbox[226] = 8'h95;\n    inv_sbox[227] = 8'h9f;\n    inv_sbox[228] = 8'h8e;\n    inv_sbox[229] = 8'h5a;\n    inv_sbox[230] = 8'h42;\n    inv_sbox[231] = 8'h6b;\n    inv_sbox[232] = 8'h35;\n    inv_sbox[233] = 8'h97;\n    inv_sbox[234] = 8'h18;\n    inv_sbox[235] = 8'h9a;\n    inv_sbox[236] = 8'h4c;\n    inv_sbox[237] = 8'h1c;\n    inv_sbox[238] = 8'h7f;\n    inv_sbox[239] = 8'h3d;\n    inv_sbox[240] = 8'h1a;\n    inv_sbox[241] = 8'h73;\n    inv_sbox[242] = 8'h05;\n    inv_sbox[243] = 8'h85;\n    inv_sbox[244] = 8'h12;\n    inv_sbox[245] = 8'h31;\n    inv_sbox[246] = 8'h20;\n    inv_sbox[247] = 8'h9d;\n    inv_sbox[248] = 8'had;\n    inv_sbox[249] = 8'h08;\n    inv_sbox[250] = 8'h6e;\n    inv_sbox[251] = 8'h4f;\n    inv_sbox[252] = 8'h0c;\n    inv_sbox[253] = 8'h01;\n    inv_sbox[254] = 8'hef;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Assign output from lookup table\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 1, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\n// Round constant generator module\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\nalways @(posedge clk) begin\n    if (kld) begin\n        // Load initial key\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        // Perform key expansion\n        if (round < 10) begin\n            // Calculate new round key\n            temp <= w3;\n            temp <= {temp[23:0], temp[31:24]}; // RotWord\n            temp <= sbox.b; // SubWord\n            temp <= temp ^ (rcon << 24); // Rcon\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n            round <= round + 1;\n        end\n    end\nend\n\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox[256];\n\nalways @(*) begin\n    case (a)\n        8'h00: b = 8'h63;\n        8'h01: b = 8'h7c;\n        8'h02: b = 8'h77;\n        8'h03: b = 8'h7b;\n        // ... (rest of S-box values)\n        default: b = 8'h00;\n    endcase\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon <= 8'h01;\n    end else begin\n        rcon <= rcon << 1;\n        if (rcon[7]) begin\n            rcon <= rcon ^ 8'h1b;\n        end\n    end\nend\n\nassign out = {24'h00, rcon};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 2, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] rcon;\nreg [3:0] round;\n\naes_rcon rcon_module(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\naes_sbox sbox_module(\n    .a(w3[7:0]),\n    .b()\n);\n\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            reg [31:0] temp;\n            temp = {w3[23:0], w3[31:24]};\n            temp = sbox_module.b ^ rcon;\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n            round <= round + 1;\n        end\n    end\nend\n\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon_value;\nreg [3:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_value <= 8'h01;\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            rcon_value <= {rcon_value[6:0], rcon_value[7]} ^ (rcon_value[7] ? 8'h1b : 8'h00);\n            round <= round + 1;\n        end\n    end\nend\n\nassign out = {24'h000000, rcon_value};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\nreg [7:0] sbox[256];\n\ninitial begin\n    // Initialize S-box values\n    // ...\nend\n\nalways @(a) begin\n    b <= sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 3, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal signals\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\n// Round constant module\naes_rcon rcon_module(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        // Key expansion operation\n        if (round < 10) begin\n            // Word rotation\n            temp <= {w3[23:0], w3[31:24]};\n            // S-box substitution\n            temp <= sbox.b;\n            // Round constant XOR\n            temp <= temp ^ {24'b0, rcon};\n            // Update round key words\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n            round <= round + 1;\n        end\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox[256];\n\nalways @(a) begin\n    case (a)\n        8'h00: b <= 8'h63;\n        8'h01: b <= 8'h7c;\n        8'h02: b <= 8'h77;\n        8'h03: b <= 8'h7b;\n        // ... (rest of the S-box values)\n        default: b <= 8'h00;\n    endcase\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon <= 8'h01;\n    end else begin\n        rcon <= {rcon[6:0], rcon[7] ^ (rcon[7] ? 8'h1b : 8'h00)};\n    end\nend\n\nassign out = {24'b0, rcon};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 4, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w[43:0];\nreg [7:0] sbox_out;\nreg [31:0] rcon_out;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(w[1][7:0]),\n    .b(sbox_out)\n);\n\n// Round constant module\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon_out)\n);\n\n// Key loading\nalways @(posedge clk) begin\n    if (kld) begin\n        w[0] <= key[127:96];\n        w[1] <= key[95:64];\n        w[2] <= key[63:32];\n        w[3] <= key[31:0];\n        round <= 0;\n    end else begin\n        // Key expansion\n        if (round < 10) begin\n            // Word rotation\n            reg [31:0] temp;\n            temp[7:0] <= w[3][23:16];\n            temp[15:8] <= w[3][31:24];\n            temp[23:16] <= w[3][7:0];\n            temp[31:24] <= w[3][15:8];\n\n            // S-box substitution\n            sbox_out <= sbox.a;\n\n            // Round constant XOR\n            w[4 + round*4] <= w[round*4] ^ (temp ^ rcon_out);\n\n            // Other words\n            for (int i = 1; i < 4; i++) begin\n                w[4 + round*4 + i] <= w[round*4 + i] ^ w[4 + round*4 + i - 1];\n            end\n\n            round <= round + 1;\n        end\n    end\nend\n\n// Output assignment\nassign wo_0 = w[4 + round*4];\nassign wo_1 = w[5 + round*4];\nassign wo_2 = w[6 + round*4];\nassign wo_3 = w[7 + round*4];\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox[256];\n\nalways @(a) begin\n    case (a)\n        8'h00: b <= 8'h63;\n        8'h01: b <= 8'h7c;\n        8'h02: b <= 8'h77;\n        8'h03: b <= 8'h7b;\n        8'h04: b <= 8'hf2;\n        8'h05: b <= 8'h6b;\n        8'h06: b <= 8'h6f;\n        8'h07: b <= 8'hc5;\n        8'h08: b <= 8'h30;\n        8'h09: b <= 8'h01;\n        8'h0a: b <= 8'h67;\n        8'h0b: b <= 8'h2b;\n        8'h0c: b <= 8'hfe;\n        8'h0d: b <= 8'hd7;\n        8'h0e: b <= 8'hab;\n        8'h0f: b <= 8'h76;\n        // ... (rest of the S-box table)\n    endcase\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon_value;\nreg [3:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_value <= 8'h01;\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            rcon_value <= {rcon_value[6:0], 1'b0} ^ (rcon_value[7] ? 8'h1b : 8'h00);\n            round <= round + 1;\n        end\n    end\nend\n\nassign out = {24'h00, rcon_value};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 5, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal signals and registers\nreg [31:0] w[43:0];\nreg [31:0] temp;\nreg [7:0] sbox_out;\nreg [31:0] rcon_out;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(sbox_out)\n);\n\n// Round constant module\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon_out)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w[0] <= key[127:96];\n        w[1] <= key[95:64];\n        w[2] <= key[63:32];\n        w[3] <= key[31:0];\n        round <= 0;\n    end else begin\n        // Key expansion operation\n        if (round < 10) begin\n            temp <= w[round * 4 + 3];\n            temp <= {temp[23:0], sbox_out};\n            temp <= temp ^ rcon_out;\n            w[round * 4 + 4] <= w[round * 4] ^ temp;\n            w[round * 4 + 5] <= w[round * 4 + 1] ^ w[round * 4 + 4];\n            w[round * 4 + 6] <= w[round * 4 + 2] ^ w[round * 4 + 5];\n            w[round * 4 + 7] <= w[round * 4 + 3] ^ w[round * 4 + 6];\n            round <= round + 1;\n        end\n    end\nend\n\n// Output assignment\nassign wo_0 = w[0];\nassign wo_1 = w[1];\nassign wo_2 = w[2];\nassign wo_3 = w[3];\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox[256];\n\nalways @(*) begin\n    case (a)\n        8'h00: b = 8'h63;\n        8'h01: b = 8'h7c;\n        8'h02: b = 8'h77;\n        8'h03: b = 8'h7b;\n        8'h04: b = 8'hf2;\n        8'h05: b = 8'h6b;\n        8'h06: b = 8'h6f;\n        8'h07: b = 8'hc5;\n        8'h08: b = 8'h30;\n        8'h09: b = 8'h01;\n        8'h0a: b = 8'h67;\n        8'h0b: b = 8'h2b;\n        8'h0c: b = 8'hfe;\n        8'h0d: b = 8'hd7;\n        8'h0e: b = 8'hab;\n        8'h0f: b = 8'h76;\n        // ... (rest of the S-box table)\n    endcase\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon_val;\nreg [3:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_val <= 8'h01;\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            rcon_val <= {rcon_val[6:0], 1'b0} ^ (rcon_val[7] ? 8'h1b : 8'h00);\n            round <= round + 1;\n        end\n    end\nend\n\nassign out = {24'h000000, rcon_val};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 6, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            // Word rotation\n            temp <= {w3[23:0], w3[31:24]};\n            // S-box substitution\n            temp[7:0] <= sbox.b;\n            temp[15:8] <= sbox.b;\n            temp[23:16] <= sbox.b;\n            temp[31:24] <= sbox.b;\n            // Round constant XOR\n            temp <= temp ^ {rcon, 24'b0};\n            // Key expansion\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n            round <= round + 1;\n        end\n    end\nend\n\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 7, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] rcon;\n\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\naes_sbox sbox(\n    .a(w3[7:0]),\n    .b()\n);\n\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end else begin\n        reg [31:0] temp;\n        temp = {w3[23:0], w3[31:24]};\n        temp = sbox.out ^ rcon;\n        w0 <= w0 ^ temp;\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 8, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal signals and registers\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\n// Round constant generator module\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        // Key expansion operation\n        if (round < 10) begin\n            // Word rotation and S-box substitution\n            temp <= {w3[23:0], w3[31:24]};\n            temp <= sbox.b;\n            temp <= temp ^ rcon;\n\n            // Round key generation\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n\n            round <= round + 1;\n        end\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox[256];\n\nalways @(*) begin\n    case (a)\n        8'h00: b = 8'h63;\n        8'h01: b = 8'h7c;\n        8'h02: b = 8'h77;\n        8'h03: b = 8'h7b;\n        8'h04: b = 8'hf2;\n        8'h05: b = 8'h6b;\n        8'h06: b = 8'h6f;\n        8'h07: b = 8'hc5;\n        8'h08: b = 8'h30;\n        8'h09: b = 8'h01;\n        8'h0a: b = 8'h67;\n        8'h0b: b = 8'h2b;\n        8'h0c: b = 8'hfe;\n        8'h0d: b = 8'hd7;\n        8'h0e: b = 8'hab;\n        8'h0f: b = 8'h76;\n        // ... (rest of the S-box lookup table)\n    endcase\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\n// Round constant generator\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon <= 8'h01;\n    end else begin\n        rcon <= {rcon[6:0], rcon[7] ^ (rcon[7] ? 8'h1b : 8'h00)};\n    end\nend\n\nassign out = {24'h00, rcon};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 9, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\naes_rcon rcon_module(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\naes_sbox sbox_module(\n    .a(temp[31:24]),\n    .b(temp[31:24])\n);\n\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            temp <= w3;\n            temp <= {temp[23:0], temp[31:24]}; // RotWord\n            temp <= sbox_module.b; // SubWord\n            temp <= temp ^ rcon; // Rcon\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n            round <= round + 1;\n        end\n    end\nend\n\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon <= 8'h01;\n    end else begin\n        rcon <= rcon << 1;\n        if (rcon[7]) begin\n            rcon <= rcon ^ 8'h1b;\n        end\n    end\nend\n\nassign out = {24'h000000, rcon};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\nreg [7:0] b;\n\nalways @(*) begin\n    case (a)\n        8'h00: b = 8'h63;\n        8'h01: b = 8'h7c;\n        8'h02: b = 8'h77;\n        8'h03: b = 8'h7b;\n        8'h04: b = 8'hf2;\n        8'h05: b = 8'h6b;\n        8'h06: b = 8'h6f;\n        8'h07: b = 8'hc5;\n        8'h08: b = 8'h30;\n        8'h09: b = 8'h01;\n        8'h0a: b = 8'h67;\n        8'h0b: b = 8'h2b;\n        8'h0c: b = 8'hfe;\n        8'h0d: b = 8'hd7;\n        8'h0e: b = 8'hab;\n        8'h0f: b = 8'h76;\n        8'h10: b = 8'hca;\n        8'h11: b = 8'h82;\n        8'h12: b = 8'hc9;\n        8'h13: b = 8'h7d;\n        8'h14: b = 8'hfa;\n        8'h15: b = 8'h59;\n        8'h16: b = 8'h47;\n        8'h17: b = 8'hf0;\n        8'h18: b = 8'had;\n        8'h19: b = 8'hd4;\n        8'h1a: b = 8'ha2;\n        8'h1b: b = 8'haf;\n        8'h1c: b = 8'h9c;\n        8'h1d: b = 8'ha4;\n        8'h1e: b = 8'h72;\n        8'h1f: b = 8'hc0;\n        8'h20: b = 8'hb7;\n        8'h21: b = 8'hfd;\n        8'h22: b = 8'h93;\n        8'h23: b = 8'h26;\n        8'h24: b = 8'h36;\n        8'h25: b = 8'h3f;\n        8'h26: b = 8'hf7;\n        8'h27: b = 8'hcc;\n        8'h28: b = 8'h34;\n        8'h29: b = 8'ha5;\n        8'h2a: b = 8'he5;\n        8'h2b: b = 8'hf1;\n        8'h2c: b = 8'h71;\n        8'h2d: b = 8'hd8;\n        8'h2e: b = 8'h31;\n        8'h2f: b = 8'h15;\n        8'h30: b = 8'h04;\n        8'h31: b = 8'hc7;\n        8'h32: b = 8'h23;\n        8'h33: b = 8'hc3;\n        8'h34: b = 8'h18;\n        8'h35: b = 8'h96;\n        8'h36: b = 8'h05;\n        8'h37: b = 8'h9a;\n        8'h38: b = 8'h07;\n        8'h39: b = 8'h12;\n        8'h3a: b = 8'h80;\n        8'h3b: b = 8'he2;\n        8'h3c: b = 8'heb;\n        8'h3d: b = 8'h27;\n        8'h3e: b = 8'hb2;\n        8'h3f: b = 8'h75;\n        8'h40: b = 8'h09;\n        8'h41: b = 8'h83;\n        8'h42: b = 8'h2c;\n        8'h43: b = 8'h1a;\n        8'h44: b = 8'h1b;\n        8'h45: b = 8'h6e;\n        8'h46: b = 8'h5a;\n        8'h47: b = 8'ha0;\n        8'h48: b = 8'h52;\n        8'h49: b = 8'h3b;\n        8'h4a: b = 8'h6d;\n        8'h4b: b = 8'hb3;\n        8'h4c: b = 8'h29;\n        8'h4d: b = 8'he3;\n        8'h4e: b = 8'h2f;\n        8'h4f: b = 8'h84;\n        8'h50: b = 8'h53;\n        8'h51: b = 8'hd1;\n        8'h52: b = 8'h00;\n        8'h53: b = 8'hed;\n        8'h54: b = 8'h20;\n        8'h55: b = 8'hfc;\n        8'h56: b = 8'hb1;\n        8'h57: b = 8'h5b;\n        8'h58: b = 8'h6a;\n        8'h59: b = 8'hcb;\n        8'h5a: b = 8'hbe;\n        8'h5b: b = 8'h39;\n        8'h5c: b = 8'h4a;\n        8'h5d: b = 8'h4c;\n        8'h5e: b = 8'h58;\n        8'h5f: b = 8'hcf;\n        8'h60: b = 8'hd0;\n        8'h61: b = 8'hef;\n        8'h62: b = 8'haa;\n        8'h63: b = 8'hfb;\n        8'h64: b = 8'h43;\n        8'h65: b = 8'h4d;\n        8'h66: b = 8'h33;\n        8'h67: b = 8'h85;\n        8'h68: b = 8'h45;\n        8'h69: b = 8'hf9;\n        8'h6a: b = 8'h02;\n        8'h6b: b = 8'h7f;\n        8'h6c: b = 8'h50;\n        8'h6d: b = 8'h3c;\n        8'h6e: b = 8'h9f;\n        8'h6f: b = 8'ha8;\n        8'h70: b = 8'h51;\n        8'h71: b = 8'ha3;\n        8'h72: b = 8'h40;\n        8'h73: b = 8'h8f;\n        8'h74: b = 8'h92;\n        8'h75: b = 8'h9d;\n        8'h76: b = 8'h38;\n        8'h77: b = 8'hf5;\n        8'h78: b = 8'hbc;\n        8'h79: b = 8'hb6;\n        8'h7a: b = 8'hda;\n        8'h7b: b = 8'h21;\n        8'h7c: b = 8'h10;\n        8'h7d: b = 8'hff;\n        8'h7e: b = 8'hf3;\n        8'h7f: b = 8'hd2;\n        8'h80: b = 8'hcd;\n        8'h81: b = 8'h0c;\n        8'h82: b = 8'h13;\n        8'h83: b = 8'hec;\n        8'h84: b = 8'h5f;\n        8'h85: b = 8'h97;\n        8'h86: b = 8'h44;\n        8'h87: b = 8'h17;\n        8'h88: b = 8'hc4;\n        8'h89: b = 8'ha7;\n        8'h8a: b = 8'h7e;\n        8'h8b: b = 8'h3d;\n        8'h8c: b = 8'h64;\n        8'h8d: b = 8'h5d;\n        8'h8e: b = 8'h19;\n        8'h8f: b = 8'h73;\n        8'h90: b = 8'h60;\n        8'h91: b = 8'h81;\n        8'h92: b = 8'h4f;\n        8'h93: b = 8'hdc;\n        8'h94: b = 8'h22;\n        8'h95: b = 8'h2a;\n        8'h96: b = 8'h90;\n        8'h97: b = 8'h88;\n        8'h98: b = 8'h46;\n        8'h99: b = 8'hee;\n        8'h9a: b = 8'hb8;\n        8'h9b: b = 8'h14;\n        8'h9c: b = 8'hde;\n        8'h9d: b = 8'h5e;\n        8'h9e: b = 8'h0b;\n        8'h9f: b = 8'hdb;\n        8'ha0: b = 8'he0;\n        8'ha1: b = 8'h32;\n        8'ha2: b = 8'h3a;\n        8'ha3: b = 8'h0a;\n        8'ha4: b = 8'h49;\n        8'ha5: b = 8'h06;\n        8'ha6: b = 8'h24;\n        8'ha7: b = 8'h5c;\n        8'ha8: b = 8'hc2;\n        8'ha9: b = 8'hd3;\n        8'haa: b = 8'hac;\n        8'hab: b = 8'h62;\n        8'hac: b = 8'h91;\n        8'had: b = 8'h95;\n        8'hae: b = 8'he4;\n        8'haf: b = 8'h79;\n        8'hb0: b = 8'he7;\n        8'hb1: b = 8'hc8;\n        8'hb2: b = 8'h37;\n        8'hb3: b = 8'h6f;\n        8'hb4: b = 8'h8d;\n        8'hb5: b = 8'hd5;\n        8'hb6: b = 8'h4e;\n        8'hb7: b = 8'ha9;\n        8'hb8: b = 8'h6c;\n        8'hb9: b = 8'h56;\n        8'hba: b = 8'hf4;\n        8'hbb: b = 8'hea;\n        8'hbc: b = 8'h65;\n        8'hbd: b = 8'h7a;\n        8'hbe: b = 8'hae;\n        8'hbf: b = 8'h08;\n        8'hc0: b = 8'hba;\n        8'hc1: b = 8'h78;\n        8'hc2: b = 8'h25;\n        8'hc3: b = 8'h2e;\n        8'hc4: b = 8'h1c;\n        8'hc5: b = 8'ha6;\n        8'hc6: b = 8'hb4;\n        8'hc7: b = 8'hc6;\n        8'hc8: b = 8'he8;\n        8'hc9: b = 8'hdd;\n        8'hca: b = 8'h74;\n        8'hcb: b = 8'h1f;\n        8'hcc: b = 8'h4b;\n        8'hcd: b = 8'hbd;\n        8'hce: b = 8'h8b;\n        8'hcf: b = 8'h8a;\n        8'hd0: b = 8'h70;\n        8'hd1: b = 8'h3e;\n        8'hd2: b = 8'hb5;\n        8'hd3: b = 8'h66;\n        8'hd4: b = 8'h48;\n        8'hd5: b = 8'h03;\n        8'hd6: b = 8'hf6;\n        8'hd7: b = 8'h0e;\n        8'hd8: b = 8'h61;\n        8'hd9: b = 8'h35;\n        8'hda: b = 8'h57;\n        8'hdb: b = 8'hb9;\n        8'hdc: b = 8'h86;\n        8'hdd: b = 8'hc1;\n        8'hde: b = 8'h1d;\n        8'hdf: b = 8'h9e;\n        8'he0: b = 8'he1;\n        8'he1: b = 8'hf8;\n        8'he2: b = 8'h98;\n        8'he3: b = 8'h11;\n        8'he4: b = 8'h69;\n        8'he5: b = 8'hd9;\n        8'he6: b = 8'h8e;\n        8'he7: b = 8'h94;\n        8'he8: b = 8'h9b;\n        8'he9: b = 8'h1e;\n        8'hea: b = 8'h87;\n        8'heb: b = 8'he9;\n        8'hec: b = 8'hce;\n        8'hed: b = 8'h55;\n        8'hee: b = 8'h28;\n        8'hef: b = 8'hdf;\n        8'hf0: b = 8'h5c;\n        8'hf1: b = 8'h9f;\n        8'hf2: b = 8'h8c;\n        8'hf3: b = 8'h9a;\n        8'hf4: b = 8'h08;\n        8'hf5: b = 8'h16;\n        8'hf6: b = 8'haa;\n        8'hf7: b = 8'h8d;\n        8'hf8: b = 8'h93;\n        8'hf9: b = 8'h17;\n        8'hfa: b = 8'h6b;\n        8'hfb: b = 8'h20;\n        8'hfc: b = 8'hfe;\n        8'hfd: b = 8'hb0;\n        8'hfe: b = 8'h89;\n        8'hff: b = 8'h6e;\n    endcase\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 10, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal registers\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] round_constant;\nreg [2:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\n// Round constant generator module\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(round_constant)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        // Key expansion operation\n        if (round < 10) begin\n            // Word rotation and S-box substitution\n            temp <= {w3[23:0], w3[31:24]};\n            sbox.a <= temp[7:0];\n            temp[7:0] <= sbox.b;\n            sbox.a <= temp[15:8];\n            temp[15:8] <= sbox.b;\n            sbox.a <= temp[23:16];\n            temp[23:16] <= sbox.b;\n            sbox.a <= temp[31:24];\n            temp[31:24] <= sbox.b;\n\n            // Round constant XOR\n            temp <= temp ^ {24'b0, round_constant};\n\n            // Update round keys\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n\n            round <= round + 1;\n        end\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox[256];\n\nalways @(*) begin\n    case (a)\n        8'h00: b <= 8'h63;\n        8'h01: b <= 8'h7c;\n        8'h02: b <= 8'h77;\n        8'h03: b <= 8'h7b;\n        8'h04: b <= 8'hf2;\n        8'h05: b <= 8'h6b;\n        8'h06: b <= 8'h6f;\n        8'h07: b <= 8'hc5;\n        8'h08: b <= 8'h30;\n        8'h09: b <= 8'h01;\n        8'h0a: b <= 8'h67;\n        8'h0b: b <= 8'h2b;\n        8'h0c: b <= 8'hfe;\n        8'h0d: b <= 8'hd7;\n        8'h0e: b <= 8'hab;\n        8'h0f: b <= 8'h76;\n        // ... (rest of the S-box table)\n    endcase\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] round_constant;\nreg [2:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        round_constant <= 8'h01;\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            round_constant <= {round_constant[6:0], 1'b0} ^ (round_constant[7] ? 8'h1b : 8'h00);\n            round <= round + 1;\n        end\n    end\nend\n\nassign out = {24'b0, round_constant};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 11, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal registers to store the round keys\nreg [31:0] w0, w1, w2, w3;\n\n// Internal wire to store the round constant\nwire [31:0] rcon;\n\n// Instantiate the aes_rcon module to generate the round constant\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\n// Instantiate the aes_sbox module to perform S-box substitution\naes_sbox sbox(\n    .a(w1[7:0]),\n    .b()\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end else begin\n        // Key expansion operation\n        w0 <= w0 ^ (w1 ^ rcon);\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\n// Internal register to store the round constant\nreg [31:0] rcon_reg;\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_reg <= 32'd1;\n    end else begin\n        // Round constant update\n        rcon_reg <= {rcon_reg[23:0], rcon_reg[31:24]} ^ (rcon_reg[31] ? 32'd0 : 32'd0);\n    end\nend\n\nassign out = {rcon_reg, 24'd0};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox_table [256];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Initialize the S-box table with the AES S-box values\n    sbox_table[0] = 8'd99;\n    sbox_table[1] = 8'd124;\n    sbox_table[2] = 8'd119;\n    // ... initialize the rest of the S-box table ...\nend\n\n// Perform S-box substitution\nassign b = sbox_table[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 12, "code": "```ilog\nmodule aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal registers\nreg [31:0] w0, w1, w2, w3;\n\n// Round constant generator\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out()\n);\n\n// S-box modules\naes_sbox sbox0(\n    .a(),\n    .b()\n);\naes_sbox sbox1(\n    .a(),\n    .b()\n);\naes_sbox sbox2(\n    .a(),\n    .b()\n);\naes_sbox sbox3(\n    .a(),\n    .b()\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n    end else begin\n        // Key expansion operation\n        w0 <= w0 ^ (sbox0.b ^ sbox1.b ^ sbox2.b ^ sbox3.b);\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon_val;\nreg [3:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        round <= 0;\n        rcon_val <= 8'h01;\n    end else begin\n        round <= round + 1;\n        rcon_val <= {rcon_val[6:0], 1'b0} ^ (rcon_val[7] ? 8'h1b : 8'h00);\n    end\nend\n\nassign out = {24'b0, rcon_val};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box implementation (e.g., using a lookup table)\nreg [7:0] sbox[256];\n\nalways @(*) begin\n    b = sbox[a];\nend\n\n// Initialize S-box values\ninitial begin\n    // Load S-box values from a file or define them manually\n    // For example:\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    // ...\nend\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 13, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\nreg [31:0] w[43:0];\nreg [7:0] sbox_out;\nreg [7:0] rcon_out;\nreg [2:0] round;\n\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon_out)\n);\n\naes_sbox sbox(\n    .a(w[1][7:0]),\n    .b(sbox_out)\n);\n\nalways @(posedge clk) begin\n    if (kld) begin\n        w[0] <= key[127:96];\n        w[1] <= key[95:64];\n        w[2] <= key[63:32];\n        w[3] <= key[31:0];\n        round <= 0;\n        wo_0 <= w[0];\n        wo_1 <= w[1];\n        wo_2 <= w[2];\n        wo_3 <= w[3];\n    end else begin\n        if (round < 10) begin\n            reg [31:0] temp;\n            temp[31:24] <= w[3][23:16];\n            temp[23:16] <= w[3][15:8];\n            temp[15:8] <= w[3][7:0];\n            temp[7:0] <= w[3][31:24];\n            temp <= temp ^ {sbox_out, sbox_out, sbox_out, sbox_out};\n            temp <= temp ^ {rcon_out, 8'd0, 8'd0, 8'd0};\n            w[4] <= w[0] ^ temp;\n            w[5] <= w[1] ^ w[4];\n            w[6] <= w[2] ^ w[5];\n            w[7] <= w[3] ^ w[6];\n            w[0] <= w[4];\n            w[1] <= w[5];\n            w[2] <= w[6];\n            w[3] <= w[7];\n            round <= round + 1;\n            wo_0 <= w[0];\n            wo_1 <= w[1];\n            wo_2 <= w[2];\n            wo_3 <= w[3];\n        end\n    end\nend\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon_val;\nreg [2:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_val <= 8'd1;\n        round <= 0;\n    end else begin\n        if (round < 10) begin\n            rcon_val <= rcon_val << 1;\n            if (rcon_val[7]) begin\n                rcon_val <= rcon_val ^ 8'd11b;\n            end\n            round <= round + 1;\n        end\n    end\nend\n\nassign out = {rcon_val, 24'd0};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\nreg [7:0] sbox_val;\n\nalways @(*) begin\n    case (a)\n        8'd0: sbox_val = 8'd52;\n        8'd1: sbox_val = 8'd81;\n        // Add more cases for the S-box values\n        default: sbox_val = 8'd0;\n    endcase\nend\n\nassign b = sbox_val;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 14, "code": "``` key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal signals\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] sbox_out;\nreg [31:0] rcon_out;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(sbox_out)\n);\n\n// Round constant module\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon_out)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        round <= 0;\n    end else begin\n        // Key expansion operation\n        if (round < 10) begin\n            // Word rotation and S-box substitution\n            temp <= {w3[23:0], w3[31:24]};\n            sbox_out <= sbox.b;\n            temp[7:0] <= sbox_out;\n            sbox_out <= sbox.b;\n            temp[15:8] <= sbox_out;\n            sbox_out <= sbox.b;\n            temp[23:16] <= sbox_out;\n            sbox_out <= sbox.b;\n            temp[31:24] <= sbox_out;\n\n            // Round constant XOR\n            temp <= temp ^ rcon_out;\n\n            // New round key generation\n            w0 <= w0 ^ temp;\n            w1 <= w1 ^ w0;\n            w2 <= w2 ^ w1;\n            w3 <= w3 ^ w2;\n\n            round <= round + 1;\n        end\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 15, "code": "module aes_key_expand_128(\n    input               clk,\n    input               kld,\n    input      [127:0]  key,\n    output     [31:0]   wo_0,\n    output     [31:0]   wo_1,\n    output     [31:0]   wo_2,\n    output     [31:0]   wo_3\n);\n\n// Internal signals\nreg [31:0] w [0:43];  // Round keys\nreg [31:0] rcon;      // Round constant\nreg [7:0]  sbox_out;  // S-box output\nreg [3:0]  round;     // Round counter\n\n// S-box module\naes_sbox sbox(\n    .a(w[round][7:0]),\n    .b(sbox_out)\n);\n\n// Round constant module\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w[0] <= key[127:96];\n        w[1] <= key[95:64];\n        w[2] <= key[63:32];\n        w[3] <= key[31:0];\n        round <= 0;\n    end\nend\n\n// Key expansion operation\nalways @(posedge clk) begin\n    if (!kld) begin\n        // Word rotation and S-box substitution\n        reg [31:0] temp;\n        temp[31:24] <= w[round][23:16];\n        temp[23:16] <= w[round][15:8];\n        temp[15:8]  <= w[round][7:0];\n        temp[7:0]   <= w[round][31:24];\n        \n        // S-box substitution\n        temp[31:24] <= sbox_out;\n        temp[23:16] <= sbox_out;\n        temp[15:8]  <= sbox_out;\n        temp[7:0]   <= sbox_out;\n        \n        // Round constant XOR\n        temp <= temp ^ rcon;\n        \n        // New round key generation\n        w[round+4] <= w[round] ^ temp;\n        \n        // Update round counter\n        round <= round + 1;\n    end\nend\n\n// Output round keys\nassign wo_0 = w[round];\nassign wo_1 = w[round+1];\nassign wo_2 = w[round+2];\nassign wo_3 = w[round+3];\n\nendmodule\n\nmodule aes_sbox(\n    input  [7:0]  a,\n    output [7:0]  b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\nalways @(*) begin\n    b = sbox[a];\nend\n\n// Initialize S-box lookup table\ninitial begin\n    // Initialize S-box values\n    // ...\nend\n\nendmodule\n\nmodule aes_rcon(\n    input               clk,\n    input               kld,\n    output     [31:0]   out\n);\n\n// Round constant generation\nreg [7:0] rcon_val;\nreg [3:0] round;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_val <= 8'h01;\n        round <= 0;\n    end else begin\n        // Update round constant\n        rcon_val <= rcon_val << 1;\n        if (rcon_val[7]) begin\n            rcon_val[7:4] <= 4'h1b;\n        end\n        round <= round + 1;\n    end\nend\n\nassign out = {24'h000000, rcon_val};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 16, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal signals\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[31:24]),\n    .b(temp[31:24])\n);\n\n// Round constant module\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end else begin\n        // Key expansion operation\n        temp <= {w3[23:0], w3[31:24]};\n        temp <= sbox.b ^ rcon;\n        w0 <= w0 ^ temp;\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end\nend\n\n// Round constant update\nalways @(posedge clk) begin\n    if (!kld) begin\n        round <= round + 1;\n        rcon_gen.out <= rcon << 1 ^ (rcon[7] ? 8'h1b : 8'h00);\n    end else begin\n        round <= 0;\n        rcon_gen.out <= 8'h01;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 17, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal signals\nreg [31:0] w0, w1, w2, w3;\nreg [31:0] temp;\nreg [7:0] rcon;\nreg [3:0] round;\n\n// S-box module\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\n// Round constant generator module\naes_rcon rcon_gen(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end else begin\n        // Key expansion operation\n        temp <= w3;\n        temp <= {temp[23:0], temp[31:24]}; // RotWord\n        temp <= sbox.b; // SubWord\n        temp <= temp ^ {24'b0, rcon}; // Rcon\n        w0 <= w0 ^ temp;\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n        wo_0 <= w0;\n        wo_1 <= w1;\n        wo_2 <= w2;\n        wo_3 <= w3;\n    end\nend\n\n// Round constant update\nalways @(posedge clk) begin\n    if (!kld) begin\n        round <= round + 1;\n        rcon <= {rcon[6:0], 1'b0}; // Left shift\n        if (rcon[7]) begin\n            rcon <= rcon ^ 8'h1b; // XOR with polynomial\n        end\n    end else begin\n        round <= 0;\n        rcon <= 8'h01;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 18, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal registers to store the round keys\nreg [31:0] w0, w1, w2, w3;\n\n// Internal wires for key expansion\nwire [31:0] temp;\n\n// S-box module instantiation\naes_sbox sbox(\n    .a(temp[7:0]),\n    .b(temp[7:0])\n);\n\n// Round constant generator module instantiation\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(temp[31:24])\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n    end else begin\n        // Key expansion operation\n        temp <= w3;\n        temp <= {temp[23:0], temp[31]} ^ rcon.out;\n        w0 <= w0 ^ temp;\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\n// Internal register to store the round constant\nreg [7:0] rcon_reg;\n\n// Round constant generation\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_reg <= 8'h01;\n    end else begin\n        rcon_reg <= {rcon_reg[6:0], rcon_reg[7]} ^ 8'h1b;\n    end\nend\n\n// Output assignment\nassign out = {24'h000000, rcon_reg};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox_table [256];\n\n// S-box initialization\ninitial begin\n    sbox_table[0] = 8'h63;\n    sbox_table[1] = 8'h7c;\n    sbox_table[2] = 8'h77;\n    sbox_table[3] = 8'h7b;\n    sbox_table[4] = 8'hf2;\n    sbox_table[5] = 8'h6b;\n    sbox_table[6] = 8'h6f;\n    sbox_table[7] = 8'hc5;\n    sbox_table[8] = 8'h30;\n    sbox_table[9] = 8'h01;\n    sbox_table[10] = 8'h67;\n    sbox_table[11] = 8'h2b;\n    sbox_table[12] = 8'hfe;\n    sbox_table[13] = 8'hd7;\n    sbox_table[14] = 8'hab;\n    sbox_table[15] = 8'h76;\n    // ... (rest of the S-box table)\nend\n\n// S-box lookup\nassign b = sbox_table[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 19, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Registers to store the 128-bit key\nreg [31:0] w0, w1, w2, w3;\n\n// Round constant generator\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon_out)\n);\n\n// S-box modules\naes_sbox sbox0(\n    .a(w1[31:24]),\n    .b(sbox_out0)\n);\n\naes_sbox sbox1(\n    .a(w1[23:16]),\n    .b(sbox_out1)\n);\n\naes_sbox sbox2(\n    .a(w1[15:8]),\n    .b(sbox_out2)\n);\n\naes_sbox sbox3(\n    .a(w1[7:0]),\n    .b(sbox_out3)\n);\n\n// Internal signals\nwire [31:0] temp;\nwire [31:0] rcon_out;\nwire [7:0] sbox_out0, sbox_out1, sbox_out2, sbox_out3;\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n    end else begin\n        // Key expansion operation\n        temp <= w3;\n        w3 <= w2 ^ (sbox_out0 << 24) ^ (sbox_out1 << 16) ^ (sbox_out2 << 8) ^ sbox_out3 ^ rcon_out;\n        w2 <= w1 ^ w3;\n        w1 <= w0 ^ w2;\n        w0 <= temp;\n    end\nend\n\n// Output assignments\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\n// Internal signal\nreg [7:0] rcon_reg;\n\n// Round constant generator\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_reg <= 8'h01;\n    end else begin\n        rcon_reg <= {rcon_reg[6:0], rcon_reg[7] ^ (rcon_reg[7] ? 8'h1b : 8'h00)};\n    end\nend\n\n// Output assignment\nassign out = {24'h000000, rcon_reg};\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box implementation (using a case statement)\nalways @(*) begin\n    case (a)\n        8'h00: b = 8'h63;\n        8'h01: b = 8'h7c;\n        8'h02: b = 8'h77;\n        8'h03: b = 8'h7b;\n        // ... (add more cases for the remaining S-box values)\n        default: b = 8'h00;\n    endcase\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_key_expand_128", "codeid": 20, "code": "module aes_key_expand_128(\n    input clk,\n    input kld,\n    input [127:0] key,\n    output [31:0] wo_0,\n    output [31:0] wo_1,\n    output [31:0] wo_2,\n    output [31:0] wo_3\n);\n\n// Internal registers to store the round keys\nreg [31:0] w0, w1, w2, w3;\n\n// Round constant generator\naes_rcon rcon(\n    .clk(clk),\n    .kld(kld),\n    .out(rcon_out)\n);\n\n// S-box modules for each byte\naes_sbox sbox0(\n    .a(w1[31:24]),\n    .b(sbox_out0)\n);\n\naes_sbox sbox1(\n    .a(w1[23:16]),\n    .b(sbox_out1)\n);\n\naes_sbox sbox2(\n    .a(w1[15:8]),\n    .b(sbox_out2)\n);\n\naes_sbox sbox3(\n    .a(w1[7:0]),\n    .b(sbox_out3)\n);\n\n// Key loading operation\nalways @(posedge clk) begin\n    if (kld) begin\n        w0 <= key[127:96];\n        w1 <= key[95:64];\n        w2 <= key[63:32];\n        w3 <= key[31:0];\n    end else begin\n        // Key expansion operation\n        w0 <= w0 ^ (sbox_out0 ^ sbox_out1 ^ sbox_out2 ^ sbox_out3 ^ rcon_out);\n        w1 <= w1 ^ w0;\n        w2 <= w2 ^ w1;\n        w3 <= w3 ^ w2;\n    end\nend\n\n// Output assignment\nassign wo_0 = w0;\nassign wo_1 = w1;\nassign wo_2 = w2;\nassign wo_3 = w3;\n\nendmodule\n\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [7:0] rcon_reg;\nassign out = {rcon_reg, 24'd0};\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcon_reg <= 8'd1;\n    end else begin\n        rcon_reg <= rcon_reg << 1 ^ (rcon_reg[7] ? 8'd11 : 8'd0);\n    end\nend\n\nendmodule\n\nmodule aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox_table [256];\n\nalways @(*) begin\n    b = sbox_table[a];\nend\n\ninitial begin\n    // Initialize S-box lookup table\n    // ...\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 1, "code": "module aes_rcon(\n    input  clk,\n    input  kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01000000;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        if (rcnt == 1) begin\n            rcon <= 8'h01;\n        end else begin\n            rcon <= (rcon << 1) ^ (rcon[7] ? 8'h1b : 8'h00);\n        end\n        out <= {rcon, 24'h000000};\n    end else begin\n        out <= 32'h00000000;\n        rcnt <= rcnt + 1;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 2, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7] ? 1 : 0), 7'b0});\n    end\nend\n\nalways @(posedge clk) begin\n    if (kld || rcnt > 9) begin\n        out <= 32'h01000000;\n    end else begin\n        out <= {rcon, 24'h000000};\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 3, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {8'h00, rcon[7]});\n    end\nend\n\nassign out = {rcon, 24'h000000};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 4, "code": "module aes_rcon(\n    input  clk,\n    input  kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [31:0] out_reg;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out_reg <= 32'h01000000;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        case (rcnt)\n            0: out_reg <= 32'h01000000;\n            1: out_reg <= 32'h02000000;\n            2: out_reg <= 32'h04000000;\n            3: out_reg <= 32'h08000000;\n            4: out_reg <= 32'h10000000;\n            5: out_reg <= 32'h20000000;\n            6: out_reg <= 32'h40000000;\n            7: out_reg <= 32'h80000000;\n            8: out_reg <= 32'h1b000000;\n            9: out_reg <= 32'h36000000;\n            default: out_reg <= 32'h00000000;\n        endcase\n    end else begin\n        rcnt <= rcnt + 1;\n        out_reg <= 32'h00000000;\n    end\nend\n\nassign out = out_reg;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 5, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {8'h00, rcon[7]});\n    end\nend\n\nalways @(*) begin\n    if (rcnt > 9) begin\n        out <= 32'h00000000;\n    end else begin\n        out <= {rcon, 24'h000000};\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 6, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01000000;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        case (rcnt)\n            0: out <= 32'h01000000;\n            1: out <= 32'h02000000;\n            2: out <= 32'h04000000;\n            3: out <= 32'h08000000;\n            4: out <= 32'h10000000;\n            5: out <= 32'h20000000;\n            6: out <= 32'h40000000;\n            7: out <= 32'h80000000;\n            8: out <= 32'h1b000000;\n            9: out <= 32'h36000000;\n            default: out <= 32'h00000000;\n        endcase\n    end else begin\n        out <= 32'h00000000;\n        rcnt <= rcnt + 1;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 7, "code": "```ilog\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7]) ? 1 : 0});\n    end\nend\n\nalways @(posedge clk) begin\n    if (rcnt < 10) begin\n        out <= {rcon, 24'h000000};\n    end else begin\n        out <= 32'h00000000;\n    end\nend\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 8, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01_00_00_00;\n    end else begin\n        if (rcnt < 10) begin\n            rcnt <= rcnt + 1;\n        end\n        case (rcnt)\n            0: rcon <= 8'h01;\n            1: rcon <= 8'h02;\n            2: rcon <= 8'h04;\n            3: rcon <= 8'h08;\n            4: rcon <= 8'h10;\n            5: rcon <= 8'h20;\n            6: rcon <= 8'h40;\n            7: rcon <= 8'h80;\n            8: rcon <= 8'h1B;\n            9: rcon <= 8'h36;\n            default: rcon <= 8'h00;\n        endcase\n        out <= {rcon, 24'h00};\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 9, "code": "```ilog\nmodule aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01000000;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        case (rcnt)\n            0: rcon <= 8'h01;\n            1: rcon <= 8'h02;\n            2: rcon <= 8'h04;\n            3: rcon <= 8'h08;\n            4: rcon <= 8'h10;\n            5: rcon <= 8'h20;\n            6: rcon <= 8'h40;\n            7: rcon <= 8'h80;\n            8: rcon <= 8'h1b;\n            9: rcon <= 8'h36;\n        endcase\n        out <= {rcon, 24'h000000};\n    end else begin\n        out <= 32'h00000000;\n        rcnt <= rcnt + 1;\n    end\nend\n\nendmodule\n```", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 10, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7] == 1) ? 8'h1 : 8'h0});\n    end\nend\n\nassign out = (rcnt < 10) ? {rcon, 24'h0} : 32'h0;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 11, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01000000;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        case (rcnt)\n            0: out <= 32'h01000000;\n            1: out <= 32'h02000000;\n            2: out <= 32'h04000000;\n            3: out <= 32'h08000000;\n            4: out <= 32'h10000000;\n            5: out <= 32'h20000000;\n            6: out <= 32'h40000000;\n            7: out <= 32'h80000000;\n            8: out <= 32'h1B000000;\n            9: out <= 32'h36000000;\n            default: out <= 32'h00000000;\n        endcase\n    end else begin\n        out <= 32'h00000000;\n        rcnt <= rcnt + 1;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 12, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {8'h00, rcon[7]});\n    end\nend\n\nalways @(*) begin\n    if (rcnt < 10) begin\n        out <= {rcon, 24'h000000};\n    end else begin\n        out <= 32'h00000000;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 13, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01000000;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        out <= {rcon, 24'h000000};\n    end else begin\n        rcnt <= rcnt + 1;\n        out <= 32'h00000000;\n    end\nend\n\nalways @(rcnt) begin\n    case (rcnt)\n        0: rcon <= 8'h01;\n        1: rcon <= 8'h02;\n        2: rcon <= 8'h04;\n        3: rcon <= 8'h08;\n        4: rcon <= 8'h10;\n        5: rcon <= 8'h20;\n        6: rcon <= 8'h40;\n        7: rcon <= 8'h80;\n        8: rcon <= 8'h1B;\n        9: rcon <= 8'h36;\n        default: rcon <= 8'h00;\n    endcase\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 14, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7] == 1) ? 8'b1 : 8'b0});\n    end\nend\n\nalways @(posedge clk) begin\n    if (rcnt < 10) begin\n        out <= {rcon, 24'h000000};\n    end else begin\n        out <= 32'h00000000;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 15, "code": "module aes_rcon(\n    input  clk,\n    input  kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7]) ? 1 : 0});\n    end\nend\n\nassign out = {rcon, 24'h000000};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 16, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h11b & {7'b0, rcon[7]}); // reduction in GF(2^8)\n    end\nend\n\nalways @(posedge clk) begin\n    if (rcnt < 10) begin\n        out <= {rcon, 24'h000000};\n    end else begin\n        out <= 32'h00000000;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 17, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        out <= 32'h01_00_00_00;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        case (rcnt)\n            0: out <= 32'h01_00_00_00;\n            1: out <= 32'h02_00_00_00;\n            2: out <= 32'h04_00_00_00;\n            3: out <= 32'h08_00_00_00;\n            4: out <= 32'h10_00_00_00;\n            5: out <= 32'h20_00_00_00;\n            6: out <= 32'h40_00_00_00;\n            7: out <= 32'h80_00_00_00;\n            8: out <= 32'h1B_00_00_00;\n            9: out <= 32'h36_00_00_00;\n        endcase\n    end else begin\n        out <= 32'h00_00_00_00;\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 18, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7] & 1), 7'b0});\n    end\nend\n\nassign out = {rcon, 24'b0};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 19, "code": "module aes_rcon(\n    input clk,\n    input kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h11b & {7'h0, rcon[7]});\n    end\nend\n\nalways @(*) begin\n    if (kld || rcnt > 9) begin\n        out <= 32'h01000000;\n    end else begin\n        out <= {rcon, 24'h000000};\n    end\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_rcon", "codeid": 20, "code": "module aes_rcon(\n    input  clk,\n    input  kld,\n    output [31:0] out\n);\n\nreg [3:0] rcnt;\nreg [7:0] rcon;\n\nalways @(posedge clk) begin\n    if (kld) begin\n        rcnt <= 0;\n        rcon <= 8'h01;\n    end else if (rcnt < 10) begin\n        rcnt <= rcnt + 1;\n        rcon <= (rcon << 1) ^ (8'h1b & {(rcon[7]), 7'h0});\n    end\nend\n\nassign out = {rcon, 24'h000000};\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 1, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    // Initialize S-box values according to AES standard\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h-a;\n    sbox[29] = 8'h3d;\n    sbox[30] = 8'hbe;\n    sbox[31] = 8'h2f;\n    sbox[32] = 8'h80;\n    sbox[33] = 8'h90;\n    sbox[34] = 8'h9a;\n    sbox[35] = 8'h88;\n    sbox[36] = 8'h46;\n    sbox[37] = 8'h8b;\n    sbox[38] = 8'h4b;\n    sbox[39] = 8'h8c;\n    sbox[40] = 8'h50;\n    sbox[41] = 8'h3f;\n    sbox[42] = 8'h96;\n    sbox[43] = 8'h6a;\n    sbox[44] = 8'h9d;\n    sbox[45] = 8'h8a;\n    sbox[46] = 8'h23;\n    sbox[47] = 8'h55;\n    sbox[48] = 8'h97;\n    sbox[49] = 8'h7c;\n    sbox[50] = 8'h85;\n    sbox[51] = 8'hd6;\n    sbox[52] = 8'hb3;\n    sbox[53] = 8'h21;\n    sbox[54] = 8'h1c;\n    sbox[55] = 8'h98;\n    sbox[56] = 8'hfc;\n    sbox[57] = 8'h1b;\n    sbox[58] = 8'h5e;\n    sbox[59] = 8'h60;\n    sbox[60] = 8'h86;\n    sbox[61] = 8'h48;\n    sbox[62] = 8'h5a;\n    sbox[63] = 8'h4f;\n    sbox[64] = 8'h17;\n    sbox[65] = 8'h4e;\n    sbox[66] = 8'hfc;\n    sbox[67] = 8'h3b;\n    sbox[68] = 8'h39;\n    sbox[69] = 8'hff;\n    sbox[70] = 8'h24;\n    sbox[71] = 8'h2e;\n    sbox[72] = 8'h53;\n    sbox[73] = 8'h3c;\n    sbox[74] = 8'h9e;\n    sbox[75] = 8'hb1;\n    sbox[76] = 8'h15;\n    sbox[77] = 8'h38;\n    sbox[78] = 8'h5d;\n    sbox[79] = 8'h9f;\n    sbox[80] = 8'h66;\n    sbox[81] = 8'h41;\n    sbox[82] = 8'h44;\n    sbox[83] = 8'h6e;\n    sbox[84] = 8'h9b;\n    sbox[85] = 8'h79;\n    sbox[86] = 8'h2a;\n    sbox[87] = 8'h6d;\n    sbox[88] = 8'h9a;\n    sbox[89] = 8'h93;\n    sbox[90] = 8'h4c;\n    sbox[91] = 8'h11;\n    sbox[92] = 8'h1f;\n    sbox[93] = 8'h13;\n    sbox[94] = 8'hcc;\n    sbox[95] = 8'h5f;\n    sbox[96] = 8'h94;\n    sbox[97] = 8'h5b;\n    sbox[98] = 8'h42;\n    sbox[99] = 8'h69;\n    sbox[100] = 8'h16;\n    sbox[101] = 8'h3a;\n    sbox[102] = 8'h14;\n    sbox[103] = 8'h2b;\n    sbox[104] = 8'h28;\n    sbox[105] = 8'h9d;\n    sbox[106] = 8'h3e;\n    sbox[107] = 8'h0a;\n    sbox[108] = 8'h84;\n    sbox[109] = 8'h54;\n    sbox[110] = 8'h9b;\n    sbox[111] = 8'h1a;\n    sbox[112] = 8'h2d;\n    sbox[113] = 8'h8d;\n    sbox[114] = 8'h81;\n    sbox[115] = 8'h7f;\n    sbox[116] = 8'h20;\n    sbox[117] = 8'h4a;\n    sbox[118] = 8'h4d;\n    sbox[119] = 8'h2c;\n    sbox[120] = 8'h2f;\n    sbox[121] = 8'h54;\n    sbox[122] = 8'h18;\n    sbox[123] = 8'h5c;\n    sbox[124] = 8'h08;\n    sbox[125] = 8'h45;\n    sbox[126] = 8'h9f;\n    sbox[127] = 8'h2e;\n    sbox[128] = 8'h57;\n    sbox[129] = 8'hf4;\n    sbox[130] = 8'h5e;\n    sbox[131] = 8'h3f;\n    sbox[132] = 8'h5a;\n    sbox[133] = 8'hb2;\n    sbox[134] = 8'h9c;\n    sbox[135] = 8'h9d;\n    sbox[136] = 8'h1b;\n    sbox[137] = 8'h17;\n    sbox[138] = 8'h98;\n    sbox[139] = 8'hec;\n    sbox[140] = 8'h78;\n    sbox[141] = 8'h5b;\n    sbox[142] = 8'h58;\n    sbox[143] = 8'h3d;\n    sbox[144] = 8'hac;\n    sbox[145] = 8'h96;\n    sbox[146] = 8'h51;\n    sbox[147] = 8'h3b;\n    sbox[148] = 8'h9a;\n    sbox[149] = 8'hfc;\n    sbox[150] = 8'h65;\n    sbox[151] = 8'h6e;\n    sbox[152] = 8'h95;\n    sbox[153] = 8'h66;\n    sbox[154] = 8'hbc;\n    sbox[155] = 8'hdb;\n    sbox[156] = 8'h8a;\n    sbox[157] = 8'h21;\n    sbox[158] = 8'h40;\n    sbox[159] = 8'h61;\n    sbox[160] = 8'h4e;\n    sbox[161] = 8'h6d;\n    sbox[162] = 8'h74;\n    sbox[163] = 8'h43;\n    sbox[164] = 8'h71;\n    sbox[165] = 8'h99;\n    sbox[166] = 8'h1c;\n    sbox[167] = 8'h0d;\n    sbox[168] = 8'h08;\n    sbox[169] = 8'h70;\n    sbox[170] = 8'hb9;\n    sbox[171] = 8'h75;\n    sbox[172] = 8'h0e;\n    sbox[173] = 8'h04;\n    sbox[174] = 8'h85;\n    sbox[175] = 8'h91;\n    sbox[176] = 8'h40;\n    sbox[177] = 8'h1f;\n    sbox[178] = 8'h14;\n    sbox[179] = 8'had;\n    sbox[180] = 8'hda;\n    sbox[181] = 8'h22;\n    sbox[182] = 8'h35;\n    sbox[183] = 8'h8d;\n    sbox[184] = 8'h85;\n    sbox[185] = 8'hb8;\n    sbox[186] = 8'h31;\n    sbox[187] = 8'h71;\n    sbox[188] = 8'hd0;\n    sbox[189] = 8'h5a;\n    sbox[190] = 8'hed;\n    sbox[191] = 8'hf5;\n    sbox[192] = 8'h18;\n    sbox[193] = 8'h24;\n    sbox[194] = 8'h3f;\n    sbox[195] = 8'h46;\n    sbox[196] = 8'h55;\n    sbox[197] = 8'ha2;\n    sbox[198] = 8'hfd;\n    sbox[199] = 8'h8c;\n    sbox[200] = 8'h12;\n    sbox[201] = 8'h6b;\n    sbox[202] = 8'hda;\n    sbox[203] = 8'h5f;\n    sbox[204] = 8'h36;\n    sbox[205] = 8'ha3;\n    sbox[206] = 8'h37;\n    sbox[207] = 8'h62;\n    sbox[208] = 8'h91;\n    sbox[209] = 8'h19;\n    sbox[210] = 8'h6c;\n    sbox[211] = 8'h20;\n    sbox[212] = 8'h6a;\n    sbox[213] = 8'h47;\n    sbox[214] = 8'h4b;\n    sbox[215] = 8'h1d;\n    sbox[216] = 8'h13;\n    sbox[217] = 8'h6d;\n    sbox[218] = 8'h7a;\n    sbox[219] = 8'h97;\n    sbox[220] = 8'h9e;\n    sbox[221] = 8'h60;\n    sbox[222] = 8'h86;\n    sbox[223] = 8'h48;\n    sbox[224] = 8'h08;\n    sbox[225] = 8'h5a;\n    sbox[226] = 8'h2e;\n    sbox[227] = 8'h3c;\n    sbox[228] = 8'h1e;\n    sbox[229] = 8'h41;\n    sbox[230] = 8'hc6;\n    sbox[231] = 8'h52;\n    sbox[232] = 8'h36;\n    sbox[233] = 8'h10;\n    sbox[234] = 8'h24;\n    sbox[235] = 8'h5c;\n    sbox[236] = 8'h00;\n    sbox[237] = 8'h77;\n    sbox[238] = 8'h61;\n    sbox[239] = 8'h6f;\n    sbox[240] = 8'h34;\n    sbox[241] = 8'h63;\n    sbox[242] = 8'hba;\n    sbox[243] = 8'h5e;\n    sbox[244] = 8'h38;\n    sbox[245] = 8'h44;\n    sbox[246] = 8'h6e;\n    sbox[247] = 8'hb4;\n    sbox[248] = 8'hc9;\n    sbox[249] = 8'h4a;\n    sbox[250] = 8'h2a;\n    sbox[251] = 8'h4f;\n    sbox[252] = 8'h19;\n    sbox[253] = 8'h13;\n    sbox[254] = 8'h7c;\n    sbox[255] = 8'h9d;\nend\n\n// Perform S-box substitution\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 2, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    sbox[0]  = 8'h63;\n    sbox[1]  = 8'h7c;\n    sbox[2]  = 8'h77;\n    sbox[3]  = 8'h7b;\n    sbox[4]  = 8'hf2;\n    sbox[5]  = 8'h6b;\n    sbox[6]  = 8'h6f;\n    sbox[7]  = 8'hc5;\n    sbox[8]  = 8'h30;\n    sbox[9]  = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h-a;\n    sbox[29] = 8'h56;\n    sbox[30] = 8'h86;\n    sbox[31] = 8'h3d;\n    sbox[32] = 8'h65;\n    sbox[33] = 8'h93;\n    sbox[34] = 8'h44;\n    sbox[35] = 8'h04;\n    sbox[36] = 8'hde;\n    sbox[37] = 8'h9b;\n    sbox[38] = 8'h87;\n    sbox[39] = 8'h3e;\n    sbox[40] = 8'h64;\n    sbox[41] = 8'h8e;\n    sbox[42] = 8'h78;\n    sbox[43] = 8'h1a;\n    sbox[44] = 8'h11;\n    sbox[45] = 8'hbf;\n    sbox[46] = 8'h5a;\n    sbox[47] = 8'h4c;\n    sbox[48] = 8'h02;\n    sbox[49] = 8'h53;\n    sbox[50] = 8'h9f;\n    sbox[51] = 8'h24;\n    sbox[52] = 8'h0b;\n    sbox[53] = 8'h75;\n    sbox[54] = 8'h0e;\n    sbox[55] = 8'h50;\n    sbox[56] = 8'h95;\n    sbox[57] = 8'h42;\n    sbox[58] = 8'h9d;\n    sbox[59] = 8'h4e;\n    sbox[60] = 8'h91;\n    sbox[61] = 8'h99;\n    sbox[62] = 8'h40;\n    sbox[63] = 8'h66;\n    sbox[64] = 8'h3b;\n    sbox[65] = 8'h44;\n    sbox[66] = 8'hfc;\n    sbox[67] = 8'h73;\n    sbox[68] = 8'h8c;\n    sbox[69] = 8'hba;\n    sbox[70] = 8'h16;\n    sbox[71] = 8'hea;\n    sbox[72] = 8'hb2;\n    sbox[73] = 8'h6a;\n    sbox[74] = 8'h60;\n    sbox[75] = 8'h95;\n    sbox[76] = 8'h25;\n    sbox[77] = 8'h36;\n    sbox[78] = 8'h3f;\n    sbox[79] = 8'h58;\n    sbox[80] = 8'h4d;\n    sbox[81] = 8'heb;\n    sbox[82] = 8'hbf;\n    sbox[83] = 8'h70;\n    sbox[84] = 8'h41;\n    sbox[85] = 8'h9f;\n    sbox[86] = 8'h2d;\n    sbox[87] = 8'h79;\n    sbox[88] = 8'hf3;\n    sbox[89] = 8'h80;\n    sbox[90] = 8'h96;\n    sbox[91] = 8'h17;\n    sbox[92] = 8'h9b;\n    sbox[93] = 8'h94;\n    sbox[94] = 8'hce;\n    sbox[95] = 8'ha5;\n    sbox[96] = 8'h65;\n    sbox[97] = 8'hcf;\n    sbox[98] = 8'h68;\n    sbox[99] = 8'h39;\n    sbox[100] = 8'h4f;\n    sbox[101] = 8'h4b;\n    sbox[102] = 8'h92;\n    sbox[103] = 8'h36;\n    sbox[104] = 8'h87;\n    sbox[105] = 8'h11;\n    sbox[106] = 8'h9d;\n    sbox[107] = 8'h85;\n    sbox[108] = 8'h97;\n    sbox[109] = 8'h12;\n    sbox[110] = 8'h17;\n    sbox[111] = 8'h7c;\n    sbox[112] = 8'h4a;\n    sbox[113] = 8'h7f;\n    sbox[114] = 8'h81;\n    sbox[115] = 8'h89;\n    sbox[116] = 8'h6d;\n    sbox[117] = 8'h5b;\n    sbox[118] = 8'h9a;\n    sbox[119] = 8'h09;\n    sbox[120] = 8'h33;\n    sbox[121] = 8'h74;\n    sbox[122] = 8'h27;\n    sbox[123] = 8'h83;\n    sbox[124] = 8'h7a;\n    sbox[125] = 8'h98;\n    sbox[126] = 8'h05;\n    sbox[127] = 8'h4f;\n    sbox[128] = 8'h7c;\n    sbox[129] = 8'h62;\n    sbox[130] = 8'h34;\n    sbox[131] = 8'h64;\n    sbox[132] = 8'h8f;\n    sbox[133] = 8'h78;\n    sbox[134] = 8'h24;\n    sbox[135] = 8'h5a;\n    sbox[136] = 8'h21;\n    sbox[137] = 8'h14;\n    sbox[138] = 8'h9b;\n    sbox[139] = 8'h3e;\n    sbox[140] = 8'h1e;\n    sbox[141] = 8'h1f;\n    sbox[142] = 8'h6e;\n    sbox[143] = 8'h8b;\n    sbox[144] = 8'h56;\n    sbox[145] = 8'h19;\n    sbox[146] = 8'h11;\n    sbox[147] = 8'hbe;\n    sbox[148] = 8'h1c;\n    sbox[149] = 8'h7c;\n    sbox[150] = 8'h5c;\n    sbox[151] = 8'h29;\n    sbox[152] = 8'h7f;\n    sbox[153] = 8'h6b;\n    sbox[154] = 8'h4e;\n    sbox[155] = 8'h85;\n    sbox[156] = 8'h4a;\n    sbox[157] = 8'h22;\n    sbox[158] = 8'h53;\n    sbox[159] = 8'h2f;\n    sbox[160] = 8'h84;\n    sbox[161] = 8'h53;\n    sbox[162] = 8'h1a;\n    sbox[163] = 8'h6d;\n    sbox[164] = 8'h20;\n    sbox[165] = 8'h61;\n    sbox[166] = 8'h33;\n    sbox[167] = 8'h26;\n    sbox[168] = 8'h19;\n    sbox[169] = 8'h48;\n    sbox[170] = 8'h10;\n    sbox[171] = 8'h08;\n    sbox[172] = 8'h27;\n    sbox[173] = 8'h8d;\n    sbox[174] = 8'h74;\n    sbox[175] = 8'h4b;\n    sbox[176] = 8'h01;\n    sbox[177] = 8'h9d;\n    sbox[178] = 8'h29;\n    sbox[179] = 8'h7b;\n    sbox[180] = 8'h7e;\n    sbox[181] = 8'h6c;\n    sbox[182] = 8'h5b;\n    sbox[183] = 8'h9e;\n    sbox[184] = 8'h15;\n    sbox[185] = 8'h46;\n    sbox[186] = 8'h57;\n    sbox[187] = 8'ha7;\n    sbox[188] = 8'h16;\n    sbox[189] = 8'h6a;\n    sbox[190] = 8'h5e;\n    sbox[191] = 8'h85;\n    sbox[192] = 8'h9b;\n    sbox[193] = 8'h4d;\n    sbox[194] = 8'h2b;\n    sbox[195] = 8'h8e;\n    sbox[196] = 8'h82;\n    sbox[197] = 8'h6c;\n    sbox[198] = 8'h6f;\n    sbox[199] = 8'h64;\n    sbox[200] = 8'h68;\n    sbox[201] = 8'h99;\n    sbox[202] = 8'h43;\n    sbox[203] = 8'h39;\n    sbox[204] = 8'h77;\n    sbox[205] = 8'h9c;\n    sbox[206] = 8'h9e;\n    sbox[207] = 8'h4f;\n    sbox[208] = 8'h24;\n    sbox[209] = 8'h55;\n    sbox[210] = 8'h7b;\n    sbox[211] = 8'h71;\n    sbox[212] = 8'h80;\n    sbox[213] = 8'h95;\n    sbox[214] = 8'h44;\n    sbox[215] = 8'h8b;\n    sbox[216] = 8'h4c;\n    sbox[217] = 8'h18;\n    sbox[218] = 8'hda;\n    sbox[219] = 8'h46;\n    sbox[220] = 8'h3f;\n    sbox[221] = 8'h7f;\n    sbox[222] = 8'h4a;\n    sbox[223] = 8'h21;\n    sbox[224] = 8'hbc;\n    sbox[225] = 8'h40;\n    sbox[226] = 8'hfe;\n    sbox[227] = 8'h32;\n    sbox[228] = 8'h34;\n    sbox[229] = 8'h15;\n    sbox[230] = 8'h6b;\n    sbox[231] = 8'h13;\n    sbox[232] = 8'h60;\n    sbox[233] = 8'h19;\n    sbox[234] = 8'h6e;\n    sbox[235] = 8'h6a;\n    sbox[236] = 8'h95;\n    sbox[237] = 8'h94;\n    sbox[238] = 8'h55;\n    sbox[239] = 8'h4e;\n    sbox[240] = 8'h7b;\n    sbox[241] = 8'h65;\n    sbox[242] = 8'h9a;\n    sbox[243] = 8'h79;\n    sbox[244] = 8'h20;\n    sbox[245] = 8'h45;\n    sbox[246] = 8'h9f;\n    sbox[247] = 8'h8c;\n    sbox[248] = 8'h9c;\n    sbox[249] = 8'h9d;\n    sbox[250] = 8'h3a;\n    sbox[251] = 8'h85;\n    sbox[252] = 8'he9;\n    sbox[253] = 8'h8a;\n    sbox[254] = 8'h21;\n    sbox[255] = 8'h1c;\nend\n\n// Perform S-box substitution\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 3, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    // Multiplicative inverse in GF(2^8) and affine transformation\n    // can be pre-computed and stored in the S-box\n    // For simplicity, we'll use a hardcoded S-box here\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h_a4;\n    sbox[29] = 8'h72;\n    sbox[30] = 8'hc0;\n    sbox[31] = 8'hb7;\n    sbox[32] = 8'hfd;\n    sbox[33] = 8'h93;\n    sbox[34] = 8'h26;\n    sbox[35] = 8'h36;\n    sbox[36] = 8'h3f;\n    sbox[37] = 8'h_f7;\n    sbox[38] = 8'hcc;\n    sbox[39] = 8'h34;\n    sbox[40] = 8'h_a5;\n    sbox[41] = 8'h_e5;\n    sbox[42] = 8'h_f1;\n    sbox[43] = 8'h71;\n    sbox[44] = 8'h_d8;\n    sbox[45] = 8'h31;\n    sbox[46] = 8'h_15;\n    sbox[47] = 8'h_04;\n    sbox[48] = 8'h_c7;\n    sbox[49] = 8'h_23;\n    sbox[50] = 8'h_c3;\n    sbox[51] = 8'h_18;\n    sbox[52] = 8'h_96;\n    sbox[53] = 8'h_05;\n    sbox[54] = 8'h_9a;\n    sbox[55] = 8'h_07;\n    sbox[56] = 8'h_12;\n    sbox[57] = 8'h_80;\n    sbox[58] = 8'h_e2;\n    sbox[59] = 8'h_eb;\n    sbox[60] = 8'h_27;\n    sbox[61] = 8'h_b2;\n    sbox[62] = 8'h_75;\n    sbox[63] = 8'h_09;\n    sbox[64] = 8'h_c6;\n    sbox[65] = 8'h_50;\n    sbox[66] = 8'h_6a;\n    sbox[67] = 8'h_f4;\n    sbox[68] = 8'h_4e;\n    sbox[69] = 8'h_56;\n    sbox[70] = 8'h_c2;\n    sbox[71] = 8'h_d6;\n    sbox[72] = 8'h_78;\n    sbox[73] = 8'h_95;\n    sbox[74] = 8'h_06;\n    sbox[75] = 8'h_b5;\n    sbox[76] = 8'h_9f;\n    sbox[77] = 8'h_1c;\n    sbox[78] = 8'h_8e;\n    sbox[79] = 8'h_e9;\n    sbox[80] = 8'h_c8;\n    sbox[81] = 8'h_98;\n    sbox[82] = 8'h_a6;\n    sbox[83] = 8'h_08;\n    sbox[84] = 8'h_aa;\n    sbox[85] = 8'h_ff;\n    sbox[86] = 8'h_3c;\n    sbox[87] = 8'h_0a;\n    sbox[88] = 8'h_f6;\n    sbox[89] = 8'h_84;\n    sbox[90] = 8'h_c5;\n    sbox[91] = 8'h_35;\n    sbox[92] = 8'h_a9;\n    sbox[93] = 8'h_19;\n    sbox[94] = 8'h_2f;\n    sbox[95] = 8'h_7c;\n    sbox[96] = 8'h_82;\n    sbox[97] = 8'h_fd;\n    sbox[98] = 8'h_20;\n    sbox[99] = 8'h_bc;\n    sbox[100] = 8'h_05;\n    sbox[101] = 8'h_16;\n    sbox[102] = 8'h_3b;\n    sbox[103] = 8'h_3a;\n    sbox[104] = 8'h_65;\n    sbox[105] = 8'h_d5;\n    sbox[106] = 8'h_2e;\n    sbox[107] = 8'h_1f;\n    sbox[108] = 8'h_d2;\n    sbox[109] = 8'h_4f;\n    sbox[110] = 8'h_91;\n    sbox[111] = 8'h_9d;\n    sbox[112] = 8'h_33;\n    sbox[113] = 8'h_6d;\n    sbox[114] = 8'h_0b;\n    sbox[115] = 8'h_60;\n    sbox[116] = 8'h_08;\n    sbox[117] = 8'h_9e;\n    sbox[118] = 8'h_8a;\n    sbox[119] = 8'h_8d;\n    sbox[120] = 8'h_90;\n    sbox[121] = 8'h_a7;\n    sbox[122] = 8'h_06;\n    sbox[123] = 8'h_4d;\n    sbox[124] = 8'h_b9;\n    sbox[125] = 8'h_59;\n    sbox[126] = 8'h_e0;\n    sbox[127] = 8'h_5f;\n    sbox[128] = 8'h_49;\n    sbox[129] = 8'h_3f;\n    sbox[130] = 8'h_4c;\n    sbox[131] = 8'h_4b;\n    sbox[132] = 8'h_2d;\n    sbox[133] = 8'h_2c;\n    sbox[134] = 8'h_f8;\n    sbox[135] = 8'h_98;\n    sbox[136] = 8'h_47;\n    sbox[137] = 8'h_18;\n    sbox[138] = 8'h_b4;\n    sbox[139] = 8'h_3d;\n    sbox[140] = 8'h_fb;\n    sbox[141] = 8'h_7e;\n    sbox[142] = 8'h_e4;\n    sbox[143] = 8'h_c4;\n    sbox[144] = 8'h_94;\n    sbox[145] = 8'h_48;\n    sbox[146] = 8'h_9b;\n    sbox[147] = 8'h_1d;\n    sbox[148] = 8'h_28;\n    sbox[149] = 8'h_5d;\n    sbox[150] = 8'h_32;\n    sbox[151] = 8'h_3a;\n    sbox[152] = 8'h_0a;\n    sbox[153] = 8'h_16;\n    sbox[154] = 8'h_f9;\n    sbox[155] = 8'h_55;\n    sbox[156] = 8'h_03;\n    sbox[157] = 8'h_c6;\n    sbox[158] = 8'h_0f;\n    sbox[159] = 8'h_e9;\n    sbox[160] = 8'h_f7;\n    sbox[161] = 8'h_2b;\n    sbox[162] = 8'h_78;\n    sbox[163] = 8'h_5e;\n    sbox[164] = 8'h_2e;\n    sbox[165] = 8'h_35;\n    sbox[166] = 8'h_7a;\n    sbox[167] = 8'h_9f;\n    sbox[168] = 8'h_f1;\n    sbox[169] = 8'h_20;\n    sbox[170] = 8'h_6d;\n    sbox[171] = 8'h_24;\n    sbox[172] = 8'h_cf;\n    sbox[173] = 8'h_f0;\n    sbox[174] = 8'h_b4;\n    sbox[175] = 8'h_66;\n    sbox[176] = 8'h_cc;\n    sbox[177] = 8'h_05;\n    sbox[178] = 8'h_23;\n    sbox[179] = 8'h_95;\n    sbox[180] = 8'h_1f;\n    sbox[181] = 8'h_58;\n    sbox[182] = 8'h_80;\n    sbox[183] = 8'h_5b;\n    sbox[184] = 8'h_27;\n    sbox[185] = 8'h_ae;\n    sbox[186] = 8'h_41;\n    sbox[187] = 8'h_1b;\n    sbox[188] = 8'h_e6;\n    sbox[189] = 8'h_54;\n    sbox[190] = 8'h_b8;\n    sbox[191] = 8'h_8d;\n    sbox[192] = 8'h_4b;\n    sbox[193] = 8'h_99;\n    sbox[194] = 8'h_8f;\n    sbox[195] = 8'h_d6;\n    sbox[196] = 8'h_f3;\n    sbox[197] = 8'h_a8;\n    sbox[198] = 8'h_2f;\n    sbox[199] = 8'h_c2;\n    sbox[200] = 8'h_60;\n    sbox[201] = 8'h_be;\n    sbox[202] = 8'h_39;\n    sbox[203] = 8'h_4a;\n    sbox[204] = 8'h_4e;\n    sbox[205] = 8'h_79;\n    sbox[206] = 8'h_f2;\n    sbox[207] = 8'h_6c;\n    sbox[208] = 8'h_81;\n    sbox[209] = 8'h_bf;\n    sbox[210] = 8'h_e3;\n    sbox[211] = 8'h_a6;\n    sbox[212] = 8'h_21;\n    sbox[213] = 8'h_f6;\n    sbox[214] = 8'h_e8;\n    sbox[215] = 8'h_a3;\n    sbox[216] = 8'h_d3;\n    sbox[217] = 8'h_f5;\n    sbox[218] = 8'h_69;\n    sbox[219] = 8'h_8e;\n    sbox[220] = 8'h_2a;\n    sbox[221] = 8'h_6f;\n    sbox[222] = 8'h_7d;\n    sbox[223] = 8'h_22;\n    sbox[224] = 8'h_72;\n    sbox[225] = 8'h_95;\n    sbox[226] = 8'h_a4;\n    sbox[227] = 8'h_f9;\n    sbox[228] = 8'h_2c;\n    sbox[229] = 8'h_11;\n    sbox[230] = 8'h_d9;\n    sbox[231] = 8'h_1c;\n    sbox[232] = 8'h_41;\n    sbox[233] = 8'h_d8;\n    sbox[234] = 8'h_9d;\n    sbox[235] = 8'h_e4;\n    sbox[236] = 8'h_4f;\n    sbox[237] = 8'h_42;\n    sbox[238] = 8'h_2a;\n    sbox[239] = 8'h_53;\n    sbox[240] = 8'h_c8;\n    sbox[241] = 8'h_c1;\n    sbox[242] = 8'h_73;\n    sbox[243] = 8'h_d2;\n    sbox[244] = 8'h_26;\n    sbox[245] = 8'h_9a;\n    sbox[246] = 8'h_6e;\n    sbox[247] = 8'h_85;\n    sbox[248] = 8'h_92;\n    sbox[249] = 8'h_37;\n    sbox[250] = 8'h_f2;\n    sbox[251] = 8'h_7c;\n    sbox[252] = 8'h_68;\n    sbox[253] = 8'h_1d;\n    sbox[254] = 8'h_8c;\n    sbox[255] = 8'h_e3;\nend\n\n// Use the S-box lookup table to substitute the input byte\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 4, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Initialize the S-box values according to the AES standard\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h-a;\n    sbox[29] = 8'h3e;\n    sbox[30] = 8'hb6;\n    sbox[31] = 8'h21;\n    sbox[32] = 8'hcf;\n    sbox[33] = 8'h35;\n    sbox[34] = 8'he2;\n    sbox[35] = 8'h9f;\n    sbox[36] = 8'h6c;\n    sbox[37] = 8'h24;\n    sbox[38] = 8'hb2;\n    sbox[39] = 8'h75;\n    sbox[40] = 8'h9e;\n    sbox[41] = 8'h1c;\n    sbox[42] = 8'h9b;\n    sbox[43] = 8'h17;\n    sbox[44] = 8'h8f;\n    sbox[45] = 8'h05;\n    sbox[46] = 8'h3a;\n    sbox[47] = 8'h85;\n    sbox[48] = 8'h45;\n    sbox[49] = 8'h39;\n    sbox[50] = 8'h4f;\n    sbox[51] = 8'h4c;\n    sbox[52] = 8'h58;\n    sbox[53] = 8'h2e;\n    sbox[54] = 8'hd6;\n    sbox[55] = 8'h32;\n    sbox[56] = 8'h3f;\n    sbox[57] = 8'h0a;\n    sbox[58] = 8'h16;\n    sbox[59] = 8'h9a;\n    sbox[60] = 8'h38;\n    sbox[61] = 8'h15;\n    sbox[62] = 8'h34;\n    sbox[63] = 8'h68;\n    sbox[64] = 8'h53;\n    sbox[65] = 8'h8d;\n    sbox[66] = 8'h1d;\n    sbox[67] = 8'h0b;\n    sbox[68] = 8'h8a;\n    sbox[69] = 8'h4b;\n    sbox[70] = 8'h2a;\n    sbox[71] = 8'h27;\n    sbox[72] = 8'h3d;\n    sbox[73] = 8'hbc;\n    sbox[74] = 8'h80;\n    sbox[75] = 8'he1;\n    sbox[76] = 8'hff;\n    sbox[77] = 8'h19;\n    sbox[78] = 8'h7a;\n    sbox[79] = 8'h1a;\n    sbox[80] = 8'h0f;\n    sbox[81] = 8'h93;\n    sbox[82] = 8'h11;\n    sbox[83] = 8'h41;\n    sbox[84] = 8'h1f;\n    sbox[85] = 8'h53;\n    sbox[86] = 8'he8;\n    sbox[87] = 8'hbb;\n    sbox[88] = 8'h3b;\n    sbox[89] = 8'hcc;\n    sbox[90] = 8'h60;\n    sbox[91] = 8'h6d;\n    sbox[92] = 8'hdd;\n    sbox[93] = 8'h54;\n    sbox[94] = 8'h18;\n    sbox[95] = 8'h5e;\n    sbox[96] = 8'h07;\n    sbox[97] = 8'h5a;\n    sbox[98] = 8'h9d;\n    sbox[99] = 8'h4e;\n    sbox[100] = 8'h56;\n    sbox[101] = 8'h65;\n    sbox[102] = 8'ha2;\n    sbox[103] = 8'h42;\n    sbox[104] = 8'h2d;\n    sbox[105] = 8'h73;\n    sbox[106] = 8'h51;\n    sbox[107] = 8'h0e;\n    sbox[108] = 8'h29;\n    sbox[109] = 8'hef;\n    sbox[110] = 8'h44;\n    sbox[111] = 8'hda;\n    sbox[112] = 8'h26;\n    sbox[113] = 8'h92;\n    sbox[114] = 8'hc2;\n    sbox[115] = 8'hae;\n    sbox[116] = 8'h0c;\n    sbox[117] = 8'h70;\n    sbox[118] = 8'h81;\n    sbox[119] = 8'h40;\n    sbox[120] = 8'h6a;\n    sbox[121] = 8'hf5;\n    sbox[122] = 8'h89;\n    sbox[123] = 8'h08;\n    sbox[124] = 8'h96;\n    sbox[125] = 8'h1b;\n    sbox[126] = 8'h9e;\n    sbox[127] = 8'h5c;\n    sbox[128] = 8'h95;\n    sbox[129] = 8'hdb;\n    sbox[130] = 8'h49;\n    sbox[131] = 8'h22;\n    sbox[132] = 8'h4a;\n    sbox[133] = 8'h84;\n    sbox[134] = 8'h52;\n    sbox[135] = 8'h8b;\n    sbox[136] = 8'h13;\n    sbox[137] = 8'h2c;\n    sbox[138] = 8'h6e;\n    sbox[139] = 8'h5f;\n    sbox[140] = 8'h15;\n    sbox[141] = 8'h94;\n    sbox[142] = 8'h97;\n    sbox[143] = 8'h79;\n    sbox[144] = 8'he0;\n    sbox[145] = 8'hbd;\n    sbox[146] = 8'he7;\n    sbox[147] = 8'h4d;\n    sbox[148] = 8'hde;\n    sbox[149] = 8'h4c;\n    sbox[150] = 8'h24;\n    sbox[151] = 8'h63;\n    sbox[152] = 8'h3a;\n    sbox[153] = 8'h18;\n    sbox[154] = 8'h91;\n    sbox[155] = 8'h19;\n    sbox[156] = 8'hb8;\n    sbox[157] = 8'hda;\n    sbox[158] = 8'h8f;\n    sbox[159] = 8'h0a;\n    sbox[160] = 8'hed;\n    sbox[161] = 8'h57;\n    sbox[162] = 8'ha4;\n    sbox[163] = 8'h7e;\n    sbox[164] = 8'h3d;\n    sbox[165] = 8'h64;\n    sbox[166] = 8'h5d;\n    sbox[167] = 8'h52;\n    sbox[168] = 8'h8c;\n    sbox[169] = 8'h1b;\n    sbox[170] = 8'h6f;\n    sbox[171] = 8'h8a;\n    sbox[172] = 8'h24;\n    sbox[173] = 8'h2b;\n    sbox[174] = 8'h61;\n    sbox[175] = 8'h34;\n    sbox[176] = 8'h4f;\n    sbox[177] = 8'hdc;\n    sbox[178] = 8'h22;\n    sbox[179] = 8'h1a;\n    sbox[180] = 8'h1d;\n    sbox[181] = 8'h00;\n    sbox[182] = 8'h8e;\n    sbox[183] = 8'h38;\n    sbox[184] = 8'h42;\n    sbox[185] = 8'h6b;\n    sbox[186] = 8'h63;\n    sbox[187] = 8'hbl;\n    sbox[188] = 8'h7f;\n    sbox[189] = 8'h73;\n    sbox[190] = 8'h53;\n    sbox[191] = 8'h9e;\n    sbox[192] = 8'hb9;\n    sbox[193] = 8'h28;\n    sbox[194] = 8'h54;\n    sbox[195] = 8'h16;\n    sbox[196] = 8'h98;\n    sbox[197] = 8'h52;\n    sbox[198] = 8'h1f;\n    sbox[199] = 8'hcc;\n    sbox[200] = 8'h5d;\n    sbox[201] = 8'h65;\n    sbox[202] = 8'hb6;\n    sbox[203] = 8'h95;\n    sbox[204] = 8'haf;\n    sbox[205] = 8'h92;\n    sbox[206] = 8'hn6;\n    sbox[207] = 8'h70;\n    sbox[208] = 8'h48;\n    sbox[209] = 8'h29;\n    sbox[210] = 8'h80;\n    sbox[211] = 8'h21;\n    sbox[212] = 8'h50;\n    sbox[213] = 8'h9a;\n    sbox[214] = 8'h72;\n    sbox[215] = 8'hc0;\n    sbox[216] = 8'h0b;\n    sbox[217] = 8'h12;\n    sbox[218] = 8'h5f;\n    sbox[219] = 8'h02;\n    sbox[220] = 8'h3c;\n    sbox[221] = 8'h59;\n    sbox[222] = 8'h27;\n    sbox[223] = 8'h82;\n    sbox[224] = 8'h10;\n    sbox[225] = 8'h3e;\n    sbox[226] = 8'h94;\n    sbox[227] = 8'h66;\n    sbox[228] = 8'h6c;\n    sbox[229] = 8'h61;\n    sbox[230] = 8'h6f;\n    sbox[231] = 8'h0e;\n    sbox[232] = 8'h08;\n    sbox[233] = 8'h9c;\n    sbox[234] = 8'h55;\n    sbox[235] = 8'hbe;\n    sbox[236] = 8'h39;\n    sbox[237] = 8'h5a;\n    sbox[238] = 8'h4e;\n    sbox[239] = 8'h79;\n    sbox[240] = 8'h7b;\n    sbox[241] = 8'h0c;\n    sbox[242] = 8'hfb;\n    sbox[243] = 8'h56;\n    sbox[244] = 8'h99;\n    sbox[245] = 8'h7a;\n    sbox[246] = 8'h0a;\n    sbox[247] = 8'h98;\n    sbox[248] = 8'h3f;\n    sbox[249] = 8'h8e;\n    sbox[250] = 8'h91;\n    sbox[251] = 8'h11;\n    sbox[252] = 8'h46;\n    sbox[253] = 8'h1a;\n    sbox[254] = 8'h3b;\n    sbox[255] = 8'hdd;\nend\n\n// Assign the output based on the input and the S-box lookup table\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 5, "code": "module aes_sbox(\n    input [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Calculate the S-box values based on the AES standard\n    for (int i = 0; i < 256; i++) begin\n        // Calculate the multiplicative inverse in GF(2^8)\n        reg [7:0] inverse;\n        if (i != 0) begin\n            // Calculate the multiplicative inverse using the extended Euclidean algorithm\n            reg [7:0] a_i = i;\n            reg [7:0] b_i = 8'h11b; // x^8 + x^4 + x^3 + x + 1\n            reg [7:0] x = 8'h01;\n            reg [7:0] y = 8'h00;\n            while (b_i != 0) begin\n                reg [7:0] q = a_i / b_i;\n                reg [7:0] r = a_i % b_i;\n                reg [7:0] temp_x = x ^ (q * y);\n                reg [7:0] temp_y = y;\n                a_i = b_i;\n                b_i = r;\n                x = temp_x;\n                y = temp_y;\n            end\n            inverse = x;\n        end else begin\n            inverse = 8'h00;\n        end\n\n        // Apply the affine transformation\n        reg [7:0] affine;\n        for (int j = 0; j < 8; j++) begin\n            reg [7:0] bit = (inverse >> j) & 1;\n            reg [7:0] bit_4 = (inverse >> ((j + 4) % 8)) & 1;\n            reg [7:0] bit_5 = (inverse >> ((j + 5) % 8)) & 1;\n            reg [7:0] bit_6 = (inverse >> ((j + 6) % 8)) & 1;\n            reg [7:0] bit_7 = (inverse >> ((j + 7) % 8)) & 1;\n            reg [7:0] c_j = (8'h63 >> j) & 1;\n            affine[j] = bit ^ bit_4 ^ bit_5 ^ bit_6 ^ bit_7 ^ c_j;\n        end\n\n        // Store the S-box value in the lookup table\n        sbox[i] = affine;\n    end\nend\n\n// Use the S-box lookup table to substitute the input byte\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 6, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h-a;\n    sbox[29] = 8'h3e;\n    sbox[30] = 8'hb6;\n    sbox[31] = 8'h21;\n    sbox[32] = 8'hcf;\n    sbox[33] = 8'h5a;\n    sbox[34] = 8'h4a;\n    sbox[35] = 8'h4e;\n    sbox[36] = 8'h68;\n    sbox[37] = 8'h27;\n    sbox[38] = 8'hb2;\n    sbox[39] = 8'h48;\n    sbox[40] = 8'hbb;\n    sbox[41] = 8'hbc;\n    sbox[42] = 8'h9a;\n    sbox[43] = 8'h3d;\n    sbox[44] = 8'h8a;\n    sbox[45] = 8'h5e;\n    sbox[46] = 8'h45;\n    sbox[47] = 8'h4f;\n    sbox[48] = 8'h08;\n    sbox[49] = 8'h3a;\n    sbox[50] = 8'h2e;\n    sbox[51] = 8'h61;\n    sbox[52] = 8'hc2;\n    sbox[53] = 8'h9f;\n    sbox[54] = 8'h25;\n    sbox[55] = 8'h4d;\n    sbox[56] = 8'h11;\n    sbox[57] = 8'h31;\n    sbox[58] = 8'h22;\n    sbox[59] = 8'h94;\n    sbox[60] = 8'h16;\n    sbox[61] = 8'h8b;\n    sbox[62] = 8'h38;\n    sbox[63] = 8'h9d;\n    sbox[64] = 8'h74;\n    sbox[65] = 8'h65;\n    sbox[66] = 8'h6a;\n    sbox[67] = 8'h62;\n    sbox[68] = 8'h0c;\n    sbox[69] = 8'h81;\n    sbox[70] = 8'hf1;\n    sbox[71] = 8'h5d;\n    sbox[72] = 8'h20;\n    sbox[73] = 8'h4b;\n    sbox[74] = 8'h44;\n    sbox[75] = 8'h52;\n    sbox[76] = 8'h1a;\n    sbox[77] = 8'h95;\n    sbox[78] = 8'he4;\n    sbox[79] = 8'h87;\n    sbox[80] = 8'h69;\n    sbox[81] = 8'h9b;\n    sbox[82] = 8'h99;\n    sbox[83] = 8'h6e;\n    sbox[84] = 8'h60;\n    sbox[85] = 8'h88;\n    sbox[86] = 8'h28;\n    sbox[87] = 8'h5c;\n    sbox[88] = 8'h5f;\n    sbox[89] = 8'h24;\n    sbox[90] = 8'h5b;\n    sbox[91] = 8'h6c;\n    sbox[92] = 8'h7a;\n    sbox[93] = 8'h85;\n    sbox[94] = 8'h51;\n    sbox[95] = 8'h1c;\n    sbox[96] = 8'h98;\n    sbox[97] = 8'h10;\n    sbox[98] = 8'h7f;\n    sbox[99] = 8'h58;\n    sbox[100] = 8'h1d;\n    sbox[101] = 8'h0b;\n    sbox[102] = 8'h8c;\n    sbox[103] = 8'h4c;\n    sbox[104] = 8'hbe;\n    sbox[105] = 8'h1b;\n    sbox[106] = 8'h14;\n    sbox[107] = 8'h56;\n    sbox[108] = 8'h5a;\n    sbox[109] = 8'h92;\n    sbox[110] = 8'h6d;\n    sbox[111] = 8'h66;\n    sbox[112] = 8'h40;\n    sbox[113] = 8'h41;\n    sbox[114] = 8'h20;\n    sbox[115] = 8'h80;\n    sbox[116] = 8'h71;\n    sbox[117] = 8'h0f;\n    sbox[118] = 8'h8d;\n    sbox[119] = 8'h03;\n    sbox[120] = 8'h62;\n    sbox[121] = 8'h44;\n    sbox[122] = 8'h96;\n    sbox[123] = 8'h35;\n    sbox[124] = 8'h4a;\n    sbox[125] = 8'h2b;\n    sbox[126] = 8'h4e;\n    sbox[127] = 8'h6b;\n    sbox[128] = 8'hbf;\n    sbox[129] = 8'h72;\n    sbox[130] = 8'h9a;\n    sbox[131] = 8'hc1;\n    sbox[132] = 8'h23;\n    sbox[133] = 8'h85;\n    sbox[134] = 8'h65;\n    sbox[135] = 8'h18;\n    sbox[136] = 8'h19;\n    sbox[137] = 8'h75;\n    sbox[138] = 8'h97;\n    sbox[139] = 8'hfc;\n    sbox[140] = 8'h42;\n    sbox[141] = 8'h93;\n    sbox[142] = 8'h3c;\n    sbox[143] = 8'h48;\n    sbox[144] = 8'h0d;\n    sbox[145] = 8'h4b;\n    sbox[146] = 8'h44;\n    sbox[147] = 8'h11;\n    sbox[148] = 8'h1c;\n    sbox[149] = 8'h7a;\n    sbox[150] = 8'h3b;\n    sbox[151] = 8'h5f;\n    sbox[152] = 8'h91;\n    sbox[153] = 8'h98;\n    sbox[154] = 8'h10;\n    sbox[155] = 8'h17;\n    sbox[156] = 8'h8f;\n    sbox[157] = 8'h50;\n    sbox[158] = 8'ha0;\n    sbox[159] = 8'hb2;\n    sbox[160] = 8'h12;\n    sbox[161] = 8'h3d;\n    sbox[162] = 8'h6e;\n    sbox[163] = 8'h5b;\n    sbox[164] = 8'h9f;\n    sbox[165] = 8'h24;\n    sbox[166] = 8'hcf;\n    sbox[167] = 8'hfa;\n    sbox[168] = 8'h3e;\n    sbox[169] = 8'h2c;\n    sbox[170] = 8'hcc;\n    sbox[171] = 8'hae;\n    sbox[172] = 8'h34;\n    sbox[173] = 8'h53;\n    sbox[174] = 8'h8b;\n    sbox[175] = 8'h6f;\n    sbox[176] = 8'hd5;\n    sbox[177] = 8'h30;\n    sbox[178] = 8'h90;\n    sbox[179] = 8'hbe;\n    sbox[180] = 8'hfd;\n    sbox[181] = 8'h26;\n    sbox[182] = 8'h36;\n    sbox[183] = 8'h3f;\n    sbox[184] = 8'h51;\n    sbox[185] = 8'h11;\n    sbox[186] = 8'h9d;\n    sbox[187] = 8'h8c;\n    sbox[188] = 8'h1f;\n    sbox[189] = 8'h1e;\n    sbox[190] = 8'h91;\n    sbox[191] = 8'h19;\n    sbox[192] = 8'h52;\n    sbox[193] = 8'h4e;\n    sbox[194] = 8'h94;\n    sbox[195] = 8'h75;\n    sbox[196] = 8'h66;\n    sbox[197] = 8'h6a;\n    sbox[198] = 8'h95;\n    sbox[199] = 8'h33;\n    sbox[200] = 8'h69;\n    sbox[201] = 8'h8e;\n    sbox[202] = 8'h08;\n    sbox[203] = 8'hbd;\n    sbox[204] = 8'h93;\n    sbox[205] = 8'h67;\n    sbox[206] = 8'h44;\n    sbox[207] = 8'h6f;\n    sbox[208] = 8'hde;\n    sbox[209] = 8'hbe;\n    sbox[210] = 8'h34;\n    sbox[211] = 8'h6b;\n    sbox[212] = 8'h63;\n    sbox[213] = 8'h1d;\n    sbox[214] = 8'h7e;\n    sbox[215] = 8'h6e;\n    sbox[216] = 8'h54;\n    sbox[217] = 8'hff;\n    sbox[218] = 8'h52;\n    sbox[219] = 8'h23;\n    sbox[220] = 8'h33;\n    sbox[221] = 8'hee;\n    sbox[222] = 8'h96;\n    sbox[223] = 8'h1c;\n    sbox[224] = 8'h61;\n    sbox[225] = 8'h51;\n    sbox[226] = 8'h0a;\n    sbox[227] = 8'h15;\n    sbox[228] = 8'h8a;\n    sbox[229] = 8'hd2;\n    sbox[230] = 8'h2e;\n    sbox[231] = 8'h4c;\n    sbox[232] = 8'h32;\n    sbox[233] = 8'hea;\n    sbox[234] = 8'h0b;\n    sbox[235] = 8'h4f;\n    sbox[236] = 8'h21;\n    sbox[237] = 8'h7c;\n    sbox[238] = 8'h10;\n    sbox[239] = 8'h7b;\n    sbox[240] = 8'h18;\n    sbox[241] = 8'h9c;\n    sbox[242] = 8'h22;\n    sbox[243] = 8'h9e;\n    sbox[244] = 8'h14;\n    sbox[245] = 8'h24;\n    sbox[246] = 8'h5e;\n    sbox[247] = 8'h5d;\n    sbox[248] = 8'h84;\n    sbox[249] = 8'h90;\n    sbox[250] = 8'h48;\n    sbox[251] = 8'h1a;\n    sbox[252] = 8'h6d;\n    sbox[253] = 8'hdc;\n    sbox[254] = 8'h4a;\n    sbox[255] = 8'h17;\nend\n\n// Perform the S-box substitution\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 7, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Compute the S-box values using the AES S-box algorithm\n    for (int i = 0; i < 256; i++) begin\n        // Compute the multiplicative inverse in GF(2^8)\n        reg [7:0] inverse;\n        if (i != 0) begin\n            // Use the extended Euclidean algorithm to find the inverse\n            inverse = compute_inverse(i);\n        end else begin\n            // The inverse of 0 is 0\n            inverse = 0;\n        end\n\n        // Apply the affine transformation\n        reg [7:0] affine;\n        affine = apply_affine_transformation(inverse);\n\n        // Store the result in the S-box lookup table\n        sbox[i] = affine;\n    end\nend\n\n// Compute the multiplicative inverse in GF(2^8)\nfunction reg [7:0] compute_inverse;\n    input [7:0] a;\n    reg [7:0] inverse;\n\n    // Use the extended Euclidean algorithm to find the inverse\n    // This is a simplified implementation and may not be the most efficient\n    for (int i = 0; i < 256; i++) begin\n        if ((a * i) % 257 == 1) begin\n            inverse = i;\n            break;\n        end\n    end\n\n    compute_inverse = inverse;\nendfunction\n\n// Apply the affine transformation\nfunction reg [7:0] apply_affine_transformation;\n    input [7:0] a;\n    reg [7:0] b;\n\n    // Apply the affine transformation matrix\n    reg [7:0] c = 8'h63;\n    b[0] = a[0] ^ a[4] ^ a[5] ^ a[6] ^ a[7] ^ c[0];\n    b[1] = a[1] ^ a[5] ^ a[6] ^ a[7] ^ a[0] ^ c[1];\n    b[2] = a[2] ^ a[6] ^ a[7] ^ a[0] ^ a[1] ^ c[2];\n    b[3] = a[3] ^ a[7] ^ a[0] ^ a[1] ^ a[2] ^ c[3];\n    b[4] = a[4] ^ a[0] ^ a[1] ^ a[2] ^ a[3] ^ c[4];\n    b[5] = a[5] ^ a[1] ^ a[2] ^ a[3] ^ a[4] ^ c[5];\n    b[6] = a[6] ^ a[2] ^ a[3] ^ a[4] ^ a[5] ^ c[6];\n    b[7] = a[7] ^ a[3] ^ a[4] ^ a[5] ^ a[6] ^ c[7];\n\n    apply_affine_transformation = b;\nendfunction\n\n// Use the S-box lookup table to compute the output\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 8, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Compute the multiplicative inverse in GF(2^8)\n    // and apply the affine transformation\n    for (int i = 0; i < 256; i++) begin\n        // Handle special case: inverse of 0x00 is defined as 0x00\n        if (i == 0) begin\n            sbox[i] = 8'h63;\n        end else begin\n            // Compute the multiplicative inverse\n            reg [7:0] inverse;\n            inverse = i;\n            for (int j = 0; j < 7; j++) begin\n                inverse = (inverse << 1) ^ (inverse[7] ? 8'h11b : 0);\n            end\n\n            // Apply the affine transformation\n            reg [7:0] result;\n            result = 0;\n            for (int k = 0; k < 8; k++) begin\n                result[k] = inverse[k] ^ inverse[(k + 4) % 8] ^ inverse[(k + 5) % 8] ^ inverse[(k + 6) % 8] ^ inverse[(k + 7) % 8] ^ (k < 8 ? 8'h63[k] : 0);\n            end\n            sbox[i] = result;\n        end\n    end\nend\n\n// Use the S-box lookup table to compute the output\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 9, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Initialize the S-box values according to the AES specification\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h-a;\n    sbox[29] = 8'h3e;\n    sbox[30] = 8'hb6;\n    sbox[31] = 8'h21;\n    sbox[32] = 8'hcf;\n    sbox[33] = 8'h7a;\n    sbox[34] = 8'h70;\n    sbox[35] = 8'h95;\n    sbox[36] = 8'h57;\n    sbox[37] = 8'h4c;\n    sbox[38] = 8'h02;\n    sbox[39] = 8'h3d;\n    sbox[40] = 8'h85;\n    sbox[41] = 8'h19;\n    sbox[42] = 8'h9d;\n    sbox[43] = 8'hbe;\n    sbox[44] = 8'h8c;\n    sbox[45] = 8'hda;\n    sbox[46] = 8'h9b;\n    sbox[47] = 8'h1f;\n    sbox[48] = 8'h8a;\n    sbox[49] = 8'h9e;\n    sbox[50] = 8'h56;\n    sbox[51] = 8'hb3;\n    sbox[52] = 8'h9f;\n    sbox[53] = 8'h17;\n    sbox[54] = 8'hbc;\n    sbox[55] = 8'h98;\n    sbox[56] = 8'h8f;\n    sbox[57] = 8'h4a;\n    sbox[58] = 8'hf9;\n    sbox[59] = 8'h93;\n    sbox[60] = 8'h39;\n    sbox[61] = 8'h5a;\n    sbox[62] = 8'h4f;\n    sbox[63] = 8'hcc;\n    sbox[64] = 8'h5e;\n    sbox[65] = 8'h6e;\n    sbox[66] = 8'h79;\n    sbox[67] = 8'h1a;\n    sbox[68] = 8'h6a;\n    sbox[69] = 8'h54;\n    sbox[70] = 8'hde;\n    sbox[71] = 8'h44;\n    sbox[72] = 8'hbf;\n    sbox[73] = 8'h5d;\n    sbox[74] = 8'h9a;\n    sbox[75] = 8'h22;\n    sbox[76] = 8'h35;\n    sbox[77] = 8'h8d;\n    sbox[78] = 8'h9c;\n    sbox[79] = 8'h84;\n    sbox[80] = 8'h32;\n    sbox[81] = 8'h80;\n    sbox[82] = 8'h3c;\n    sbox[83] = 8'hbb;\n    sbox[84] = 8'h72;\n    sbox[85] = 8'hff;\n    sbox[86] = 8'h11;\n    sbox[87] = 8'h86;\n    sbox[88] = 8'h64;\n    sbox[89] = 8'h5b;\n    sbox[90] = 8'h20;\n    sbox[91] = 8'h75;\n    sbox[92] = 8'h6d;\n    sbox[93] = 8'h3a;\n    sbox[94] = 8'h3f;\n    sbox[95] = 8'h41;\n    sbox[96] = 8'h23;\n    sbox[97] = 8'h1c;\n    sbox[98] = 8'h1e;\n    sbox[99] = 8'h68;\n    sbox[100] = 8'h45;\n    sbox[101] = 8'h36;\n    sbox[102] = 8'h4d;\n    sbox[103] = 8'h51;\n    sbox[104] = 8'hdc;\n    sbox[105] = 8'h8b;\n    sbox[106] = 8'h8e;\n    sbox[107] = 8'h97;\n    sbox[108] = 8'h60;\n    sbox[109] = 8'h88;\n    sbox[110] = 8'h49;\n    sbox[111] = 8'h2a;\n    sbox[112] = 8'h2e;\n    sbox[113] = 8'h7c;\n    sbox[114] = 8'h4b;\n    sbox[115] = 8'h46;\n    sbox[116] = 8'h25;\n    sbox[117] = 8'h4e;\n    sbox[118] = 8'h94;\n    sbox[119] = 8'h9b;\n    sbox[120] = 8'h1b;\n    sbox[121] = 8'hee;\n    sbox[122] = 8'h9d;\n    sbox[123] = 8'h74;\n    sbox[124] = 8'h8f;\n    sbox[125] = 8'h4c;\n    sbox[126] = 8'h7b;\n    sbox[127] = 8'hea;\n    sbox[128] = 8'h2f;\n    sbox[129] = 8'h5f;\n    sbox[130] = 8'h3e;\n    sbox[131] = 8'h61;\n    sbox[132] = 8'hd2;\n    sbox[133] = 8'h28;\n    sbox[134] = 8'h79;\n    sbox[135] = 8'h5c;\n    sbox[136] = 8'h8a;\n    sbox[137] = 8'h4f;\n    sbox[138] = 8'h71;\n    sbox[139] = 8'h6f;\n    sbox[140] = 8'h64;\n    sbox[141] = 8'h8e;\n    sbox[142] = 8'hcd;\n    sbox[143] = 8'h24;\n    sbox[144] = 8'h0a;\n    sbox[145] = 8'h49;\n    sbox[146] = 8'h6c;\n    sbox[147] = 8'h8b;\n    sbox[148] = 8'h12;\n    sbox[149] = 8'h0b;\n    sbox[150] = 8'h5b;\n    sbox[151] = 8'h6a;\n    sbox[152] = 8'h96;\n    sbox[153] = 8'h9c;\n    sbox[154] = 8'h31;\n    sbox[155] = 8'h8d;\n    sbox[156] = 8'h7a;\n    sbox[157] = 8'h4e;\n    sbox[158] = 8'h6e;\n    sbox[159] = 8'h63;\n    sbox[160] = 8'h55;\n    sbox[161] = 8'h1a;\n    sbox[162] = 8'h68;\n    sbox[163] = 8'hcc;\n    sbox[164] = 8'h18;\n    sbox[165] = 8'h9e;\n    sbox[166] = 8'h9f;\n    sbox[167] = 8'h8f;\n    sbox[168] = 8'h6f;\n    sbox[169] = 8'h66;\n    sbox[170] = 8'h7f;\n    sbox[171] = 8'h4a;\n    sbox[172] = 8'h61;\n    sbox[173] = 8'h0d;\n    sbox[174] = 8'h2d;\n    sbox[175] = 8'h7c;\n    sbox[176] = 8'h4b;\n    sbox[177] = 8'h46;\n    sbox[178] = 8'h25;\n    sbox[179] = 8'h4e;\n    sbox[180] = 8'h94;\n    sbox[181] = 8'h9b;\n    sbox[182] = 8'h1b;\n    sbox[183] = 8'hee;\n    sbox[184] = 8'h9d;\n    sbox[185] = 8'h74;\n    sbox[186] = 8'h8f;\n    sbox[187] = 8'h4c;\n    sbox[188] = 8'h7b;\n    sbox[189] = 8'hea;\n    sbox[190] = 8'h2f;\n    sbox[191] = 8'h5f;\n    sbox[192] = 8'h3e;\n    sbox[193] = 8'h61;\n    sbox[194] = 8'hd2;\n    sbox[195] = 8'h28;\n    sbox[196] = 8'h79;\n    sbox[197] = 8'h5c;\n    sbox[198] = 8'h8a;\n    sbox[199] = 8'h4f;\n    sbox[200] = 8'h71;\n    sbox[201] = 8'h6f;\n    sbox[202] = 8'h64;\n    sbox[203] = 8'h8e;\n    sbox[204] = 8'hcd;\n    sbox[205] = 8'h24;\n    sbox[206] = 8'h0a;\n    sbox[207] = 8'h49;\n    sbox[208] = 8'h6c;\n    sbox[209] = 8'h8b;\n    sbox[210] = 8'h12;\n    sbox[211] = 8'h0b;\n    sbox[212] = 8'h5b;\n    sbox[213] = 8'h6a;\n    sbox[214] = 8'h96;\n    sbox[215] = 8'h9c;\n    sbox[216] = 8'h31;\n    sbox[217] = 8'h8d;\n    sbox[218] = 8'h7a;\n    sbox[219] = 8'h4e;\n    sbox[220] = 8'h6e;\n    sbox[221] = 8'h63;\n    sbox[222] = 8'h55;\n    sbox[223] = 8'h1a;\n    sbox[224] = 8'h68;\n    sbox[225] = 8'hcc;\n    sbox[226] = 8'h18;\n    sbox[227] = 8'h9e;\n    sbox[228] = 8'h9f;\n    sbox[229] = 8'h8f;\n    sbox[230] = 8'h6f;\n    sbox[231] = 8'h66;\n    sbox[232] = 8'h7f;\n    sbox[233] = 8'h4a;\n    sbox[234] = 8'h61;\n    sbox[235] = 8'h0d;\n    sbox[236] = 8'h2d;\n    sbox[237] = 8'h7c;\n    sbox[238] = 8'h4b;\n    sbox[239] = 8'h46;\n    sbox[240] = 8'h25;\n    sbox[241] = 8'h4e;\n    sbox[242] = 8'h94;\n    sbox[243] = 8'h9b;\n    sbox[244] = 8'h1b;\n    sbox[245] = 8'h2e;\n    sbox[246] = 8'h16;\n    sbox[247] = 8'h0c;\n    sbox[248] = 8'h4a;\n    sbox[249] = 8'h65;\n    sbox[250] = 8'hb9;\n    sbox[251] = 8'h6d;\n    sbox[252] = 8'h9a;\n    sbox[253] = 8'h95;\n    sbox[254] = 8'hae;\n    sbox[255] = 8'h68;\nend\n\n// Assign the output based on the input and the S-box lookup table\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 10, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Multiplicative inverse in GF(2^8)\n    reg [7:0] inverse [0:255];\n    for (int i = 0; i < 256; i++) begin\n        if (i != 0) begin\n            // Calculate the multiplicative inverse\n            inverse[i] = calculate_inverse(i);\n        end else begin\n            // Special case: inverse of 0x00 is defined as 0x00\n            inverse[i] = 8'd0;\n        end\n    end\n\n    // Apply the affine transformation\n    for (int i = 0; i < 256; i++) begin\n        reg [7:0] affine;\n        for (int j = 0; j < 8; j++) begin\n            reg [7:0] temp;\n            temp = (inverse[i] >> j) & 8'd1;\n            temp = temp ^ ((inverse[i] >> ((j + 4) % 8)) & 8'd1);\n            temp = temp ^ ((inverse[i] >> ((j + 5) % 8)) & 8'd1);\n            temp = temp ^ ((inverse[i] >> ((j + 6) % 8)) & 8'd1);\n            temp = temp ^ ((inverse[i] >> ((j + 7) % 8)) & 8'd1);\n            temp = temp ^ (8'd1 << (7 - j));\n            affine = affine | (temp << (7 - j));\n        end\n        sbox[i] = affine;\n    end\nend\n\n// Calculate the multiplicative inverse in GF(2^8)\nfunction [7:0] calculate_inverse;\n    input [7:0] a;\n    reg [7:0] result;\n    // Calculate the multiplicative inverse using the extended Euclidean algorithm\n    // or other methods\n    result = a; // Replace with actual implementation\n    calculate_inverse = result;\nendfunction\n\n// Assign the output\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 11, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    // Pre-computed S-box values for AES\n    sbox[0x00] = 8'h63;\n    sbox[0x01] = 8'h7c;\n    sbox[0x02] = 8'h77;\n    sbox[0x03] = 8'h7b;\n    sbox[0x04] = 8'hf2;\n    sbox[0x05] = 8'h6b;\n    sbox[0x06] = 8'h6f;\n    sbox[0x07] = 8'hc5;\n    sbox[0x08] = 8'h30;\n    sbox[0x09] = 8'h01;\n    sbox[0x0a] = 8'h67;\n    sbox[0x0b] = 8'h2b;\n    sbox[0x0c] = 8'hfe;\n    sbox[0x0d] = 8'hd7;\n    sbox[0x0e] = 8'hab;\n    sbox[0x0f] = 8'h76;\n    sbox[0x10] = 8'hca;\n    sbox[0x11] = 8'h82;\n    sbox[0x12] = 8'hc9;\n    sbox[0x13] = 8'h7d;\n    sbox[0x14] = 8'hfa;\n    sbox[0x15] = 8'h59;\n    sbox[0x16] = 8'h47;\n    sbox[0x17] = 8'hf0;\n    sbox[0x18] = 8'had;\n    sbox[0x19] = 8'hd4;\n    sbox[0x1a] = 8'haf;\n    sbox[0x1b] = 8'h9c;\n    sbox[0x1c] = 8'h_a4;\n    sbox[0x1d] = 8'h72;\n    sbox[0x1e] = 8'hc0;\n    sbox[0x1f] = 8'hb7;\n    sbox[0x20] = 8'hfd;\n    sbox[0x21] = 8'h93;\n    sbox[0x22] = 8'h26;\n    sbox[0x23] = 8'h36;\n    sbox[0x24] = 8'h3f;\n    sbox[0x25] = 8'h_f7;\n    sbox[0x26] = 8'hcc;\n    sbox[0x27] = 8'h34;\n    sbox[0x28] = 8'h_a5;\n    sbox[0x29] = 8'h_e5;\n    sbox[0x2a] = 8'h_f1;\n    sbox[0x2b] = 8'h71;\n    sbox[0x2c] = 8'h_d8;\n    sbox[0x2d] = 8'h31;\n    sbox[0x2e] = 8'h_15;\n    sbox[0x2f] = 8'h_04;\n    sbox[0x30] = 8'h_c7;\n    sbox[0x31] = 8'h_23;\n    sbox[0x32] = 8'h_c3;\n    sbox[0x33] = 8'h_18;\n    sbox[0x34] = 8'h_96;\n    sbox[0x35] = 8'h_05;\n    sbox[0x36] = 8'h_9a;\n    sbox[0x37] = 8'h_07;\n    sbox[0x38] = 8'h_12;\n    sbox[0x39] = 8'h_80;\n    sbox[0x3a] = 8'h_e2;\n    sbox[0x3b] = 8'h_eb;\n    sbox[0x3c] = 8'h_27;\n    sbox[0x3d] = 8'h_b2;\n    sbox[0x3e] = 8'h_75;\n    sbox[0x3f] = 8'h_09;\n    sbox[0x40] = 8'h_c6;\n    sbox[0x41] = 8'h_50;\n    sbox[0x42] = 8'h_6a;\n    sbox[0x43] = 8'h_f5;\n    sbox[0x44] = 8'h_3e;\n    sbox[0x45] = 8'h_5b;\n    sbox[0x46] = 8'h_a0;\n    sbox[0x47] = 8'h_52;\n    sbox[0x48] = 8'h_3b;\n    sbox[0x49] = 8'h_d6;\n    sbox[0x4a] = 8'h_b3;\n    sbox[0x4b] = 8'h_29;\n    sbox[0x4c] = 8'h_e3;\n    sbox[0x4d] = 8'h_2f;\n    sbox[0x4e] = 8'h_84;\n    sbox[0x4f] = 8'h_53;\n    sbox[0x50] = 8'h_d1;\n    sbox[0x51] = 8'h_00;\n    sbox[0x52] = 8'h_ed;\n    sbox[0x53] = 8'h_20;\n    sbox[0x54] = 8'h_fc;\n    sbox[0x55] = 8'h_b1;\n    sbox[0x56] = 8'h_5a;\n    sbox[0x57] = 8'h_cb;\n    sbox[0x58] = 8'h_b6;\n    sbox[0x59] = 8'h_c2;\n    sbox[0x5a] = 8'h_4b;\n    sbox[0x5b] = 8'h_c8;\n    sbox[0x5c] = 8'h_cc;\n    sbox[0x5d] = 8'h_62;\n    sbox[0x5e] = 8'h_66;\n    sbox[0x5f] = 8'h_da;\n    sbox[0x60] = 8'h_81;\n    sbox[0x61] = 8'h_1f;\n    sbox[0x62] = 8'h_43;\n    sbox[0x63] = 8'h_8d;\n    sbox[0x64] = 8'h_95;\n    sbox[0x65] = 8'h_87;\n    sbox[0x66] = 8'h_98;\n    sbox[0x67] = 8'h_16;\n    sbox[0x68] = 8'h_d3;\n    sbox[0x69] = 8'h_8c;\n    sbox[0x6a] = 8'h_97;\n    sbox[0x6b] = 8'h_79;\n    sbox[0x6c] = 8'h_ef;\n    sbox[0x6d] = 8'h_17;\n    sbox[0x6e] = 8'h_c4;\n    sbox[0x6f] = 8'h_4a;\n    sbox[0x70] = 8'h_de;\n    sbox[0x71] = 8'h_4d;\n    sbox[0x72] = 8'h_5c;\n    sbox[0x73] = 8'h_7a;\n    sbox[0x74] = 8'h_b0;\n    sbox[0x75] = 8'h_85;\n    sbox[0x76] = 8'h_11;\n    sbox[0x77] = 8'h_1a;\n    sbox[0x78] = 8'h_0f;\n    sbox[0x79] = 8'h_32;\n    sbox[0x7a] = 8'h_2c;\n    sbox[0x7b] = 8'h_2e;\n    sbox[0x7c] = 8'h_8f;\n    sbox[0x7d] = 8'h_8b;\n    sbox[0x7e] = 8'h_01;\n    sbox[0x7f] = 8'h_21;\n    sbox[0x80] = 8'h_1c;\n    sbox[0x81] = 8'h_8e;\n    sbox[0x82] = 8'h_1d;\n    sbox[0x83] = 8'h_f8;\n    sbox[0x84] = 8'h_e4;\n    sbox[0x85] = 8'h_3d;\n    sbox[0x86] = 8'h_bc;\n    sbox[0x87] = 8'h_3a;\n    sbox[0x88] = 8'h_91;\n    sbox[0x89] = 8'h_83;\n    sbox[0x8a] = 8'h_51;\n    sbox[0x8b] = 8'h_54;\n    sbox[0x8c] = 8'h_6e;\n    sbox[0x8d] = 8'h_68;\n    sbox[0x8e] = 8'h_c9;\n    sbox[0x8f] = 8'h_2d;\n    sbox[0x90] = 8'h_44;\n    sbox[0x91] = 8'h_24;\n    sbox[0x92] = 8'h_55;\n    sbox[0x93] = 8'h_a9;\n    sbox[0x94] = 8'h_92;\n    sbox[0x95] = 8'h_39;\n    sbox[0x96] = 8'h_11;\n    sbox[0x97] = 8'h_49;\n    sbox[0x98] = 8'h_1e;\n    sbox[0x99] = 8'h_9f;\n    sbox[0x9a] = 8'h_e6;\n    sbox[0x9b] = 8'h_22;\n    sbox[0x9c] = 8'h_5d;\n    sbox[0x9d] = 8'h_10;\n    sbox[0x9e] = 8'h_8a;\n    sbox[0x9f] = 8'h_d0;\n    sbox[0xa0] = 8'h_9d;\n    sbox[0xa1] = 8'h_25;\n    sbox[0xa2] = 8'h_4e;\n    sbox[0xa3] = 8'h_5e;\n    sbox[0xa4] = 8'h_6f;\n    sbox[0xa5] = 8'h_9e;\n    sbox[0xa6] = 8'h_6c;\n    sbox[0xa7] = 8'h_b8;\n    sbox[0xa8] = 8'h_45;\n    sbox[0xa9] = 8'h_bf;\n    sbox[0xaa] = 8'h_4f;\n    sbox[0xab] = 8'h_4c;\n    sbox[0xac] = 8'h_61;\n    sbox[0xad] = 8'h_3c;\n    sbox[0xae] = 8'h_5f;\n    sbox[0xaf] = 8'h_d2;\n    sbox[0xb0] = 8'h_2a;\n    sbox[0xb1] = 8'h_7e;\n    sbox[0xb2] = 8'h_5d;\n    sbox[0xb3] = 8'h_64;\n    sbox[0xb4] = 8'h_56;\n    sbox[0xb5] = 8'h_74;\n    sbox[0xb6] = 8'h_46;\n    sbox[0xb7] = 8'h_17;\n    sbox[0xb8] = 8'h_9b;\n    sbox[0xb9] = 8'h_bc;\n    sbox[0xba] = 8'h_22;\n    sbox[0xbb] = 8'h_52;\n    sbox[0xbc] = 8'h_f6;\n    sbox[0xbd] = 8'h_13;\n    sbox[0xbe] = 8'h_41;\n    sbox[0xbf] = 8'h_f3;\n    sbox[0xc0] = 8'h_e8;\n    sbox[0xc1] = 8'h_ll;\n    sbox[0xc2] = 8'h_d9;\n    sbox[0xc3] = 8'h_98;\n    sbox[0xc4] = 8'h_4d;\n    sbox[0xc5] = 8'h_f9;\n    sbox[0xc6] = 8'h_40;\n    sbox[0xc7] = 8'h_27;\n    sbox[0xc8] = 8'h_80;\n    sbox[0xc9] = 8'h_6b;\n    sbox[0xca] = 8'h_da;\n    sbox[0xcb] = 8'h_a1;\n    sbox[0xcc] = 8'h_7f;\n    sbox[0xcd] = 8'h_d8;\n    sbox[0xce] = 8'h_31;\n    sbox[0xcf] = 8'h_15;\n    sbox[0xd0] = 8'h_4e;\n    sbox[0xd1] = 8'h_ce;\n    sbox[0xd2] = 8'h_6a;\n    sbox[0xd3] = 8'h_b4;\n    sbox[0xd4] = 8'h_c5;\n    sbox[0xd5] = 8'h_6c;\n    sbox[0xd6] = 8'h_95;\n    sbox[0xd7] = 8'h_ac;\n    sbox[0xd8] = 8'h_29;\n    sbox[0xd9] = 8'h_e5;\n    sbox[0xda] = 8'h_4b;\n    sbox[0xdb] = 8'h_55;\n    sbox[0xdc] = 8'h_9a;\n    sbox[0xdd] = 8'h_91;\n    sbox[0xde] = 8'h_39;\n    sbox[0xdf] = 8'h_62;\n    sbox[0xe0] = 8'h_7a;\n    sbox[0xe1] = 8'h_0a;\n    sbox[0xe2] = 8'h_85;\n    sbox[0xe3] = 8'h_ef;\n    sbox[0xe4] = 8'h_ca;\n    sbox[0xe5] = 8'h_9d;\n    sbox[0xe6] = 8'h_75;\n    sbox[0xe7] = 8'h_8f;\n    sbox[0xe8] = 8'h_af;\n    sbox[0xe9] = 8'h_58;\n    sbox[0xea] = 8'h_a8;\n    sbox[0xeb] = 8'h_5d;\n    sbox[0xec] = 8'h_21;\n    sbox[0xed] = 8'h_3e;\n    sbox[0xee] = 8'h_25;\n    sbox[0xef] = 8'h_d3;\n    sbox[0xf0] = 8'h_16;\n    sbox[0xf1] = 8'h_8b;\n    sbox[0xf2] = 8'h_b6;\n    sbox[0xf3] = 8'h_a3;\n    sbox[0xf4] = 8'h_f2;\n    sbox[0xf5] = 8'h_a2;\n    sbox[0xf6] = 8'h_8e;\n    sbox[0xf7] = 8'h_d0;\n    sbox[0xf8] = 8'h_fd;\n    sbox[0xf9] = 8'h_1b;\n    sbox[0xfa] = 8'h_9c;\n    sbox[0xfb] = 8'h_8a;\n    sbox[0xfc] = 8'h_d8;\n    sbox[0xfd] = 8'h_3f;\n    sbox[0xfe] = 8'h_c6;\n    sbox[0xff] = 8'h_16;\nend\n\n// Perform S-box substitution\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 12, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Define the S-box values according to the AES standard\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'ha2;\n    sbox[27] = 8'haf;\n    sbox[28] = 8'h9c;\n    sbox[29] = 8'ha4;\n    sbox[30] = 8'h72;\n    sbox[31] = 8'hc0;\n    sbox[32] = 8'hb7;\n    sbox[33] = 8'hfd;\n    sbox[34] = 8'h93;\n    sbox[35] = 8'h26;\n    sbox[36] = 8'h36;\n    sbox[37] = 8'h3f;\n    sbox[38] = 8'hf7;\n    sbox[39] = 8'hcc;\n    sbox[40] = 8'h34;\n    sbox[41] = 8'ha5;\n    sbox[42] = 8'he5;\n    sbox[43] = 8'hf1;\n    sbox[44] = 8'h71;\n    sbox[45] = 8'hd8;\n    sbox[46] = 8'h31;\n    sbox[47] = 8'h15;\n    sbox[48] = 8'h04;\n    sbox[49] = 8'hc7;\n    sbox[50] = 8'h23;\n    sbox[51] = 8'hc3;\n    sbox[52] = 8'h18;\n    sbox[53] = 8'h96;\n    sbox[54] = 8'h05;\n    sbox[55] = 8'h9a;\n    sbox[56] = 8'h07;\n    sbox[57] = 8'h12;\n    sbox[58] = 8'h80;\n    sbox[59] = 8'he2;\n    sbox[60] = 8'heb;\n    sbox[61] = 8'h27;\n    sbox[62] = 8'hb2;\n    sbox[63] = 8'h75;\n    sbox[64] = 8'h09;\n    sbox[65] = 8'h83;\n    sbox[66] = 8'h2c;\n    sbox[67] = 8'h1a;\n    sbox[68] = 8'h1b;\n    sbox[69] = 8'h6e;\n    sbox[70] = 8'h5a;\n    sbox[71] = 8'ha0;\n    sbox[72] = 8'h52;\n    sbox[73] = 8'h3b;\n    sbox[74] = 8'hd6;\n    sbox[75] = 8'hb3;\n    sbox[76] = 8'h29;\n    sbox[77] = 8'he3;\n    sbox[78] = 8'h2f;\n    sbox[79] = 8'h84;\n    sbox[80] = 8'h53;\n    sbox[81] = 8'hd1;\n    sbox[82] = 8'h00;\n    sbox[83] = 8'hed;\n    sbox[84] = 8'h20;\n    sbox[85] = 8'hfc;\n    sbox[86] = 8'hb1;\n    sbox[87] = 8'h5b;\n    sbox[88] = 8'h6a;\n    sbox[89] = 8'hcb;\n    sbox[90] = 8'hbe;\n    sbox[91] = 8'h39;\n    sbox[92] = 8'h4a;\n    sbox[93] = 8'h4c;\n    sbox[94] = 8'h58;\n    sbox[95] = 8'hcf;\n    sbox[96] = 8'hd0;\n    sbox[97] = 8'hef;\n    sbox[98] = 8'haa;\n    sbox[99] = 8'hfb;\n    sbox[100] = 8'h43;\n    sbox[101] = 8'h4d;\n    sbox[102] = 8'h33;\n    sbox[103] = 8'h85;\n    sbox[104] = 8'h45;\n    sbox[105] = 8'hf9;\n    sbox[106] = 8'h02;\n    sbox[107] = 8'h7f;\n    sbox[108] = 8'h50;\n    sbox[109] = 8'h3c;\n    sbox[110] = 8'h9f;\n    sbox[111] = 8'ha8;\n    sbox[112] = 8'h51;\n    sbox[113] = 8'ha3;\n    sbox[114] = 8'h40;\n    sbox[115] = 8'h8f;\n    sbox[116] = 8'h92;\n    sbox[117] = 8'h9d;\n    sbox[118] = 8'h38;\n    sbox[119] = 8'hf5;\n    sbox[120] = 8'hbc;\n    sbox[121] = 8'hb6;\n    sbox[122] = 8'hda;\n    sbox[123] = 8'h21;\n    sbox[124] = 8'h10;\n    sbox[125] = 8'hff;\n    sbox[126] = 8'hf3;\n    sbox[127] = 8'hd2;\n    sbox[128] = 8'hcd;\n    sbox[129] = 8'h0c;\n    sbox[130] = 8'h13;\n    sbox[131] = 8'hec;\n    sbox[132] = 8'h5f;\n    sbox[133] = 8'h97;\n    sbox[134] = 8'h44;\n    sbox[135] = 8'h17;\n    sbox[136] = 8'hc4;\n    sbox[137] = 8'ha7;\n    sbox[138] = 8'h7e;\n    sbox[139] = 8'h3d;\n    sbox[140] = 8'h64;\n    sbox[141] = 8'h5d;\n    sbox[142] = 8'h19;\n    sbox[143] = 8'h73;\n    sbox[144] = 8'h60;\n    sbox[145] = 8'h81;\n    sbox[146] = 8'h4f;\n    sbox[147] = 8'hdc;\n    sbox[148] = 8'h22;\n    sbox[149] = 8'h2a;\n    sbox[150] = 8'h90;\n    sbox[151] = 8'h88;\n    sbox[152] = 8'h46;\n    sbox[153] = 8'hee;\n    sbox[154] = 8'hb8;\n    sbox[155] = 8'h14;\n    sbox[156] = 8'hde;\n    sbox[157] = 8'h5e;\n    sbox[158] = 8'h0b;\n    sbox[159] = 8'hdb;\n    sbox[160] = 8'he0;\n    sbox[161] = 8'h32;\n    sbox[162] = 8'h3a;\n    sbox[163] = 8'h0a;\n    sbox[164] = 8'h49;\n    sbox[165] = 8'h06;\n    sbox[166] = 8'h24;\n    sbox[167] = 8'h5c;\n    sbox[168] = 8'hc2;\n    sbox[169] = 8'hd3;\n    sbox[170] = 8'hac;\n    sbox[171] = 8'h62;\n    sbox[172] = 8'h91;\n    sbox[173] = 8'h95;\n    sbox[174] = 8'he4;\n    sbox[175] = 8'h79;\n    sbox[176] = 8'he7;\n    sbox[177] = 8'hc8;\n    sbox[178] = 8'h37;\n    sbox[179] = 8'h6d;\n    sbox[180] = 8'h8d;\n    sbox[181] = 8'hd5;\n    sbox[182] = 8'h4e;\n    sbox[183] = 8'ha9;\n    sbox[184] = 8'h6c;\n    sbox[185] = 8'h56;\n    sbox[186] = 8'hf4;\n    sbox[187] = 8'hea;\n    sbox[188] = 8'h65;\n    sbox[189] = 8'h7a;\n    sbox[190] = 8'hae;\n    sbox[191] = 8'h08;\n    sbox[192] = 8'hba;\n    sbox[193] = 8'h78;\n    sbox[194] = 8'h25;\n    sbox[195] = 8'h2e;\n    sbox[196] = 8'h1c;\n    sbox[197] = 8'ha6;\n    sbox[198] = 8'hb4;\n    sbox[199] = 8'hc6;\n    sbox[200] = 8'he8;\n    sbox[201] = 8'hdd;\n    sbox[202] = 8'h74;\n    sbox[203] = 8'h1f;\n    sbox[204] = 8'h4b;\n    sbox[205] = 8'hbd;\n    sbox[206] = 8'h8b;\n    sbox[207] = 8'h8a;\n    sbox[208] = 8'h70;\n    sbox[209] = 8'h3e;\n    sbox[210] = 8'hb5;\n    sbox[211] = 8'h66;\n    sbox[212] = 8'h48;\n    sbox[213] = 8'h03;\n    sbox[214] = 8'hf6;\n    sbox[215] = 8'h0e;\n    sbox[216] = 8'h61;\n    sbox[217] = 8'h35;\n    sbox[218] = 8'h57;\n    sbox[219] = 8'hb9;\n    sbox[220] = 8'h86;\n    sbox[221] = 8'hc1;\n    sbox[222] = 8'h1d;\n    sbox[223] = 8'h9e;\n    sbox[224] = 8'he1;\n    sbox[225] = 8'hf8;\n    sbox[226] = 8'h98;\n    sbox[227] = 8'h11;\n    sbox[228] = 8'h69;\n    sbox[229] = 8'hd9;\n    sbox[230] = 8'h8e;\n    sbox[231] = 8'h94;\n    sbox[232] = 8'h9b;\n    sbox[233] = 8'h1e;\n    sbox[234] = 8'h87;\n    sbox[235] = 8'he9;\n    sbox[236] = 8'hce;\n    sbox[237] = 8'h55;\n    sbox[238] = 8'h28;\n    sbox[239] = 8'hdf;\n    sbox[240] = 8'h8c;\n    sbox[241] = 8'ha1;\n    sbox[242] = 8'h89;\n    sbox[243] = 8'h0d;\n    sbox[244] = 8'hbf;\n    sbox[245] = 8'he6;\n    sbox[246] = 8'h42;\n    sbox[247] = 8'h68;\n    sbox[248] = 8'h41;\n    sbox[249] = 8'h99;\n    sbox[250] = 8'h2d;\n    sbox[251] = 8'h0f;\n    sbox[252] = 8'hb0;\n    sbox[253] = 8'h54;\n    sbox[254] = 8'hbb;\n    sbox[255] = 8'h16;\nend\n\n// Perform the S-box lookup\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 13, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    // Pre-computed S-box values\n    sbox[0x00] = 8'h63;\n    sbox[0x01] = 8'h7c;\n    sbox[0x02] = 8'h77;\n    sbox[0x03] = 8'h7b;\n    sbox[0x04] = 8'hf2;\n    sbox[0x05] = 8'h6b;\n    sbox[0x06] = 8'h6f;\n    sbox[0x07] = 8'hc5;\n    sbox[0x08] = 8'h30;\n    sbox[0x09] = 8'h01;\n    sbox[0x0a] = 8'h67;\n    sbox[0x0b] = 8'h2b;\n    sbox[0x0c] = 8'hfe;\n    sbox[0x0d] = 8'hd7;\n    sbox[0x0e] = 8'hab;\n    sbox[0x0f] = 8'h76;\n    sbox[0x10] = 8'hca;\n    sbox[0x11] = 8'h82;\n    sbox[0x12] = 8'hc9;\n    sbox[0x13] = 8'h7d;\n    sbox[0x14] = 8'hfa;\n    sbox[0x15] = 8'h59;\n    sbox[0x16] = 8'h47;\n    sbox[0x17] = 8'hf0;\n    sbox[0x18] = 8'had;\n    sbox[0x19] = 8'hd4;\n    sbox[0x1a] = 8'haf;\n    sbox[0x1b] = 8'h9c;\n    sbox[0x1c] = 8'h_a4;\n    sbox[0x1d] = 8'h72;\n    sbox[0x1e] = 8'hc0;\n    sbox[0x1f] = 8'hb7;\n    sbox[0x20] = 8'hfd;\n    sbox[0x21] = 8'h93;\n    sbox[0x22] = 8'h26;\n    sbox[0x23] = 8'h36;\n    sbox[0x24] = 8'h3f;\n    sbox[0x25] = 8'h_f7;\n    sbox[0x26] = 8'hcc;\n    sbox[0x27] = 8'h34;\n    sbox[0x28] = 8'h_a5;\n    sbox[0x29] = 8'h_e5;\n    sbox[0x2a] = 8'h_f1;\n    sbox[0x2b] = 8'h71;\n    sbox[0x2c] = 8'h_d8;\n    sbox[0x2d] = 8'h31;\n    sbox[0x2e] = 8'h_15;\n    sbox[0x2f] = 8'h_04;\n    sbox[0x30] = 8'h_c7;\n    sbox[0x31] = 8'h_23;\n    sbox[0x32] = 8'h_c3;\n    sbox[0x33] = 8'h_18;\n    sbox[0x34] = 8'h_96;\n    sbox[0x35] = 8'h_05;\n    sbox[0x36] = 8'h_9a;\n    sbox[0x37] = 8'h_07;\n    sbox[0x38] = 8'h_12;\n    sbox[0x39] = 8'h_80;\n    sbox[0x3a] = 8'h_e2;\n    sbox[0x3b] = 8'h_eb;\n    sbox[0x3c] = 8'h_27;\n    sbox[0x3d] = 8'h_b2;\n    sbox[0x3e] = 8'h_75;\n    sbox[0x3f] = 8'h_09;\n    sbox[0x40] = 8'h_83;\n    sbox[0x41] = 8'h_2e;\n    sbox[0x42] = 8'h_78;\n    sbox[0x43] = 8'h_13;\n    sbox[0x44] = 8'h_06;\n    sbox[0x45] = 8'h_84;\n    sbox[0x46] = 8'h_51;\n    sbox[0x47] = 8'h_a3;\n    sbox[0x48] = 8'h_00;\n    sbox[0x49] = 8'h_f4;\n    sbox[0x4a] = 8'h_70;\n    sbox[0x4b] = 8'h_11;\n    sbox[0x4c] = 8'h_cb;\n    sbox[0x4d] = 8'h_8f;\n    sbox[0x4e] = 8'h_b6;\n    sbox[0x4f] = 8'h_21;\n    sbox[0x50] = 8'h_40;\n    sbox[0x51] = 8'h_89;\n    sbox[0x52] = 8'h_95;\n    sbox[0x53] = 8'h_7f;\n    sbox[0x54] = 8'h_28;\n    sbox[0x55] = 8'h_42;\n    sbox[0x56] = 8'h_5c;\n    sbox[0x57] = 8'h_50;\n    sbox[0x58] = 8'h_aa;\n    sbox[0x59] = 8'h_43;\n    sbox[0x5a] = 8'h_4d;\n    sbox[0x5b] = 8'h_33;\n    sbox[0x5c] = 8'h_85;\n    sbox[0x5d] = 8'h_45;\n    sbox[0x5e] = 8'h_f9;\n    sbox[0x5f] = 8'h_02;\n    sbox[0x60] = 8'h_7e;\n    sbox[0x61] = 8'h_a9;\n    sbox[0x62] = 8'h_37;\n    sbox[0x63] = 8'h_e6;\n    sbox[0x64] = 8'h_64;\n    sbox[0x65] = 8'h_5d;\n    sbox[0x66] = 8'h_19;\n    sbox[0x67] = 8'h_73;\n    sbox[0x68] = 8'h_60;\n    sbox[0x69] = 8'h_81;\n    sbox[0x6a] = 8'h_4f;\n    sbox[0x6b] = 8'h_dc;\n    sbox[0x6c] = 8'h_22;\n    sbox[0x6d] = 8'h_2a;\n    sbox[0x6e] = 8'h_90;\n    sbox[0x6f] = 8'h_88;\n    sbox[0x70] = 8'h_46;\n    sbox[0x71] = 8'h_ee;\n    sbox[0x72] = 8'h_b8;\n    sbox[0x73] = 8'h_14;\n    sbox[0x74] = 8'h_de;\n    sbox[0x75] = 8'h_5e;\n    sbox[0x76] = 8'h_0b;\n    sbox[0x77] = 8'h_db;\n    sbox[0x78] = 8'h_e0;\n    sbox[0x79] = 8'h_32;\n    sbox[0x7a] = 8'h_3a;\n    sbox[0x7b] = 8'h_0a;\n    sbox[0x7c] = 8'h_49;\n    sbox[0x7d] = 8'h_06;\n    sbox[0x7e] = 8'h_24;\n    sbox[0x7f] = 8'h_5f;\n    sbox[0x80] = 8'h_c6;\n    sbox[0x81] = 8'h_c2;\n    sbox[0x82] = 8'h_35;\n    sbox[0x83] = 8'h_a1;\n    sbox[0x84] = 8'h_39;\n    sbox[0x85] = 8'h_cf;\n    sbox[0x86] = 8'h_e9;\n    sbox[0x87] = 8'h_f8;\n    sbox[0x88] = 8'h_98;\n    sbox[0x89] = 8'h_11;\n    sbox[0x8a] = 8'h_69;\n    sbox[0x8b] = 8'h_d5;\n    sbox[0x8c] = 8'h_8e;\n    sbox[0x8d] = 8'h_94;\n    sbox[0x8e] = 8'h_9b;\n    sbox[0x8f] = 8'h_1e;\n    sbox[0x90] = 8'h_87;\n    sbox[0x91] = 8'h_e7;\n    sbox[0x92] = 8'h_79;\n    sbox[0x93] = 8'h_6e;\n    sbox[0x94] = 8'h_3b;\n    sbox[0x95] = 8'h_21;\n    sbox[0x96] = 8'h_52;\n    sbox[0x97] = 8'h_54;\n    sbox[0x98] = 8'h_d3;\n    sbox[0x99] = 8'h_9c;\n    sbox[0x9a] = 8'h_a6;\n    sbox[0x9b] = 8'h_56;\n    sbox[0x9c] = 8'h_b4;\n    sbox[0x9d] = 8'h_c6;\n    sbox[0x9e] = 8'h_e8;\n    sbox[0x9f] = 8'h_dd;\n    sbox[0xa0] = 8'h_73;\n    sbox[0xa1] = 8'h_5a;\n    sbox[0xa2] = 8'h_a9;\n    sbox[0xa3] = 8'h_b7;\n    sbox[0xa4] = 8'h_8b;\n    sbox[0xa5] = 8'h_f3;\n    sbox[0xa6] = 8'h_2f;\n    sbox[0xa7] = 8'h_80;\n    sbox[0xa8] = 8'h_0c;\n    sbox[0xa9] = 8'h_e1;\n    sbox[0xaa] = 8'h_71;\n    sbox[0xab] = 8'h_8d;\n    sbox[0xac] = 8'h_1f;\n    sbox[0xad] = 8'h_1b;\n    sbox[0xae] = 8'h_6b;\n    sbox[0xaf] = 8'h_a0;\n    sbox[0xb0] = 8'h_86;\n    sbox[0xb1] = 8'h_4b;\n    sbox[0xb2] = 8'h_58;\n    sbox[0xb3] = 8'h_9a;\n    sbox[0xb4] = 8'h_a7;\n    sbox[0xb5] = 8'h_65;\n    sbox[0xb6] = 8'h_4e;\n    sbox[0xb7] = 8'h_41;\n    sbox[0xb8] = 8'h_9f;\n    sbox[0xb9] = 8'h_2d;\n    sbox[0xba] = 8'h_ef;\n    sbox[0xbb] = 8'h_b0;\n    sbox[0xbc] = 8'h_54;\n    sbox[0xbd] = 8'h_fb;\n    sbox[0xbe] = 8'h_16;\n    sbox[0xbf] = 8'h_39;\n    sbox[0xc0] = 8'h_4a;\n    sbox[0xc1] = 8'h_4c;\n    sbox[0xc2] = 8'h_2e;\n    sbox[0xc3] = 8'h_5b;\n    sbox[0xc4] = 8'h_8a;\n    sbox[0xc5] = 8'h_3e;\n    sbox[0xc6] = 8'h_5d;\n    sbox[0xc7] = 8'h_ac;\n    sbox[0xc8] = 8'h_62;\n    sbox[0xc9] = 8'h_91;\n    sbox[0xca] = 8'h_95;\n    sbox[0xcb] = 8'h_e4;\n    sbox[0xcc] = 8'h_79;\n    sbox[0xcd] = 8'h_e7;\n    sbox[0xce] = 8'h_c8;\n    sbox[0xcf] = 8'h_37;\n    sbox[0xd0] = 8'h_6d;\n    sbox[0xd1] = 8'h_8f;\n    sbox[0xd2] = 8'h_21;\n    sbox[0xd3] = 8'h_1c;\n    sbox[0xd4] = 8'h_20;\n    sbox[0xd5] = 8'h_e2;\n    sbox[0xd6] = 8'h_ea;\n    sbox[0xd7] = 8'h_d2;\n    sbox[0xd8] = 8'h_42;\n    sbox[0xd9] = 8'h_f4;\n    sbox[0xda] = 8'h_de;\n    sbox[0xdb] = 8'h_c5;\n    sbox[0xdc] = 8'h_31;\n    sbox[0xdd] = 8'h_3d;\n    sbox[0xde] = 8'h_24;\n    sbox[0xdf] = 8'h_2f;\n    sbox[0xe0] = 8'h_d1;\n    sbox[0xe1] = 8'h_19;\n    sbox[0xe2] = 8'h_5a;\n    sbox[0xe3] = 8'h_8e;\n    sbox[0xe4] = 8'h_47;\n    sbox[0xe5] = 8'h_3b;\n    sbox[0xe6] = 8'h_5f;\n    sbox[0xe7] = 8'h_44;\n    sbox[0xe8] = 8'h_d8;\n    sbox[0xe9] = 8'h_10;\n    sbox[0xea] = 8'h_9d;\n    sbox[0xeb] = 8'h_f1;\n    sbox[0xec] = 8'h_17;\n    sbox[0xed] = 8'h_98;\n    sbox[0xee] = 8'h_a3;\n    sbox[0xef] = 8'h_6a;\n    sbox[0xf0] = 8'h_0e;\n    sbox[0xf1] = 8'h_06;\n    sbox[0xf2] = 8'h_13;\n    sbox[0xf3] = 8'h_a7;\n    sbox[0xf4] = 8'h_56;\n    sbox[0xf5] = 8'h_82;\n    sbox[0xf6] = 8'h_3c;\n    sbox[0xf7] = 8'h_67;\n    sbox[0xf8] = 8'h_9b;\n    sbox[0xf9] = 8'h_83;\n    sbox[0xfa] = 8'h_2b;\n    sbox[0xfb] = 8'h_1a;\n    sbox[0xfc] = 8'h_1e;\n    sbox[0xfd] = 8'h_94;\n    sbox[0xfe] = 8'h_0b;\n    sbox[0xff] = 8'h_16;\nend\n\n// Assign output\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 14, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h_a4;\n    sbox[29] = 8'h72;\n    sbox[30] = 8'hc0;\n    sbox[31] = 8'hb7;\n    sbox[32] = 8'hfd;\n    sbox[33] = 8'h93;\n    sbox[34] = 8'h26;\n    sbox[35] = 8'h36;\n    sbox[36] = 8'h3f;\n    sbox[37] = 8'h_f7;\n    sbox[38] = 8'hcc;\n    sbox[39] = 8'h34;\n    sbox[40] = 8'h_a5;\n    sbox[41] = 8'h_e5;\n    sbox[42] = 8'h_f1;\n    sbox[43] = 8'h71;\n    sbox[44] = 8'h_d8;\n    sbox[45] = 8'h31;\n    sbox[46] = 8'h_15;\n    sbox[47] = 8'h_04;\n    sbox[48] = 8'h_c7;\n    sbox[49] = 8'h_23;\n    sbox[50] = 8'h_c3;\n    sbox[51] = 8'h_18;\n    sbox[52] = 8'h_96;\n    sbox[53] = 8'h_05;\n    sbox[54] = 8'h_9a;\n    sbox[55] = 8'h_07;\n    sbox[56] = 8'h_12;\n    sbox[57] = 8'h_80;\n    sbox[58] = 8'h_e2;\n    sbox[59] = 8'h_eb;\n    sbox[60] = 8'h_27;\n    sbox[61] = 8'h_b2;\n    sbox[62] = 8'h_75;\n    sbox[63] = 8'h_09;\n    sbox[64] = 8'h_83;\n    sbox[65] = 8'h_2c;\n    sbox[66] = 8'h_1a;\n    sbox[67] = 8'h_1b;\n    sbox[68] = 8'h_6e;\n    sbox[69] = 8'h_5a;\n    sbox[70] = 8'h_a0;\n    sbox[71] = 8'h_52;\n    sbox[72] = 8'h_3b;\n    sbox[73] = 8'h_d6;\n    sbox[74] = 8'h_b3;\n    sbox[75] = 8'h_29;\n    sbox[76] = 8'h_e3;\n    sbox[77] = 8'h_2f;\n    sbox[78] = 8'h_84;\n    sbox[79] = 8'h_53;\n    sbox[80] = 8'h_d1;\n    sbox[81] = 8'h_00;\n    sbox[82] = 8'h_ed;\n    sbox[83] = 8'h_20;\n    sbox[84] = 8'h_fc;\n    sbox[85] = 8'h_b1;\n    sbox[86] = 8'h_5b;\n    sbox[87] = 8'h_6a;\n    sbox[88] = 8'h_cb;\n    sbox[89] = 8'h_be;\n    sbox[90] = 8'h_39;\n    sbox[91] = 8'h_4a;\n    sbox[92] = 8'h_4c;\n    sbox[93] = 8'h_58;\n    sbox[94] = 8'h_cf;\n    sbox[95] = 8'h_d0;\n    sbox[96] = 8'h_ef;\n    sbox[97] = 8'h_aa;\n    sbox[98] = 8'h_fb;\n    sbox[99] = 8'h_43;\n    sbox[100] = 8'h_4d;\n    sbox[101] = 8'h_33;\n    sbox[102] = 8'h_85;\n    sbox[103] = 8'h_45;\n    sbox[104] = 8'h_f9;\n    sbox[105] = 8'h_02;\n    sbox[106] = 8'h_7f;\n    sbox[107] = 8'h_50;\n    sbox[108] = 8'h_3c;\n    sbox[109] = 8'h_9f;\n    sbox[110] = 8'h_a8;\n    sbox[111] = 8'h_51;\n    sbox[112] = 8'h_a3;\n    sbox[113] = 8'h_40;\n    sbox[114] = 8'h_8f;\n    sbox[115] = 8'h_92;\n    sbox[116] = 8'h_9d;\n    sbox[117] = 8'h_38;\n    sbox[118] = 8'h_f5;\n    sbox[119] = 8'h_bc;\n    sbox[120] = 8'h_b6;\n    sbox[121] = 8'h_da;\n    sbox[122] = 8'h_21;\n    sbox[123] = 8'h_10;\n    sbox[124] = 8'h_ff;\n    sbox[125] = 8'h_f3;\n    sbox[126] = 8'h_d2;\n    sbox[127] = 8'h_cd;\n    sbox[128] = 8'h_0c;\n    sbox[129] = 8'h_13;\n    sbox[130] = 8'h_ec;\n    sbox[131] = 8'h_5f;\n    sbox[132] = 8'h_97;\n    sbox[133] = 8'h_44;\n    sbox[134] = 8'h_17;\n    sbox[135] = 8'h_c4;\n    sbox[136] = 8'h_a7;\n    sbox[137] = 8'h_7e;\n    sbox[138] = 8'h_3d;\n    sbox[139] = 8'h_64;\n    sbox[140] = 8'h_5d;\n    sbox[141] = 8'h_19;\n    sbox[142] = 8'h_73;\n    sbox[143] = 8'h_60;\n    sbox[144] = 8'h_81;\n    sbox[145] = 8'h_4f;\n    sbox[146] = 8'h_dc;\n    sbox[147] = 8'h_22;\n    sbox[148] = 8'h_2a;\n    sbox[149] = 8'h_90;\n    sbox[150] = 8'h_88;\n    sbox[151] = 8'h_46;\n    sbox[152] = 8'hxee;\n    sbox[153] = 8'h_b8;\n    sbox[154] = 8'h_14;\n    sbox[155] = 8'h_de;\n    sbox[156] = 8'h_5e;\n    sbox[157] = 8'h_0b;\n    sbox[158] = 8'h_db;\n    sbox[159] = 8'h_e0;\n    sbox[160] = 8'h_32;\n    sbox[161] = 8'h_3a;\n    sbox[162] = 8'h_0a;\n    sbox[163] = 8'h_49;\n    sbox[164] = 8'h_06;\n    sbox[165] = 8'h_24;\n    sbox[166] = 8'h_5c;\n    sbox[167] = 8'h_c2;\n    sbox[168] = 8'h_d3;\n    sbox[169] = 8'h_ac;\n    sbox[170] = 8'h_62;\n    sbox[171] = 8'h_91;\n    sbox[172] = 8'h_95;\n    sbox[173] = 8'h_e4;\n    sbox[174] = 8'h_79;\n    sbox[175] = 8'h_e7;\n    sbox[176] = 8'h_c8;\n    sbox[177] = 8'h_37;\n    sbox[178] = 8'h_6d;\n    sbox[179] = 8'h_8d;\n    sbox[180] = 8'h_d5;\n    sbox[181] = 8'h_4e;\n    sbox[182] = 8'h_a9;\n    sbox[183] = 8'h_6c;\n    sbox[184] = 8'h_56;\n    sbox[185] = 8'h_f4;\n    sbox[186] = 8'h_ea;\n    sbox[187] = 8'h_65;\n    sbox[188] = 8'h_7a;\n    sbox[189] = 8'h_ae;\n    sbox[190] = 8'h_08;\n    sbox[191] = 8'h_ba;\n    sbox[192] = 8'h_78;\n    sbox[193] = 8'h_25;\n    sbox[194] = 8'h_2e;\n    sbox[195] = 8'h_1c;\n    sbox[196] = 8'h_a6;\n    sbox[197] = 8'h_b4;\n    sbox[198] = 8'h_c6;\n    sbox[199] = 8'h_e8;\n    sbox[200] = 8'h_dd;\n    sbox[201] = 8'h_74;\n    sbox[202] = 8'h_1f;\n    sbox[203] = 8'h_4b;\n    sbox[204] = 8'h_bd;\n    sbox[205] = 8'h_8b;\n    sbox[206] = 8'h_8a;\n    sbox[207] = 8'h_70;\n    sbox[208] = 8'h_3e;\n    sbox[209] = 8'h_b5;\n    sbox[210] = 8'h_66;\n    sbox[211] = 8'h_48;\n    sbox[212] = 8'h_03;\n    sbox[213] = 8'h_f6;\n    sbox[214] = 8'h_0e;\n    sbox[215] = 8'h_61;\n    sbox[216] = 8'h_35;\n    sbox[217] = 8'h_57;\n    sbox[218] = 8'h_b9;\n    sbox[219] = 8'h_86;\n    sbox[220] = 8'h_c1;\n    sbox[221] = 8'h_1d;\n    sbox[222] = 8'h_9e;\n    sbox[223] = 8'h_e1;\n    sbox[224] = 8'h_f8;\n    sbox[225] = 8'h_98;\n    sbox[226] = 8'h_11;\n    sbox[227] = 8'h_69;\n    sbox[228] = 8'h_d9;\n    sbox[229] = 8'h_8e;\n    sbox[230] = 8'h_94;\n    sbox[231] = 8'h_9b;\n    sbox[232] = 8'h_1e;\n    sbox[233] = 8'h_87;\n    sbox[234] = 8'h_e9;\n    sbox[235] = 8'h_ce;\n    sbox[236] = 8'h_55;\n    sbox[237] = 8'h_28;\n    sbox[238] = 8'h_df;\n    sbox[239] = 8'h_8c;\n    sbox[240] = 8'h_a1;\n    sbox[241] = 8'h_89;\n    sbox[242] = 8'h_0d;\n    sbox[243] = 8'h_bf;\n    sbox[244] = 8'h_e6;\n    sbox[245] = 8'h_42;\n    sbox[246] = 8'h_68;\n    sbox[247] = 8'h_41;\n    sbox[248] = 8'h_99;\n    sbox[249] = 8'h_2d;\n    sbox[250] = 8'h_0f;\n    sbox[251] = 8'h_b0;\n    sbox[252] = 8'h_54;\n    sbox[253] = 8'h_bb;\n    sbox[254] = 8'h_16;\n    sbox[255] = 8'h_16;\nend\n\n// Output logic\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 15, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize S-box values\ninitial begin\n    // Initialize S-box values according to AES specification\n    // This can be done manually or using a script to generate the values\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'ha2;\n    sbox[27] = 8'haf;\n    sbox[28] = 8'h9c;\n    sbox[29] = 8'ha4;\n    sbox[30] = 8'h72;\n    sbox[31] = 8'hc0;\n    sbox[32] = 8'hb7;\n    sbox[33] = 8'hfd;\n    sbox[34] = 8'h93;\n    sbox[35] = 8'h26;\n    sbox[36] = 8'h36;\n    sbox[37] = 8'h3f;\n    sbox[38] = 8'hf7;\n    sbox[39] = 8'hcc;\n    sbox[40] = 8'h34;\n    sbox[41] = 8'ha5;\n    sbox[42] = 8'he5;\n    sbox[43] = 8'hf1;\n    sbox[44] = 8'h71;\n    sbox[45] = 8'hd8;\n    sbox[46] = 8'h31;\n    sbox[47] = 8'h15;\n    sbox[48] = 8'h04;\n    sbox[49] = 8'hc7;\n    sbox[50] = 8'h23;\n    sbox[51] = 8'hc3;\n    sbox[52] = 8'h18;\n    sbox[53] = 8'h96;\n    sbox[54] = 8'h05;\n    sbox[55] = 8'h9a;\n    sbox[56] = 8'h07;\n    sbox[57] = 8'h12;\n    sbox[58] = 8'h80;\n    sbox[59] = 8'he2;\n    sbox[60] = 8'heb;\n    sbox[61] = 8'h27;\n    sbox[62] = 8'hb2;\n    sbox[63] = 8'h75;\n    sbox[64] = 8'h09;\n    sbox[65] = 8'h83;\n    sbox[66] = 8'h2c;\n    sbox[67] = 8'h1a;\n    sbox[68] = 8'h1b;\n    sbox[69] = 8'h6e;\n    sbox[70] = 8'h5a;\n    sbox[71] = 8'ha0;\n    sbox[72] = 8'h52;\n    sbox[73] = 8'h3b;\n    sbox[74] = 8'hd6;\n    sbox[75] = 8'hb3;\n    sbox[76] = 8'h29;\n    sbox[77] = 8'he3;\n    sbox[78] = 8'h2f;\n    sbox[79] = 8'h84;\n    sbox[80] = 8'h53;\n    sbox[81] = 8'hd1;\n    sbox[82] = 8'h00;\n    sbox[83] = 8'hed;\n    sbox[84] = 8'h20;\n    sbox[85] = 8'hfc;\n    sbox[86] = 8'hb1;\n    sbox[87] = 8'h5b;\n    sbox[88] = 8'h6a;\n    sbox[89] = 8'hcb;\n    sbox[90] = 8'hbe;\n    sbox[91] = 8'h39;\n    sbox[92] = 8'h4a;\n    sbox[93] = 8'h4c;\n    sbox[94] = 8'h58;\n    sbox[95] = 8'hcf;\n    sbox[96] = 8'hd0;\n    sbox[97] = 8'hef;\n    sbox[98] = 8'ha8;\n    sbox[99] = 8'h68;\n    sbox[100] = 8'h44;\n    sbox[101] = 8'hdd;\n    sbox[102] = 8'h90;\n    sbox[103] = 8'h35;\n    sbox[104] = 8'hbd;\n    sbox[105] = 8'hcd;\n    sbox[106] = 8'hbc;\n    sbox[107] = 8'h12;\n    sbox[108] = 8'h2a;\n    sbox[109] = 8'h3d;\n    sbox[110] = 8'h6b;\n    sbox[111] = 8'h8f;\n    sbox[112] = 8'h4e;\n    sbox[113] = 8'h91;\n    sbox[114] = 8'h11;\n    sbox[115] = 8'h1f;\n    sbox[116] = 8'h13;\n    sbox[117] = 8'h6c;\n    sbox[118] = 8'h60;\n    sbox[119] = 8'h6d;\n    sbox[120] = 8'h54;\n    sbox[121] = 8'h5c;\n    sbox[122] = 8'h55;\n    sbox[123] = 8'h66;\n    sbox[124] = 8'h56;\n    sbox[125] = 8'h09;\n    sbox[126] = 8'h62;\n    sbox[127] = 8'h19;\n    sbox[128] = 8'h14;\n    sbox[129] = 8'h3a;\n    sbox[130] = 8'h21;\n    sbox[131] = 8'h4d;\n    sbox[132] = 8'h7c;\n    sbox[133] = 8'h7a;\n    sbox[134] = 8'h18;\n    sbox[135] = 8'h6f;\n    sbox[136] = 8'h9e;\n    sbox[137] = 8'h9f;\n    sbox[138] = 8'h8e;\n    sbox[139] = 8'h95;\n    sbox[140] = 8'h8d;\n    sbox[141] = 8'h9b;\n    sbox[142] = 8'h8a;\n    sbox[143] = 8'h8b;\n    sbox[144] = 8'h89;\n    sbox[145] = 8'h9d;\n    sbox[146] = 8'h97;\n    sbox[147] = 8'h8c;\n    sbox[148] = 8'h8f;\n    sbox[149] = 8'haa;\n    sbox[150] = 8'h2e;\n    sbox[151] = 8'h91;\n    sbox[152] = 8'ha9;\n    sbox[153] = 8'h33;\n    sbox[154] = 8'h88;\n    sbox[155] = 8'h85;\n    sbox[156] = 8'h69;\n    sbox[157] = 8'h41;\n    sbox[158] = 8'h38;\n    sbox[159] = 8'h46;\n    sbox[160] = 8'h4b;\n    sbox[161] = 8'h4f;\n    sbox[162] = 8'h40;\n    sbox[163] = 8'h49;\n    sbox[164] = 8'h42;\n    sbox[165] = 8'h48;\n    sbox[166] = 8'h43;\n    sbox[167] = 8'h94;\n    sbox[168] = 8'h45;\n    sbox[169] = 8'h21;\n    sbox[170] = 8'h22;\n    sbox[171] = 8'h5e;\n    sbox[172] = 8'h37;\n    sbox[173] = 8'h17;\n    sbox[174] = 8'h16;\n    sbox[175] = 8'h5f;\n    sbox[176] = 8'hce;\n    sbox[177] = 8'h1a;\n    sbox[178] = 8'h8d;\n    sbox[179] = 8'h74;\n    sbox[180] = 8'h1f;\n    sbox[181] = 8'h4b;\n    sbox[182] = 8'h8b;\n    sbox[183] = 8'h8a;\n    sbox[184] = 8'h70;\n    sbox[185] = 8'h3e;\n    sbox[186] = 8'hb5;\n    sbox[187] = 8'h66;\n    sbox[188] = 8'h48;\n    sbox[189] = 8'h03;\n    sbox[190] = 8'hf6;\n    sbox[191] = 8'h0e;\n    sbox[192] = 8'h61;\n    sbox[193] = 8'h35;\n    sbox[194] = 8'h57;\n    sbox[195] = 8'hb9;\n    sbox[196] = 8'h86;\n    sbox[197] = 8'hc1;\n    sbox[198] = 8'h1d;\n    sbox[199] = 8'h9e;\n    sbox[200] = 8'he7;\n    sbox[201] = 8'h73;\n    sbox[202] = 8'h93;\n    sbox[203] = 8'h17;\n    sbox[204] = 8'hba;\n    sbox[205] = 8'h75;\n    sbox[206] = 8'h05;\n    sbox[207] = 8'h2f;\n    sbox[208] = 8'h3c;\n    sbox[209] = 8'h24;\n    sbox[210] = 8'h51;\n    sbox[211] = 8'h22;\n    sbox[212] = 8'h31;\n    sbox[213] = 8'h15;\n    sbox[214] = 8'h4c;\n    sbox[215] = 8'h5d;\n    sbox[216] = 8'h9b;\n    sbox[217] = 8'h7c;\n    sbox[218] = 8'h80;\n    sbox[219] = 8'h54;\n    sbox[220] = 8'hfb;\n    sbox[221] = 8'h7b;\n    sbox[222] = 8'h86;\n    sbox[223] = 8'h3b;\n    sbox[224] = 8'h4a;\n    sbox[225] = 8'h4d;\n    sbox[226] = 8'h44;\n    sbox[227] = 8'h5b;\n    sbox[228] = 8'h49;\n    sbox[229] = 8'hfc;\n    sbox[230] = 8'h9a;\n    sbox[231] = 8'h9b;\n    sbox[232] = 8'h55;\n    sbox[233] = 8'h6d;\n    sbox[234] = 8'h54;\n    sbox[235] = 8'h5c;\n    sbox[236] = 8'h56;\n    sbox[237] = 8'h68;\n    sbox[238] = 8'h72;\n    sbox[239] = 8'h6a;\n    sbox[240] = 8'h6c;\n    sbox[241] = 8'h62;\n    sbox[242] = 8'h6e;\n    sbox[243] = 8'h65;\n    sbox[244] = 8'h6f;\n    sbox[245] = 8'h74;\n    sbox[246] = 8'h70;\n    sbox[247] = 8'h64;\n    sbox[248] = 8'h66;\n    sbox[249] = 8'h6b;\n    sbox[250] = 8'h63;\n    sbox[251] = 8'h61;\n    sbox[252] = 8'h69;\n    sbox[253] = 8'h67;\n    sbox[254] = 8'h7f;\n    sbox[255] = 8'h16;\nend\n\n// Perform S-box substitution\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 16, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Hardcode the S-box values\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'ha2;\n    sbox[27] = 8'haf;\n    sbox[28] = 8'h9c;\n    sbox[29] = 8'ha4;\n    sbox[30] = 8'h72;\n    sbox[31] = 8'hc0;\n    sbox[32] = 8'hb7;\n    sbox[33] = 8'hfd;\n    sbox[34] = 8'h93;\n    sbox[35] = 8'h26;\n    sbox[36] = 8'h36;\n    sbox[37] = 8'h3f;\n    sbox[38] = 8'hf7;\n    sbox[39] = 8'hcc;\n    sbox[40] = 8'h34;\n    sbox[41] = 8'ha5;\n    sbox[42] = 8'he5;\n    sbox[43] = 8'hf1;\n    sbox[44] = 8'h71;\n    sbox[45] = 8'hd8;\n    sbox[46] = 8'h31;\n    sbox[47] = 8'h15;\n    sbox[48] = 8'h04;\n    sbox[49] = 8'hc7;\n    sbox[50] = 8'h23;\n    sbox[51] = 8'hc3;\n    sbox[52] = 8'h18;\n    sbox[53] = 8'h96;\n    sbox[54] = 8'h05;\n    sbox[55] = 8'h9a;\n    sbox[56] = 8'h07;\n    sbox[57] = 8'h12;\n    sbox[58] = 8'h80;\n    sbox[59] = 8'he2;\n    sbox[60] = 8'heb;\n    sbox[61] = 8'h27;\n    sbox[62] = 8'hb2;\n    sbox[63] = 8'h75;\n    sbox[64] = 8'h09;\n    sbox[65] = 8'h83;\n    sbox[66] = 8'h2c;\n    sbox[67] = 8'h1a;\n    sbox[68] = 8'h1b;\n    sbox[69] = 8'h6e;\n    sbox[70] = 8'h5a;\n    sbox[71] = 8'ha0;\n    sbox[72] = 8'h52;\n    sbox[73] = 8'h3b;\n    sbox[74] = 8'hd6;\n    sbox[75] = 8'hb3;\n    sbox[76] = 8'h29;\n    sbox[77] = 8'he3;\n    sbox[78] = 8'h2f;\n    sbox[79] = 8'h84;\n    sbox[80] = 8'h53;\n    sbox[81] = 8'hd1;\n    sbox[82] = 8'h00;\n    sbox[83] = 8'hed;\n    sbox[84] = 8'h20;\n    sbox[85] = 8'hfc;\n    sbox[86] = 8'hb1;\n    sbox[87] = 8'h5b;\n    sbox[88] = 8'h6a;\n    sbox[89] = 8'hcb;\n    sbox[90] = 8'hbe;\n    sbox[91] = 8'h39;\n    sbox[92] = 8'h4a;\n    sbox[93] = 8'h4c;\n    sbox[94] = 8'h58;\n    sbox[95] = 8'hcf;\n    sbox[96] = 8'hd0;\n    sbox[97] = 8'hef;\n    sbox[98] = 8'haa;\n    sbox[99] = 8'hfb;\n    sbox[100] = 8'h43;\n    sbox[101] = 8'h4d;\n    sbox[102] = 8'h33;\n    sbox[103] = 8'h85;\n    sbox[104] = 8'h45;\n    sbox[105] = 8'hf9;\n    sbox[106] = 8'h02;\n    sbox[107] = 8'h7f;\n    sbox[108] = 8'h50;\n    sbox[109] = 8'h3c;\n    sbox[110] = 8'h9f;\n    sbox[111] = 8'ha8;\n    sbox[112] = 8'h51;\n    sbox[113] = 8'ha3;\n    sbox[114] = 8'h40;\n    sbox[115] = 8'h8f;\n    sbox[116] = 8'h92;\n    sbox[117] = 8'h9d;\n    sbox[118] = 8'h38;\n    sbox[119] = 8'hf5;\n    sbox[120] = 8'hbc;\n    sbox[121] = 8'hb6;\n    sbox[122] = 8'hda;\n    sbox[123] = 8'h21;\n    sbox[124] = 8'h10;\n    sbox[125] = 8'hff;\n    sbox[126] = 8'hf3;\n    sbox[127] = 8'hd2;\n    sbox[128] = 8'hcd;\n    sbox[129] = 8'h0c;\n    sbox[130] = 8'h13;\n    sbox[131] = 8'hec;\n    sbox[132] = 8'h5f;\n    sbox[133] = 8'h97;\n    sbox[134] = 8'h44;\n    sbox[135] = 8'h17;\n    sbox[136] = 8'hc4;\n    sbox[137] = 8'ha7;\n    sbox[138] = 8'h7e;\n    sbox[139] = 8'h3d;\n    sbox[140] = 8'h64;\n    sbox[141] = 8'h5d;\n    sbox[142] = 8'h19;\n    sbox[143] = 8'h73;\n    sbox[144] = 8'h60;\n    sbox[145] = 8'h81;\n    sbox[146] = 8'h4f;\n    sbox[147] = 8'hdc;\n    sbox[148] = 8'h22;\n    sbox[149] = 8'h2a;\n    sbox[150] = 8'h90;\n    sbox[151] = 8'h88;\n    sbox[152] = 8'h46;\n    sbox[153] = 8'hee;\n    sbox[154] = 8'hb8;\n    sbox[155] = 8'h14;\n    sbox[156] = 8'hde;\n    sbox[157] = 8'h5e;\n    sbox[158] = 8'h0b;\n    sbox[159] = 8'hdb;\n    sbox[160] = 8'he0;\n    sbox[161] = 8'h32;\n    sbox[162] = 8'h3a;\n    sbox[163] = 8'h0a;\n    sbox[164] = 8'h49;\n    sbox[165] = 8'h06;\n    sbox[166] = 8'h24;\n    sbox[167] = 8'h5c;\n    sbox[168] = 8'hc2;\n    sbox[169] = 8'hd3;\n    sbox[170] = 8'hac;\n    sbox[171] = 8'h62;\n    sbox[172] = 8'h91;\n    sbox[173] = 8'h95;\n    sbox[174] = 8'he4;\n    sbox[175] = 8'h79;\n    sbox[176] = 8'he7;\n    sbox[177] = 8'hc8;\n    sbox[178] = 8'h37;\n    sbox[179] = 8'h6d;\n    sbox[180] = 8'h8d;\n    sbox[181] = 8'hd5;\n    sbox[182] = 8'h4e;\n    sbox[183] = 8'ha9;\n    sbox[184] = 8'h6c;\n    sbox[185] = 8'h56;\n    sbox[186] = 8'hf4;\n    sbox[187] = 8'hea;\n    sbox[188] = 8'h65;\n    sbox[189] = 8'h7a;\n    sbox[190] = 8'hae;\n    sbox[191] = 8'h08;\n    sbox[192] = 8'hba;\n    sbox[193] = 8'h78;\n    sbox[194] = 8'h25;\n    sbox[195] = 8'h2e;\n    sbox[196] = 8'h1c;\n    sbox[197] = 8'ha6;\n    sbox[198] = 8'hb4;\n    sbox[199] = 8'hc6;\n    sbox[200] = 8'he8;\n    sbox[201] = 8'hdd;\n    sbox[202] = 8'h74;\n    sbox[203] = 8'h1f;\n    sbox[204] = 8'h4b;\n    sbox[205] = 8'hbd;\n    sbox[206] = 8'h8b;\n    sbox[207] = 8'h8a;\n    sbox[208] = 8'h70;\n    sbox[209] = 8'h3e;\n    sbox[210] = 8'hb5;\n    sbox[211] = 8'h66;\n    sbox[212] = 8'h48;\n    sbox[213] = 8'h03;\n    sbox[214] = 8'hf6;\n    sbox[215] = 8'h0e;\n    sbox[216] = 8'h61;\n    sbox[217] = 8'h35;\n    sbox[218] = 8'h57;\n    sbox[219] = 8'hb9;\n    sbox[220] = 8'h86;\n    sbox[221] = 8'hc1;\n    sbox[222] = 8'h1d;\n    sbox[223] = 8'h9e;\n    sbox[224] = 8'he1;\n    sbox[225] = 8'hf8;\n    sbox[226] = 8'h98;\n    sbox[227] = 8'h11;\n    sbox[228] = 8'h69;\n    sbox[229] = 8'hd9;\n    sbox[230] = 8'h8e;\n    sbox[231] = 8'h94;\n    sbox[232] = 8'h9b;\n    sbox[233] = 8'h1e;\n    sbox[234] = 8'h87;\n    sbox[235] = 8'he9;\n    sbox[236] = 8'hce;\n    sbox[237] = 8'h55;\n    sbox[238] = 8'h28;\n    sbox[239] = 8'hdf;\n    sbox[240] = 8'h8c;\n    sbox[241] = 8'ha1;\n    sbox[242] = 8'h89;\n    sbox[243] = 8'h0d;\n    sbox[244] = 8'hbf;\n    sbox[245] = 8'he6;\n    sbox[246] = 8'h42;\n    sbox[247] = 8'h68;\n    sbox[248] = 8'h41;\n    sbox[249] = 8'h99;\n    sbox[250] = 8'h2d;\n    sbox[251] = 8'h0f;\n    sbox[252] = 8'hb0;\n    sbox[253] = 8'h54;\n    sbox[254] = 8'hbb;\n    sbox[255] = 8'h16;\nend\n\n// Assign the output based on the input\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 17, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Define the S-box values according to the AES specification\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h-a;\n    sbox[29] = 8'h87;\n    sbox[30] = 8'h-e;\n    sbox[31] = 8'h5b;\n    sbox[32] = 8'h5a;\n    sbox[33] = 8'h9f;\n    sbox[34] = 8'h53;\n    sbox[35] = 8'hbe;\n    sbox[36] = 8'h28;\n    sbox[37] = 8'h4a;\n    sbox[38] = 8'h33;\n    sbox[39] = 8'hc0;\n    sbox[40] = 8'h8e;\n    sbox[41] = 8'h39;\n    sbox[42] = 8'h4f;\n    sbox[43] = 8'hcc;\n    sbox[44] = 8'h5f;\n    sbox[45] = 8'h97;\n    sbox[46] = 8'h17;\n    sbox[47] = 8'h56;\n    sbox[48] = 8'hb2;\n    sbox[49] = 8'h95;\n    sbox[50] = 8'h7a;\n    sbox[51] = 8'h4e;\n    sbox[52] = 8'h58;\n    sbox[53] = 8'h5d;\n    sbox[54] = 8'h83;\n    sbox[55] = 8'h2e;\n    sbox[56] = 8'h77;\n    sbox[57] = 8'h-a;\n    sbox[58] = 8'h8b;\n    sbox[59] = 8'h9a;\n    sbox[60] = 8'h2f;\n    sbox[61] = 8'h88;\n    sbox[62] = 8'h46;\n    sbox[63] = 8'h9e;\n    sbox[64] = 8'h5c;\n    sbox[65] = 8'h9b;\n    sbox[66] = 8'h4b;\n    sbox[67] = 8'h2c;\n    sbox[68] = 8'h9f;\n    sbox[69] = 8'h0a;\n    sbox[70] = 8'h8d;\n    sbox[71] = 8'h53;\n    sbox[72] = 8'h80;\n    sbox[73] = 8'h54;\n    sbox[74] = 8'h7f;\n    sbox[75] = 8'h66;\n    sbox[76] = 8'h6d;\n    sbox[77] = 8'h61;\n    sbox[78] = 8'h21;\n    sbox[79] = 8'h70;\n    sbox[80] = 8'h-b;\n    sbox[81] = 8'hfc;\n    sbox[82] = 8'h1a;\n    sbox[83] = 8'h1e;\n    sbox[84] = 8'hd2;\n    sbox[85] = 8'h43;\n    sbox[86] = 8'h6e;\n    sbox[87] = 8'h5b;\n    sbox[88] = 8'h4a;\n    sbox[89] = 8'h79;\n    sbox[90] = 8'h9d;\n    sbox[91] = 8'h3a;\n    sbox[92] = 8'h45;\n    sbox[93] = 8'hfc;\n    sbox[94] = 8'h8f;\n    sbox[95] = 8'h35;\n    sbox[96] = 8'h7a;\n    sbox[97] = 8'h6a;\n    sbox[98] = 8'h40;\n    sbox[99] = 8'h84;\n    sbox[100] = 8'hff;\n    sbox[101] = 8'h8c;\n    sbox[102] = 8'h78;\n    sbox[103] = 8'h6f;\n    sbox[104] = 8'h20;\n    sbox[105] = 8'h6c;\n    sbox[106] = 8'h7b;\n    sbox[107] = 8'h59;\n    sbox[108] = 8'h51;\n    sbox[109] = 8'h44;\n    sbox[110] = 8'h1f;\n    sbox[111] = 8'h93;\n    sbox[112] = 8'h5e;\n    sbox[113] = 8'h57;\n    sbox[114] = 8'h4d;\n    sbox[115] = 8'h62;\n    sbox[116] = 8'h19;\n    sbox[117] = 8'h29;\n    sbox[118] = 8'h41;\n    sbox[119] = 8'h11;\n    sbox[120] = 8'h3d;\n    sbox[121] = 8'h6b;\n    sbox[122] = 8'h27;\n    sbox[123] = 8'h3f;\n    sbox[124] = 8'h3e;\n    sbox[125] = 8'h31;\n    sbox[126] = 8'h15;\n    sbox[127] = 8'h4c;\n    sbox[128] = 8'h4f;\n    sbox[129] = 8'h4e;\n    sbox[130] = 8'hd0;\n    sbox[131] = 8'h43;\n    sbox[132] = 8'h69;\n    sbox[133] = 8'h2a;\n    sbox[134] = 8'h08;\n    sbox[135] = 8'h16;\n    sbox[136] = 8'h-a;\n    sbox[137] = 8'h26;\n    sbox[138] = 8'h3a;\n    sbox[139] = 8'h2e;\n    sbox[140] = 8'hf1;\n    sbox[141] = 8'h71;\n    sbox[142] = 8'hd8;\n    sbox[143] = 8'h31;\n    sbox[144] = 8'h15;\n    sbox[145] = 8'h04;\n    sbox[146] = 8'h21;\n    sbox[147] = 8'h3c;\n    sbox[148] = 8'h5e;\n    sbox[149] = 8'h85;\n    sbox[150] = 8'hb8;\n    sbox[151] = 8'h45;\n    sbox[152] = 8'h6f;\n    sbox[153] = 8'h2f;\n    sbox[154] = 8'h8c;\n    sbox[155] = 8'h9e;\n    sbox[156] = 8'h6e;\n    sbox[157] = 8'h6a;\n    sbox[158] = 8'h56;\n    sbox[159] = 8'h97;\n    sbox[160] = 8'h17;\n    sbox[161] = 8'h28;\n    sbox[162] = 8'h5c;\n    sbox[163] = 8'h95;\n    sbox[164] = 8'hdf;\n    sbox[165] = 8'h8b;\n    sbox[166] = 8'hf0;\n    sbox[167] = 8'hbc;\n    sbox[168] = 8'h1a;\n    sbox[169] = 8'h13;\n    sbox[170] = 8'h-d;\n    sbox[171] = 8'h3e;\n    sbox[172] = 8'h5a;\n    sbox[173] = 8'h08;\n    sbox[174] = 8'h57;\n    sbox[175] = 8'h7f;\n    sbox[176] = 8'h5d;\n    sbox[177] = 8'haa;\n    sbox[178] = 8'h65;\n    sbox[179] = 8'he4;\n    sbox[180] = 8'h78;\n    sbox[181] = 8'h29;\n    sbox[182] = 8'h02;\n    sbox[183] = 8'h-a;\n    sbox[184] = 8'h48;\n    sbox[185] = 8'h5b;\n    sbox[186] = 8'h4f;\n    sbox[187] = 8'h10;\n    sbox[188] = 8'h11;\n    sbox[189] = 8'hcc;\n    sbox[190] = 8'h22;\n    sbox[191] = 8'h7d;\n    sbox[192] = 8'h96;\n    sbox[193] = 8'h1c;\n    sbox[194] = 8'h31;\n    sbox[195] = 8'h88;\n    sbox[196] = 8'h1d;\n    sbox[197] = 8'h89;\n    sbox[198] = 8'h-e;\n    sbox[199] = 8'hb0;\n    sbox[200] = 8'h17;\n    sbox[201] = 8'h65;\n    sbox[202] = 8'h5e;\n    sbox[203] = 8'hba;\n    sbox[204] = 8'h3c;\n    sbox[205] = 8'h1e;\n    sbox[206] = 8'h-c;\n    sbox[207] = 8'h08;\n    sbox[208] = 8'h57;\n    sbox[209] = 8'h7e;\n    sbox[210] = 8'h5f;\n    sbox[211] = 8'h69;\n    sbox[212] = 8'h6c;\n    sbox[213] = 8'h6b;\n    sbox[214] = 8'h9a;\n    sbox[215] = 8'h92;\n    sbox[216] = 8'h9d;\n    sbox[217] = 8'h30;\n    sbox[218] = 8'h20;\n    sbox[219] = 8'h23;\n    sbox[220] = 8'hab;\n    sbox[221] = 8'h6e;\n    sbox[222] = 8'h9f;\n    sbox[223] = 8'h24;\n    sbox[224] = 8'h2c;\n    sbox[225] = 8'h0b;\n    sbox[226] = 8'h12;\n    sbox[227] = 8'hbf;\n    sbox[228] = 8'h65;\n    sbox[229] = 8'h64;\n    sbox[230] = 8'h34;\n    sbox[231] = 8'h1b;\n    sbox[232] = 8'hff;\n    sbox[233] = 8'haf;\n    sbox[234] = 8'hd1;\n    sbox[235] = 8'h13;\n    sbox[236] = 8'h9c;\n    sbox[237] = 8'h1d;\n    sbox[238] = 8'h8f;\n    sbox[239] = 8'h0a;\n    sbox[240] = 8'h50;\n    sbox[241] = 8'h42;\n    sbox[242] = 8'h3b;\n    sbox[243] = 8'h80;\n    sbox[244] = 8'h33;\n    sbox[245] = 8'h85;\n    sbox[246] = 8'h44;\n    sbox[247] = 8'h61;\n    sbox[248] = 8'h98;\n    sbox[249] = 8'h21;\n    sbox[250] = 8'h24;\n    sbox[251] = 8'h5d;\n    sbox[252] = 8'hcb;\n    sbox[253] = 8'h0c;\n    sbox[254] = 8'h4b;\n    sbox[255] = 8'h46;\nend\n\n// Use the lookup table to substitute the input byte\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 18, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    sbox[0] = 8'h63;\n    sbox[1] = 8'h7c;\n    sbox[2] = 8'h77;\n    sbox[3] = 8'h7b;\n    sbox[4] = 8'hf2;\n    sbox[5] = 8'h6b;\n    sbox[6] = 8'h6f;\n    sbox[7] = 8'hc5;\n    sbox[8] = 8'h30;\n    sbox[9] = 8'h01;\n    sbox[10] = 8'h67;\n    sbox[11] = 8'h2b;\n    sbox[12] = 8'hfe;\n    sbox[13] = 8'hd7;\n    sbox[14] = 8'hab;\n    sbox[15] = 8'h76;\n    sbox[16] = 8'hca;\n    sbox[17] = 8'h82;\n    sbox[18] = 8'hc9;\n    sbox[19] = 8'h7d;\n    sbox[20] = 8'hfa;\n    sbox[21] = 8'h59;\n    sbox[22] = 8'h47;\n    sbox[23] = 8'hf0;\n    sbox[24] = 8'had;\n    sbox[25] = 8'hd4;\n    sbox[26] = 8'haf;\n    sbox[27] = 8'h9c;\n    sbox[28] = 8'h9e;\n    sbox[29] = 8'h97;\n    sbox[30] = 8'h44;\n    sbox[31] = 8'h17;\n    sbox[32] = 8'hc4;\n    sbox[33] = 8'ha7;\n    sbox[34] = 8'h35;\n    sbox[35] = 8'h38;\n    sbox[36] = 8'h48;\n    sbox[37] = 8'h3d;\n    sbox[38] = 8'h18;\n    sbox[39] = 8'h11;\n    sbox[40] = 8'h49;\n    sbox[41] = 8'h4a;\n    sbox[42] = 8'h2e;\n    sbox[43] = 8'h4b;\n    sbox[44] = 8'h1a;\n    sbox[45] = 8'hff;\n    sbox[46] = 8'h16;\n    sbox[47] = 8'h9a;\n    sbox[48] = 8'h9d;\n    sbox[49] = 8'h93;\n    sbox[50] = 8'h99;\n    sbox[51] = 8'h65;\n    sbox[52] = 8'hb6;\n    sbox[53] = 8'h92;\n    sbox[54] = 8'h6c;\n    sbox[55] = 8'h6e;\n    sbox[56] = 8'h71;\n    sbox[57] = 8'h9f;\n    sbox[58] = 8'h23;\n    sbox[59] = 8'h28;\n    sbox[60] = 8'h4c;\n    sbox[61] = 8'h00;\n    sbox[62] = 8'hcc;\n    sbox[63] = 8'h5f;\n    sbox[64] = 8'h6a;\n    sbox[65] = 8'hbe;\n    sbox[66] = 8'h5e;\n    sbox[67] = 8'hbc;\n    sbox[68] = 8'h60;\n    sbox[69] = 8'h88;\n    sbox[70] = 8'h13;\n    sbox[71] = 8'h6d;\n    sbox[72] = 8'haa;\n    sbox[73] = 8'h94;\n    sbox[74] = 8'h34;\n    sbox[75] = 8'h8d;\n    sbox[76] = 8'h42;\n    sbox[77] = 8'h9b;\n    sbox[78] = 8'h4f;\n    sbox[79] = 8'h2c;\n    sbox[80] = 8'h31;\n    sbox[81] = 8'h80;\n    sbox[82] = 8'h33;\n    sbox[83] = 8'h45;\n    sbox[84] = 8'h58;\n    sbox[85] = 8'hfd;\n    sbox[86] = 8'h95;\n    sbox[87] = 8'h7a;\n    sbox[88] = 8'h08;\n    sbox[89] = 8'h84;\n    sbox[90] = 8'hff;\n    sbox[91] = 8'h9c;\n    sbox[92] = 8'h14;\n    sbox[93] = 8'h3f;\n    sbox[94] = 8'h22;\n    sbox[95] = 8'h1d;\n    sbox[96] = 8'h1c;\n    sbox[97] = 8'h8e;\n    sbox[98] = 8'h24;\n    sbox[99] = 8'h0b;\n    sbox[100] = 8'h81;\n    sbox[101] = 8'h32;\n    sbox[102] = 8'h3a;\n    sbox[103] = 8'h0a;\n    sbox[104] = 8'h28;\n    sbox[105] = 8'h7f;\n    sbox[106] = 8'h88;\n    sbox[107] = 8'h85;\n    sbox[108] = 8'h06;\n    sbox[109] = 8'h5d;\n    sbox[110] = 8'h53;\n    sbox[111] = 8'h51;\n    sbox[112] = 8'hc2;\n    sbox[113] = 8'h1f;\n    sbox[114] = 8'h98;\n    sbox[115] = 8'h5c;\n    sbox[116] = 8'h2f;\n    sbox[117] = 8'h0f;\n    sbox[118] = 8'h74;\n    sbox[119] = 8'h8c;\n    sbox[120] = 8'h63;\n    sbox[121] = 8'hba;\n    sbox[122] = 8'h2a;\n    sbox[123] = 8'h25;\n    sbox[124] = 8'h4e;\n    sbox[125] = 8'h94;\n    sbox[126] = 8'h75;\n    sbox[127] = 8'h66;\n    sbox[128] = 8'h3b;\n    sbox[129] = 8'h3c;\n    sbox[130] = 8'h5b;\n    sbox[131] = 8'h95;\n    sbox[132] = 8'ha5;\n    sbox[133] = 8'h70;\n    sbox[134] = 8'h40;\n    sbox[135] = 8'h15;\n    sbox[136] = 8'haf;\n    sbox[137] = 8'had;\n    sbox[138] = 8'h73;\n    sbox[139] = 8'h32;\n    sbox[140] = 8'h1b;\n    sbox[141] = 8'h12;\n    sbox[142] = 8'h0c;\n    sbox[143] = 8'h13;\n    sbox[144] = 8'hec;\n    sbox[145] = 8'h57;\n    sbox[146] = 8'hf4;\n    sbox[147] = 8'h5a;\n    sbox[148] = 8'h52;\n    sbox[149] = 8'h75;\n    sbox[150] = 8'h9e;\n    sbox[151] = 8'h97;\n    sbox[152] = 8'hbc;\n    sbox[153] = 8'h1a;\n    sbox[154] = 8'h90;\n    sbox[155] = 8'hfb;\n    sbox[156] = 8'h06;\n    sbox[157] = 8'hbe;\n    sbox[158] = 8'h92;\n    sbox[159] = 8'h61;\n    sbox[160] = 8'h18;\n    sbox[161] = 8'hbc;\n    sbox[162] = 8'h9d;\n    sbox[163] = 8'h7f;\n    sbox[164] = 8'h94;\n    sbox[165] = 8'h67;\n    sbox[166] = 8'h9c;\n    sbox[167] = 8'h68;\n    sbox[168] = 8'h39;\n    sbox[169] = 8'h4d;\n    sbox[170] = 8'h5c;\n    sbox[171] = 8'h5e;\n    sbox[172] = 8'h79;\n    sbox[173] = 8'h0a;\n    sbox[174] = 8'h09;\n    sbox[175] = 8'h1f;\n    sbox[176] = 8'h1d;\n    sbox[177] = 8'h85;\n    sbox[178] = 8'hd6;\n    sbox[179] = 8'h63;\n    sbox[180] = 8'h1a;\n    sbox[181] = 8'h1e;\n    sbox[182] = 8'h8f;\n    sbox[183] = 8'hd0;\n    sbox[184] = 8'h89;\n    sbox[185] = 8'hce;\n    sbox[186] = 8'h65;\n    sbox[187] = 8'hb2;\n    sbox[188] = 8'h59;\n    sbox[189] = 8'ha4;\n    sbox[190] = 8'hff;\n    sbox[191] = 8'h42;\n    sbox[192] = 8'h31;\n    sbox[193] = 8'h84;\n    sbox[194] = 8'h28;\n    sbox[195] = 8'h27;\n    sbox[196] = 8'h98;\n    sbox[197] = 8'h50;\n    sbox[198] = 8'h09;\n    sbox[199] = 8'h1d;\n    sbox[200] = 8'hba;\n    sbox[201] = 8'h12;\n    sbox[202] = 8'h8b;\n    sbox[203] = 8'hca;\n    sbox[204] = 8'h7f;\n    sbox[205] = 8'h70;\n    sbox[206] = 8'h44;\n    sbox[207] = 8'h16;\n    sbox[208] = 8'h5a;\n    sbox[209] = 8'h73;\n    sbox[210] = 8'h21;\n    sbox[211] = 8'h10;\n    sbox[212] = 8'h3e;\n    sbox[213] = 8'h05;\n    sbox[214] = 8'h24;\n    sbox[215] = 8'h0c;\n    sbox[216] = 8'h23;\n    sbox[217] = 8'h8c;\n    sbox[218] = 8'h08;\n    sbox[219] = 8'h8a;\n    sbox[220] = 8'h95;\n    sbox[221] = 8'hd9;\n    sbox[222] = 8'hc6;\n    sbox[223] = 8'h71;\n    sbox[224] = 8'hf1;\n    sbox[225] = 8'h6f;\n    sbox[226] = 8'h84;\n    sbox[227] = 8'h7e;\n    sbox[228] = 8'h62;\n    sbox[229] = 8'h27;\n    sbox[230] = 8'h18;\n    sbox[231] = 8'h69;\n    sbox[232] = 8'h65;\n    sbox[233] = 8'hba;\n    sbox[234] = 8'h5f;\n    sbox[235] = 8'h02;\n    sbox[236] = 8'h3c;\n    sbox[237] = 8'h55;\n    sbox[238] = 8'ha2;\n    sbox[239] = 8'h9f;\n    sbox[240] = 8'h53;\n    sbox[241] = 8'hfd;\n    sbox[242] = 8'hdc;\n    sbox[243] = 8'h7c;\n    sbox[244] = 8'h4a;\n    sbox[245] = 8'h45;\n    sbox[246] = 8'h2f;\n    sbox[247] = 8'h03;\n    sbox[248] = 8'h5b;\n    sbox[249] = 8'h8c;\n    sbox[250] = 8'h95;\n    sbox[251] = 8'h6d;\n    sbox[252] = 8'h52;\n    sbox[253] = 8'h2e;\n    sbox[254] = 8'h64;\n    sbox[255] = 8'h34;\nend\n\n// Use the S-box lookup table to perform the substitution\nassign b = sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 19, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Multiplicative inverse in GF(2^8)\n    for (int i = 0; i < 256; i++) begin\n        if (i != 0) begin\n            // Compute the multiplicative inverse\n            reg [7:0] inverse;\n            inverse = 0;\n            for (int j = 0; j < 8; j++) begin\n                if (i[j] == 1) begin\n                    // Perform the inverse calculation\n                    inverse ^= (1 << j);\n                    for (int k = 0; k < 4; k++) begin\n                        if (inverse[k] == 1) begin\n                            inverse ^= (1 << (k + 4));\n                        end\n                    end\n                end\n            end\n            // Apply the affine transformation\n            reg [7:0] affine;\n            affine = 0;\n            for (int j = 0; j < 8; j++) begin\n                affine[j] = inverse[j] ^ inverse[(j + 4) % 8] ^ inverse[(j + 5) % 8] ^ inverse[(j + 6) % 8] ^ inverse[(j + 7) % 8] ^ (63 >> j);\n            end\n            sbox[i] = affine;\n        end else begin\n            // Special case: inverse of 0x00 is defined as 0x00\n            sbox[i] = 8'h63;\n        end\n    end\nend\n\n// Perform the S-box substitution\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_sbox", "codeid": 20, "code": "module aes_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Define the S-box lookup table\nreg [7:0] sbox [0:255];\n\n// Initialize the S-box lookup table\ninitial begin\n    // Multiplicative inverse calculation in GF(2^8)\n    for (int i = 0; i < 256; i++) begin\n        if (i == 0) begin\n            // Inverse of 0x00 is defined as 0x00\n            sbox[i] = 8'd0;\n        end else begin\n            // Calculate the multiplicative inverse\n            reg [7:0] inverse;\n            inverse = i;\n            for (int j = 0; j < 7; j++) begin\n                // Perform the multiplication\n                reg [7:0] temp;\n                temp = inverse;\n                inverse = 0;\n                for (int k = 0; k < 8; k++) begin\n                    if (temp[k]) begin\n                        inverse = inverse ^ (i << k);\n                    end\n                end\n                // Reduce the result modulo the irreducible polynomial\n                if (inverse[8]) begin\n                    inverse = inverse ^ 9'b100011011;\n                end\n            end\n            // Apply the affine transformation\n            reg [7:0] affine;\n            affine = 0;\n            for (int j = 0; j < 8; j++) begin\n                affine[j] = inverse[j] ^ inverse[(j + 4) % 8] ^ inverse[(j + 5) % 8] ^ inverse[(j + 6) % 8] ^ inverse[(j + 7) % 8] ^ 8'b01100011[j];\n            end\n            sbox[i] = affine;\n        end\n    end\nend\n\n// Perform the S-box substitution\nalways @(*) begin\n    b = sbox[a];\nend\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_cipher_top", "codeid": 20, "code": "module aes_inv_cipher_top(\n    input clk,\n    input rst,\n    input kld,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\nreg [127:0] text_in_r;\nreg [3:0][3:0][7:0] sa;\nreg [3:0] dcnt;\nreg [10:0][127:0] kb;\nreg [3:0] kcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Key Expansion Module\naes_key_expand_128 key_exp(\n    .clk(clk),\n    .kld(kld),\n    .key(key),\n    .wo_0(kb[10][31:0]),\n    .wo_1(kb[10][63:32]),\n    .wo_2(kb[10][95:64]),\n    .wo_3(kb[10][127:96])\n);\n\n// Inverse S-box Module\naes_inv_sbox inv_sbox[15:0](\n    .a(sa[3:0][3:0]),\n    .b(sa[3:0][3:0])\n);\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Initialize registers\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        kb <= 0;\n        kcnt <= 10;\n        ld_r <= 0;\n        text_out_r <= 0;\n    end else begin\n        // Key loading\n        if (kld) begin\n            // Load key into key buffer\n            kb[10] <= key;\n            kcnt <= kcnt - 1;\n        end\n\n        // Data loading\n        if (ld) begin\n            // Load input text into text_in_r\n            text_in_r <= text_in;\n            ld_r <= 1;\n        end\n\n        // Decryption process\n        if (ld_r) begin\n            // Initial round\n            if (dcnt == 0) begin\n                // InvShiftRows\n                sa[0][0] <= text_in_r[127:120];\n                sa[0][1] <= text_in_r[119:112];\n                sa[0][2] <= text_in_r[111:104];\n                sa[0][3] <= text_in_r[103:96];\n\n                sa[1][0] <= text_in_r[95:88];\n                sa[1][1] <= text_in_r[87:80];\n                sa[1][2] <= text_in_r[79:72];\n                sa[1][3] <= text_in_r[71:64];\n\n                sa[2][0] <= text_in_r[63:56];\n                sa[2][1] <= text_in_r[55:48];\n                sa[2][2] <= text_in_r[47:40];\n                sa[2][3] <= text_in_r[39:32];\n\n                sa[3][0] <= text_in_r[31:24];\n                sa[3][1] <= text_in_r[23:16];\n                sa[3][2] <= text_in_r[15:8];\n                sa[3][3] <= text_in_r[7:0];\n\n                // InvSubBytes\n                for (int i = 0; i < 16; i++) begin\n                    sa[i/4][i%4] <= inv_sbox[i].b;\n                end\n\n                // AddRoundKey\n                for (int i = 0; i < 16; i++) begin\n                    sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n                end\n\n                dcnt <= dcnt + 1;\n            end else if (dcnt < 10) begin\n                // Standard round\n                // InvShiftRows\n                sa[0][0] <= sa[0][0];\n                sa[0][1] <= sa[0][1];\n                sa[0][2] <= sa[0][2];\n                sa[0][3] <= sa[0][3];\n\n                sa[1][0] <= sa[1][3];\n                sa[1][1] <= sa[1][0];\n                sa[1][2] <= sa[1][1];\n                sa[1][3] <= sa[1][2];\n\n                sa[2][0] <= sa[2][2];\n                sa[2][1] <= sa[2][3];\n                sa[2][2] <= sa[2][0];\n                sa[2][3] <= sa[2][1];\n\n                sa[3][0] <= sa[3][1];\n                sa[3][1] <= sa[3][2];\n                sa[3][2] <= sa[3][3];\n                sa[3][3] <= sa[3][0];\n\n                // InvSubBytes\n                for (int i = 0; i < 16; i++) begin\n                    sa[i/4][i%4] <= inv_sbox[i].b;\n                end\n\n                // InvMixColumns\n                for (int i = 0; i < 4; i++) begin\n                    sa[0][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                    sa[1][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                    sa[2][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                    sa[3][i] <= (sa[0][i] ^ sa[1][i] ^ sa[2][i] ^ sa[3][i]);\n                end\n\n                // AddRoundKey\n                for (int i = 0; i < 16; i++) begin\n                    sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n                end\n\n                dcnt <= dcnt + 1;\n            end else begin\n                // Final round\n                // InvShiftRows\n                sa[0][0] <= sa[0][0];\n                sa[0][1] <= sa[0][1];\n                sa[0][2] <= sa[0][2];\n                sa[0][3] <= sa[0][3];\n\n                sa[1][0] <= sa[1][3];\n                sa[1][1] <= sa[1][0];\n                sa[1][2] <= sa[1][1];\n                sa[1][3] <= sa[1][2];\n\n                sa[2][0] <= sa[2][2];\n                sa[2][1] <= sa[2][3];\n                sa[2][2] <= sa[2][0];\n                sa[2][3] <= sa[2][1];\n\n                sa[3][0] <= sa[3][1];\n                sa[3][1] <= sa[3][2];\n                sa[3][2] <= sa[3][3];\n                sa[3][3] <= sa[3][0];\n\n                // InvSubBytes\n                for (int i = 0; i < 16; i++) begin\n                    sa[i/4][i%4] <= inv_sbox[i].b;\n                end\n\n                // AddRoundKey\n                for (int i = 0; i < 16; i++) begin\n                    sa[i/4][i%4] <= sa[i/4][i%4] ^ kb[dcnt][i*8 +: 8];\n                end\n\n                // Output\n                text_out_r <= {sa[0][0], sa[1][0], sa[2][0], sa[3][0],\n                               sa[0][1], sa[1][1], sa[2][1], sa[3][1],\n                               sa[0][2], sa[1][2], sa[2][2], sa[3][2],\n                               sa[0][3], sa[1][3], sa[2][3], sa[3][3]};\n\n                done <= 1;\n            end\n        end\n    end\nend\n\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_inv_sbox", "codeid": 20, "code": "module aes_inv_sbox(\n    input  [7:0] a,\n    output [7:0] b\n);\n\n// Inverse S-box lookup table\nreg [7:0] inv_sbox [0:255];\n\n// Initialize the lookup table\ninitial begin\n    inv_sbox[0] = 8'h52;\n    inv_sbox[1] = 8'h09;\n    inv_sbox[2] = 8'h4a;\n    inv_sbox[3] = 8'h2d;\n    inv_sbox[4] = 8'h79;\n    inv_sbox[5] = 8'h65;\n    inv_sbox[6] = 8'hba;\n    inv_sbox[7] = 8'h30;\n    inv_sbox[8] = 8'h76;\n    inv_sbox[9] = 8'h0b;\n    inv_sbox[10] = 8'h6b;\n    inv_sbox[11] = 8'h62;\n    inv_sbox[12] = 8'h4c;\n    inv_sbox[13] = 8'h1f;\n    inv_sbox[14] = 8'h8e;\n    inv_sbox[15] = 8'h61;\n    inv_sbox[16] = 8'h3f;\n    inv_sbox[17] = 8'h22;\n    inv_sbox[18] = 8'h95;\n    inv_sbox[19] = 8'h60;\n    inv_sbox[20] = 8'h9e;\n    inv_sbox[21] = 8'h49;\n    inv_sbox[22] = 8'h10;\n    inv_sbox[23] = 8'h9b;\n    inv_sbox[24] = 8'h75;\n    inv_sbox[25] = 8'h19;\n    inv_sbox[26] = 8'h3d;\n    inv_sbox[27] = 8'h7a;\n    inv_sbox[28] = 8'h5e;\n    inv_sbox[29] = 8'h63;\n    inv_sbox[30] = 8'h00;\n    inv_sbox[31] = 8'h8c;\n    inv_sbox[32] = 8'h44;\n    inv_sbox[33] = 8'hfb;\n    inv_sbox[34] = 8'h1a;\n    inv_sbox[35] = 8'had;\n    inv_sbox[36] = 8'h6a;\n    inv_sbox[37] = 8'h7d;\n    inv_sbox[38] = 8'h5a;\n    inv_sbox[39] = 8'h66;\n    inv_sbox[40] = 8'h3e;\n    inv_sbox[41] = 8'h46;\n    inv_sbox[42] = 8'hd7;\n    inv_sbox[43] = 8'h4d;\n    inv_sbox[44] = 8'h79;\n    inv_sbox[45] = 8'h7f;\n    inv_sbox[46] = 8'h6e;\n    inv_sbox[47] = 8'h45;\n    inv_sbox[48] = 8'h21;\n    inv_sbox[49] = 8'hdd;\n    inv_sbox[50] = 8'h43;\n    inv_sbox[51] = 8'h1d;\n    inv_sbox[52] = 8'h17;\n    inv_sbox[53] = 8'h54;\n    inv_sbox[54] = 8'h92;\n    inv_sbox[55] = 8'h5c;\n    inv_sbox[56] = 8'h7c;\n    inv_sbox[57] = 8'h8a;\n    inv_sbox[58] = 8'h9d;\n    inv_sbox[59] = 8'h83;\n    inv_sbox[60] = 8'h4e;\n    inv_sbox[61] = 8'h53;\n    inv_sbox[62] = 8'h6f;\n    inv_sbox[63] = 8'h00;\n    inv_sbox[64] = 8'h2b;\n    inv_sbox[65] = 8'h02;\n    inv_sbox[66] = 8'h7e;\n    inv_sbox[67] = 8'h8d;\n    inv_sbox[68] = 8'h0a;\n    inv_sbox[69] = 8'h81;\n    inv_sbox[70] = 8'h12;\n    inv_sbox[71] = 8'h0d;\n    inv_sbox[72] = 8'h4b;\n    inv_sbox[73] = 8'h95;\n    inv_sbox[74] = 8'h55;\n    inv_sbox[75] = 8'h47;\n    inv_sbox[76] = 8'h68;\n    inv_sbox[77] = 8'h09;\n    inv_sbox[78] = 8'h9a;\n    inv_sbox[79] = 8'h67;\n    inv_sbox[80] = 8'h51;\n    inv_sbox[81] = 8'h8f;\n    inv_sbox[82] = 8'h1c;\n    inv_sbox[83] = 8'h1e;\n    inv_sbox[84] = 8'h96;\n    inv_sbox[85] = 8'h5b;\n    inv_sbox[86] = 8'h5f;\n    inv_sbox[87] = 8'h70;\n    inv_sbox[88] = 8'h03;\n    inv_sbox[89] = 8'h07;\n    inv_sbox[90] = 8'h5d;\n    inv_sbox[91] = 8'h64;\n    inv_sbox[92] = 8'h86;\n    inv_sbox[93] = 8'h08;\n    inv_sbox[94] = 8'h4f;\n    inv_sbox[95] = 8'hcc;\n    inv_sbox[96] = 8'h6d;\n    inv_sbox[97] = 8'h31;\n    inv_sbox[98] = 8'h20;\n    inv_sbox[99] = 8'h33;\n    inv_sbox[100] = 8'h0e;\n    inv_sbox[101] = 8'h39;\n    inv_sbox[102] = 8'h3b;\n    inv_sbox[103] = 8'h3c;\n    inv_sbox[104] = 8'h32;\n    inv_sbox[105] = 8'h72;\n    inv_sbox[106] = 8'h36;\n    inv_sbox[107] = 8'h2f;\n    inv_sbox[108] = 8'h8b;\n    inv_sbox[109] = 8'h71;\n    inv_sbox[110] = 8'h16;\n    inv_sbox[111] = 8'h98;\n    inv_sbox[112] = 8'h97;\n    inv_sbox[113] = 8'h54;\n    inv_sbox[114] = 8'h1b;\n    inv_sbox[115] = 8'h7b;\n    inv_sbox[116] = 8'h80;\n    inv_sbox[117] = 8'h5e;\n    inv_sbox[118] = 8'h6c;\n    inv_sbox[119] = 8'h11;\n    inv_sbox[120] = 8'h77;\n    inv_sbox[121] = 8'h18;\n    inv_sbox[122] = 8'h50;\n    inv_sbox[123] = 8'h1d;\n    inv_sbox[124] = 8'h4a;\n    inv_sbox[125] = 8'h2e;\n    inv_sbox[126] = 8'h6a;\n    inv_sbox[127] = 8'h85;\n    inv_sbox[128] = 8'h25;\n    inv_sbox[129] = 8'heb;\n    inv_sbox[130] = 8'h9c;\n    inv_sbox[131] = 8'h15;\n    inv_sbox[132] = 8'h4d;\n    inv_sbox[133] = 8'h5a;\n    inv_sbox[134] = 8'h6f;\n    inv_sbox[135] = 8'h30;\n    inv_sbox[136] = 8'h93;\n    inv_sbox[137] = 8'h2c;\n    inv_sbox[138] = 8'h13;\n    inv_sbox[139] = 8'h35;\n    inv_sbox[140] = 8'h4f;\n    inv_sbox[141] = 8'h6b;\n    inv_sbox[142] = 8'h6e;\n    inv_sbox[143] = 8'h9d;\n    inv_sbox[144] = 8'h23;\n    inv_sbox[145] = 8'h27;\n    inv_sbox[146] = 8'h3a;\n    inv_sbox[147] = 8'h5f;\n    inv_sbox[148] = 8'h73;\n    inv_sbox[149] = 8'hac;\n    inv_sbox[150] = 8'h51;\n    inv_sbox[151] = 8'hca;\n    inv_sbox[152] = 8'hf8;\n    inv_sbox[153] = 8'h1f;\n    inv_sbox[154] = 8'h90;\n    inv_sbox[155] = 8'h60;\n    inv_sbox[156] = 8'h12;\n    inv_sbox[157] = 8'h9e;\n    inv_sbox[158] = 8'h6d;\n    inv_sbox[159] = 8'h53;\n    inv_sbox[160] = 8'h7f;\n    inv_sbox[161] = 8'h9b;\n    inv_sbox[162] = 8'h04;\n    inv_sbox[163] = 8'h4c;\n    inv_sbox[164] = 8'h02;\n    inv_sbox[165] = 8'h2d;\n    inv_sbox[166] = 8'hac;\n    inv_sbox[167] = 8'h15;\n    inv_sbox[168] = 8'h5b;\n    inv_sbox[169] = 8'h63;\n    inv_sbox[170] = 8'h1a;\n    inv_sbox[171] = 8'h3f;\n    inv_sbox[172] = 8'h7e;\n    inv_sbox[173] = 8'h5d;\n    inv_sbox[174] = 8'h4e;\n    inv_sbox[175] = 8'h75;\n    inv_sbox[176] = 8'h55;\n    inv_sbox[177] = 8'h59;\n    inv_sbox[178] = 8'h09;\n    inv_sbox[179] = 8'h65;\n    inv_sbox[180] = 8'h8e;\n    inv_sbox[181] = 8'h41;\n    inv_sbox[182] = 8'h68;\n    inv_sbox[183] = 8'h13;\n    inv_sbox[184] = 8'h9f;\n    inv_sbox[185] = 8'h83;\n    inv_sbox[186] = 8'h9a;\n    inv_sbox[187] = 8'h97;\n    inv_sbox[188] = 8'h3e;\n    inv_sbox[189] = 8'h17;\n    inv_sbox[190] = 8'h11;\n    inv_sbox[191] = 8'h6a;\n    inv_sbox[192] = 8'h58;\n    inv_sbox[193] = 8'h3c;\n    inv_sbox[194] = 8'h10;\n    inv_sbox[195] = 8'h77;\n    inv_sbox[196] = 8'h61;\n    inv_sbox[197] = 8'h6c;\n    inv_sbox[198] = 8'h86;\n    inv_sbox[199] = 8'h1b;\n    inv_sbox[200] = 8'h71;\n    inv_sbox[201] = 8'h8d;\n    inv_sbox[202] = 8'h16;\n    inv_sbox[203] = 8'h98;\n    inv_sbox[204] = 8'h79;\n    inv_sbox[205] = 8'h6f;\n    inv_sbox[206] = 8'h45;\n    inv_sbox[207] = 8'h4a;\n    inv_sbox[208] = 8'h2e;\n    inv_sbox[209] = 8'h37;\n    inv_sbox[210] = 8'h5c;\n    inv_sbox[211] = 8'h7b;\n    inv_sbox[212] = 8'h3d;\n    inv_sbox[213] = 8'h64;\n    inv_sbox[214] = 8'h5e;\n    inv_sbox[215] = 8'h19;\n    inv_sbox[216] = 8'h73;\n    inv_sbox[217] = 8'h60;\n    inv_sbox[218] = 8'h80;\n    inv_sbox[219] = 8'h7a;\n    inv_sbox[220] = 8'h0a;\n    inv_sbox[221] = 8'h15;\n    inv_sbox[222] = 8'h32;\n    inv_sbox[223] = 8'h6b;\n    inv_sbox[224] = 8'h72;\n    inv_sbox[225] = 8'h35;\n    inv_sbox[226] = 8'h66;\n    inv_sbox[227] = 8'h4b;\n    inv_sbox[228] = 8'h3a;\n    inv_sbox[229] = 8'h8c;\n    inv_sbox[230] = 8'h21;\n    inv_sbox[231] = 8'h55;\n    inv_sbox[232] = 8'h31;\n    inv_sbox[233] = 8'h62;\n    inv_sbox[234] = 8'h0d;\n    inv_sbox[235] = 8'h27;\n    inv_sbox[236] = 8'h63;\n    inv_sbox[237] = 8'h3b;\n    inv_sbox[238] = 8'h0e;\n    inv_sbox[239] = 8'h38;\n    inv_sbox[240] = 8'h76;\n    inv_sbox[241] = 8'h49;\n    inv_sbox[242] = 8'h8f;\n    inv_sbox[243] = 8'h3e;\n    inv_sbox[244] = 8'h61;\n    inv_sbox[245] = 8'h92;\n    inv_sbox[246] = 8'h39;\n    inv_sbox[247] = 8'h09;\n    inv_sbox[248] = 8'h9b;\n    inv_sbox[249] = 8'h7d;\n    inv_sbox[250] = 8'h15;\n    inv_sbox[251] = 8'h14;\n    inv_sbox[252] = 8'h34;\n    inv_sbox[253] = 8'h6e;\n    inv_sbox[254] = 8'h6a;\n    inv_sbox[255] = 8'h7d;\nend\n\n// Assign output\nassign b = inv_sbox[a];\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
{"task": "aes_cipher_top", "codeid": 20, "code": "module aes_cipher_top(\n    input clk,\n    input rst,\n    input ld,\n    output done,\n    input [127:0] key,\n    input [127:0] text_in,\n    output [127:0] text_out\n);\n\n// Registers\nreg [127:0] text_in_r;\nreg [7:0] sa[0:3][0:3];\nreg [3:0] dcnt;\nreg ld_r;\nreg [127:0] text_out_r;\n\n// Submodules\naes_key_expand_128 key_expander(\n    .clk(clk),\n    .kld(ld),\n    .key(key),\n    .wo_0(),\n    .wo_1(),\n    .wo_2(),\n    .wo_3()\n);\n\naes_sbox sbox(\n    .a(),\n    .b()\n);\n\n// State Transition Diagram\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        // Reset state\n        text_in_r <= 0;\n        sa <= 0;\n        dcnt <= 0;\n        ld_r <= 0;\n        text_out_r <= 0;\n        done <= 0;\n    end else begin\n        case (dcnt)\n            4'b1011: begin // IDLE\n                if (ld) begin\n                    // Load input data into text_in_r\n                    text_in_r <= text_in;\n                    // Perform initial round key addition\n                    sa <= text_in_r ^ key;\n                    // Set round counter to 11 (10 rounds + initial round)\n                    dcnt <= 4'b1011;\n                    ld_r <= 1;\n                end\n            end\n            4'b1000: begin // INIT_ROUND\n                // Perform initial round operations\n                sa <= sbox(sa);\n                sa <= {sa[3], sa[2], sa[1], sa[0]}; // ShiftRows\n                sa <= sa ^ key; // AddRoundKey\n                dcnt <= dcnt - 1;\n            end\n            4'b0000: begin // ROUND_OP\n                // Perform standard round operations\n                sa <= sbox(sa);\n                sa <= {sa[3], sa[2], sa[1], sa[0]}; // ShiftRows\n                sa <= sa ^ key; // AddRoundKey\n                dcnt <= dcnt - 1;\n            end\n            4'b0001: begin // FINAL_ROUND\n                // Perform final round operations\n                sa <= sbox(sa);\n                sa <= {sa[3], sa[2], sa[1], sa[0]}; // ShiftRows\n                sa <= sa ^ key; // AddRoundKey\n                // Generate output\n                text_out_r <= sa;\n                done <= 1;\n            end\n            default: begin\n                // Stay in current state\n            end\n        endcase\n    end\nend\n\n// Output assignment\nassign text_out = text_out_r;\n\nendmodule", "syntax": -2, "function": -2, "formal": -2, "syntax_info": null, "function_info": null, "formal_info": null}
